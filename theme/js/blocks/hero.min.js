(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn, res) => function __init() {
    return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/equivalent-key-map/equivalent-key-map.js
  var require_equivalent_key_map = __commonJS({
    "node_modules/equivalent-key-map/equivalent-key-map.js"(exports, module) {
      "use strict";
      function _typeof(obj) {
        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
          _typeof = function(obj2) {
            return typeof obj2;
          };
        } else {
          _typeof = function(obj2) {
            return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
          };
        }
        return _typeof(obj);
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _defineProperties(target, props) {
        for (var i3 = 0; i3 < props.length; i3++) {
          var descriptor = props[i3];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }
      function getValuePair(instance, key) {
        var _map = instance._map, _arrayTreeMap = instance._arrayTreeMap, _objectTreeMap = instance._objectTreeMap;
        if (_map.has(key)) {
          return _map.get(key);
        }
        var properties = Object.keys(key).sort();
        var map = Array.isArray(key) ? _arrayTreeMap : _objectTreeMap;
        for (var i3 = 0; i3 < properties.length; i3++) {
          var property = properties[i3];
          map = map.get(property);
          if (map === void 0) {
            return;
          }
          var propertyValue = key[property];
          map = map.get(propertyValue);
          if (map === void 0) {
            return;
          }
        }
        var valuePair = map.get("_ekm_value");
        if (!valuePair) {
          return;
        }
        _map.delete(valuePair[0]);
        valuePair[0] = key;
        map.set("_ekm_value", valuePair);
        _map.set(key, valuePair);
        return valuePair;
      }
      var EquivalentKeyMap3 = /* @__PURE__ */ function() {
        function EquivalentKeyMap4(iterable) {
          _classCallCheck(this, EquivalentKeyMap4);
          this.clear();
          if (iterable instanceof EquivalentKeyMap4) {
            var iterablePairs = [];
            iterable.forEach(function(value, key) {
              iterablePairs.push([key, value]);
            });
            iterable = iterablePairs;
          }
          if (iterable != null) {
            for (var i3 = 0; i3 < iterable.length; i3++) {
              this.set(iterable[i3][0], iterable[i3][1]);
            }
          }
        }
        _createClass(EquivalentKeyMap4, [{
          key: "set",
          /**
           * Add or update an element with a specified key and value.
           *
           * @param {*} key   The key of the element to add.
           * @param {*} value The value of the element to add.
           *
           * @return {EquivalentKeyMap} Map instance.
           */
          value: function set(key, value) {
            if (key === null || _typeof(key) !== "object") {
              this._map.set(key, value);
              return this;
            }
            var properties = Object.keys(key).sort();
            var valuePair = [key, value];
            var map = Array.isArray(key) ? this._arrayTreeMap : this._objectTreeMap;
            for (var i3 = 0; i3 < properties.length; i3++) {
              var property = properties[i3];
              if (!map.has(property)) {
                map.set(property, new EquivalentKeyMap4());
              }
              map = map.get(property);
              var propertyValue = key[property];
              if (!map.has(propertyValue)) {
                map.set(propertyValue, new EquivalentKeyMap4());
              }
              map = map.get(propertyValue);
            }
            var previousValuePair = map.get("_ekm_value");
            if (previousValuePair) {
              this._map.delete(previousValuePair[0]);
            }
            map.set("_ekm_value", valuePair);
            this._map.set(key, valuePair);
            return this;
          }
          /**
           * Returns a specified element.
           *
           * @param {*} key The key of the element to return.
           *
           * @return {?*} The element associated with the specified key or undefined
           *              if the key can't be found.
           */
        }, {
          key: "get",
          value: function get(key) {
            if (key === null || _typeof(key) !== "object") {
              return this._map.get(key);
            }
            var valuePair = getValuePair(this, key);
            if (valuePair) {
              return valuePair[1];
            }
          }
          /**
           * Returns a boolean indicating whether an element with the specified key
           * exists or not.
           *
           * @param {*} key The key of the element to test for presence.
           *
           * @return {boolean} Whether an element with the specified key exists.
           */
        }, {
          key: "has",
          value: function has(key) {
            if (key === null || _typeof(key) !== "object") {
              return this._map.has(key);
            }
            return getValuePair(this, key) !== void 0;
          }
          /**
           * Removes the specified element.
           *
           * @param {*} key The key of the element to remove.
           *
           * @return {boolean} Returns true if an element existed and has been
           *                   removed, or false if the element does not exist.
           */
        }, {
          key: "delete",
          value: function _delete(key) {
            if (!this.has(key)) {
              return false;
            }
            this.set(key, void 0);
            return true;
          }
          /**
           * Executes a provided function once per each key/value pair, in insertion
           * order.
           *
           * @param {Function} callback Function to execute for each element.
           * @param {*}        thisArg  Value to use as `this` when executing
           *                            `callback`.
           */
        }, {
          key: "forEach",
          value: function forEach(callback) {
            var _this = this;
            var thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : this;
            this._map.forEach(function(value, key) {
              if (key !== null && _typeof(key) === "object") {
                value = value[1];
              }
              callback.call(thisArg, value, key, _this);
            });
          }
          /**
           * Removes all elements.
           */
        }, {
          key: "clear",
          value: function clear2() {
            this._map = /* @__PURE__ */ new Map();
            this._arrayTreeMap = /* @__PURE__ */ new Map();
            this._objectTreeMap = /* @__PURE__ */ new Map();
          }
        }, {
          key: "size",
          get: function get() {
            return this._map.size;
          }
        }]);
        return EquivalentKeyMap4;
      }();
      module.exports = EquivalentKeyMap3;
    }
  });

  // node_modules/rungen/dist/utils/keys.js
  var require_keys = __commonJS({
    "node_modules/rungen/dist/utils/keys.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var keys = {
        all: Symbol("all"),
        error: Symbol("error"),
        fork: Symbol("fork"),
        join: Symbol("join"),
        race: Symbol("race"),
        call: Symbol("call"),
        cps: Symbol("cps"),
        subscribe: Symbol("subscribe")
      };
      exports.default = keys;
    }
  });

  // node_modules/rungen/dist/utils/helpers.js
  var require_helpers = __commonJS({
    "node_modules/rungen/dist/utils/helpers.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createChannel = exports.subscribe = exports.cps = exports.apply = exports.call = exports.invoke = exports.delay = exports.race = exports.join = exports.fork = exports.error = exports.all = void 0;
      var _keys = require_keys();
      var _keys2 = _interopRequireDefault(_keys);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var all = exports.all = function all2(value) {
        return {
          type: _keys2.default.all,
          value
        };
      };
      var error2 = exports.error = function error3(err) {
        return {
          type: _keys2.default.error,
          error: err
        };
      };
      var fork = exports.fork = function fork2(iterator) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return {
          type: _keys2.default.fork,
          iterator,
          args
        };
      };
      var join = exports.join = function join2(task) {
        return {
          type: _keys2.default.join,
          task
        };
      };
      var race = exports.race = function race2(competitors) {
        return {
          type: _keys2.default.race,
          competitors
        };
      };
      var delay2 = exports.delay = function delay3(timeout) {
        return new Promise(function(resolve) {
          setTimeout(function() {
            return resolve(true);
          }, timeout);
        });
      };
      var invoke = exports.invoke = function invoke2(func) {
        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        return {
          type: _keys2.default.call,
          func,
          context: null,
          args
        };
      };
      var call2 = exports.call = function call3(func, context2) {
        for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
          args[_key3 - 2] = arguments[_key3];
        }
        return {
          type: _keys2.default.call,
          func,
          context: context2,
          args
        };
      };
      var apply2 = exports.apply = function apply3(func, context2, args) {
        return {
          type: _keys2.default.call,
          func,
          context: context2,
          args
        };
      };
      var cps = exports.cps = function cps2(func) {
        for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        return {
          type: _keys2.default.cps,
          func,
          args
        };
      };
      var subscribe4 = exports.subscribe = function subscribe5(channel) {
        return {
          type: _keys2.default.subscribe,
          channel
        };
      };
      var createChannel = exports.createChannel = function createChannel2(callback) {
        var listeners = [];
        var subscribe5 = function subscribe6(l2) {
          listeners.push(l2);
          return function() {
            return listeners.splice(listeners.indexOf(l2), 1);
          };
        };
        var next3 = function next4(val) {
          return listeners.forEach(function(l2) {
            return l2(val);
          });
        };
        callback(next3);
        return {
          subscribe: subscribe5
        };
      };
    }
  });

  // node_modules/rungen/dist/utils/is.js
  var require_is = __commonJS({
    "node_modules/rungen/dist/utils/is.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj;
      };
      var _keys = require_keys();
      var _keys2 = _interopRequireDefault(_keys);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var is2 = {
        obj: function obj(value) {
          return (typeof value === "undefined" ? "undefined" : _typeof(value)) === "object" && !!value;
        },
        all: function all(value) {
          return is2.obj(value) && value.type === _keys2.default.all;
        },
        error: function error2(value) {
          return is2.obj(value) && value.type === _keys2.default.error;
        },
        array: Array.isArray,
        func: function func(value) {
          return typeof value === "function";
        },
        promise: function promise(value) {
          return value && is2.func(value.then);
        },
        iterator: function iterator(value) {
          return value && is2.func(value.next) && is2.func(value.throw);
        },
        fork: function fork(value) {
          return is2.obj(value) && value.type === _keys2.default.fork;
        },
        join: function join(value) {
          return is2.obj(value) && value.type === _keys2.default.join;
        },
        race: function race(value) {
          return is2.obj(value) && value.type === _keys2.default.race;
        },
        call: function call2(value) {
          return is2.obj(value) && value.type === _keys2.default.call;
        },
        cps: function cps(value) {
          return is2.obj(value) && value.type === _keys2.default.cps;
        },
        subscribe: function subscribe4(value) {
          return is2.obj(value) && value.type === _keys2.default.subscribe;
        },
        channel: function channel(value) {
          return is2.obj(value) && is2.func(value.subscribe);
        }
      };
      exports.default = is2;
    }
  });

  // node_modules/rungen/dist/controls/builtin.js
  var require_builtin = __commonJS({
    "node_modules/rungen/dist/controls/builtin.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.iterator = exports.array = exports.object = exports.error = exports.any = void 0;
      var _is = require_is();
      var _is2 = _interopRequireDefault(_is);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var any = exports.any = function any2(value, next3, rungen, yieldNext) {
        yieldNext(value);
        return true;
      };
      var error2 = exports.error = function error3(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.error(value)) return false;
        raiseNext(value.error);
        return true;
      };
      var object = exports.object = function object2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.all(value) || !_is2.default.obj(value.value)) return false;
        var result = {};
        var keys = Object.keys(value.value);
        var count = 0;
        var hasError = false;
        var gotResultSuccess = function gotResultSuccess2(key, ret) {
          if (hasError) return;
          result[key] = ret;
          count++;
          if (count === keys.length) {
            yieldNext(result);
          }
        };
        var gotResultError = function gotResultError2(key, error3) {
          if (hasError) return;
          hasError = true;
          raiseNext(error3);
        };
        keys.map(function(key) {
          rungen(value.value[key], function(ret) {
            return gotResultSuccess(key, ret);
          }, function(err) {
            return gotResultError(key, err);
          });
        });
        return true;
      };
      var array = exports.array = function array2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.all(value) || !_is2.default.array(value.value)) return false;
        var result = [];
        var count = 0;
        var hasError = false;
        var gotResultSuccess = function gotResultSuccess2(key, ret) {
          if (hasError) return;
          result[key] = ret;
          count++;
          if (count === value.value.length) {
            yieldNext(result);
          }
        };
        var gotResultError = function gotResultError2(key, error3) {
          if (hasError) return;
          hasError = true;
          raiseNext(error3);
        };
        value.value.map(function(v2, key) {
          rungen(v2, function(ret) {
            return gotResultSuccess(key, ret);
          }, function(err) {
            return gotResultError(key, err);
          });
        });
        return true;
      };
      var iterator = exports.iterator = function iterator2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.iterator(value)) return false;
        rungen(value, next3, raiseNext);
        return true;
      };
      exports.default = [error2, iterator, array, object, any];
    }
  });

  // node_modules/rungen/dist/create.js
  var require_create = __commonJS({
    "node_modules/rungen/dist/create.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _builtin = require_builtin();
      var _builtin2 = _interopRequireDefault(_builtin);
      var _is = require_is();
      var _is2 = _interopRequireDefault(_is);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i3 = 0, arr2 = Array(arr.length); i3 < arr.length; i3++) {
            arr2[i3] = arr[i3];
          }
          return arr2;
        } else {
          return Array.from(arr);
        }
      }
      var create3 = function create4() {
        var userControls = arguments.length <= 0 || arguments[0] === void 0 ? [] : arguments[0];
        var controls = [].concat(_toConsumableArray(userControls), _toConsumableArray(_builtin2.default));
        var runtime = function runtime2(input) {
          var success = arguments.length <= 1 || arguments[1] === void 0 ? function() {
          } : arguments[1];
          var error2 = arguments.length <= 2 || arguments[2] === void 0 ? function() {
          } : arguments[2];
          var iterate = function iterate2(gen) {
            var yieldValue = function yieldValue2(isError2) {
              return function(ret) {
                try {
                  var _ref4 = isError2 ? gen.throw(ret) : gen.next(ret);
                  var value = _ref4.value;
                  var done = _ref4.done;
                  if (done) return success(value);
                  next3(value);
                } catch (e3) {
                  return error2(e3);
                }
              };
            };
            var next3 = function next4(ret) {
              controls.some(function(control) {
                return control(ret, next4, runtime2, yieldValue(false), yieldValue(true));
              });
            };
            yieldValue(false)();
          };
          var iterator = _is2.default.iterator(input) ? input : regeneratorRuntime.mark(function _callee() {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return input;
                  case 2:
                    return _context.abrupt("return", _context.sent);
                  case 3:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          })();
          iterate(iterator, success, error2);
        };
        return runtime;
      };
      exports.default = create3;
    }
  });

  // node_modules/rungen/dist/utils/dispatcher.js
  var require_dispatcher = __commonJS({
    "node_modules/rungen/dist/utils/dispatcher.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var createDispatcher = function createDispatcher2() {
        var listeners = [];
        return {
          subscribe: function subscribe4(listener2) {
            listeners.push(listener2);
            return function() {
              listeners = listeners.filter(function(l2) {
                return l2 !== listener2;
              });
            };
          },
          dispatch: function dispatch2(action) {
            listeners.slice().forEach(function(listener2) {
              return listener2(action);
            });
          }
        };
      };
      exports.default = createDispatcher;
    }
  });

  // node_modules/rungen/dist/controls/async.js
  var require_async = __commonJS({
    "node_modules/rungen/dist/controls/async.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.race = exports.join = exports.fork = exports.promise = void 0;
      var _is = require_is();
      var _is2 = _interopRequireDefault(_is);
      var _helpers = require_helpers();
      var _dispatcher = require_dispatcher();
      var _dispatcher2 = _interopRequireDefault(_dispatcher);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      var promise = exports.promise = function promise2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.promise(value)) return false;
        value.then(next3, raiseNext);
        return true;
      };
      var forkedTasks = /* @__PURE__ */ new Map();
      var fork = exports.fork = function fork2(value, next3, rungen) {
        if (!_is2.default.fork(value)) return false;
        var task = Symbol("fork");
        var dispatcher = (0, _dispatcher2.default)();
        forkedTasks.set(task, dispatcher);
        rungen(value.iterator.apply(null, value.args), function(result) {
          return dispatcher.dispatch(result);
        }, function(err) {
          return dispatcher.dispatch((0, _helpers.error)(err));
        });
        var unsubscribe = dispatcher.subscribe(function() {
          unsubscribe();
          forkedTasks.delete(task);
        });
        next3(task);
        return true;
      };
      var join = exports.join = function join2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.join(value)) return false;
        var dispatcher = forkedTasks.get(value.task);
        if (!dispatcher) {
          raiseNext("join error : task not found");
        } else {
          (function() {
            var unsubscribe = dispatcher.subscribe(function(result) {
              unsubscribe();
              next3(result);
            });
          })();
        }
        return true;
      };
      var race = exports.race = function race2(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.race(value)) return false;
        var finished = false;
        var success = function success2(result, k2, v2) {
          if (finished) return;
          finished = true;
          result[k2] = v2;
          next3(result);
        };
        var fail = function fail2(err) {
          if (finished) return;
          raiseNext(err);
        };
        if (_is2.default.array(value.competitors)) {
          (function() {
            var result = value.competitors.map(function() {
              return false;
            });
            value.competitors.forEach(function(competitor, index2) {
              rungen(competitor, function(output2) {
                return success(result, index2, output2);
              }, fail);
            });
          })();
        } else {
          (function() {
            var result = Object.keys(value.competitors).reduce(function(p2, c6) {
              p2[c6] = false;
              return p2;
            }, {});
            Object.keys(value.competitors).forEach(function(index2) {
              rungen(value.competitors[index2], function(output2) {
                return success(result, index2, output2);
              }, fail);
            });
          })();
        }
        return true;
      };
      var subscribe4 = function subscribe5(value, next3) {
        if (!_is2.default.subscribe(value)) return false;
        if (!_is2.default.channel(value.channel)) {
          throw new Error('the first argument of "subscribe" must be a valid channel');
        }
        var unsubscribe = value.channel.subscribe(function(ret) {
          unsubscribe && unsubscribe();
          next3(ret);
        });
        return true;
      };
      exports.default = [promise, fork, join, race, subscribe4];
    }
  });

  // node_modules/rungen/dist/controls/wrap.js
  var require_wrap = __commonJS({
    "node_modules/rungen/dist/controls/wrap.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.cps = exports.call = void 0;
      var _is = require_is();
      var _is2 = _interopRequireDefault(_is);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i3 = 0, arr2 = Array(arr.length); i3 < arr.length; i3++) {
            arr2[i3] = arr[i3];
          }
          return arr2;
        } else {
          return Array.from(arr);
        }
      }
      var call2 = exports.call = function call3(value, next3, rungen, yieldNext, raiseNext) {
        if (!_is2.default.call(value)) return false;
        try {
          next3(value.func.apply(value.context, value.args));
        } catch (err) {
          raiseNext(err);
        }
        return true;
      };
      var cps = exports.cps = function cps2(value, next3, rungen, yieldNext, raiseNext) {
        var _value$func;
        if (!_is2.default.cps(value)) return false;
        (_value$func = value.func).call.apply(_value$func, [null].concat(_toConsumableArray(value.args), [function(err, result) {
          if (err) raiseNext(err);
          else next3(result);
        }]));
        return true;
      };
      exports.default = [call2, cps];
    }
  });

  // node_modules/rungen/dist/index.js
  var require_dist = __commonJS({
    "node_modules/rungen/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.wrapControls = exports.asyncControls = exports.create = void 0;
      var _helpers = require_helpers();
      Object.keys(_helpers).forEach(function(key) {
        if (key === "default") return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function get() {
            return _helpers[key];
          }
        });
      });
      var _create = require_create();
      var _create2 = _interopRequireDefault(_create);
      var _async = require_async();
      var _async2 = _interopRequireDefault(_async);
      var _wrap = require_wrap();
      var _wrap2 = _interopRequireDefault(_wrap);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports.create = _create2.default;
      exports.asyncControls = _async2.default;
      exports.wrapControls = _wrap2.default;
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.3.1";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack2) {
            {
              currentExtraStackFrame = stack2;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack2) {
              {
                currentExtraStackFrame = stack2;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack2 = "";
              if (currentExtraStackFrame) {
                stack2 += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack2 += impl() || "";
              }
              return stack2;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn2(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign3 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component4(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component4.prototype.isReactComponent = {};
          Component4.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component4.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component4.prototype, methodName, {
                get: function() {
                  warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component4.prototype;
          function PureComponent2(props, context2, updater) {
            this.props = props;
            this.context = context2;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent2.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent2;
          assign3(pureComponentPrototype, Component4.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef3() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement11(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement4(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign3({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i3 = 0; i3 < childrenLength; i3++) {
                childArray[i3] = arguments[i3 + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self, source, owner, props);
          }
          function isValidElement6(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text2) {
            return text2.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index2) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index2.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c6) {
                  return c6;
                });
              } else if (mappedChild != null) {
                if (isValidElement6(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i3 = 0; i3 < children.length; i3++) {
                child = children[i3];
                nextName = nextNamePrefix + getElementKey(child, i3);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context2) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context2, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n3 = 0;
            mapChildren(children, function() {
              n3++;
            });
            return n3;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray3(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement6(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext23(defaultValue2) {
            var context2 = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue2,
              _currentValue2: defaultValue2,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context2.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context2
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer4 = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context2
              };
              Object.defineProperties(Consumer4, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context2.Provider;
                  },
                  set: function(_Provider) {
                    context2.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context2._currentValue;
                  },
                  set: function(_currentValue) {
                    context2._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context2._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context2._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context2._threadCount;
                  },
                  set: function(_threadCount) {
                    context2._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context2.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context2.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context2.Consumer = Consumer4;
            }
            {
              context2._currentRenderer = null;
              context2._currentRenderer2 = null;
            }
            return context2;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error3) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error3;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy2(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes2;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes2;
                  },
                  set: function(newPropTypes) {
                    error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes2 = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef7(render2) {
            {
              if (render2 != null && render2.$$typeof === REACT_MEMO_TYPE) {
                error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render2 !== "function") {
                error2("forwardRef requires a render function but was given %s.", render2 === null ? "null" : typeof render2);
              } else {
                if (render2.length !== 0 && render2.length !== 2) {
                  error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render2.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render2 != null) {
                if (render2.defaultProps != null || render2.propTypes != null) {
                  error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render: render2
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render2.name && !render2.displayName) {
                    render2.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo4(type, compare) {
            {
              if (!isValidElementType2(type)) {
                error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error2("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext23(Context5) {
            var dispatcher = resolveDispatcher();
            {
              if (Context5._context !== void 0) {
                var realContext = Context5._context;
                if (realContext.Consumer === Context5) {
                  error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context5) {
                  error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context5);
          }
          function useState27(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer4(reducer2, initialArg, init2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer2, initialArg, init2);
          }
          function useRef35(initialValue2) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue2);
          }
          function useEffect35(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create3, deps);
          }
          function useInsertionEffect5(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create3, deps);
          }
          function useLayoutEffect8(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create3, deps);
          }
          function useCallback19(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo16(create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create3, deps);
          }
          function useImperativeHandle2(ref, create3, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create3, deps);
          }
          function useDebugValue2(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition2() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue2(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId4() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore3(subscribe4, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s2 >= 1 && c6 >= 0 && sampleLines[s2] !== controlLines[c6]) {
                  c6--;
                }
                for (; s2 >= 1 && c6 >= 0; s2--, c6--) {
                  if (sampleLines[s2] !== controlLines[c6]) {
                    if (s2 !== 1 || c6 !== 1) {
                      do {
                        s2--;
                        c6--;
                        if (c6 < 0 || sampleLines[s2] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component5) {
            var prototype = Component5.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack2);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray(node2)) {
              for (var i3 = 0; i3 < node2.length; i3++) {
                var child = node2[i3];
                if (isValidElement6(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement6(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement6(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes2(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType2(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement11.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i3 = 2; i3 < arguments.length; i3++) {
                validateChildKeys(arguments[i3], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes2(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement4.apply(this, arguments);
            for (var i3 = 2; i3 < arguments.length; i3++) {
              validateChildKeys(arguments[i3], newElement.type);
            }
            validatePropTypes2(newElement);
            return newElement;
          }
          function startTransition2(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error2("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error3) {
                popActScope(prevActScopeDepth);
                throw error3;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error3) {
                      popActScope(prevActScopeDepth);
                      reject(error3);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error2("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error2("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error3) {
                  reject(error3);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i3 = 0;
                try {
                  for (; i3 < queue.length; i3++) {
                    var callback = queue[i3];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error3) {
                  queue = queue.slice(i3 + 1);
                  throw error3;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children2 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray3,
            only: onlyChild
          };
          exports.Children = Children2;
          exports.Component = Component4;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent2;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.act = act;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext23;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef3;
          exports.forwardRef = forwardRef7;
          exports.isValidElement = isValidElement6;
          exports.lazy = lazy2;
          exports.memo = memo4;
          exports.startTransition = startTransition2;
          exports.unstable_act = act;
          exports.useCallback = useCallback19;
          exports.useContext = useContext23;
          exports.useDebugValue = useDebugValue2;
          exports.useDeferredValue = useDeferredValue2;
          exports.useEffect = useEffect35;
          exports.useId = useId4;
          exports.useImperativeHandle = useImperativeHandle2;
          exports.useInsertionEffect = useInsertionEffect5;
          exports.useLayoutEffect = useLayoutEffect8;
          exports.useMemo = useMemo16;
          exports.useReducer = useReducer4;
          exports.useRef = useRef35;
          exports.useState = useState27;
          exports.useSyncExternalStore = useSyncExternalStore3;
          exports.useTransition = useTransition2;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React12 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error2(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s2 >= 1 && c6 >= 0 && sampleLines[s2] !== controlLines[c6]) {
                  c6--;
                }
                for (; s2 >= 1 && c6 >= 0; s2--, c6--) {
                  if (sampleLines[s2] !== controlLines[c6]) {
                    if (s2 !== 1 || c6 !== 1) {
                      do {
                        s2--;
                        c6--;
                        if (c6 < 0 || sampleLines[s2] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS2 = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty2.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty2.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config2, maybeKey, source, self) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self);
              }
              for (propName in config2) {
                if (hasOwnProperty2.call(config2, propName) && !RESERVED_PROPS2.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement6(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray(node2)) {
                for (var i3 = 0; i3 < node2.length; i3++) {
                  var child = node2[i3];
                  if (isValidElement6(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement6(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement6(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes2(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes2;
              if (typeof type === "function") {
                propTypes2 = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes2 = type.propTypes;
              } else {
                return;
              }
              if (propTypes2) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes2, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i3 = 0; i3 < keys.length; i3++) {
                var key = keys[i3];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          var didWarnAboutKeySpread = {};
          function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
            {
              var validType = isValidElementType2(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error2("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray(children)) {
                      for (var i3 = 0; i3 < children.length; i3++) {
                        validateChildKeys(children[i3], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error2("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              {
                if (hasOwnProperty2.call(props, "key")) {
                  var componentName = getComponentNameFromType(type);
                  var keys = Object.keys(props).filter(function(k2) {
                    return k2 !== "key";
                  });
                  var beforeExample = keys.length > 0 ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
                  if (!didWarnAboutKeySpread[componentName + beforeExample]) {
                    var afterExample = keys.length > 0 ? "{" + keys.join(": ..., ") + ": ...}" : "{}";
                    error2('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
                    didWarnAboutKeySpread[componentName + beforeExample] = true;
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes2(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx29 = jsxWithValidationDynamic;
          var jsxs4 = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx29;
          exports.jsxs = jsxs4;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index2 = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index2);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i3) {
            var index2 = i3;
            while (index2 > 0) {
              var parentIndex = index2 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index2] = parent;
                index2 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i3) {
            var index2 = i3;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index2 < halfLength) {
              var leftIndex = (index2 + 1) * 2 - 1;
              var left = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right = heap[rightIndex];
              if (compare(left, node2) < 0) {
                if (rightIndex < length2 && compare(right, left) < 0) {
                  heap[index2] = right;
                  heap[rightIndex] = node2;
                  index2 = rightIndex;
                } else {
                  heap[index2] = left;
                  heap[leftIndex] = node2;
                  index2 = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right, node2) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node2;
                index2 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a2, b2) {
            var diff = a2.sortIndex - b2.sortIndex;
            return diff !== 0 ? diff : a2.id - b2.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error2) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error2;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay2 = options.delay;
              if (typeof delay2 === "number" && delay2 > 0) {
                startTime2 = currentTime + delay2;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React12 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React12.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn2(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error2(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack2 = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack2 !== "") {
                format += "%s";
                args = args.concat([stack2]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment10 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef2 = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = true;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i3 = 0; i3 < dependencies.length; i3++) {
              allNativeEvents.add(dependencies[i3]);
            }
          }
          var canUseDOM2 = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty2 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e3) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error2("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error2("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              // $FlowIssue symbol is perfectly valid here
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix4 = name.toLowerCase().slice(0, 5);
                  return prefix4 !== "data-" && prefix4 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref4) {
            var name = _ref4[0], attributeName = _ref4[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign3 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign3({}, props, {
                    value: prevLog
                  }),
                  info: assign3({}, props, {
                    value: prevInfo
                  }),
                  warn: assign3({}, props, {
                    value: prevWarn
                  }),
                  error: assign3({}, props, {
                    value: prevError
                  }),
                  group: assign3({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign3({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign3({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x2) {
                  var match2 = x2.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame2 = componentFrameCache.get(fn);
              if (frame2 !== void 0) {
                return frame2;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x2) {
                    control = x2;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x2) {
                    control = x2;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x2) {
                  control = x2;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s2 = sampleLines.length - 1;
                var c6 = controlLines.length - 1;
                while (s2 >= 1 && c6 >= 0 && sampleLines[s2] !== controlLines[c6]) {
                  c6--;
                }
                for (; s2 >= 1 && c6 >= 0; s2--, c6--) {
                  if (sampleLines[s2] !== controlLines[c6]) {
                    if (s2 !== 1 || c6 !== 1) {
                      do {
                        s2--;
                        c6--;
                        if (c6 < 0 || sampleLines[s2] !== controlLines[c6]) {
                          var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s2 >= 1 && c6 >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init2(payload), source, ownerFn);
                  } catch (x2) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef2:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x2) {
              return "\nError generating stack: " + x2.message + "\n" + x2.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error2("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context2 = type;
                  return getContextName(context2) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init2(payload));
                  } catch (x2) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context2 = type;
                return getContextName$1(context2) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef2:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment10:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              // The display name for this tags come from the user-provided type:
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement2(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e3) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign3({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue2 = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue2),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString(value);
                }
              } else if (node2.value !== toString(value)) {
                node2.value = toString(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton2 = type === "submit" || type === "reset";
              if (isButton2 && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue2 = toString(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue2 !== node2.value) {
                    node2.value = initialValue2;
                  }
                }
              }
              {
                node2.defaultValue = initialValue2;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i3 = 0; i3 < group.length; i3++) {
                var otherNode = group[i3];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement2(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString(value)) {
                node2.defaultValue = toString(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React12.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error2("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error2("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray(a2) {
            return isArrayImpl(a2);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i3 = 0; i3 < valuePropNames.length; i3++) {
                var propName = valuePropNames[i3];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i3 = 0; i3 < selectedValues.length; i3++) {
                selectedValue["$" + selectedValues[i3]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign3({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign3({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue2 = props.value;
            if (initialValue2 == null) {
              var children = props.children, defaultValue2 = props.defaultValue;
              if (children != null) {
                {
                  error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue2 != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue2 = children;
                }
              }
              if (defaultValue2 == null) {
                defaultValue2 = "";
              }
              initialValue2 = defaultValue2;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue2)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue2 = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue2 != null) {
              node2.defaultValue = toString(defaultValue2);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text2) {
            if (text2) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text2;
                return;
              }
            }
            node2.textContent = text2;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber2 = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey2(prefix4, key) {
            return prefix4 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes2 = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber2).forEach(function(prop2) {
            prefixes2.forEach(function(prefix4) {
              isUnitlessNumber2[prefixKey2(prefix4, prop2)] = isUnitlessNumber2[prop2];
            });
          });
          function dangerousStyleValue2(name, value, isCustomProperty3) {
            var isEmpty4 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty4) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber2.hasOwnProperty(name) && isUnitlessNumber2[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern = /([A-Z])/g;
          var msPattern = /^ms-/;
          function hyphenateStyleName(name) {
            return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize = function(string2) {
              return string2.replace(hyphenPattern, function(_, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error2("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error2("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles) {
                if (!styles.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                  serialized += dangerousStyleValue2(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles) {
            var style2 = node2.style;
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles[styleName]);
                }
              }
              var styleValue = dangerousStyleValue2(styleName, styles[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles) {
            var expanded = {};
            for (var key in styles) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i3 = 0; i3 < longhands.length; i3++) {
                expanded[longhands[i3]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign3({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              // These are reserved SVG and MathML elements.
              // We don't mind this list too much because we expect it to never grow.
              // The alternative is to track the namespace in a few places which is convoluted.
              // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty2.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty2.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error2("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop2) {
                return "`" + prop2 + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error2("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error2("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i3 = 0; i3 < queuedTargets.length; i3++) {
                restoreStateOfTarget(queuedTargets[i3]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn, bookkeeping) {
            return fn(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn, a2, b2) {
            if (isInsideEventHandler) {
              return fn(a2, b2);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn, a2, b2);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener2 = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener2 && typeof listener2 !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener2 + "` type.");
            }
            return listener2;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM2) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e3) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context2, a2, b2, c6, d2, e3, f2) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context2, funcArgs);
            } catch (error3) {
              this.onError(error3);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context2, a2, b2, c6, d2, e3, f2) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context2, funcArgs);
                  didError = false;
                }
                var error3;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error3 = event.error;
                  didSetError = true;
                  if (error3 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error3 != null && typeof error3 === "object") {
                      try {
                        error3._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error3);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error3) {
              hasError = true;
              caughtError = error3;
            }
          };
          function invokeGuardedCallback(name, func, context2, a2, b2, c6, d2, e3, f2) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context2, a2, b2, c6, d2, e3, f2) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error3 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error3;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error3 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error3;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error3 = caughtError;
              hasError = false;
              caughtError = null;
              return error3;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a2 = fiber;
            var b2 = alternate;
            while (true) {
              var parentA = a2.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a2 = b2 = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a2) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b2) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a2.return !== b2.return) {
                a2 = parentA;
                b2 = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentA;
                    b2 = parentB;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentA;
                    a2 = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a2) {
                      didFindChild = true;
                      a2 = parentB;
                      b2 = parentA;
                      break;
                    }
                    if (_child === b2) {
                      didFindChild = true;
                      b2 = parentB;
                      a2 = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a2.alternate !== b2) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a2.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a2.stateNode.current === a2) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign3({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error2("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error2("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error2("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index3 = 0; index3 < TotalLanes; index3++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log2 = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x2) {
            var asUint = x2 >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log2(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index3 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index3;
                nextLanes |= entanglements[index3];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var eventTime = eventTimes[index3];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error2("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              var expirationTime = expirationTimes[index3];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index3] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a2, b2) {
            return (a2 & b2) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a2, b2) {
            return a2 | b2;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a2, b2) {
            return a2 & b2;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a2, b2) {
            return a2 !== NoLane && a2 < b2 ? a2 : b2;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i3 = 0; i3 < TotalLanes; i3++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index3 = laneToIndex(updateLane);
            eventTimes[index3] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              entanglements[index3] = NoLanes;
              eventTimes[index3] = NoTimestamp;
              expirationTimes[index3] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index3] & entangledLanes
              ) {
                entanglements[index3] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index3 = laneToIndex(lanes);
              var lane = 1 << index3;
              var updaters = pendingUpdatersLaneMap[index3];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority2, fn) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority2;
              return fn();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2 ? a2 : b2;
          }
          function lowerEventPriority(a2, b2) {
            return a2 === 0 || a2 > b2 ? a2 : b2;
          }
          function isHigherEventPriority(a2, b2) {
            return a2 !== 0 && a2 < b2;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn) {
            _attemptSynchronousHydration = fn;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn) {
            attemptContinuousHydration = fn;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn) {
            attemptHydrationAtCurrentPriority = fn;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn) {
            getCurrentUpdatePriority$1 = fn;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn) {
            attemptHydrationAtPriority = fn;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i3 = 0;
            for (; i3 < queuedExplicitHydrationTargets.length; i3++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i3].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i3, 0, queuedTarget);
            if (i3 === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i3 = 1; i3 < queuedDiscreteEvents.length; i3++) {
                var queuedEvent = queuedDiscreteEvents[i3];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              // Used by SimpleEventPlugin:
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              // Used by polyfills:
              // eslint-disable-next-line no-fallthrough
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              // Only enableCreateEventHandleAPI:
              // eslint-disable-next-line no-fallthrough
              case "beforeblur":
              case "afterblur":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              // Not used by React but could be by user code:
              // eslint-disable-next-line no-fallthrough
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, false);
            return listener2;
          }
          function addEventCaptureListener(target, eventType, listener2) {
            target.addEventListener(eventType, listener2, true);
            return listener2;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              capture: true,
              passive
            });
            return listener2;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener2, passive) {
            target.addEventListener(eventType, listener2, {
              passive
            });
            return listener2;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText3();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end;
            var endValue = getText3();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end = 1; end <= minEnd; end++) {
              if (startValue[startLength - end] !== endValue[endLength - end]) {
                break;
              }
            }
            var sliceTail = end > 1 ? 1 - end : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText3() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize2 = Interface[_propName];
                if (normalize2) {
                  this[_propName] = normalize2(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign3(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign3({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign3({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign3({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign3({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign3({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign3({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign3({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign3({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign3({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign3({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign3({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign3({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM2 && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars2 = nativeEvent.data;
                if (chars2 === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars2;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars2 = getData();
                reset();
                isComposing = false;
                return chars2;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars2;
            if (canUseTextInputEvent) {
              chars2 = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars2 = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars2) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars2;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM2) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM2) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to2;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to2 = _related ? getClosestInstanceFromNode(_related) : null;
              if (to2 !== null) {
                var nearestMounted = getNearestMountedFiber(to2);
                if (to2 !== nearestMounted || to2.tag !== HostComponent && to2.tag !== HostText) {
                  to2 = null;
                }
              }
            } else {
              from2 = null;
              to2 = targetInst;
            }
            if (from2 === to2) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to2 == null ? win : getNodeFromInstance(to2);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to2, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to2);
          }
          function is2(x2, y2) {
            return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is2;
          function shallowEqual2(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i3 = 0; i3 < keysA.length; i3++) {
              var currentKey = keysA[i3];
              if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset5) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset5 && nodeEnd >= offset5) {
                  return {
                    node: node2,
                    offset: offset5 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument = outerNode.ownerDocument;
            var win = ownerDocument && ownerDocument.defaultView || window;
            var selection2 = win.getSelection && win.getSelection();
            if (!selection2 || selection2.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection2.anchorNode, anchorOffset = selection2.anchorOffset, focusNode = selection2.focusNode, focusOffset = selection2.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e3) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer: while (true) {
              var next3 = null;
              while (true) {
                if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  start2 = length2 + anchorOffset;
                }
                if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                  end = length2 + focusOffset;
                }
                if (node2.nodeType === TEXT_NODE) {
                  length2 += node2.nodeValue.length;
                }
                if ((next3 = node2.firstChild) === null) {
                  break;
                }
                parentNode = node2;
                node2 = next3;
              }
              while (true) {
                if (node2 === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start2 = length2;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length2;
                }
                if ((next3 = node2.nextSibling) !== null) {
                  break;
                }
                node2 = parentNode;
                parentNode = node2.parentNode;
              }
              node2 = next3;
            }
            if (start2 === -1 || end === -1) {
              return null;
            }
            return {
              start: start2,
              end
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection2 = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection2.extend && start2 > end) {
              var temp = end;
              end = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end);
            if (startMarker && endMarker) {
              if (selection2.rangeCount === 1 && selection2.anchorNode === startMarker.node && selection2.anchorOffset === startMarker.offset && selection2.focusNode === endMarker.node && selection2.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection2.removeAllRanges();
              if (start2 > end) {
                selection2.addRange(range);
                selection2.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection2.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument2(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement2();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement2(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument2(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i3 = 0; i3 < ancestors.length; i3++) {
                var info = ancestors[i3];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection(input) {
            var selection2;
            if ("selectionStart" in input) {
              selection2 = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection2 = getOffsets(input);
            }
            return selection2 || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end = offsets.end;
            if (end === void 0) {
              end = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection2 = win.getSelection();
              return {
                anchorNode: selection2.anchorNode,
                anchorOffset: selection2.anchorOffset,
                focusNode: selection2.focusNode,
                focusOffset: selection2.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement2(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual2(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              // Track the input node that has focus.
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              // Don't fire the event while the user is dragging. This matches the
              // semantics of the native select event.
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              // Chrome and IE fire non-standard event when selection is changed (and
              // sometimes when it hasn't). IE's event fires out of order with respect
              // to key and input events on deletion, so we discard it.
              //
              // Firefox doesn't support selectionchange, so check selection status
              // after each key entry. The selection changes after keydown and before
              // keyup, but we check on keydown as well in the case of holding down a
              // key, when multiple keydown events are fired but only one keyup is.
              // This is also our approach for IE handling, for the reason above.
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              // falls through
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes3 = {};
            prefixes3[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes3["Webkit" + styleProp] = "webkit" + eventName;
            prefixes3["Moz" + styleProp] = "moz" + eventName;
            return prefixes3;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM2) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i3 = 0; i3 < simpleEventPluginEvents.length; i3++) {
              var eventName = simpleEventPluginEvents[i3];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              /* falls through */
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              /* falls through */
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              // TODO: Disabled elements should not respond to mouse events
              /* falls through */
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener2, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener2, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i3 = dispatchListeners.length - 1; i3 >= 0; i3--) {
                var _dispatchListeners$i = dispatchListeners[i3], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener2 = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener2, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i3 = 0; i3 < dispatchQueue.length; i3++) {
              var _dispatchQueue$i = dispatchQueue[i3], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error2('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error2('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument !== null) {
                if (!ownerDocument[listeningMarker]) {
                  ownerDocument[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener2 = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener2);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener2, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener2);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop: while (true) {
                  if (node2 === null) {
                    return;
                  }
                  var nodeTag = node2.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node2.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node2.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node2 = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node2 = node2.return;
                }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener2, currentTarget) {
            return {
              instance,
              listener: listener2,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener2 = getListener(instance, reactEventName);
                  if (listener2 != null) {
                    listeners.push(createDispatchListener(instance, listener2, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent3(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent3(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent3(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent3(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent3(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent3(nodeA);
              nodeB = getParent3(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to2) {
            var common = from2 && to2 ? getLowestCommonAncestor(from2, to2) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common, false);
            }
            if (to2 !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to2, common, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error2("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener2) {
              if (listener2 === false) {
                error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener2);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop8() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop8;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i3 = 0; i3 < updatePayload.length; i3 += 2) {
              var propKey = updatePayload[i3];
              var propValue = updatePayload[i3 + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement11(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty2.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text2, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text2);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (propKey === AUTOFOCUS) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i3 = 0; i3 < mediaEventTypes.length; i3++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i3], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  // Controlled attributes are not validated
                  // TODO: Only ignore them on controlled tags.
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected") ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text2, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text2;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text2) {
            {
              if (text2 === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text2, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign3({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
                // but
                case "option":
                  return tag === "#text";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
                // No special behavior since these rules fall back to "in body" mode for
                // all except special table nodes which cause bad parsing behavior anyway.
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
                case "colgroup":
                  return tag === "col" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error2("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string2 = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement11(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string2 = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string2, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text2, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text2, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text2, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error3) {
            setTimeout(function() {
              throw error3;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue2("display", display);
          }
          function unhideTextInstance(textInstance, text2) {
            textInstance.nodeValue = text2;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text2) {
            if (text2 === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack2;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack2 = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack: stack2
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text2, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text2);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text2, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text2, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text2, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE) ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2) {
            {
              warnForInsertedHydratedText(parentContainer, text2);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text2) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) warnForInsertedHydratedText(parentNode, text2);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text2, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text2);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error2("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack2 = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack2);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty2);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error2("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index2 = -1;
          function createCursor(defaultValue2) {
            return {
              current: defaultValue2
            };
          }
          function pop(cursor2, fiber) {
            if (index2 < 0) {
              {
                error2("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index2]) {
                error2("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index2];
            valueStack[index2] = null;
            {
              fiberStack[index2] = null;
            }
            index2--;
          }
          function push(cursor2, value, fiber) {
            index2++;
            valueStack[index2] = cursor2.current;
            {
              fiberStack[index2] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component4, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component4)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context2 = {};
              for (var key in contextTypes) {
                context2[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context2, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context2);
              }
              return context2;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context2, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context2, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign3({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component4 = node2.type;
                    if (isContextProvider(Component4)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i3 = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i3 < queue.length; i3++) {
                  var callback = queue[i3];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i3 + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error3;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id3 = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id3.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index3) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index3 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id3 = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id3;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number2) {
            return 32 - clz32(number2);
          }
          function getLeadingBit(id3) {
            return 1 << getBitLength(id3) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error2("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error2("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text2);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null) switch (fiber.tag) {
                    case HostComponent:
                      var _type2 = fiber.type;
                      var _props2 = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                      break;
                    case HostText:
                      var _text2 = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                      break;
                  }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text2 = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text2);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error3) {
            if (hydrationErrors === null) {
              hydrationErrors = [error3];
            } else {
              hydrationErrors.push(error3);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function isReactClass(type) {
            return type.prototype && type.prototype.isReactComponent;
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
                !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
                !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
                element._owner) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init2 = lazyType._init;
            return init2(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment10) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return createChild(returnFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init2(payload), lanes);
                  }
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init2(payload), lanes);
                }
                if (isArray(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init2 = child._init;
                    warnOnInvalidKey(init2(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i3 = 0; i3 < newChildren.length; i3++) {
                  var child = newChildren[i3];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment10) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init2 = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init2(payload), lanes);
                }
                if (isArray(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context2, nextValue) {
            {
              push(valueCursor, context2._currentValue, providerFiber);
              context2._currentValue = nextValue;
              {
                if (context2._currentRenderer !== void 0 && context2._currentRenderer !== null && context2._currentRenderer !== rendererSigil) {
                  error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context2._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context2, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context2._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error2("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context2, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context2, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context2, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context2) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update3 = createUpdate2(NoTimestamp, lane);
                      update3.tag = ForceUpdate;
                      var updateQueue2 = fiber.updateQueue;
                      if (updateQueue2 === null) ;
                      else {
                        var sharedQueue = updateQueue2.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update3.next = update3;
                        } else {
                          update3.next = pending.next;
                          pending.next = update3;
                        }
                        sharedQueue.pending = update3;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context2) {
            {
              if (isDisallowedContextReadInDEV) {
                error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context2._currentValue;
            if (lastFullyObservedContext === context2) ;
            else {
              var contextItem = {
                context: context2,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i3 = 0; i3 < concurrentQueues.length; i3++) {
                var queue = concurrentQueues[i3];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update3, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue.interleaved = update3;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update3, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue.interleaved = update3;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update3, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update3.next = update3;
              pushConcurrentUpdateQueue(queue);
            } else {
              update3.next = interleaved.next;
              interleaved.next = update3;
            }
            queue.interleaved = update3;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate2(eventTime, lane) {
            var update3 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update3;
          }
          function enqueueUpdate(fiber, update3, lane) {
            var updateQueue2 = fiber.updateQueue;
            if (updateQueue2 === null) {
              return null;
            }
            var sharedQueue = updateQueue2.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update3.next = update3;
              } else {
                update3.next = pending.next;
                pending.next = update3;
              }
              sharedQueue.pending = update3;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update3, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue2 = fiber.updateQueue;
            if (updateQueue2 === null) {
              return;
            }
            var sharedQueue = updateQueue2.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update3 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update3.eventTime,
                      lane: update3.lane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update3 = update3.next;
                  } while (update3 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update3, prevState, nextProps, instance) {
            switch (update3.tag) {
              case ReplaceState: {
                var payload = update3.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              // Intentional fallthrough
              case UpdateState: {
                var _payload = update3.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign3({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update3 = firstBaseUpdate;
              do {
                var updateLane = update3.lane;
                var updateEventTime = update3.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update3.tag,
                    payload: update3.payload,
                    callback: update3.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update3.tag,
                      payload: update3.payload,
                      callback: update3.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update3, newState, props, instance);
                  var callback = update3.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update3.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update3];
                    } else {
                      effects.push(update3);
                    }
                  }
                }
                update3 = update3.next;
                if (update3 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update3 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context2) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context2);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i3 = 0; i3 < effects.length; i3++) {
                var effect = effects[i3];
                var callback = effect.callback;
                if (callback !== null) {
                  effect.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c6) {
            if (c6 === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c6;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context2 = requiredContext(contextStackCursor$1.current);
            return context2;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context2 = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context2, fiber.type);
            if (context2 === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion5 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i3 = 0; i3 < workInProgressSources.length; i3++) {
              var mutableSource = workInProgressSources[i3];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray(deps)) {
                error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i3 = 0; i3 <= hookTypesUpdateIndexDev; i3++) {
                    var oldHookName = hookTypesDev[i3];
                    var newHookName = i3 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i3 + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i3 = 0; i3 < prevDeps.length && i3 < nextDeps.length; i3++) {
              if (objectIs(nextDeps[i3], prevDeps[i3])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component4, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component4(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component4(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error2("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer2, initialArg, init2) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init2 !== void 0) {
              initialState = init2(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer2,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateReducer(reducer2, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update3 = first;
              do {
                var updateLane = update3.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update3.action,
                    hasEagerState: update3.hasEagerState,
                    eagerState: update3.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update3.action,
                      hasEagerState: update3.hasEagerState,
                      eagerState: update3.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update3.hasEagerState) {
                    newState = update3.eagerState;
                  } else {
                    var action = update3.action;
                    newState = reducer2(newState, action);
                  }
                }
                update3 = update3.next;
              } while (update3 !== null && update3 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch2 = queue.dispatch;
            return [hook.memoizedState, dispatch2];
          }
          function rerenderReducer(reducer2, initialArg, init2) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer2;
            var dispatch2 = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update3 = firstRenderPhaseUpdate;
              do {
                var action = update3.action;
                newState = reducer2(newState, action);
                update3 = update3.next;
              } while (update3 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch2];
          }
          function mountMutableSource(source, getSnapshot, subscribe4) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe4) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error2("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error2("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe4), [subscribe4]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error2("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe4), [subscribe4]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check2 = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check2];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check2];
              } else {
                stores.push(check2);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe4) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe4(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error3) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch2 = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch2];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create3, destroy, deps) {
            var effect = {
              tag,
              create: create3,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect.next = effect;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect;
                effect.next = firstEffect;
                componentUpdateQueue.lastEffect = effect;
              }
            }
            return effect;
          }
          function mountRef(initialValue2) {
            var hook = mountWorkInProgressHook();
            {
              var _ref22 = {
                current: initialValue2
              };
              hook.memoizedState = _ref22;
              return _ref22;
            }
          }
          function updateRef2(initialValue2) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create3, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create3, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create3, destroy, nextDeps);
          }
          function mountEffect(create3, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create3, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create3, deps);
            }
          }
          function updateEffect(create3, deps) {
            return updateEffectImpl(Passive, Passive$1, create3, deps);
          }
          function mountInsertionEffect(create3, deps) {
            return mountEffectImpl(Update, Insertion5, create3, deps);
          }
          function updateInsertionEffect(create3, deps) {
            return updateEffectImpl(Update, Insertion5, create3, deps);
          }
          function mountLayoutEffect(create3, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create3, deps);
          }
          function updateLayoutEffect(create3, deps) {
            return updateEffectImpl(Update, Layout, create3, deps);
          }
          function imperativeHandleEffect(create3, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create3();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create3();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create3, deps) {
            {
              if (typeof create3 !== "function") {
                error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create3 !== null ? typeof create3 : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create3, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition2(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn2("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition2.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id3;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id3 = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id3 += "H" + localId.toString(32);
              }
              id3 += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id3 = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id3;
            return id3;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id3 = hook.memoizedState;
            return id3;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update3 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update3);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update3, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update3 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update3);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update3.hasEagerState = true;
                    update3.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update3, lane);
                      return;
                    }
                  } catch (error3) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update3, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update3) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update3.next = update3;
            } else {
              update3.next = pending.next;
              pending.next = update3;
            }
            queue.pending = update3;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue2);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue2);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef2();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe4, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef2();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe4, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue2);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe4, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef2();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe4, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context2) {
                warnInvalidContextAccess();
                return readContext(context2);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context2) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context2);
              },
              useEffect: function(create3, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create3, deps);
              },
              useImperativeHandle: function(ref, create3, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create3, deps);
              },
              useInsertionEffect: function(create3, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create3, deps);
              },
              useLayoutEffect: function(create3, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create3, deps);
              },
              useMemo: function(create3, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create3, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer2, initialArg, init2) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer2, initialArg, init2);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue2) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef2();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe4) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe4, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe4, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function resolveDefaultProps(Component4, baseProps) {
            if (Component4 && Component4.defaultProps) {
              var props = assign3({}, baseProps);
              var defaultProps2 = Component4.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var fakeInternalInstance = {};
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          var didWarnAboutLegacyContext$1;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign3({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue2 = workInProgress2.updateQueue;
              updateQueue2.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate2(eventTime, lane);
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate2(eventTime, lane);
              update3.tag = ReplaceState;
              update3.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update3 = createUpdate2(eventTime, lane);
              update3.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update3.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update3, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
                // this one.
                (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                  didWarnAboutLegacyContext$1.add(ctor);
                  error2("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
                }
                if (instance.contextTypes) {
                  error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray(_state))) {
                error2("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context2 = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context2 = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context2 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context2);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context2);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context2);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = {};
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack2) {
            return {
              value,
              source: null,
              stack: stack2 != null ? stack2 : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error3 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack2 = errorInfo.stack;
                var componentStack = stack2 !== null ? stack2 : "";
                if (error3 != null && error3._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error3);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error3);
              }
            } catch (e3) {
              setTimeout(function() {
                throw e3;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate2(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            update3.payload = {
              element: null
            };
            var error3 = errorInfo.value;
            update3.callback = function() {
              onUncaughtError(error3);
              logCapturedError(fiber, errorInfo);
            };
            return update3;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update3 = createUpdate2(NoTimestamp, lane);
            update3.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update3.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update3.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update3.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack2 = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack2 !== null ? stack2 : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update3;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue2 = /* @__PURE__ */ new Set();
              updateQueue2.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue2;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef2 || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update3 = createUpdate2(NoTimestamp, SyncLane);
                    update3.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update3, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update3 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update3);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          var didWarnAboutDefaultPropsOnFunctionComponent;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
            didWarnAboutDefaultPropsOnFunctionComponent = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var render3 = Component4.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render3, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component4.type;
              if (isSimpleFunctionComponent(type) && Component4.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component4.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
                if (Component4.defaultProps !== void 0) {
                  var componentName = getComponentNameFromType(type) || "Unknown";
                  if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                    error2("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                    didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                  }
                }
              }
              var child = createFiberFromTypeAndProps(Component4.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component4.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component4.compare;
              compare = compare !== null ? compare : shallowEqual2;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init2 = lazyComponent._init;
                  try {
                    outerMemoType = init2(payload);
                  } catch (x2) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, true);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component4, nextProps, context2, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component4, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update3 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update3);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component4.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component4)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component4, nextProps);
              mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component4, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component4, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component4, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component4.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component4, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue2 = workInProgress2.updateQueue;
              updateQueue2.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init2 = lazyComponent._init;
            var Component4 = init2(payload);
            workInProgress2.type = Component4;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component4);
            var resolvedProps = resolveDefaultProps(Component4, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component4);
                  workInProgress2.type = Component4 = resolveFunctionForHotReloading(Component4);
                }
                child = updateFunctionComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component4 = resolveClassForHotReloading(Component4);
                }
                child = updateClassComponent(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef2: {
                {
                  workInProgress2.type = Component4 = resolveForwardRefForHotReloading(Component4);
                }
                child = updateForwardRef(null, workInProgress2, Component4, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component4.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component4)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component4,
                  resolveDefaultProps(Component4.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component4 !== null && typeof Component4 === "object" && Component4.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component4 + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component4, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component4)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component4, nextProps);
            mountClassInstance(workInProgress2, Component4, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component4, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context2;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component4, false);
              context2 = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component4.prototype && typeof Component4.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component4)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component4, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component4, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component4, props, context2, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component4);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component4) {
            {
              if (Component4) {
                if (Component4.childContextTypes) {
                  error2("%s(...): childContextTypes cannot be defined on a function component.", Component4.displayName || Component4.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (Component4.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error2("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
              if (typeof Component4.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component4.contextType === "object" && Component4.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component4) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error2("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error2("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack2;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack2 = _getSuspenseInstanceF.stack;
                }
                var error3;
                if (message) {
                  error3 = new Error(message);
                } else {
                  error3 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error3, digest, stack2);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index3) {
            {
              var isAnArray = isArray(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray(children)) {
                  for (var i3 = 0; i3 < children.length; i3++) {
                    if (!validateSuspenseListNestedChild(children[i3], i3)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context2 = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context2, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context2, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context2 = workInProgress2.type;
            {
              if (context2._context === void 0) {
                if (context2 !== context2.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context2 = context2._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render3 = newProps.children;
            {
              if (typeof render3 !== "function") {
                error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render3(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context2 = workInProgress2.type._context;
                pushProvider(workInProgress2, context2, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component4 = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component4 ? unresolvedProps : resolveDefaultProps(Component4, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component4, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef2: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment10:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden2) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef2:
              case Fragment10:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next3 = renderState.tail;
                  renderState.rendering = next3;
                  renderState.tail = next3.sibling;
                  renderState.renderingStartTime = now2();
                  next3.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next3;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component4 = workInProgress2.type;
                if (isContextProvider(Component4)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context2 = workInProgress2.type._context;
                popProvider(context2, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context2 = interruptedWork.type._context;
                popProvider(context2, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error3) {
            {
              invokeGuardedCallback(null, function() {
                throw error3;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error3) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error3);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error3) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error3);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue2 = finishedWork.updateQueue;
            var lastEffect = updateQueue2 !== null ? updateQueue2.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  var destroy = effect.destroy;
                  effect.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion5) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue2 = finishedWork.updateQueue;
            var lastEffect = updateQueue2 !== null ? updateQueue2.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect = firstEffect;
              do {
                if ((effect.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create3 = effect.create;
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect.destroy = create3();
                  {
                    if ((flags & Insertion5) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect.tag & Insertion5) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error2("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect = effect.next;
              } while (effect !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id3 = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id3, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.passiveEffectDuration += passiveEffectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue2 = finishedWork.updateQueue;
                  if (updateQueue2 !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue2, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer: while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.effectDuration += effectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.effectDuration += effectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden2) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden2) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden2) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork) ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error2("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings: while (true) {
              while (node2.sibling === null) {
                if (node2.return === null || isHostParent(node2.return)) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
              while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                if (node2.flags & Placement) {
                  continue siblings;
                }
                if (node2.child === null || node2.tag === HostPortal) {
                  continue siblings;
                } else {
                  node2.child.return = node2;
                  node2 = node2.child;
                }
              }
              if (!(node2.flags & Placement)) {
                return node2.stateNode;
              }
            }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              // eslint-disable-next-line-no-fallthrough
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal) ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent: while (parent !== null) {
                switch (parent.tag) {
                  case HostComponent: {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break findParent;
                  }
                  case HostRoot: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                  case HostPortal: {
                    hostParent = parent.stateNode.containerInfo;
                    hostParentIsContainer = true;
                    break findParent;
                  }
                }
                parent = parent.return;
              }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              // eslint-disable-next-line-no-fallthrough
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue2 = deletedFiber.updateQueue;
                  if (updateQueue2 !== null) {
                    var lastEffect = updateQueue2.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect = firstEffect;
                      do {
                        var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion5) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect = effect.next;
                      } while (effect !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i3 = 0; i3 < deletions.length; i3++) {
                var childToDelete = deletions[i3];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error3) {
                  captureCommitPhaseError(childToDelete, parentFiber, error3);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion5 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion5 | HasEffect, finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error3) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error3) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden2 = newState !== null;
                  offscreenInstance.isHidden = isHidden2;
                  if (isHidden2) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error3) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error3);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error3) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error3);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden2 = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden2 || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden2 = fiber.memoizedState !== null;
                  if (isHidden2) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden2 = fiber.memoizedState !== null;
                if (isHidden2) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error3) {
                captureCommitPhaseError(fiber, fiber.return, error3);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error3) {
                  captureCommitPhaseError(fiber, fiber.return, error3);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i3 = 0; i3 < deletions.length; i3++) {
                    var fiberToDelete = deletions[i3];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef2:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef2:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error3) {
                    captureCommitPhaseError(fiber, fiber.return, error3);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error2("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition = ReactCurrentBatchConfig$3.transition;
                if (!transition._updatedFibers) {
                  transition._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error2("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error2("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now2());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now2());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              // Flow knows about invariant, so it complains if I add a break
              // statement, but eslint doesn't know about invariant, so it complains
              // if I do. eslint-disable-next-line no-fallthrough
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue2 = node2.updateQueue;
                if (updateQueue2 !== null) {
                  var checks = updateQueue2.stores;
                  if (checks !== null) {
                    for (var i3 = 0; i3 < checks.length; i3++) {
                      var check2 = checks[i3];
                      var getSnapshot = check2.getSnapshot;
                      var renderedValue = check2.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error3) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now2());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn, a2) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn(a2);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn, a2, b2, c6, d2) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn(a2, b2, c6, d2);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync4(fn) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn) {
                return fn();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error3) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error3];
            } else {
              workInProgressRootConcurrentErrors.push(error3);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next3;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next3 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next3 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next3 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next3;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next3 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next3 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next3 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next3 !== null) {
                  workInProgress = next3;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error2("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i3 = 0; i3 < recoverableErrors.length; i3++) {
                var recoverableError = recoverableErrors[i3];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority2 = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority2);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i3 = 0; i3 < profilerEffects.length; i3++) {
                var _fiber = profilerEffects[i3];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error3) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error3;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
            var errorInfo = createCapturedValueAtFiber(error3, sourceFiber);
            var update3 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update3, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update3 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update3, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error2("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef2 && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef2:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef2 && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error2("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef2: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update3) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update3.staleFamilies, updatedFamilies = update3.updatedFamilies;
              flushPassiveEffects();
              flushSync4(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync4(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef2:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e3) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component4) {
            var prototype = Component4.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component4) {
            if (typeof Component4 === "function") {
              return shouldConstruct$1(Component4) ? ClassComponent : FunctionComponent;
            } else if (Component4 !== void 0 && Component4 !== null) {
              var $$typeof = Component4.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef2;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef2:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag: switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictLegacyMode;
                  if ((mode & ConcurrentMode) !== NoMode) {
                    mode |= StrictEffectsMode;
                  }
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_SCOPE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_CACHE_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_TRACING_MARKER_TYPE:
                // eslint-disable-next-line no-fallthrough
                case REACT_DEBUG_TRACING_MODE_TYPE:
                // eslint-disable-next-line no-fallthrough
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef2;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                }
              }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements2, mode, lanes, key) {
            var fiber = createFiber(Fragment10, elements2, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error2('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate4, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate4 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate4 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate4, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate4, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate4,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.3.1";
          function createPortal4(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component4 = fiber.type;
              if (isContextProvider(Component4)) {
                return processChildContext(fiber, Component4, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate4 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate4, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate4 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate4, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update3 = createUpdate2(eventTime, lane);
            update3.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update3, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context2 = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context2;
            } else {
              container.pendingContext = context2;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update3 = createUpdate2(eventTime, lane);
            update3.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update3.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update3, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync4(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index3) {
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index3 + 1 === path.length) {
                if (isArray(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
              var oldKey = oldPath[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              if (index3 + 1 === oldPath.length) {
                var newKey = newPath[index3];
                updated[newKey] = updated[oldKey];
                if (isArray(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index3 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn2("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i3 = 0; i3 < newPath.length - 1; i3++) {
                  if (oldPath[i3] !== newPath[i3]) {
                    warn2("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index3, value) {
              if (index3 >= path.length) {
                return value;
              }
              var key = path[index3];
              var updated = isArray(obj) ? obj.slice() : assign3({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id3) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id3 > 0) {
                currentHook2 = currentHook2.next;
                id3--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id3, path, value) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id3, path) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id3, oldPath, newPath) {
              var hook = findHook(fiber, id3);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign3({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error3) {
            console["error"](error3);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error2("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error2("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error2("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync4(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot2(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn2("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error2("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot2(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error2("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i3 = 0; i3 < mutableSources.length; i3++) {
                var mutableSource = mutableSources[i3];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error2("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error2("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync4();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync4(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          var didWarnAboutFindDOMNode = false;
          function findDOMNode2(componentOrElement) {
            {
              if (!didWarnAboutFindDOMNode) {
                didWarnAboutFindDOMNode = true;
                error2("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
              }
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate3(element, container, callback) {
            {
              error2("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render2(element, container, callback) {
            {
              error2("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error2("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          var didWarnAboutUnmountComponentAtNode = false;
          function unmountComponentAtNode2(container) {
            {
              if (!didWarnAboutUnmountComponentAtNode) {
                didWarnAboutUnmountComponentAtNode = true;
                error2("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
              }
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync4(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync4);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal4(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot2(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error2('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot2(container, initialChildren, options2);
          }
          function flushSync$1(fn) {
            {
              if (isAlreadyRendering()) {
                error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync4(fn);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM2 && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode2;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate3;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render2;
          exports.unmountComponentAtNode = unmountComponentAtNode2;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (false) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i3 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c6, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c6, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c6, h2, o3) {
          i3.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c6, h2, o3);
          } finally {
            i3.usingClientEntryPoint = false;
          }
        };
      }
      var i3;
    }
  });

  // node_modules/sprintf-js/src/sprintf.js
  var require_sprintf = __commonJS({
    "node_modules/sprintf-js/src/sprintf.js"(exports) {
      !function() {
        "use strict";
        var re = {
          not_string: /[^s]/,
          not_bool: /[^t]/,
          not_type: /[^T]/,
          not_primitive: /[^v]/,
          number: /[diefg]/,
          numeric_arg: /[bcdiefguxX]/,
          json: /[j]/,
          not_json: /[^j]/,
          text: /^[^\x25]+/,
          modulo: /^\x25{2}/,
          placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
          key: /^([a-z_][a-z_\d]*)/i,
          key_access: /^\.([a-z_][a-z_\d]*)/i,
          index_access: /^\[(\d+)\]/,
          sign: /^[+-]/
        };
        function sprintf2(key) {
          return sprintf_format(sprintf_parse(key), arguments);
        }
        function vsprintf(fmt, argv) {
          return sprintf2.apply(null, [fmt].concat(argv || []));
        }
        function sprintf_format(parse_tree, argv) {
          var cursor2 = 1, tree_length = parse_tree.length, arg, output2 = "", i3, k2, ph, pad, pad_character, pad_length, is_positive, sign;
          for (i3 = 0; i3 < tree_length; i3++) {
            if (typeof parse_tree[i3] === "string") {
              output2 += parse_tree[i3];
            } else if (typeof parse_tree[i3] === "object") {
              ph = parse_tree[i3];
              if (ph.keys) {
                arg = argv[cursor2];
                for (k2 = 0; k2 < ph.keys.length; k2++) {
                  if (arg == void 0) {
                    throw new Error(sprintf2('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k2], ph.keys[k2 - 1]));
                  }
                  arg = arg[ph.keys[k2]];
                }
              } else if (ph.param_no) {
                arg = argv[ph.param_no];
              } else {
                arg = argv[cursor2++];
              }
              if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
                arg = arg();
              }
              if (re.numeric_arg.test(ph.type) && (typeof arg !== "number" && isNaN(arg))) {
                throw new TypeError(sprintf2("[sprintf] expecting number but found %T", arg));
              }
              if (re.number.test(ph.type)) {
                is_positive = arg >= 0;
              }
              switch (ph.type) {
                case "b":
                  arg = parseInt(arg, 10).toString(2);
                  break;
                case "c":
                  arg = String.fromCharCode(parseInt(arg, 10));
                  break;
                case "d":
                case "i":
                  arg = parseInt(arg, 10);
                  break;
                case "j":
                  arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                  break;
                case "e":
                  arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                  break;
                case "f":
                  arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                  break;
                case "g":
                  arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                  break;
                case "o":
                  arg = (parseInt(arg, 10) >>> 0).toString(8);
                  break;
                case "s":
                  arg = String(arg);
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "t":
                  arg = String(!!arg);
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "T":
                  arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "u":
                  arg = parseInt(arg, 10) >>> 0;
                  break;
                case "v":
                  arg = arg.valueOf();
                  arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                  break;
                case "x":
                  arg = (parseInt(arg, 10) >>> 0).toString(16);
                  break;
                case "X":
                  arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                  break;
              }
              if (re.json.test(ph.type)) {
                output2 += arg;
              } else {
                if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                  sign = is_positive ? "+" : "-";
                  arg = arg.toString().replace(re.sign, "");
                } else {
                  sign = "";
                }
                pad_character = ph.pad_char ? ph.pad_char === "0" ? "0" : ph.pad_char.charAt(1) : " ";
                pad_length = ph.width - (sign + arg).length;
                pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : "" : "";
                output2 += ph.align ? sign + arg + pad : pad_character === "0" ? sign + pad + arg : pad + sign + arg;
              }
            }
          }
          return output2;
        }
        var sprintf_cache = /* @__PURE__ */ Object.create(null);
        function sprintf_parse(fmt) {
          if (sprintf_cache[fmt]) {
            return sprintf_cache[fmt];
          }
          var _fmt = fmt, match2, parse_tree = [], arg_names = 0;
          while (_fmt) {
            if ((match2 = re.text.exec(_fmt)) !== null) {
              parse_tree.push(match2[0]);
            } else if ((match2 = re.modulo.exec(_fmt)) !== null) {
              parse_tree.push("%");
            } else if ((match2 = re.placeholder.exec(_fmt)) !== null) {
              if (match2[2]) {
                arg_names |= 1;
                var field_list = [], replacement_field = match2[2], field_match = [];
                if ((field_match = re.key.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                  while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                    if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                      field_list.push(field_match[1]);
                    } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                      field_list.push(field_match[1]);
                    } else {
                      throw new SyntaxError("[sprintf] failed to parse named argument key");
                    }
                  }
                } else {
                  throw new SyntaxError("[sprintf] failed to parse named argument key");
                }
                match2[2] = field_list;
              } else {
                arg_names |= 2;
              }
              if (arg_names === 3) {
                throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
              }
              parse_tree.push(
                {
                  placeholder: match2[0],
                  param_no: match2[1],
                  keys: match2[2],
                  sign: match2[3],
                  pad_char: match2[4],
                  align: match2[5],
                  width: match2[6],
                  precision: match2[7],
                  type: match2[8]
                }
              );
            } else {
              throw new SyntaxError("[sprintf] unexpected placeholder");
            }
            _fmt = _fmt.substring(match2[0].length);
          }
          return sprintf_cache[fmt] = parse_tree;
        }
        if (typeof exports !== "undefined") {
          exports["sprintf"] = sprintf2;
          exports["vsprintf"] = vsprintf;
        }
        if (typeof window !== "undefined") {
          window["sprintf"] = sprintf2;
          window["vsprintf"] = vsprintf;
          if (typeof define === "function" && define["amd"]) {
            define(function() {
              return {
                "sprintf": sprintf2,
                "vsprintf": vsprintf
              };
            });
          }
        }
      }();
    }
  });

  // node_modules/requestidlecallback/index.js
  var require_requestidlecallback = __commonJS({
    "node_modules/requestidlecallback/index.js"(exports, module) {
      (function(factory) {
        if (typeof define === "function" && define.amd) {
          define([], factory);
        } else if (typeof module === "object" && module.exports) {
          module.exports = factory();
        } else {
          window.idleCallbackShim = factory();
        }
      })(function() {
        "use strict";
        var scheduleStart, throttleDelay, lazytimer, lazyraf;
        var root = typeof window != "undefined" ? window : typeof global != void 0 ? global : this || {};
        var requestAnimationFrame2 = root.cancelRequestAnimationFrame && root.requestAnimationFrame || setTimeout;
        var cancelRequestAnimationFrame = root.cancelRequestAnimationFrame || clearTimeout;
        var tasks = [];
        var runAttempts = 0;
        var isRunning = false;
        var remainingTime = 7;
        var minThrottle = 35;
        var throttle = 125;
        var index2 = 0;
        var taskStart = 0;
        var tasklength = 0;
        var IdleDeadline = {
          get didTimeout() {
            return false;
          },
          timeRemaining: function() {
            var timeRemaining = remainingTime - (Date.now() - taskStart);
            return timeRemaining < 0 ? 0 : timeRemaining;
          }
        };
        var setInactive = debounce3(function() {
          remainingTime = 22;
          throttle = 66;
          minThrottle = 0;
        });
        function debounce3(fn) {
          var id3, timestamp;
          var wait = 99;
          var check2 = function() {
            var last = Date.now() - timestamp;
            if (last < wait) {
              id3 = setTimeout(check2, wait - last);
            } else {
              id3 = null;
              fn();
            }
          };
          return function() {
            timestamp = Date.now();
            if (!id3) {
              id3 = setTimeout(check2, wait);
            }
          };
        }
        function abortRunning() {
          if (isRunning) {
            if (lazyraf) {
              cancelRequestAnimationFrame(lazyraf);
            }
            if (lazytimer) {
              clearTimeout(lazytimer);
            }
            isRunning = false;
          }
        }
        function onInputorMutation() {
          if (throttle != 125) {
            remainingTime = 7;
            throttle = 125;
            minThrottle = 35;
            if (isRunning) {
              abortRunning();
              scheduleLazy();
            }
          }
          setInactive();
        }
        function scheduleAfterRaf() {
          lazyraf = null;
          lazytimer = setTimeout(runTasks, 0);
        }
        function scheduleRaf() {
          lazytimer = null;
          requestAnimationFrame2(scheduleAfterRaf);
        }
        function scheduleLazy() {
          if (isRunning) {
            return;
          }
          throttleDelay = throttle - (Date.now() - taskStart);
          scheduleStart = Date.now();
          isRunning = true;
          if (minThrottle && throttleDelay < minThrottle) {
            throttleDelay = minThrottle;
          }
          if (throttleDelay > 9) {
            lazytimer = setTimeout(scheduleRaf, throttleDelay);
          } else {
            throttleDelay = 0;
            scheduleRaf();
          }
        }
        function runTasks() {
          var task, i3, len;
          var timeThreshold = remainingTime > 9 ? 9 : 1;
          taskStart = Date.now();
          isRunning = false;
          lazytimer = null;
          if (runAttempts > 2 || taskStart - throttleDelay - 50 < scheduleStart) {
            for (i3 = 0, len = tasks.length; i3 < len && IdleDeadline.timeRemaining() > timeThreshold; i3++) {
              task = tasks.shift();
              tasklength++;
              if (task) {
                task(IdleDeadline);
              }
            }
          }
          if (tasks.length) {
            scheduleLazy();
          } else {
            runAttempts = 0;
          }
        }
        function requestIdleCallbackShim(task) {
          index2++;
          tasks.push(task);
          scheduleLazy();
          return index2;
        }
        function cancelIdleCallbackShim(id3) {
          var index3 = id3 - 1 - tasklength;
          if (tasks[index3]) {
            tasks[index3] = null;
          }
        }
        if (!root.requestIdleCallback || !root.cancelIdleCallback) {
          root.requestIdleCallback = requestIdleCallbackShim;
          root.cancelIdleCallback = cancelIdleCallbackShim;
          if (root.document && document.addEventListener) {
            root.addEventListener("scroll", onInputorMutation, true);
            root.addEventListener("resize", onInputorMutation);
            document.addEventListener("focus", onInputorMutation, true);
            document.addEventListener("mouseover", onInputorMutation, true);
            ["click", "keypress", "touchstart", "mousedown"].forEach(function(name) {
              document.addEventListener(name, onInputorMutation, { capture: true, passive: true });
            });
            if (root.MutationObserver) {
              new MutationObserver(onInputorMutation).observe(document.documentElement, { childList: true, subtree: true, attributes: true });
            }
          }
        } else {
          try {
            root.requestIdleCallback(function() {
            }, { timeout: 0 });
          } catch (e3) {
            (function(rIC) {
              var timeRemainingProto, timeRemaining;
              root.requestIdleCallback = function(fn, timeout) {
                if (timeout && typeof timeout.timeout == "number") {
                  return rIC(fn, timeout.timeout);
                }
                return rIC(fn);
              };
              if (root.IdleCallbackDeadline && (timeRemainingProto = IdleCallbackDeadline.prototype)) {
                timeRemaining = Object.getOwnPropertyDescriptor(timeRemainingProto, "timeRemaining");
                if (!timeRemaining || !timeRemaining.configurable || !timeRemaining.get) {
                  return;
                }
                Object.defineProperty(timeRemainingProto, "timeRemaining", {
                  value: function() {
                    return timeRemaining.get.call(this);
                  },
                  enumerable: true,
                  configurable: true
                });
              }
            })(root.requestIdleCallback);
          }
        }
        return {
          request: requestIdleCallbackShim,
          cancel: cancelIdleCallbackShim
        };
      });
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports, module) {
      "use strict";
      var isMergeableObject = function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      };
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
      }
      function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options);
        });
      }
      function getMergeFunction(key, options) {
        if (!options.customMerge) {
          return deepmerge2;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge2;
      }
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol5) {
          return Object.propertyIsEnumerable.call(target, symbol5);
        }) : [];
      }
      function getKeys2(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
          getKeys2(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
          });
        }
        getKeys2(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
          }
        });
        return destination;
      }
      function deepmerge2(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
          return options.arrayMerge(target, source, options);
        } else {
          return mergeObject(target, source, options);
        }
      }
      deepmerge2.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev2, next3) {
          return deepmerge2(prev2, next3, options);
        }, {});
      };
      var deepmerge_1 = deepmerge2;
      module.exports = deepmerge_1;
    }
  });

  // node_modules/remove-accents/index.js
  var require_remove_accents = __commonJS({
    "node_modules/remove-accents/index.js"(exports, module) {
      var characterMap = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\u1EA4": "A",
        "\u1EAE": "A",
        "\u1EB2": "A",
        "\u1EB4": "A",
        "\u1EB6": "A",
        "\xC6": "AE",
        "\u1EA6": "A",
        "\u1EB0": "A",
        "\u0202": "A",
        "\u1EA2": "A",
        "\u1EA0": "A",
        "\u1EA8": "A",
        "\u1EAA": "A",
        "\u1EAC": "A",
        "\xC7": "C",
        "\u1E08": "C",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\u1EBE": "E",
        "\u1E16": "E",
        "\u1EC0": "E",
        "\u1E14": "E",
        "\u1E1C": "E",
        "\u0206": "E",
        "\u1EBA": "E",
        "\u1EBC": "E",
        "\u1EB8": "E",
        "\u1EC2": "E",
        "\u1EC4": "E",
        "\u1EC6": "E",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\u1E2E": "I",
        "\u020A": "I",
        "\u1EC8": "I",
        "\u1ECA": "I",
        "\xD0": "D",
        "\xD1": "N",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\u1ED0": "O",
        "\u1E4C": "O",
        "\u1E52": "O",
        "\u020E": "O",
        "\u1ECE": "O",
        "\u1ECC": "O",
        "\u1ED4": "O",
        "\u1ED6": "O",
        "\u1ED8": "O",
        "\u1EDC": "O",
        "\u1EDE": "O",
        "\u1EE0": "O",
        "\u1EDA": "O",
        "\u1EE2": "O",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\u1EE6": "U",
        "\u1EE4": "U",
        "\u1EEC": "U",
        "\u1EEE": "U",
        "\u1EF0": "U",
        "\xDD": "Y",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\u1EA5": "a",
        "\u1EAF": "a",
        "\u1EB3": "a",
        "\u1EB5": "a",
        "\u1EB7": "a",
        "\xE6": "ae",
        "\u1EA7": "a",
        "\u1EB1": "a",
        "\u0203": "a",
        "\u1EA3": "a",
        "\u1EA1": "a",
        "\u1EA9": "a",
        "\u1EAB": "a",
        "\u1EAD": "a",
        "\xE7": "c",
        "\u1E09": "c",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\u1EBF": "e",
        "\u1E17": "e",
        "\u1EC1": "e",
        "\u1E15": "e",
        "\u1E1D": "e",
        "\u0207": "e",
        "\u1EBB": "e",
        "\u1EBD": "e",
        "\u1EB9": "e",
        "\u1EC3": "e",
        "\u1EC5": "e",
        "\u1EC7": "e",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\u1E2F": "i",
        "\u020B": "i",
        "\u1EC9": "i",
        "\u1ECB": "i",
        "\xF0": "d",
        "\xF1": "n",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\u1ED1": "o",
        "\u1E4D": "o",
        "\u1E53": "o",
        "\u020F": "o",
        "\u1ECF": "o",
        "\u1ECD": "o",
        "\u1ED5": "o",
        "\u1ED7": "o",
        "\u1ED9": "o",
        "\u1EDD": "o",
        "\u1EDF": "o",
        "\u1EE1": "o",
        "\u1EDB": "o",
        "\u1EE3": "o",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\u1EE7": "u",
        "\u1EE5": "u",
        "\u1EED": "u",
        "\u1EEF": "u",
        "\u1EF1": "u",
        "\xFD": "y",
        "\xFF": "y",
        "\u0100": "A",
        "\u0101": "a",
        "\u0102": "A",
        "\u0103": "a",
        "\u0104": "A",
        "\u0105": "a",
        "\u0106": "C",
        "\u0107": "c",
        "\u0108": "C",
        "\u0109": "c",
        "\u010A": "C",
        "\u010B": "c",
        "\u010C": "C",
        "\u010D": "c",
        "C\u0306": "C",
        "c\u0306": "c",
        "\u010E": "D",
        "\u010F": "d",
        "\u0110": "D",
        "\u0111": "d",
        "\u0112": "E",
        "\u0113": "e",
        "\u0114": "E",
        "\u0115": "e",
        "\u0116": "E",
        "\u0117": "e",
        "\u0118": "E",
        "\u0119": "e",
        "\u011A": "E",
        "\u011B": "e",
        "\u011C": "G",
        "\u01F4": "G",
        "\u011D": "g",
        "\u01F5": "g",
        "\u011E": "G",
        "\u011F": "g",
        "\u0120": "G",
        "\u0121": "g",
        "\u0122": "G",
        "\u0123": "g",
        "\u0124": "H",
        "\u0125": "h",
        "\u0126": "H",
        "\u0127": "h",
        "\u1E2A": "H",
        "\u1E2B": "h",
        "\u0128": "I",
        "\u0129": "i",
        "\u012A": "I",
        "\u012B": "i",
        "\u012C": "I",
        "\u012D": "i",
        "\u012E": "I",
        "\u012F": "i",
        "\u0130": "I",
        "\u0131": "i",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u1E30": "K",
        "\u1E31": "k",
        "K\u0306": "K",
        "k\u0306": "k",
        "\u0139": "L",
        "\u013A": "l",
        "\u013B": "L",
        "\u013C": "l",
        "\u013D": "L",
        "\u013E": "l",
        "\u013F": "L",
        "\u0140": "l",
        "\u0141": "l",
        "\u0142": "l",
        "\u1E3E": "M",
        "\u1E3F": "m",
        "M\u0306": "M",
        "m\u0306": "m",
        "\u0143": "N",
        "\u0144": "n",
        "\u0145": "N",
        "\u0146": "n",
        "\u0147": "N",
        "\u0148": "n",
        "\u0149": "n",
        "N\u0306": "N",
        "n\u0306": "n",
        "\u014C": "O",
        "\u014D": "o",
        "\u014E": "O",
        "\u014F": "o",
        "\u0150": "O",
        "\u0151": "o",
        "\u0152": "OE",
        "\u0153": "oe",
        "P\u0306": "P",
        "p\u0306": "p",
        "\u0154": "R",
        "\u0155": "r",
        "\u0156": "R",
        "\u0157": "r",
        "\u0158": "R",
        "\u0159": "r",
        "R\u0306": "R",
        "r\u0306": "r",
        "\u0212": "R",
        "\u0213": "r",
        "\u015A": "S",
        "\u015B": "s",
        "\u015C": "S",
        "\u015D": "s",
        "\u015E": "S",
        "\u0218": "S",
        "\u0219": "s",
        "\u015F": "s",
        "\u0160": "S",
        "\u0161": "s",
        "\u0162": "T",
        "\u0163": "t",
        "\u021B": "t",
        "\u021A": "T",
        "\u0164": "T",
        "\u0165": "t",
        "\u0166": "T",
        "\u0167": "t",
        "T\u0306": "T",
        "t\u0306": "t",
        "\u0168": "U",
        "\u0169": "u",
        "\u016A": "U",
        "\u016B": "u",
        "\u016C": "U",
        "\u016D": "u",
        "\u016E": "U",
        "\u016F": "u",
        "\u0170": "U",
        "\u0171": "u",
        "\u0172": "U",
        "\u0173": "u",
        "\u0216": "U",
        "\u0217": "u",
        "V\u0306": "V",
        "v\u0306": "v",
        "\u0174": "W",
        "\u0175": "w",
        "\u1E82": "W",
        "\u1E83": "w",
        "X\u0306": "X",
        "x\u0306": "x",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "Y\u0306": "Y",
        "y\u0306": "y",
        "\u0179": "Z",
        "\u017A": "z",
        "\u017B": "Z",
        "\u017C": "z",
        "\u017D": "Z",
        "\u017E": "z",
        "\u017F": "s",
        "\u0192": "f",
        "\u01A0": "O",
        "\u01A1": "o",
        "\u01AF": "U",
        "\u01B0": "u",
        "\u01CD": "A",
        "\u01CE": "a",
        "\u01CF": "I",
        "\u01D0": "i",
        "\u01D1": "O",
        "\u01D2": "o",
        "\u01D3": "U",
        "\u01D4": "u",
        "\u01D5": "U",
        "\u01D6": "u",
        "\u01D7": "U",
        "\u01D8": "u",
        "\u01D9": "U",
        "\u01DA": "u",
        "\u01DB": "U",
        "\u01DC": "u",
        "\u1EE8": "U",
        "\u1EE9": "u",
        "\u1E78": "U",
        "\u1E79": "u",
        "\u01FA": "A",
        "\u01FB": "a",
        "\u01FC": "AE",
        "\u01FD": "ae",
        "\u01FE": "O",
        "\u01FF": "o",
        "\xDE": "TH",
        "\xFE": "th",
        "\u1E54": "P",
        "\u1E55": "p",
        "\u1E64": "S",
        "\u1E65": "s",
        "X\u0301": "X",
        "x\u0301": "x",
        "\u0403": "\u0413",
        "\u0453": "\u0433",
        "\u040C": "\u041A",
        "\u045C": "\u043A",
        "A\u030B": "A",
        "a\u030B": "a",
        "E\u030B": "E",
        "e\u030B": "e",
        "I\u030B": "I",
        "i\u030B": "i",
        "\u01F8": "N",
        "\u01F9": "n",
        "\u1ED2": "O",
        "\u1ED3": "o",
        "\u1E50": "O",
        "\u1E51": "o",
        "\u1EEA": "U",
        "\u1EEB": "u",
        "\u1E80": "W",
        "\u1E81": "w",
        "\u1EF2": "Y",
        "\u1EF3": "y",
        "\u0200": "A",
        "\u0201": "a",
        "\u0204": "E",
        "\u0205": "e",
        "\u0208": "I",
        "\u0209": "i",
        "\u020C": "O",
        "\u020D": "o",
        "\u0210": "R",
        "\u0211": "r",
        "\u0214": "U",
        "\u0215": "u",
        "B\u030C": "B",
        "b\u030C": "b",
        "\u010C\u0323": "C",
        "\u010D\u0323": "c",
        "\xCA\u030C": "E",
        "\xEA\u030C": "e",
        "F\u030C": "F",
        "f\u030C": "f",
        "\u01E6": "G",
        "\u01E7": "g",
        "\u021E": "H",
        "\u021F": "h",
        "J\u030C": "J",
        "\u01F0": "j",
        "\u01E8": "K",
        "\u01E9": "k",
        "M\u030C": "M",
        "m\u030C": "m",
        "P\u030C": "P",
        "p\u030C": "p",
        "Q\u030C": "Q",
        "q\u030C": "q",
        "\u0158\u0329": "R",
        "\u0159\u0329": "r",
        "\u1E66": "S",
        "\u1E67": "s",
        "V\u030C": "V",
        "v\u030C": "v",
        "W\u030C": "W",
        "w\u030C": "w",
        "X\u030C": "X",
        "x\u030C": "x",
        "Y\u030C": "Y",
        "y\u030C": "y",
        "A\u0327": "A",
        "a\u0327": "a",
        "B\u0327": "B",
        "b\u0327": "b",
        "\u1E10": "D",
        "\u1E11": "d",
        "\u0228": "E",
        "\u0229": "e",
        "\u0190\u0327": "E",
        "\u025B\u0327": "e",
        "\u1E28": "H",
        "\u1E29": "h",
        "I\u0327": "I",
        "i\u0327": "i",
        "\u0197\u0327": "I",
        "\u0268\u0327": "i",
        "M\u0327": "M",
        "m\u0327": "m",
        "O\u0327": "O",
        "o\u0327": "o",
        "Q\u0327": "Q",
        "q\u0327": "q",
        "U\u0327": "U",
        "u\u0327": "u",
        "X\u0327": "X",
        "x\u0327": "x",
        "Z\u0327": "Z",
        "z\u0327": "z",
        "\u0439": "\u0438",
        "\u0419": "\u0418",
        "\u0451": "\u0435",
        "\u0401": "\u0415"
      };
      var chars2 = Object.keys(characterMap).join("|");
      var allAccents = new RegExp(chars2, "g");
      var firstAccent = new RegExp(chars2, "");
      function matcher3(match2) {
        return characterMap[match2];
      }
      var removeAccents6 = function(string2) {
        return string2.replace(allAccents, matcher3);
      };
      var hasAccents = function(string2) {
        return !!string2.match(firstAccent);
      };
      module.exports = removeAccents6;
      module.exports.has = hasAccents;
      module.exports.remove = removeAccents6;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef2(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense2;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef2;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/fast-deep-equal/es6/index.js
  var require_es6 = __commonJS({
    "node_modules/fast-deep-equal/es6/index.js"(exports, module) {
      "use strict";
      module.exports = function equal(a2, b2) {
        if (a2 === b2) return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          if (a2.constructor !== b2.constructor) return false;
          var length2, i3, keys;
          if (Array.isArray(a2)) {
            length2 = a2.length;
            if (length2 != b2.length) return false;
            for (i3 = length2; i3-- !== 0; )
              if (!equal(a2[i3], b2[i3])) return false;
            return true;
          }
          if (a2 instanceof Map && b2 instanceof Map) {
            if (a2.size !== b2.size) return false;
            for (i3 of a2.entries())
              if (!b2.has(i3[0])) return false;
            for (i3 of a2.entries())
              if (!equal(i3[1], b2.get(i3[0]))) return false;
            return true;
          }
          if (a2 instanceof Set && b2 instanceof Set) {
            if (a2.size !== b2.size) return false;
            for (i3 of a2.entries())
              if (!b2.has(i3[0])) return false;
            return true;
          }
          if (ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
            length2 = a2.length;
            if (length2 != b2.length) return false;
            for (i3 = length2; i3-- !== 0; )
              if (a2[i3] !== b2[i3]) return false;
            return true;
          }
          if (a2.constructor === RegExp) return a2.source === b2.source && a2.flags === b2.flags;
          if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b2.valueOf();
          if (a2.toString !== Object.prototype.toString) return a2.toString() === b2.toString();
          keys = Object.keys(a2);
          length2 = keys.length;
          if (length2 !== Object.keys(b2).length) return false;
          for (i3 = length2; i3-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b2, keys[i3])) return false;
          for (i3 = length2; i3-- !== 0; ) {
            var key = keys[i3];
            if (!equal(a2[key], b2[key])) return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      };
    }
  });

  // node_modules/showdown/dist/showdown.js
  var require_showdown = __commonJS({
    "node_modules/showdown/dist/showdown.js"(exports, module) {
      (function() {
        function getDefaultOpts(simple) {
          "use strict";
          var defaultOptions = {
            omitExtraWLInCodeBlocks: {
              defaultValue: false,
              describe: "Omit the default extra whiteline added to code blocks",
              type: "boolean"
            },
            noHeaderId: {
              defaultValue: false,
              describe: "Turn on/off generated header id",
              type: "boolean"
            },
            prefixHeaderId: {
              defaultValue: false,
              describe: "Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic 'section-' prefix",
              type: "string"
            },
            rawPrefixHeaderId: {
              defaultValue: false,
              describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
              type: "boolean"
            },
            ghCompatibleHeaderId: {
              defaultValue: false,
              describe: "Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)",
              type: "boolean"
            },
            rawHeaderId: {
              defaultValue: false,
              describe: `Remove only spaces, ' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids`,
              type: "boolean"
            },
            headerLevelStart: {
              defaultValue: false,
              describe: "The header blocks level start",
              type: "integer"
            },
            parseImgDimensions: {
              defaultValue: false,
              describe: "Turn on/off image dimension parsing",
              type: "boolean"
            },
            simplifiedAutoLink: {
              defaultValue: false,
              describe: "Turn on/off GFM autolink style",
              type: "boolean"
            },
            excludeTrailingPunctuationFromURLs: {
              defaultValue: false,
              describe: "Excludes trailing punctuation from links generated with autoLinking",
              type: "boolean"
            },
            literalMidWordUnderscores: {
              defaultValue: false,
              describe: "Parse midword underscores as literal underscores",
              type: "boolean"
            },
            literalMidWordAsterisks: {
              defaultValue: false,
              describe: "Parse midword asterisks as literal asterisks",
              type: "boolean"
            },
            strikethrough: {
              defaultValue: false,
              describe: "Turn on/off strikethrough support",
              type: "boolean"
            },
            tables: {
              defaultValue: false,
              describe: "Turn on/off tables support",
              type: "boolean"
            },
            tablesHeaderId: {
              defaultValue: false,
              describe: "Add an id to table headers",
              type: "boolean"
            },
            ghCodeBlocks: {
              defaultValue: true,
              describe: "Turn on/off GFM fenced code blocks support",
              type: "boolean"
            },
            tasklists: {
              defaultValue: false,
              describe: "Turn on/off GFM tasklist support",
              type: "boolean"
            },
            smoothLivePreview: {
              defaultValue: false,
              describe: "Prevents weird effects in live previews due to incomplete input",
              type: "boolean"
            },
            smartIndentationFix: {
              defaultValue: false,
              description: "Tries to smartly fix indentation in es6 strings",
              type: "boolean"
            },
            disableForced4SpacesIndentedSublists: {
              defaultValue: false,
              description: "Disables the requirement of indenting nested sublists by 4 spaces",
              type: "boolean"
            },
            simpleLineBreaks: {
              defaultValue: false,
              description: "Parses simple line breaks as <br> (GFM Style)",
              type: "boolean"
            },
            requireSpaceBeforeHeadingText: {
              defaultValue: false,
              description: "Makes adding a space between `#` and the header text mandatory (GFM Style)",
              type: "boolean"
            },
            ghMentions: {
              defaultValue: false,
              description: "Enables github @mentions",
              type: "boolean"
            },
            ghMentionsLink: {
              defaultValue: "https://github.com/{u}",
              description: "Changes the link generated by @mentions. Only applies if ghMentions option is enabled.",
              type: "string"
            },
            encodeEmails: {
              defaultValue: true,
              description: "Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities",
              type: "boolean"
            },
            openLinksInNewWindow: {
              defaultValue: false,
              description: "Open all links in new windows",
              type: "boolean"
            },
            backslashEscapesHTMLTags: {
              defaultValue: false,
              description: "Support for HTML Tag escaping. ex: <div>foo</div>",
              type: "boolean"
            },
            emoji: {
              defaultValue: false,
              description: "Enable emoji support. Ex: `this is a :smile: emoji`",
              type: "boolean"
            },
            underline: {
              defaultValue: false,
              description: "Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`",
              type: "boolean"
            },
            completeHTMLDocument: {
              defaultValue: false,
              description: "Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags",
              type: "boolean"
            },
            metadata: {
              defaultValue: false,
              description: "Enable support for document metadata (defined at the top of the document between `\xAB\xAB\xAB` and `\xBB\xBB\xBB` or between `---` and `---`).",
              type: "boolean"
            },
            splitAdjacentBlockquotes: {
              defaultValue: false,
              description: "Split adjacent blockquote blocks",
              type: "boolean"
            }
          };
          if (simple === false) {
            return JSON.parse(JSON.stringify(defaultOptions));
          }
          var ret = {};
          for (var opt in defaultOptions) {
            if (defaultOptions.hasOwnProperty(opt)) {
              ret[opt] = defaultOptions[opt].defaultValue;
            }
          }
          return ret;
        }
        function allOptionsOn() {
          "use strict";
          var options = getDefaultOpts(true), ret = {};
          for (var opt in options) {
            if (options.hasOwnProperty(opt)) {
              ret[opt] = true;
            }
          }
          return ret;
        }
        var showdown2 = {}, parsers = {}, extensions = {}, globalOptions = getDefaultOpts(true), setFlavor = "vanilla", flavor = {
          github: {
            omitExtraWLInCodeBlocks: true,
            simplifiedAutoLink: true,
            excludeTrailingPunctuationFromURLs: true,
            literalMidWordUnderscores: true,
            strikethrough: true,
            tables: true,
            tablesHeaderId: true,
            ghCodeBlocks: true,
            tasklists: true,
            disableForced4SpacesIndentedSublists: true,
            simpleLineBreaks: true,
            requireSpaceBeforeHeadingText: true,
            ghCompatibleHeaderId: true,
            ghMentions: true,
            backslashEscapesHTMLTags: true,
            emoji: true,
            splitAdjacentBlockquotes: true
          },
          original: {
            noHeaderId: true,
            ghCodeBlocks: false
          },
          ghost: {
            omitExtraWLInCodeBlocks: true,
            parseImgDimensions: true,
            simplifiedAutoLink: true,
            excludeTrailingPunctuationFromURLs: true,
            literalMidWordUnderscores: true,
            strikethrough: true,
            tables: true,
            tablesHeaderId: true,
            ghCodeBlocks: true,
            tasklists: true,
            smoothLivePreview: true,
            simpleLineBreaks: true,
            requireSpaceBeforeHeadingText: true,
            ghMentions: false,
            encodeEmails: true
          },
          vanilla: getDefaultOpts(true),
          allOn: allOptionsOn()
        };
        showdown2.helper = {};
        showdown2.extensions = {};
        showdown2.setOption = function(key, value) {
          "use strict";
          globalOptions[key] = value;
          return this;
        };
        showdown2.getOption = function(key) {
          "use strict";
          return globalOptions[key];
        };
        showdown2.getOptions = function() {
          "use strict";
          return globalOptions;
        };
        showdown2.resetOptions = function() {
          "use strict";
          globalOptions = getDefaultOpts(true);
        };
        showdown2.setFlavor = function(name) {
          "use strict";
          if (!flavor.hasOwnProperty(name)) {
            throw Error(name + " flavor was not found");
          }
          showdown2.resetOptions();
          var preset = flavor[name];
          setFlavor = name;
          for (var option in preset) {
            if (preset.hasOwnProperty(option)) {
              globalOptions[option] = preset[option];
            }
          }
        };
        showdown2.getFlavor = function() {
          "use strict";
          return setFlavor;
        };
        showdown2.getFlavorOptions = function(name) {
          "use strict";
          if (flavor.hasOwnProperty(name)) {
            return flavor[name];
          }
        };
        showdown2.getDefaultOptions = function(simple) {
          "use strict";
          return getDefaultOpts(simple);
        };
        showdown2.subParser = function(name, func) {
          "use strict";
          if (showdown2.helper.isString(name)) {
            if (typeof func !== "undefined") {
              parsers[name] = func;
            } else {
              if (parsers.hasOwnProperty(name)) {
                return parsers[name];
              } else {
                throw Error("SubParser named " + name + " not registered!");
              }
            }
          }
        };
        showdown2.extension = function(name, ext) {
          "use strict";
          if (!showdown2.helper.isString(name)) {
            throw Error("Extension 'name' must be a string");
          }
          name = showdown2.helper.stdExtName(name);
          if (showdown2.helper.isUndefined(ext)) {
            if (!extensions.hasOwnProperty(name)) {
              throw Error("Extension named " + name + " is not registered!");
            }
            return extensions[name];
          } else {
            if (typeof ext === "function") {
              ext = ext();
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var validExtension = validate(ext, name);
            if (validExtension.valid) {
              extensions[name] = ext;
            } else {
              throw Error(validExtension.error);
            }
          }
        };
        showdown2.getAllExtensions = function() {
          "use strict";
          return extensions;
        };
        showdown2.removeExtension = function(name) {
          "use strict";
          delete extensions[name];
        };
        showdown2.resetExtensions = function() {
          "use strict";
          extensions = {};
        };
        function validate(extension, name) {
          "use strict";
          var errMsg = name ? "Error in " + name + " extension->" : "Error in unnamed extension", ret = {
            valid: true,
            error: ""
          };
          if (!showdown2.helper.isArray(extension)) {
            extension = [extension];
          }
          for (var i3 = 0; i3 < extension.length; ++i3) {
            var baseMsg = errMsg + " sub-extension " + i3 + ": ", ext = extension[i3];
            if (typeof ext !== "object") {
              ret.valid = false;
              ret.error = baseMsg + "must be an object, but " + typeof ext + " given";
              return ret;
            }
            if (!showdown2.helper.isString(ext.type)) {
              ret.valid = false;
              ret.error = baseMsg + 'property "type" must be a string, but ' + typeof ext.type + " given";
              return ret;
            }
            var type = ext.type = ext.type.toLowerCase();
            if (type === "language") {
              type = ext.type = "lang";
            }
            if (type === "html") {
              type = ext.type = "output";
            }
            if (type !== "lang" && type !== "output" && type !== "listener") {
              ret.valid = false;
              ret.error = baseMsg + "type " + type + ' is not recognized. Valid values: "lang/language", "output/html" or "listener"';
              return ret;
            }
            if (type === "listener") {
              if (showdown2.helper.isUndefined(ext.listeners)) {
                ret.valid = false;
                ret.error = baseMsg + '. Extensions of type "listener" must have a property called "listeners"';
                return ret;
              }
            } else {
              if (showdown2.helper.isUndefined(ext.filter) && showdown2.helper.isUndefined(ext.regex)) {
                ret.valid = false;
                ret.error = baseMsg + type + ' extensions must define either a "regex" property or a "filter" method';
                return ret;
              }
            }
            if (ext.listeners) {
              if (typeof ext.listeners !== "object") {
                ret.valid = false;
                ret.error = baseMsg + '"listeners" property must be an object but ' + typeof ext.listeners + " given";
                return ret;
              }
              for (var ln in ext.listeners) {
                if (ext.listeners.hasOwnProperty(ln)) {
                  if (typeof ext.listeners[ln] !== "function") {
                    ret.valid = false;
                    ret.error = baseMsg + '"listeners" property must be an hash of [event name]: [callback]. listeners.' + ln + " must be a function but " + typeof ext.listeners[ln] + " given";
                    return ret;
                  }
                }
              }
            }
            if (ext.filter) {
              if (typeof ext.filter !== "function") {
                ret.valid = false;
                ret.error = baseMsg + '"filter" must be a function, but ' + typeof ext.filter + " given";
                return ret;
              }
            } else if (ext.regex) {
              if (showdown2.helper.isString(ext.regex)) {
                ext.regex = new RegExp(ext.regex, "g");
              }
              if (!(ext.regex instanceof RegExp)) {
                ret.valid = false;
                ret.error = baseMsg + '"regex" property must either be a string or a RegExp object, but ' + typeof ext.regex + " given";
                return ret;
              }
              if (showdown2.helper.isUndefined(ext.replace)) {
                ret.valid = false;
                ret.error = baseMsg + '"regex" extensions must implement a replace string or function';
                return ret;
              }
            }
          }
          return ret;
        }
        showdown2.validateExtension = function(ext) {
          "use strict";
          var validateExtension = validate(ext, null);
          if (!validateExtension.valid) {
            console.warn(validateExtension.error);
            return false;
          }
          return true;
        };
        if (!showdown2.hasOwnProperty("helper")) {
          showdown2.helper = {};
        }
        showdown2.helper.isString = function(a2) {
          "use strict";
          return typeof a2 === "string" || a2 instanceof String;
        };
        showdown2.helper.isFunction = function(a2) {
          "use strict";
          var getType = {};
          return a2 && getType.toString.call(a2) === "[object Function]";
        };
        showdown2.helper.isArray = function(a2) {
          "use strict";
          return Array.isArray(a2);
        };
        showdown2.helper.isUndefined = function(value) {
          "use strict";
          return typeof value === "undefined";
        };
        showdown2.helper.forEach = function(obj, callback) {
          "use strict";
          if (showdown2.helper.isUndefined(obj)) {
            throw new Error("obj param is required");
          }
          if (showdown2.helper.isUndefined(callback)) {
            throw new Error("callback param is required");
          }
          if (!showdown2.helper.isFunction(callback)) {
            throw new Error("callback param must be a function/closure");
          }
          if (typeof obj.forEach === "function") {
            obj.forEach(callback);
          } else if (showdown2.helper.isArray(obj)) {
            for (var i3 = 0; i3 < obj.length; i3++) {
              callback(obj[i3], i3, obj);
            }
          } else if (typeof obj === "object") {
            for (var prop2 in obj) {
              if (obj.hasOwnProperty(prop2)) {
                callback(obj[prop2], prop2, obj);
              }
            }
          } else {
            throw new Error("obj does not seem to be an array or an iterable object");
          }
        };
        showdown2.helper.stdExtName = function(s2) {
          "use strict";
          return s2.replace(/[_?*+\/\\.^-]/g, "").replace(/\s/g, "").toLowerCase();
        };
        function escapeCharactersCallback(wholeMatch, m1) {
          "use strict";
          var charCodeToEscape = m1.charCodeAt(0);
          return "\xA8E" + charCodeToEscape + "E";
        }
        showdown2.helper.escapeCharactersCallback = escapeCharactersCallback;
        showdown2.helper.escapeCharacters = function(text2, charsToEscape, afterBackslash) {
          "use strict";
          var regexString = "([" + charsToEscape.replace(/([\[\]\\])/g, "\\$1") + "])";
          if (afterBackslash) {
            regexString = "\\\\" + regexString;
          }
          var regex = new RegExp(regexString, "g");
          text2 = text2.replace(regex, escapeCharactersCallback);
          return text2;
        };
        showdown2.helper.unescapeHTMLEntities = function(txt) {
          "use strict";
          return txt.replace(/&quot;/g, '"').replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&amp;/g, "&");
        };
        var rgxFindMatchPos = function(str, left, right, flags) {
          "use strict";
          var f2 = flags || "", g2 = f2.indexOf("g") > -1, x2 = new RegExp(left + "|" + right, "g" + f2.replace(/g/g, "")), l2 = new RegExp(left, f2.replace(/g/g, "")), pos = [], t4, s2, m2, start2, end;
          do {
            t4 = 0;
            while (m2 = x2.exec(str)) {
              if (l2.test(m2[0])) {
                if (!t4++) {
                  s2 = x2.lastIndex;
                  start2 = s2 - m2[0].length;
                }
              } else if (t4) {
                if (!--t4) {
                  end = m2.index + m2[0].length;
                  var obj = {
                    left: { start: start2, end: s2 },
                    match: { start: s2, end: m2.index },
                    right: { start: m2.index, end },
                    wholeMatch: { start: start2, end }
                  };
                  pos.push(obj);
                  if (!g2) {
                    return pos;
                  }
                }
              }
            }
          } while (t4 && (x2.lastIndex = s2));
          return pos;
        };
        showdown2.helper.matchRecursiveRegExp = function(str, left, right, flags) {
          "use strict";
          var matchPos = rgxFindMatchPos(str, left, right, flags), results = [];
          for (var i3 = 0; i3 < matchPos.length; ++i3) {
            results.push([
              str.slice(matchPos[i3].wholeMatch.start, matchPos[i3].wholeMatch.end),
              str.slice(matchPos[i3].match.start, matchPos[i3].match.end),
              str.slice(matchPos[i3].left.start, matchPos[i3].left.end),
              str.slice(matchPos[i3].right.start, matchPos[i3].right.end)
            ]);
          }
          return results;
        };
        showdown2.helper.replaceRecursiveRegExp = function(str, replacement, left, right, flags) {
          "use strict";
          if (!showdown2.helper.isFunction(replacement)) {
            var repStr = replacement;
            replacement = function() {
              return repStr;
            };
          }
          var matchPos = rgxFindMatchPos(str, left, right, flags), finalStr = str, lng = matchPos.length;
          if (lng > 0) {
            var bits = [];
            if (matchPos[0].wholeMatch.start !== 0) {
              bits.push(str.slice(0, matchPos[0].wholeMatch.start));
            }
            for (var i3 = 0; i3 < lng; ++i3) {
              bits.push(
                replacement(
                  str.slice(matchPos[i3].wholeMatch.start, matchPos[i3].wholeMatch.end),
                  str.slice(matchPos[i3].match.start, matchPos[i3].match.end),
                  str.slice(matchPos[i3].left.start, matchPos[i3].left.end),
                  str.slice(matchPos[i3].right.start, matchPos[i3].right.end)
                )
              );
              if (i3 < lng - 1) {
                bits.push(str.slice(matchPos[i3].wholeMatch.end, matchPos[i3 + 1].wholeMatch.start));
              }
            }
            if (matchPos[lng - 1].wholeMatch.end < str.length) {
              bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));
            }
            finalStr = bits.join("");
          }
          return finalStr;
        };
        showdown2.helper.regexIndexOf = function(str, regex, fromIndex) {
          "use strict";
          if (!showdown2.helper.isString(str)) {
            throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
          }
          if (regex instanceof RegExp === false) {
            throw "InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp";
          }
          var indexOf = str.substring(fromIndex || 0).search(regex);
          return indexOf >= 0 ? indexOf + (fromIndex || 0) : indexOf;
        };
        showdown2.helper.splitAtIndex = function(str, index2) {
          "use strict";
          if (!showdown2.helper.isString(str)) {
            throw "InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string";
          }
          return [str.substring(0, index2), str.substring(index2)];
        };
        showdown2.helper.encodeEmailAddress = function(mail) {
          "use strict";
          var encode = [
            function(ch) {
              return "&#" + ch.charCodeAt(0) + ";";
            },
            function(ch) {
              return "&#x" + ch.charCodeAt(0).toString(16) + ";";
            },
            function(ch) {
              return ch;
            }
          ];
          mail = mail.replace(/./g, function(ch) {
            if (ch === "@") {
              ch = encode[Math.floor(Math.random() * 2)](ch);
            } else {
              var r4 = Math.random();
              ch = r4 > 0.9 ? encode[2](ch) : r4 > 0.45 ? encode[1](ch) : encode[0](ch);
            }
            return ch;
          });
          return mail;
        };
        showdown2.helper.padEnd = function padEnd(str, targetLength, padString) {
          "use strict";
          targetLength = targetLength >> 0;
          padString = String(padString || " ");
          if (str.length > targetLength) {
            return String(str);
          } else {
            targetLength = targetLength - str.length;
            if (targetLength > padString.length) {
              padString += padString.repeat(targetLength / padString.length);
            }
            return String(str) + padString.slice(0, targetLength);
          }
        };
        if (typeof console === "undefined") {
          console = {
            warn: function(msg) {
              "use strict";
              alert(msg);
            },
            log: function(msg) {
              "use strict";
              alert(msg);
            },
            error: function(msg) {
              "use strict";
              throw msg;
            }
          };
        }
        showdown2.helper.regexes = {
          asteriskDashAndColon: /([*_:~])/g
        };
        showdown2.helper.emojis = {
          "+1": "\u{1F44D}",
          "-1": "\u{1F44E}",
          "100": "\u{1F4AF}",
          "1234": "\u{1F522}",
          "1st_place_medal": "\u{1F947}",
          "2nd_place_medal": "\u{1F948}",
          "3rd_place_medal": "\u{1F949}",
          "8ball": "\u{1F3B1}",
          "a": "\u{1F170}\uFE0F",
          "ab": "\u{1F18E}",
          "abc": "\u{1F524}",
          "abcd": "\u{1F521}",
          "accept": "\u{1F251}",
          "aerial_tramway": "\u{1F6A1}",
          "airplane": "\u2708\uFE0F",
          "alarm_clock": "\u23F0",
          "alembic": "\u2697\uFE0F",
          "alien": "\u{1F47D}",
          "ambulance": "\u{1F691}",
          "amphora": "\u{1F3FA}",
          "anchor": "\u2693\uFE0F",
          "angel": "\u{1F47C}",
          "anger": "\u{1F4A2}",
          "angry": "\u{1F620}",
          "anguished": "\u{1F627}",
          "ant": "\u{1F41C}",
          "apple": "\u{1F34E}",
          "aquarius": "\u2652\uFE0F",
          "aries": "\u2648\uFE0F",
          "arrow_backward": "\u25C0\uFE0F",
          "arrow_double_down": "\u23EC",
          "arrow_double_up": "\u23EB",
          "arrow_down": "\u2B07\uFE0F",
          "arrow_down_small": "\u{1F53D}",
          "arrow_forward": "\u25B6\uFE0F",
          "arrow_heading_down": "\u2935\uFE0F",
          "arrow_heading_up": "\u2934\uFE0F",
          "arrow_left": "\u2B05\uFE0F",
          "arrow_lower_left": "\u2199\uFE0F",
          "arrow_lower_right": "\u2198\uFE0F",
          "arrow_right": "\u27A1\uFE0F",
          "arrow_right_hook": "\u21AA\uFE0F",
          "arrow_up": "\u2B06\uFE0F",
          "arrow_up_down": "\u2195\uFE0F",
          "arrow_up_small": "\u{1F53C}",
          "arrow_upper_left": "\u2196\uFE0F",
          "arrow_upper_right": "\u2197\uFE0F",
          "arrows_clockwise": "\u{1F503}",
          "arrows_counterclockwise": "\u{1F504}",
          "art": "\u{1F3A8}",
          "articulated_lorry": "\u{1F69B}",
          "artificial_satellite": "\u{1F6F0}",
          "astonished": "\u{1F632}",
          "athletic_shoe": "\u{1F45F}",
          "atm": "\u{1F3E7}",
          "atom_symbol": "\u269B\uFE0F",
          "avocado": "\u{1F951}",
          "b": "\u{1F171}\uFE0F",
          "baby": "\u{1F476}",
          "baby_bottle": "\u{1F37C}",
          "baby_chick": "\u{1F424}",
          "baby_symbol": "\u{1F6BC}",
          "back": "\u{1F519}",
          "bacon": "\u{1F953}",
          "badminton": "\u{1F3F8}",
          "baggage_claim": "\u{1F6C4}",
          "baguette_bread": "\u{1F956}",
          "balance_scale": "\u2696\uFE0F",
          "balloon": "\u{1F388}",
          "ballot_box": "\u{1F5F3}",
          "ballot_box_with_check": "\u2611\uFE0F",
          "bamboo": "\u{1F38D}",
          "banana": "\u{1F34C}",
          "bangbang": "\u203C\uFE0F",
          "bank": "\u{1F3E6}",
          "bar_chart": "\u{1F4CA}",
          "barber": "\u{1F488}",
          "baseball": "\u26BE\uFE0F",
          "basketball": "\u{1F3C0}",
          "basketball_man": "\u26F9\uFE0F",
          "basketball_woman": "\u26F9\uFE0F&zwj;\u2640\uFE0F",
          "bat": "\u{1F987}",
          "bath": "\u{1F6C0}",
          "bathtub": "\u{1F6C1}",
          "battery": "\u{1F50B}",
          "beach_umbrella": "\u{1F3D6}",
          "bear": "\u{1F43B}",
          "bed": "\u{1F6CF}",
          "bee": "\u{1F41D}",
          "beer": "\u{1F37A}",
          "beers": "\u{1F37B}",
          "beetle": "\u{1F41E}",
          "beginner": "\u{1F530}",
          "bell": "\u{1F514}",
          "bellhop_bell": "\u{1F6CE}",
          "bento": "\u{1F371}",
          "biking_man": "\u{1F6B4}",
          "bike": "\u{1F6B2}",
          "biking_woman": "\u{1F6B4}&zwj;\u2640\uFE0F",
          "bikini": "\u{1F459}",
          "biohazard": "\u2623\uFE0F",
          "bird": "\u{1F426}",
          "birthday": "\u{1F382}",
          "black_circle": "\u26AB\uFE0F",
          "black_flag": "\u{1F3F4}",
          "black_heart": "\u{1F5A4}",
          "black_joker": "\u{1F0CF}",
          "black_large_square": "\u2B1B\uFE0F",
          "black_medium_small_square": "\u25FE\uFE0F",
          "black_medium_square": "\u25FC\uFE0F",
          "black_nib": "\u2712\uFE0F",
          "black_small_square": "\u25AA\uFE0F",
          "black_square_button": "\u{1F532}",
          "blonde_man": "\u{1F471}",
          "blonde_woman": "\u{1F471}&zwj;\u2640\uFE0F",
          "blossom": "\u{1F33C}",
          "blowfish": "\u{1F421}",
          "blue_book": "\u{1F4D8}",
          "blue_car": "\u{1F699}",
          "blue_heart": "\u{1F499}",
          "blush": "\u{1F60A}",
          "boar": "\u{1F417}",
          "boat": "\u26F5\uFE0F",
          "bomb": "\u{1F4A3}",
          "book": "\u{1F4D6}",
          "bookmark": "\u{1F516}",
          "bookmark_tabs": "\u{1F4D1}",
          "books": "\u{1F4DA}",
          "boom": "\u{1F4A5}",
          "boot": "\u{1F462}",
          "bouquet": "\u{1F490}",
          "bowing_man": "\u{1F647}",
          "bow_and_arrow": "\u{1F3F9}",
          "bowing_woman": "\u{1F647}&zwj;\u2640\uFE0F",
          "bowling": "\u{1F3B3}",
          "boxing_glove": "\u{1F94A}",
          "boy": "\u{1F466}",
          "bread": "\u{1F35E}",
          "bride_with_veil": "\u{1F470}",
          "bridge_at_night": "\u{1F309}",
          "briefcase": "\u{1F4BC}",
          "broken_heart": "\u{1F494}",
          "bug": "\u{1F41B}",
          "building_construction": "\u{1F3D7}",
          "bulb": "\u{1F4A1}",
          "bullettrain_front": "\u{1F685}",
          "bullettrain_side": "\u{1F684}",
          "burrito": "\u{1F32F}",
          "bus": "\u{1F68C}",
          "business_suit_levitating": "\u{1F574}",
          "busstop": "\u{1F68F}",
          "bust_in_silhouette": "\u{1F464}",
          "busts_in_silhouette": "\u{1F465}",
          "butterfly": "\u{1F98B}",
          "cactus": "\u{1F335}",
          "cake": "\u{1F370}",
          "calendar": "\u{1F4C6}",
          "call_me_hand": "\u{1F919}",
          "calling": "\u{1F4F2}",
          "camel": "\u{1F42B}",
          "camera": "\u{1F4F7}",
          "camera_flash": "\u{1F4F8}",
          "camping": "\u{1F3D5}",
          "cancer": "\u264B\uFE0F",
          "candle": "\u{1F56F}",
          "candy": "\u{1F36C}",
          "canoe": "\u{1F6F6}",
          "capital_abcd": "\u{1F520}",
          "capricorn": "\u2651\uFE0F",
          "car": "\u{1F697}",
          "card_file_box": "\u{1F5C3}",
          "card_index": "\u{1F4C7}",
          "card_index_dividers": "\u{1F5C2}",
          "carousel_horse": "\u{1F3A0}",
          "carrot": "\u{1F955}",
          "cat": "\u{1F431}",
          "cat2": "\u{1F408}",
          "cd": "\u{1F4BF}",
          "chains": "\u26D3",
          "champagne": "\u{1F37E}",
          "chart": "\u{1F4B9}",
          "chart_with_downwards_trend": "\u{1F4C9}",
          "chart_with_upwards_trend": "\u{1F4C8}",
          "checkered_flag": "\u{1F3C1}",
          "cheese": "\u{1F9C0}",
          "cherries": "\u{1F352}",
          "cherry_blossom": "\u{1F338}",
          "chestnut": "\u{1F330}",
          "chicken": "\u{1F414}",
          "children_crossing": "\u{1F6B8}",
          "chipmunk": "\u{1F43F}",
          "chocolate_bar": "\u{1F36B}",
          "christmas_tree": "\u{1F384}",
          "church": "\u26EA\uFE0F",
          "cinema": "\u{1F3A6}",
          "circus_tent": "\u{1F3AA}",
          "city_sunrise": "\u{1F307}",
          "city_sunset": "\u{1F306}",
          "cityscape": "\u{1F3D9}",
          "cl": "\u{1F191}",
          "clamp": "\u{1F5DC}",
          "clap": "\u{1F44F}",
          "clapper": "\u{1F3AC}",
          "classical_building": "\u{1F3DB}",
          "clinking_glasses": "\u{1F942}",
          "clipboard": "\u{1F4CB}",
          "clock1": "\u{1F550}",
          "clock10": "\u{1F559}",
          "clock1030": "\u{1F565}",
          "clock11": "\u{1F55A}",
          "clock1130": "\u{1F566}",
          "clock12": "\u{1F55B}",
          "clock1230": "\u{1F567}",
          "clock130": "\u{1F55C}",
          "clock2": "\u{1F551}",
          "clock230": "\u{1F55D}",
          "clock3": "\u{1F552}",
          "clock330": "\u{1F55E}",
          "clock4": "\u{1F553}",
          "clock430": "\u{1F55F}",
          "clock5": "\u{1F554}",
          "clock530": "\u{1F560}",
          "clock6": "\u{1F555}",
          "clock630": "\u{1F561}",
          "clock7": "\u{1F556}",
          "clock730": "\u{1F562}",
          "clock8": "\u{1F557}",
          "clock830": "\u{1F563}",
          "clock9": "\u{1F558}",
          "clock930": "\u{1F564}",
          "closed_book": "\u{1F4D5}",
          "closed_lock_with_key": "\u{1F510}",
          "closed_umbrella": "\u{1F302}",
          "cloud": "\u2601\uFE0F",
          "cloud_with_lightning": "\u{1F329}",
          "cloud_with_lightning_and_rain": "\u26C8",
          "cloud_with_rain": "\u{1F327}",
          "cloud_with_snow": "\u{1F328}",
          "clown_face": "\u{1F921}",
          "clubs": "\u2663\uFE0F",
          "cocktail": "\u{1F378}",
          "coffee": "\u2615\uFE0F",
          "coffin": "\u26B0\uFE0F",
          "cold_sweat": "\u{1F630}",
          "comet": "\u2604\uFE0F",
          "computer": "\u{1F4BB}",
          "computer_mouse": "\u{1F5B1}",
          "confetti_ball": "\u{1F38A}",
          "confounded": "\u{1F616}",
          "confused": "\u{1F615}",
          "congratulations": "\u3297\uFE0F",
          "construction": "\u{1F6A7}",
          "construction_worker_man": "\u{1F477}",
          "construction_worker_woman": "\u{1F477}&zwj;\u2640\uFE0F",
          "control_knobs": "\u{1F39B}",
          "convenience_store": "\u{1F3EA}",
          "cookie": "\u{1F36A}",
          "cool": "\u{1F192}",
          "policeman": "\u{1F46E}",
          "copyright": "\xA9\uFE0F",
          "corn": "\u{1F33D}",
          "couch_and_lamp": "\u{1F6CB}",
          "couple": "\u{1F46B}",
          "couple_with_heart_woman_man": "\u{1F491}",
          "couple_with_heart_man_man": "\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F468}",
          "couple_with_heart_woman_woman": "\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F469}",
          "couplekiss_man_man": "\u{1F468}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F468}",
          "couplekiss_man_woman": "\u{1F48F}",
          "couplekiss_woman_woman": "\u{1F469}&zwj;\u2764\uFE0F&zwj;\u{1F48B}&zwj;\u{1F469}",
          "cow": "\u{1F42E}",
          "cow2": "\u{1F404}",
          "cowboy_hat_face": "\u{1F920}",
          "crab": "\u{1F980}",
          "crayon": "\u{1F58D}",
          "credit_card": "\u{1F4B3}",
          "crescent_moon": "\u{1F319}",
          "cricket": "\u{1F3CF}",
          "crocodile": "\u{1F40A}",
          "croissant": "\u{1F950}",
          "crossed_fingers": "\u{1F91E}",
          "crossed_flags": "\u{1F38C}",
          "crossed_swords": "\u2694\uFE0F",
          "crown": "\u{1F451}",
          "cry": "\u{1F622}",
          "crying_cat_face": "\u{1F63F}",
          "crystal_ball": "\u{1F52E}",
          "cucumber": "\u{1F952}",
          "cupid": "\u{1F498}",
          "curly_loop": "\u27B0",
          "currency_exchange": "\u{1F4B1}",
          "curry": "\u{1F35B}",
          "custard": "\u{1F36E}",
          "customs": "\u{1F6C3}",
          "cyclone": "\u{1F300}",
          "dagger": "\u{1F5E1}",
          "dancer": "\u{1F483}",
          "dancing_women": "\u{1F46F}",
          "dancing_men": "\u{1F46F}&zwj;\u2642\uFE0F",
          "dango": "\u{1F361}",
          "dark_sunglasses": "\u{1F576}",
          "dart": "\u{1F3AF}",
          "dash": "\u{1F4A8}",
          "date": "\u{1F4C5}",
          "deciduous_tree": "\u{1F333}",
          "deer": "\u{1F98C}",
          "department_store": "\u{1F3EC}",
          "derelict_house": "\u{1F3DA}",
          "desert": "\u{1F3DC}",
          "desert_island": "\u{1F3DD}",
          "desktop_computer": "\u{1F5A5}",
          "male_detective": "\u{1F575}\uFE0F",
          "diamond_shape_with_a_dot_inside": "\u{1F4A0}",
          "diamonds": "\u2666\uFE0F",
          "disappointed": "\u{1F61E}",
          "disappointed_relieved": "\u{1F625}",
          "dizzy": "\u{1F4AB}",
          "dizzy_face": "\u{1F635}",
          "do_not_litter": "\u{1F6AF}",
          "dog": "\u{1F436}",
          "dog2": "\u{1F415}",
          "dollar": "\u{1F4B5}",
          "dolls": "\u{1F38E}",
          "dolphin": "\u{1F42C}",
          "door": "\u{1F6AA}",
          "doughnut": "\u{1F369}",
          "dove": "\u{1F54A}",
          "dragon": "\u{1F409}",
          "dragon_face": "\u{1F432}",
          "dress": "\u{1F457}",
          "dromedary_camel": "\u{1F42A}",
          "drooling_face": "\u{1F924}",
          "droplet": "\u{1F4A7}",
          "drum": "\u{1F941}",
          "duck": "\u{1F986}",
          "dvd": "\u{1F4C0}",
          "e-mail": "\u{1F4E7}",
          "eagle": "\u{1F985}",
          "ear": "\u{1F442}",
          "ear_of_rice": "\u{1F33E}",
          "earth_africa": "\u{1F30D}",
          "earth_americas": "\u{1F30E}",
          "earth_asia": "\u{1F30F}",
          "egg": "\u{1F95A}",
          "eggplant": "\u{1F346}",
          "eight_pointed_black_star": "\u2734\uFE0F",
          "eight_spoked_asterisk": "\u2733\uFE0F",
          "electric_plug": "\u{1F50C}",
          "elephant": "\u{1F418}",
          "email": "\u2709\uFE0F",
          "end": "\u{1F51A}",
          "envelope_with_arrow": "\u{1F4E9}",
          "euro": "\u{1F4B6}",
          "european_castle": "\u{1F3F0}",
          "european_post_office": "\u{1F3E4}",
          "evergreen_tree": "\u{1F332}",
          "exclamation": "\u2757\uFE0F",
          "expressionless": "\u{1F611}",
          "eye": "\u{1F441}",
          "eye_speech_bubble": "\u{1F441}&zwj;\u{1F5E8}",
          "eyeglasses": "\u{1F453}",
          "eyes": "\u{1F440}",
          "face_with_head_bandage": "\u{1F915}",
          "face_with_thermometer": "\u{1F912}",
          "fist_oncoming": "\u{1F44A}",
          "factory": "\u{1F3ED}",
          "fallen_leaf": "\u{1F342}",
          "family_man_woman_boy": "\u{1F46A}",
          "family_man_boy": "\u{1F468}&zwj;\u{1F466}",
          "family_man_boy_boy": "\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_girl": "\u{1F468}&zwj;\u{1F467}",
          "family_man_girl_boy": "\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_girl_girl": "\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_man_man_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}",
          "family_man_man_boy_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_man_girl": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}",
          "family_man_man_girl_boy": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_man_girl_girl": "\u{1F468}&zwj;\u{1F468}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_man_woman_boy_boy": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_man_woman_girl": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}",
          "family_man_woman_girl_boy": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_man_woman_girl_girl": "\u{1F468}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_woman_boy": "\u{1F469}&zwj;\u{1F466}",
          "family_woman_boy_boy": "\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_woman_girl": "\u{1F469}&zwj;\u{1F467}",
          "family_woman_girl_boy": "\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_woman_girl_girl": "\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "family_woman_woman_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}",
          "family_woman_woman_boy_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F466}&zwj;\u{1F466}",
          "family_woman_woman_girl": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}",
          "family_woman_woman_girl_boy": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F466}",
          "family_woman_woman_girl_girl": "\u{1F469}&zwj;\u{1F469}&zwj;\u{1F467}&zwj;\u{1F467}",
          "fast_forward": "\u23E9",
          "fax": "\u{1F4E0}",
          "fearful": "\u{1F628}",
          "feet": "\u{1F43E}",
          "female_detective": "\u{1F575}\uFE0F&zwj;\u2640\uFE0F",
          "ferris_wheel": "\u{1F3A1}",
          "ferry": "\u26F4",
          "field_hockey": "\u{1F3D1}",
          "file_cabinet": "\u{1F5C4}",
          "file_folder": "\u{1F4C1}",
          "film_projector": "\u{1F4FD}",
          "film_strip": "\u{1F39E}",
          "fire": "\u{1F525}",
          "fire_engine": "\u{1F692}",
          "fireworks": "\u{1F386}",
          "first_quarter_moon": "\u{1F313}",
          "first_quarter_moon_with_face": "\u{1F31B}",
          "fish": "\u{1F41F}",
          "fish_cake": "\u{1F365}",
          "fishing_pole_and_fish": "\u{1F3A3}",
          "fist_raised": "\u270A",
          "fist_left": "\u{1F91B}",
          "fist_right": "\u{1F91C}",
          "flags": "\u{1F38F}",
          "flashlight": "\u{1F526}",
          "fleur_de_lis": "\u269C\uFE0F",
          "flight_arrival": "\u{1F6EC}",
          "flight_departure": "\u{1F6EB}",
          "floppy_disk": "\u{1F4BE}",
          "flower_playing_cards": "\u{1F3B4}",
          "flushed": "\u{1F633}",
          "fog": "\u{1F32B}",
          "foggy": "\u{1F301}",
          "football": "\u{1F3C8}",
          "footprints": "\u{1F463}",
          "fork_and_knife": "\u{1F374}",
          "fountain": "\u26F2\uFE0F",
          "fountain_pen": "\u{1F58B}",
          "four_leaf_clover": "\u{1F340}",
          "fox_face": "\u{1F98A}",
          "framed_picture": "\u{1F5BC}",
          "free": "\u{1F193}",
          "fried_egg": "\u{1F373}",
          "fried_shrimp": "\u{1F364}",
          "fries": "\u{1F35F}",
          "frog": "\u{1F438}",
          "frowning": "\u{1F626}",
          "frowning_face": "\u2639\uFE0F",
          "frowning_man": "\u{1F64D}&zwj;\u2642\uFE0F",
          "frowning_woman": "\u{1F64D}",
          "middle_finger": "\u{1F595}",
          "fuelpump": "\u26FD\uFE0F",
          "full_moon": "\u{1F315}",
          "full_moon_with_face": "\u{1F31D}",
          "funeral_urn": "\u26B1\uFE0F",
          "game_die": "\u{1F3B2}",
          "gear": "\u2699\uFE0F",
          "gem": "\u{1F48E}",
          "gemini": "\u264A\uFE0F",
          "ghost": "\u{1F47B}",
          "gift": "\u{1F381}",
          "gift_heart": "\u{1F49D}",
          "girl": "\u{1F467}",
          "globe_with_meridians": "\u{1F310}",
          "goal_net": "\u{1F945}",
          "goat": "\u{1F410}",
          "golf": "\u26F3\uFE0F",
          "golfing_man": "\u{1F3CC}\uFE0F",
          "golfing_woman": "\u{1F3CC}\uFE0F&zwj;\u2640\uFE0F",
          "gorilla": "\u{1F98D}",
          "grapes": "\u{1F347}",
          "green_apple": "\u{1F34F}",
          "green_book": "\u{1F4D7}",
          "green_heart": "\u{1F49A}",
          "green_salad": "\u{1F957}",
          "grey_exclamation": "\u2755",
          "grey_question": "\u2754",
          "grimacing": "\u{1F62C}",
          "grin": "\u{1F601}",
          "grinning": "\u{1F600}",
          "guardsman": "\u{1F482}",
          "guardswoman": "\u{1F482}&zwj;\u2640\uFE0F",
          "guitar": "\u{1F3B8}",
          "gun": "\u{1F52B}",
          "haircut_woman": "\u{1F487}",
          "haircut_man": "\u{1F487}&zwj;\u2642\uFE0F",
          "hamburger": "\u{1F354}",
          "hammer": "\u{1F528}",
          "hammer_and_pick": "\u2692",
          "hammer_and_wrench": "\u{1F6E0}",
          "hamster": "\u{1F439}",
          "hand": "\u270B",
          "handbag": "\u{1F45C}",
          "handshake": "\u{1F91D}",
          "hankey": "\u{1F4A9}",
          "hatched_chick": "\u{1F425}",
          "hatching_chick": "\u{1F423}",
          "headphones": "\u{1F3A7}",
          "hear_no_evil": "\u{1F649}",
          "heart": "\u2764\uFE0F",
          "heart_decoration": "\u{1F49F}",
          "heart_eyes": "\u{1F60D}",
          "heart_eyes_cat": "\u{1F63B}",
          "heartbeat": "\u{1F493}",
          "heartpulse": "\u{1F497}",
          "hearts": "\u2665\uFE0F",
          "heavy_check_mark": "\u2714\uFE0F",
          "heavy_division_sign": "\u2797",
          "heavy_dollar_sign": "\u{1F4B2}",
          "heavy_heart_exclamation": "\u2763\uFE0F",
          "heavy_minus_sign": "\u2796",
          "heavy_multiplication_x": "\u2716\uFE0F",
          "heavy_plus_sign": "\u2795",
          "helicopter": "\u{1F681}",
          "herb": "\u{1F33F}",
          "hibiscus": "\u{1F33A}",
          "high_brightness": "\u{1F506}",
          "high_heel": "\u{1F460}",
          "hocho": "\u{1F52A}",
          "hole": "\u{1F573}",
          "honey_pot": "\u{1F36F}",
          "horse": "\u{1F434}",
          "horse_racing": "\u{1F3C7}",
          "hospital": "\u{1F3E5}",
          "hot_pepper": "\u{1F336}",
          "hotdog": "\u{1F32D}",
          "hotel": "\u{1F3E8}",
          "hotsprings": "\u2668\uFE0F",
          "hourglass": "\u231B\uFE0F",
          "hourglass_flowing_sand": "\u23F3",
          "house": "\u{1F3E0}",
          "house_with_garden": "\u{1F3E1}",
          "houses": "\u{1F3D8}",
          "hugs": "\u{1F917}",
          "hushed": "\u{1F62F}",
          "ice_cream": "\u{1F368}",
          "ice_hockey": "\u{1F3D2}",
          "ice_skate": "\u26F8",
          "icecream": "\u{1F366}",
          "id": "\u{1F194}",
          "ideograph_advantage": "\u{1F250}",
          "imp": "\u{1F47F}",
          "inbox_tray": "\u{1F4E5}",
          "incoming_envelope": "\u{1F4E8}",
          "tipping_hand_woman": "\u{1F481}",
          "information_source": "\u2139\uFE0F",
          "innocent": "\u{1F607}",
          "interrobang": "\u2049\uFE0F",
          "iphone": "\u{1F4F1}",
          "izakaya_lantern": "\u{1F3EE}",
          "jack_o_lantern": "\u{1F383}",
          "japan": "\u{1F5FE}",
          "japanese_castle": "\u{1F3EF}",
          "japanese_goblin": "\u{1F47A}",
          "japanese_ogre": "\u{1F479}",
          "jeans": "\u{1F456}",
          "joy": "\u{1F602}",
          "joy_cat": "\u{1F639}",
          "joystick": "\u{1F579}",
          "kaaba": "\u{1F54B}",
          "key": "\u{1F511}",
          "keyboard": "\u2328\uFE0F",
          "keycap_ten": "\u{1F51F}",
          "kick_scooter": "\u{1F6F4}",
          "kimono": "\u{1F458}",
          "kiss": "\u{1F48B}",
          "kissing": "\u{1F617}",
          "kissing_cat": "\u{1F63D}",
          "kissing_closed_eyes": "\u{1F61A}",
          "kissing_heart": "\u{1F618}",
          "kissing_smiling_eyes": "\u{1F619}",
          "kiwi_fruit": "\u{1F95D}",
          "koala": "\u{1F428}",
          "koko": "\u{1F201}",
          "label": "\u{1F3F7}",
          "large_blue_circle": "\u{1F535}",
          "large_blue_diamond": "\u{1F537}",
          "large_orange_diamond": "\u{1F536}",
          "last_quarter_moon": "\u{1F317}",
          "last_quarter_moon_with_face": "\u{1F31C}",
          "latin_cross": "\u271D\uFE0F",
          "laughing": "\u{1F606}",
          "leaves": "\u{1F343}",
          "ledger": "\u{1F4D2}",
          "left_luggage": "\u{1F6C5}",
          "left_right_arrow": "\u2194\uFE0F",
          "leftwards_arrow_with_hook": "\u21A9\uFE0F",
          "lemon": "\u{1F34B}",
          "leo": "\u264C\uFE0F",
          "leopard": "\u{1F406}",
          "level_slider": "\u{1F39A}",
          "libra": "\u264E\uFE0F",
          "light_rail": "\u{1F688}",
          "link": "\u{1F517}",
          "lion": "\u{1F981}",
          "lips": "\u{1F444}",
          "lipstick": "\u{1F484}",
          "lizard": "\u{1F98E}",
          "lock": "\u{1F512}",
          "lock_with_ink_pen": "\u{1F50F}",
          "lollipop": "\u{1F36D}",
          "loop": "\u27BF",
          "loud_sound": "\u{1F50A}",
          "loudspeaker": "\u{1F4E2}",
          "love_hotel": "\u{1F3E9}",
          "love_letter": "\u{1F48C}",
          "low_brightness": "\u{1F505}",
          "lying_face": "\u{1F925}",
          "m": "\u24C2\uFE0F",
          "mag": "\u{1F50D}",
          "mag_right": "\u{1F50E}",
          "mahjong": "\u{1F004}\uFE0F",
          "mailbox": "\u{1F4EB}",
          "mailbox_closed": "\u{1F4EA}",
          "mailbox_with_mail": "\u{1F4EC}",
          "mailbox_with_no_mail": "\u{1F4ED}",
          "man": "\u{1F468}",
          "man_artist": "\u{1F468}&zwj;\u{1F3A8}",
          "man_astronaut": "\u{1F468}&zwj;\u{1F680}",
          "man_cartwheeling": "\u{1F938}&zwj;\u2642\uFE0F",
          "man_cook": "\u{1F468}&zwj;\u{1F373}",
          "man_dancing": "\u{1F57A}",
          "man_facepalming": "\u{1F926}&zwj;\u2642\uFE0F",
          "man_factory_worker": "\u{1F468}&zwj;\u{1F3ED}",
          "man_farmer": "\u{1F468}&zwj;\u{1F33E}",
          "man_firefighter": "\u{1F468}&zwj;\u{1F692}",
          "man_health_worker": "\u{1F468}&zwj;\u2695\uFE0F",
          "man_in_tuxedo": "\u{1F935}",
          "man_judge": "\u{1F468}&zwj;\u2696\uFE0F",
          "man_juggling": "\u{1F939}&zwj;\u2642\uFE0F",
          "man_mechanic": "\u{1F468}&zwj;\u{1F527}",
          "man_office_worker": "\u{1F468}&zwj;\u{1F4BC}",
          "man_pilot": "\u{1F468}&zwj;\u2708\uFE0F",
          "man_playing_handball": "\u{1F93E}&zwj;\u2642\uFE0F",
          "man_playing_water_polo": "\u{1F93D}&zwj;\u2642\uFE0F",
          "man_scientist": "\u{1F468}&zwj;\u{1F52C}",
          "man_shrugging": "\u{1F937}&zwj;\u2642\uFE0F",
          "man_singer": "\u{1F468}&zwj;\u{1F3A4}",
          "man_student": "\u{1F468}&zwj;\u{1F393}",
          "man_teacher": "\u{1F468}&zwj;\u{1F3EB}",
          "man_technologist": "\u{1F468}&zwj;\u{1F4BB}",
          "man_with_gua_pi_mao": "\u{1F472}",
          "man_with_turban": "\u{1F473}",
          "tangerine": "\u{1F34A}",
          "mans_shoe": "\u{1F45E}",
          "mantelpiece_clock": "\u{1F570}",
          "maple_leaf": "\u{1F341}",
          "martial_arts_uniform": "\u{1F94B}",
          "mask": "\u{1F637}",
          "massage_woman": "\u{1F486}",
          "massage_man": "\u{1F486}&zwj;\u2642\uFE0F",
          "meat_on_bone": "\u{1F356}",
          "medal_military": "\u{1F396}",
          "medal_sports": "\u{1F3C5}",
          "mega": "\u{1F4E3}",
          "melon": "\u{1F348}",
          "memo": "\u{1F4DD}",
          "men_wrestling": "\u{1F93C}&zwj;\u2642\uFE0F",
          "menorah": "\u{1F54E}",
          "mens": "\u{1F6B9}",
          "metal": "\u{1F918}",
          "metro": "\u{1F687}",
          "microphone": "\u{1F3A4}",
          "microscope": "\u{1F52C}",
          "milk_glass": "\u{1F95B}",
          "milky_way": "\u{1F30C}",
          "minibus": "\u{1F690}",
          "minidisc": "\u{1F4BD}",
          "mobile_phone_off": "\u{1F4F4}",
          "money_mouth_face": "\u{1F911}",
          "money_with_wings": "\u{1F4B8}",
          "moneybag": "\u{1F4B0}",
          "monkey": "\u{1F412}",
          "monkey_face": "\u{1F435}",
          "monorail": "\u{1F69D}",
          "moon": "\u{1F314}",
          "mortar_board": "\u{1F393}",
          "mosque": "\u{1F54C}",
          "motor_boat": "\u{1F6E5}",
          "motor_scooter": "\u{1F6F5}",
          "motorcycle": "\u{1F3CD}",
          "motorway": "\u{1F6E3}",
          "mount_fuji": "\u{1F5FB}",
          "mountain": "\u26F0",
          "mountain_biking_man": "\u{1F6B5}",
          "mountain_biking_woman": "\u{1F6B5}&zwj;\u2640\uFE0F",
          "mountain_cableway": "\u{1F6A0}",
          "mountain_railway": "\u{1F69E}",
          "mountain_snow": "\u{1F3D4}",
          "mouse": "\u{1F42D}",
          "mouse2": "\u{1F401}",
          "movie_camera": "\u{1F3A5}",
          "moyai": "\u{1F5FF}",
          "mrs_claus": "\u{1F936}",
          "muscle": "\u{1F4AA}",
          "mushroom": "\u{1F344}",
          "musical_keyboard": "\u{1F3B9}",
          "musical_note": "\u{1F3B5}",
          "musical_score": "\u{1F3BC}",
          "mute": "\u{1F507}",
          "nail_care": "\u{1F485}",
          "name_badge": "\u{1F4DB}",
          "national_park": "\u{1F3DE}",
          "nauseated_face": "\u{1F922}",
          "necktie": "\u{1F454}",
          "negative_squared_cross_mark": "\u274E",
          "nerd_face": "\u{1F913}",
          "neutral_face": "\u{1F610}",
          "new": "\u{1F195}",
          "new_moon": "\u{1F311}",
          "new_moon_with_face": "\u{1F31A}",
          "newspaper": "\u{1F4F0}",
          "newspaper_roll": "\u{1F5DE}",
          "next_track_button": "\u23ED",
          "ng": "\u{1F196}",
          "no_good_man": "\u{1F645}&zwj;\u2642\uFE0F",
          "no_good_woman": "\u{1F645}",
          "night_with_stars": "\u{1F303}",
          "no_bell": "\u{1F515}",
          "no_bicycles": "\u{1F6B3}",
          "no_entry": "\u26D4\uFE0F",
          "no_entry_sign": "\u{1F6AB}",
          "no_mobile_phones": "\u{1F4F5}",
          "no_mouth": "\u{1F636}",
          "no_pedestrians": "\u{1F6B7}",
          "no_smoking": "\u{1F6AD}",
          "non-potable_water": "\u{1F6B1}",
          "nose": "\u{1F443}",
          "notebook": "\u{1F4D3}",
          "notebook_with_decorative_cover": "\u{1F4D4}",
          "notes": "\u{1F3B6}",
          "nut_and_bolt": "\u{1F529}",
          "o": "\u2B55\uFE0F",
          "o2": "\u{1F17E}\uFE0F",
          "ocean": "\u{1F30A}",
          "octopus": "\u{1F419}",
          "oden": "\u{1F362}",
          "office": "\u{1F3E2}",
          "oil_drum": "\u{1F6E2}",
          "ok": "\u{1F197}",
          "ok_hand": "\u{1F44C}",
          "ok_man": "\u{1F646}&zwj;\u2642\uFE0F",
          "ok_woman": "\u{1F646}",
          "old_key": "\u{1F5DD}",
          "older_man": "\u{1F474}",
          "older_woman": "\u{1F475}",
          "om": "\u{1F549}",
          "on": "\u{1F51B}",
          "oncoming_automobile": "\u{1F698}",
          "oncoming_bus": "\u{1F68D}",
          "oncoming_police_car": "\u{1F694}",
          "oncoming_taxi": "\u{1F696}",
          "open_file_folder": "\u{1F4C2}",
          "open_hands": "\u{1F450}",
          "open_mouth": "\u{1F62E}",
          "open_umbrella": "\u2602\uFE0F",
          "ophiuchus": "\u26CE",
          "orange_book": "\u{1F4D9}",
          "orthodox_cross": "\u2626\uFE0F",
          "outbox_tray": "\u{1F4E4}",
          "owl": "\u{1F989}",
          "ox": "\u{1F402}",
          "package": "\u{1F4E6}",
          "page_facing_up": "\u{1F4C4}",
          "page_with_curl": "\u{1F4C3}",
          "pager": "\u{1F4DF}",
          "paintbrush": "\u{1F58C}",
          "palm_tree": "\u{1F334}",
          "pancakes": "\u{1F95E}",
          "panda_face": "\u{1F43C}",
          "paperclip": "\u{1F4CE}",
          "paperclips": "\u{1F587}",
          "parasol_on_ground": "\u26F1",
          "parking": "\u{1F17F}\uFE0F",
          "part_alternation_mark": "\u303D\uFE0F",
          "partly_sunny": "\u26C5\uFE0F",
          "passenger_ship": "\u{1F6F3}",
          "passport_control": "\u{1F6C2}",
          "pause_button": "\u23F8",
          "peace_symbol": "\u262E\uFE0F",
          "peach": "\u{1F351}",
          "peanuts": "\u{1F95C}",
          "pear": "\u{1F350}",
          "pen": "\u{1F58A}",
          "pencil2": "\u270F\uFE0F",
          "penguin": "\u{1F427}",
          "pensive": "\u{1F614}",
          "performing_arts": "\u{1F3AD}",
          "persevere": "\u{1F623}",
          "person_fencing": "\u{1F93A}",
          "pouting_woman": "\u{1F64E}",
          "phone": "\u260E\uFE0F",
          "pick": "\u26CF",
          "pig": "\u{1F437}",
          "pig2": "\u{1F416}",
          "pig_nose": "\u{1F43D}",
          "pill": "\u{1F48A}",
          "pineapple": "\u{1F34D}",
          "ping_pong": "\u{1F3D3}",
          "pisces": "\u2653\uFE0F",
          "pizza": "\u{1F355}",
          "place_of_worship": "\u{1F6D0}",
          "plate_with_cutlery": "\u{1F37D}",
          "play_or_pause_button": "\u23EF",
          "point_down": "\u{1F447}",
          "point_left": "\u{1F448}",
          "point_right": "\u{1F449}",
          "point_up": "\u261D\uFE0F",
          "point_up_2": "\u{1F446}",
          "police_car": "\u{1F693}",
          "policewoman": "\u{1F46E}&zwj;\u2640\uFE0F",
          "poodle": "\u{1F429}",
          "popcorn": "\u{1F37F}",
          "post_office": "\u{1F3E3}",
          "postal_horn": "\u{1F4EF}",
          "postbox": "\u{1F4EE}",
          "potable_water": "\u{1F6B0}",
          "potato": "\u{1F954}",
          "pouch": "\u{1F45D}",
          "poultry_leg": "\u{1F357}",
          "pound": "\u{1F4B7}",
          "rage": "\u{1F621}",
          "pouting_cat": "\u{1F63E}",
          "pouting_man": "\u{1F64E}&zwj;\u2642\uFE0F",
          "pray": "\u{1F64F}",
          "prayer_beads": "\u{1F4FF}",
          "pregnant_woman": "\u{1F930}",
          "previous_track_button": "\u23EE",
          "prince": "\u{1F934}",
          "princess": "\u{1F478}",
          "printer": "\u{1F5A8}",
          "purple_heart": "\u{1F49C}",
          "purse": "\u{1F45B}",
          "pushpin": "\u{1F4CC}",
          "put_litter_in_its_place": "\u{1F6AE}",
          "question": "\u2753",
          "rabbit": "\u{1F430}",
          "rabbit2": "\u{1F407}",
          "racehorse": "\u{1F40E}",
          "racing_car": "\u{1F3CE}",
          "radio": "\u{1F4FB}",
          "radio_button": "\u{1F518}",
          "radioactive": "\u2622\uFE0F",
          "railway_car": "\u{1F683}",
          "railway_track": "\u{1F6E4}",
          "rainbow": "\u{1F308}",
          "rainbow_flag": "\u{1F3F3}\uFE0F&zwj;\u{1F308}",
          "raised_back_of_hand": "\u{1F91A}",
          "raised_hand_with_fingers_splayed": "\u{1F590}",
          "raised_hands": "\u{1F64C}",
          "raising_hand_woman": "\u{1F64B}",
          "raising_hand_man": "\u{1F64B}&zwj;\u2642\uFE0F",
          "ram": "\u{1F40F}",
          "ramen": "\u{1F35C}",
          "rat": "\u{1F400}",
          "record_button": "\u23FA",
          "recycle": "\u267B\uFE0F",
          "red_circle": "\u{1F534}",
          "registered": "\xAE\uFE0F",
          "relaxed": "\u263A\uFE0F",
          "relieved": "\u{1F60C}",
          "reminder_ribbon": "\u{1F397}",
          "repeat": "\u{1F501}",
          "repeat_one": "\u{1F502}",
          "rescue_worker_helmet": "\u26D1",
          "restroom": "\u{1F6BB}",
          "revolving_hearts": "\u{1F49E}",
          "rewind": "\u23EA",
          "rhinoceros": "\u{1F98F}",
          "ribbon": "\u{1F380}",
          "rice": "\u{1F35A}",
          "rice_ball": "\u{1F359}",
          "rice_cracker": "\u{1F358}",
          "rice_scene": "\u{1F391}",
          "right_anger_bubble": "\u{1F5EF}",
          "ring": "\u{1F48D}",
          "robot": "\u{1F916}",
          "rocket": "\u{1F680}",
          "rofl": "\u{1F923}",
          "roll_eyes": "\u{1F644}",
          "roller_coaster": "\u{1F3A2}",
          "rooster": "\u{1F413}",
          "rose": "\u{1F339}",
          "rosette": "\u{1F3F5}",
          "rotating_light": "\u{1F6A8}",
          "round_pushpin": "\u{1F4CD}",
          "rowing_man": "\u{1F6A3}",
          "rowing_woman": "\u{1F6A3}&zwj;\u2640\uFE0F",
          "rugby_football": "\u{1F3C9}",
          "running_man": "\u{1F3C3}",
          "running_shirt_with_sash": "\u{1F3BD}",
          "running_woman": "\u{1F3C3}&zwj;\u2640\uFE0F",
          "sa": "\u{1F202}\uFE0F",
          "sagittarius": "\u2650\uFE0F",
          "sake": "\u{1F376}",
          "sandal": "\u{1F461}",
          "santa": "\u{1F385}",
          "satellite": "\u{1F4E1}",
          "saxophone": "\u{1F3B7}",
          "school": "\u{1F3EB}",
          "school_satchel": "\u{1F392}",
          "scissors": "\u2702\uFE0F",
          "scorpion": "\u{1F982}",
          "scorpius": "\u264F\uFE0F",
          "scream": "\u{1F631}",
          "scream_cat": "\u{1F640}",
          "scroll": "\u{1F4DC}",
          "seat": "\u{1F4BA}",
          "secret": "\u3299\uFE0F",
          "see_no_evil": "\u{1F648}",
          "seedling": "\u{1F331}",
          "selfie": "\u{1F933}",
          "shallow_pan_of_food": "\u{1F958}",
          "shamrock": "\u2618\uFE0F",
          "shark": "\u{1F988}",
          "shaved_ice": "\u{1F367}",
          "sheep": "\u{1F411}",
          "shell": "\u{1F41A}",
          "shield": "\u{1F6E1}",
          "shinto_shrine": "\u26E9",
          "ship": "\u{1F6A2}",
          "shirt": "\u{1F455}",
          "shopping": "\u{1F6CD}",
          "shopping_cart": "\u{1F6D2}",
          "shower": "\u{1F6BF}",
          "shrimp": "\u{1F990}",
          "signal_strength": "\u{1F4F6}",
          "six_pointed_star": "\u{1F52F}",
          "ski": "\u{1F3BF}",
          "skier": "\u26F7",
          "skull": "\u{1F480}",
          "skull_and_crossbones": "\u2620\uFE0F",
          "sleeping": "\u{1F634}",
          "sleeping_bed": "\u{1F6CC}",
          "sleepy": "\u{1F62A}",
          "slightly_frowning_face": "\u{1F641}",
          "slightly_smiling_face": "\u{1F642}",
          "slot_machine": "\u{1F3B0}",
          "small_airplane": "\u{1F6E9}",
          "small_blue_diamond": "\u{1F539}",
          "small_orange_diamond": "\u{1F538}",
          "small_red_triangle": "\u{1F53A}",
          "small_red_triangle_down": "\u{1F53B}",
          "smile": "\u{1F604}",
          "smile_cat": "\u{1F638}",
          "smiley": "\u{1F603}",
          "smiley_cat": "\u{1F63A}",
          "smiling_imp": "\u{1F608}",
          "smirk": "\u{1F60F}",
          "smirk_cat": "\u{1F63C}",
          "smoking": "\u{1F6AC}",
          "snail": "\u{1F40C}",
          "snake": "\u{1F40D}",
          "sneezing_face": "\u{1F927}",
          "snowboarder": "\u{1F3C2}",
          "snowflake": "\u2744\uFE0F",
          "snowman": "\u26C4\uFE0F",
          "snowman_with_snow": "\u2603\uFE0F",
          "sob": "\u{1F62D}",
          "soccer": "\u26BD\uFE0F",
          "soon": "\u{1F51C}",
          "sos": "\u{1F198}",
          "sound": "\u{1F509}",
          "space_invader": "\u{1F47E}",
          "spades": "\u2660\uFE0F",
          "spaghetti": "\u{1F35D}",
          "sparkle": "\u2747\uFE0F",
          "sparkler": "\u{1F387}",
          "sparkles": "\u2728",
          "sparkling_heart": "\u{1F496}",
          "speak_no_evil": "\u{1F64A}",
          "speaker": "\u{1F508}",
          "speaking_head": "\u{1F5E3}",
          "speech_balloon": "\u{1F4AC}",
          "speedboat": "\u{1F6A4}",
          "spider": "\u{1F577}",
          "spider_web": "\u{1F578}",
          "spiral_calendar": "\u{1F5D3}",
          "spiral_notepad": "\u{1F5D2}",
          "spoon": "\u{1F944}",
          "squid": "\u{1F991}",
          "stadium": "\u{1F3DF}",
          "star": "\u2B50\uFE0F",
          "star2": "\u{1F31F}",
          "star_and_crescent": "\u262A\uFE0F",
          "star_of_david": "\u2721\uFE0F",
          "stars": "\u{1F320}",
          "station": "\u{1F689}",
          "statue_of_liberty": "\u{1F5FD}",
          "steam_locomotive": "\u{1F682}",
          "stew": "\u{1F372}",
          "stop_button": "\u23F9",
          "stop_sign": "\u{1F6D1}",
          "stopwatch": "\u23F1",
          "straight_ruler": "\u{1F4CF}",
          "strawberry": "\u{1F353}",
          "stuck_out_tongue": "\u{1F61B}",
          "stuck_out_tongue_closed_eyes": "\u{1F61D}",
          "stuck_out_tongue_winking_eye": "\u{1F61C}",
          "studio_microphone": "\u{1F399}",
          "stuffed_flatbread": "\u{1F959}",
          "sun_behind_large_cloud": "\u{1F325}",
          "sun_behind_rain_cloud": "\u{1F326}",
          "sun_behind_small_cloud": "\u{1F324}",
          "sun_with_face": "\u{1F31E}",
          "sunflower": "\u{1F33B}",
          "sunglasses": "\u{1F60E}",
          "sunny": "\u2600\uFE0F",
          "sunrise": "\u{1F305}",
          "sunrise_over_mountains": "\u{1F304}",
          "surfing_man": "\u{1F3C4}",
          "surfing_woman": "\u{1F3C4}&zwj;\u2640\uFE0F",
          "sushi": "\u{1F363}",
          "suspension_railway": "\u{1F69F}",
          "sweat": "\u{1F613}",
          "sweat_drops": "\u{1F4A6}",
          "sweat_smile": "\u{1F605}",
          "sweet_potato": "\u{1F360}",
          "swimming_man": "\u{1F3CA}",
          "swimming_woman": "\u{1F3CA}&zwj;\u2640\uFE0F",
          "symbols": "\u{1F523}",
          "synagogue": "\u{1F54D}",
          "syringe": "\u{1F489}",
          "taco": "\u{1F32E}",
          "tada": "\u{1F389}",
          "tanabata_tree": "\u{1F38B}",
          "taurus": "\u2649\uFE0F",
          "taxi": "\u{1F695}",
          "tea": "\u{1F375}",
          "telephone_receiver": "\u{1F4DE}",
          "telescope": "\u{1F52D}",
          "tennis": "\u{1F3BE}",
          "tent": "\u26FA\uFE0F",
          "thermometer": "\u{1F321}",
          "thinking": "\u{1F914}",
          "thought_balloon": "\u{1F4AD}",
          "ticket": "\u{1F3AB}",
          "tickets": "\u{1F39F}",
          "tiger": "\u{1F42F}",
          "tiger2": "\u{1F405}",
          "timer_clock": "\u23F2",
          "tipping_hand_man": "\u{1F481}&zwj;\u2642\uFE0F",
          "tired_face": "\u{1F62B}",
          "tm": "\u2122\uFE0F",
          "toilet": "\u{1F6BD}",
          "tokyo_tower": "\u{1F5FC}",
          "tomato": "\u{1F345}",
          "tongue": "\u{1F445}",
          "top": "\u{1F51D}",
          "tophat": "\u{1F3A9}",
          "tornado": "\u{1F32A}",
          "trackball": "\u{1F5B2}",
          "tractor": "\u{1F69C}",
          "traffic_light": "\u{1F6A5}",
          "train": "\u{1F68B}",
          "train2": "\u{1F686}",
          "tram": "\u{1F68A}",
          "triangular_flag_on_post": "\u{1F6A9}",
          "triangular_ruler": "\u{1F4D0}",
          "trident": "\u{1F531}",
          "triumph": "\u{1F624}",
          "trolleybus": "\u{1F68E}",
          "trophy": "\u{1F3C6}",
          "tropical_drink": "\u{1F379}",
          "tropical_fish": "\u{1F420}",
          "truck": "\u{1F69A}",
          "trumpet": "\u{1F3BA}",
          "tulip": "\u{1F337}",
          "tumbler_glass": "\u{1F943}",
          "turkey": "\u{1F983}",
          "turtle": "\u{1F422}",
          "tv": "\u{1F4FA}",
          "twisted_rightwards_arrows": "\u{1F500}",
          "two_hearts": "\u{1F495}",
          "two_men_holding_hands": "\u{1F46C}",
          "two_women_holding_hands": "\u{1F46D}",
          "u5272": "\u{1F239}",
          "u5408": "\u{1F234}",
          "u55b6": "\u{1F23A}",
          "u6307": "\u{1F22F}\uFE0F",
          "u6708": "\u{1F237}\uFE0F",
          "u6709": "\u{1F236}",
          "u6e80": "\u{1F235}",
          "u7121": "\u{1F21A}\uFE0F",
          "u7533": "\u{1F238}",
          "u7981": "\u{1F232}",
          "u7a7a": "\u{1F233}",
          "umbrella": "\u2614\uFE0F",
          "unamused": "\u{1F612}",
          "underage": "\u{1F51E}",
          "unicorn": "\u{1F984}",
          "unlock": "\u{1F513}",
          "up": "\u{1F199}",
          "upside_down_face": "\u{1F643}",
          "v": "\u270C\uFE0F",
          "vertical_traffic_light": "\u{1F6A6}",
          "vhs": "\u{1F4FC}",
          "vibration_mode": "\u{1F4F3}",
          "video_camera": "\u{1F4F9}",
          "video_game": "\u{1F3AE}",
          "violin": "\u{1F3BB}",
          "virgo": "\u264D\uFE0F",
          "volcano": "\u{1F30B}",
          "volleyball": "\u{1F3D0}",
          "vs": "\u{1F19A}",
          "vulcan_salute": "\u{1F596}",
          "walking_man": "\u{1F6B6}",
          "walking_woman": "\u{1F6B6}&zwj;\u2640\uFE0F",
          "waning_crescent_moon": "\u{1F318}",
          "waning_gibbous_moon": "\u{1F316}",
          "warning": "\u26A0\uFE0F",
          "wastebasket": "\u{1F5D1}",
          "watch": "\u231A\uFE0F",
          "water_buffalo": "\u{1F403}",
          "watermelon": "\u{1F349}",
          "wave": "\u{1F44B}",
          "wavy_dash": "\u3030\uFE0F",
          "waxing_crescent_moon": "\u{1F312}",
          "wc": "\u{1F6BE}",
          "weary": "\u{1F629}",
          "wedding": "\u{1F492}",
          "weight_lifting_man": "\u{1F3CB}\uFE0F",
          "weight_lifting_woman": "\u{1F3CB}\uFE0F&zwj;\u2640\uFE0F",
          "whale": "\u{1F433}",
          "whale2": "\u{1F40B}",
          "wheel_of_dharma": "\u2638\uFE0F",
          "wheelchair": "\u267F\uFE0F",
          "white_check_mark": "\u2705",
          "white_circle": "\u26AA\uFE0F",
          "white_flag": "\u{1F3F3}\uFE0F",
          "white_flower": "\u{1F4AE}",
          "white_large_square": "\u2B1C\uFE0F",
          "white_medium_small_square": "\u25FD\uFE0F",
          "white_medium_square": "\u25FB\uFE0F",
          "white_small_square": "\u25AB\uFE0F",
          "white_square_button": "\u{1F533}",
          "wilted_flower": "\u{1F940}",
          "wind_chime": "\u{1F390}",
          "wind_face": "\u{1F32C}",
          "wine_glass": "\u{1F377}",
          "wink": "\u{1F609}",
          "wolf": "\u{1F43A}",
          "woman": "\u{1F469}",
          "woman_artist": "\u{1F469}&zwj;\u{1F3A8}",
          "woman_astronaut": "\u{1F469}&zwj;\u{1F680}",
          "woman_cartwheeling": "\u{1F938}&zwj;\u2640\uFE0F",
          "woman_cook": "\u{1F469}&zwj;\u{1F373}",
          "woman_facepalming": "\u{1F926}&zwj;\u2640\uFE0F",
          "woman_factory_worker": "\u{1F469}&zwj;\u{1F3ED}",
          "woman_farmer": "\u{1F469}&zwj;\u{1F33E}",
          "woman_firefighter": "\u{1F469}&zwj;\u{1F692}",
          "woman_health_worker": "\u{1F469}&zwj;\u2695\uFE0F",
          "woman_judge": "\u{1F469}&zwj;\u2696\uFE0F",
          "woman_juggling": "\u{1F939}&zwj;\u2640\uFE0F",
          "woman_mechanic": "\u{1F469}&zwj;\u{1F527}",
          "woman_office_worker": "\u{1F469}&zwj;\u{1F4BC}",
          "woman_pilot": "\u{1F469}&zwj;\u2708\uFE0F",
          "woman_playing_handball": "\u{1F93E}&zwj;\u2640\uFE0F",
          "woman_playing_water_polo": "\u{1F93D}&zwj;\u2640\uFE0F",
          "woman_scientist": "\u{1F469}&zwj;\u{1F52C}",
          "woman_shrugging": "\u{1F937}&zwj;\u2640\uFE0F",
          "woman_singer": "\u{1F469}&zwj;\u{1F3A4}",
          "woman_student": "\u{1F469}&zwj;\u{1F393}",
          "woman_teacher": "\u{1F469}&zwj;\u{1F3EB}",
          "woman_technologist": "\u{1F469}&zwj;\u{1F4BB}",
          "woman_with_turban": "\u{1F473}&zwj;\u2640\uFE0F",
          "womans_clothes": "\u{1F45A}",
          "womans_hat": "\u{1F452}",
          "women_wrestling": "\u{1F93C}&zwj;\u2640\uFE0F",
          "womens": "\u{1F6BA}",
          "world_map": "\u{1F5FA}",
          "worried": "\u{1F61F}",
          "wrench": "\u{1F527}",
          "writing_hand": "\u270D\uFE0F",
          "x": "\u274C",
          "yellow_heart": "\u{1F49B}",
          "yen": "\u{1F4B4}",
          "yin_yang": "\u262F\uFE0F",
          "yum": "\u{1F60B}",
          "zap": "\u26A1\uFE0F",
          "zipper_mouth_face": "\u{1F910}",
          "zzz": "\u{1F4A4}",
          /* special emojis :P */
          "octocat": '<img alt=":octocat:" height="20" width="20" align="absmiddle" src="https://assets-cdn.github.com/images/icons/emoji/octocat.png">',
          "showdown": `<span style="font-family: 'Anonymous Pro', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;">S</span>`
        };
        showdown2.Converter = function(converterOptions) {
          "use strict";
          var options = {}, langExtensions = [], outputModifiers = [], listeners = {}, setConvFlavor = setFlavor, metadata = {
            parsed: {},
            raw: "",
            format: ""
          };
          _constructor();
          function _constructor() {
            converterOptions = converterOptions || {};
            for (var gOpt in globalOptions) {
              if (globalOptions.hasOwnProperty(gOpt)) {
                options[gOpt] = globalOptions[gOpt];
              }
            }
            if (typeof converterOptions === "object") {
              for (var opt in converterOptions) {
                if (converterOptions.hasOwnProperty(opt)) {
                  options[opt] = converterOptions[opt];
                }
              }
            } else {
              throw Error("Converter expects the passed parameter to be an object, but " + typeof converterOptions + " was passed instead.");
            }
            if (options.extensions) {
              showdown2.helper.forEach(options.extensions, _parseExtension);
            }
          }
          function _parseExtension(ext, name) {
            name = name || null;
            if (showdown2.helper.isString(ext)) {
              ext = showdown2.helper.stdExtName(ext);
              name = ext;
              if (showdown2.extensions[ext]) {
                console.warn("DEPRECATION WARNING: " + ext + " is an old extension that uses a deprecated loading method.Please inform the developer that the extension should be updated!");
                legacyExtensionLoading(showdown2.extensions[ext], ext);
                return;
              } else if (!showdown2.helper.isUndefined(extensions[ext])) {
                ext = extensions[ext];
              } else {
                throw Error('Extension "' + ext + '" could not be loaded. It was either not found or is not a valid extension.');
              }
            }
            if (typeof ext === "function") {
              ext = ext();
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var validExt = validate(ext, name);
            if (!validExt.valid) {
              throw Error(validExt.error);
            }
            for (var i3 = 0; i3 < ext.length; ++i3) {
              switch (ext[i3].type) {
                case "lang":
                  langExtensions.push(ext[i3]);
                  break;
                case "output":
                  outputModifiers.push(ext[i3]);
                  break;
              }
              if (ext[i3].hasOwnProperty("listeners")) {
                for (var ln in ext[i3].listeners) {
                  if (ext[i3].listeners.hasOwnProperty(ln)) {
                    listen(ln, ext[i3].listeners[ln]);
                  }
                }
              }
            }
          }
          function legacyExtensionLoading(ext, name) {
            if (typeof ext === "function") {
              ext = ext(new showdown2.Converter());
            }
            if (!showdown2.helper.isArray(ext)) {
              ext = [ext];
            }
            var valid = validate(ext, name);
            if (!valid.valid) {
              throw Error(valid.error);
            }
            for (var i3 = 0; i3 < ext.length; ++i3) {
              switch (ext[i3].type) {
                case "lang":
                  langExtensions.push(ext[i3]);
                  break;
                case "output":
                  outputModifiers.push(ext[i3]);
                  break;
                default:
                  throw Error("Extension loader error: Type unrecognized!!!");
              }
            }
          }
          function listen(name, callback) {
            if (!showdown2.helper.isString(name)) {
              throw Error("Invalid argument in converter.listen() method: name must be a string, but " + typeof name + " given");
            }
            if (typeof callback !== "function") {
              throw Error("Invalid argument in converter.listen() method: callback must be a function, but " + typeof callback + " given");
            }
            if (!listeners.hasOwnProperty(name)) {
              listeners[name] = [];
            }
            listeners[name].push(callback);
          }
          function rTrimInputText(text2) {
            var rsp = text2.match(/^\s*/)[0].length, rgx = new RegExp("^\\s{0," + rsp + "}", "gm");
            return text2.replace(rgx, "");
          }
          this._dispatch = function dispatch2(evtName, text2, options2, globals) {
            if (listeners.hasOwnProperty(evtName)) {
              for (var ei = 0; ei < listeners[evtName].length; ++ei) {
                var nText = listeners[evtName][ei](evtName, text2, this, options2, globals);
                if (nText && typeof nText !== "undefined") {
                  text2 = nText;
                }
              }
            }
            return text2;
          };
          this.listen = function(name, callback) {
            listen(name, callback);
            return this;
          };
          this.makeHtml = function(text2) {
            if (!text2) {
              return text2;
            }
            var globals = {
              gHtmlBlocks: [],
              gHtmlMdBlocks: [],
              gHtmlSpans: [],
              gUrls: {},
              gTitles: {},
              gDimensions: {},
              gListLevel: 0,
              hashLinkCounts: {},
              langExtensions,
              outputModifiers,
              converter: this,
              ghCodeBlocks: [],
              metadata: {
                parsed: {},
                raw: "",
                format: ""
              }
            };
            text2 = text2.replace(/¨/g, "\xA8T");
            text2 = text2.replace(/\$/g, "\xA8D");
            text2 = text2.replace(/\r\n/g, "\n");
            text2 = text2.replace(/\r/g, "\n");
            text2 = text2.replace(/\u00A0/g, "&nbsp;");
            if (options.smartIndentationFix) {
              text2 = rTrimInputText(text2);
            }
            text2 = "\n\n" + text2 + "\n\n";
            text2 = showdown2.subParser("detab")(text2, options, globals);
            text2 = text2.replace(/^[ \t]+$/mg, "");
            showdown2.helper.forEach(langExtensions, function(ext) {
              text2 = showdown2.subParser("runExtension")(ext, text2, options, globals);
            });
            text2 = showdown2.subParser("metadata")(text2, options, globals);
            text2 = showdown2.subParser("hashPreCodeTags")(text2, options, globals);
            text2 = showdown2.subParser("githubCodeBlocks")(text2, options, globals);
            text2 = showdown2.subParser("hashHTMLBlocks")(text2, options, globals);
            text2 = showdown2.subParser("hashCodeTags")(text2, options, globals);
            text2 = showdown2.subParser("stripLinkDefinitions")(text2, options, globals);
            text2 = showdown2.subParser("blockGamut")(text2, options, globals);
            text2 = showdown2.subParser("unhashHTMLSpans")(text2, options, globals);
            text2 = showdown2.subParser("unescapeSpecialChars")(text2, options, globals);
            text2 = text2.replace(/¨D/g, "$$");
            text2 = text2.replace(/¨T/g, "\xA8");
            text2 = showdown2.subParser("completeHTMLDocument")(text2, options, globals);
            showdown2.helper.forEach(outputModifiers, function(ext) {
              text2 = showdown2.subParser("runExtension")(ext, text2, options, globals);
            });
            metadata = globals.metadata;
            return text2;
          };
          this.makeMarkdown = this.makeMd = function(src, HTMLParser) {
            src = src.replace(/\r\n/g, "\n");
            src = src.replace(/\r/g, "\n");
            src = src.replace(/>[ \t]+</, ">\xA8NBSP;<");
            if (!HTMLParser) {
              if (window && window.document) {
                HTMLParser = window.document;
              } else {
                throw new Error("HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM");
              }
            }
            var doc = HTMLParser.createElement("div");
            doc.innerHTML = src;
            var globals = {
              preList: substitutePreCodeTags(doc)
            };
            clean(doc);
            var nodes = doc.childNodes, mdDoc = "";
            for (var i3 = 0; i3 < nodes.length; i3++) {
              mdDoc += showdown2.subParser("makeMarkdown.node")(nodes[i3], globals);
            }
            function clean(node2) {
              for (var n3 = 0; n3 < node2.childNodes.length; ++n3) {
                var child = node2.childNodes[n3];
                if (child.nodeType === 3) {
                  if (!/\S/.test(child.nodeValue)) {
                    node2.removeChild(child);
                    --n3;
                  } else {
                    child.nodeValue = child.nodeValue.split("\n").join(" ");
                    child.nodeValue = child.nodeValue.replace(/(\s)+/g, "$1");
                  }
                } else if (child.nodeType === 1) {
                  clean(child);
                }
              }
            }
            function substitutePreCodeTags(doc2) {
              var pres = doc2.querySelectorAll("pre"), presPH = [];
              for (var i4 = 0; i4 < pres.length; ++i4) {
                if (pres[i4].childElementCount === 1 && pres[i4].firstChild.tagName.toLowerCase() === "code") {
                  var content = pres[i4].firstChild.innerHTML.trim(), language = pres[i4].firstChild.getAttribute("data-language") || "";
                  if (language === "") {
                    var classes = pres[i4].firstChild.className.split(" ");
                    for (var c6 = 0; c6 < classes.length; ++c6) {
                      var matches2 = classes[c6].match(/^language-(.+)$/);
                      if (matches2 !== null) {
                        language = matches2[1];
                        break;
                      }
                    }
                  }
                  content = showdown2.helper.unescapeHTMLEntities(content);
                  presPH.push(content);
                  pres[i4].outerHTML = '<precode language="' + language + '" precodenum="' + i4.toString() + '"></precode>';
                } else {
                  presPH.push(pres[i4].innerHTML);
                  pres[i4].innerHTML = "";
                  pres[i4].setAttribute("prenum", i4.toString());
                }
              }
              return presPH;
            }
            return mdDoc;
          };
          this.setOption = function(key, value) {
            options[key] = value;
          };
          this.getOption = function(key) {
            return options[key];
          };
          this.getOptions = function() {
            return options;
          };
          this.addExtension = function(extension, name) {
            name = name || null;
            _parseExtension(extension, name);
          };
          this.useExtension = function(extensionName) {
            _parseExtension(extensionName);
          };
          this.setFlavor = function(name) {
            if (!flavor.hasOwnProperty(name)) {
              throw Error(name + " flavor was not found");
            }
            var preset = flavor[name];
            setConvFlavor = name;
            for (var option in preset) {
              if (preset.hasOwnProperty(option)) {
                options[option] = preset[option];
              }
            }
          };
          this.getFlavor = function() {
            return setConvFlavor;
          };
          this.removeExtension = function(extension) {
            if (!showdown2.helper.isArray(extension)) {
              extension = [extension];
            }
            for (var a2 = 0; a2 < extension.length; ++a2) {
              var ext = extension[a2];
              for (var i3 = 0; i3 < langExtensions.length; ++i3) {
                if (langExtensions[i3] === ext) {
                  langExtensions[i3].splice(i3, 1);
                }
              }
              for (var ii = 0; ii < outputModifiers.length; ++i3) {
                if (outputModifiers[ii] === ext) {
                  outputModifiers[ii].splice(i3, 1);
                }
              }
            }
          };
          this.getAllExtensions = function() {
            return {
              language: langExtensions,
              output: outputModifiers
            };
          };
          this.getMetadata = function(raw) {
            if (raw) {
              return metadata.raw;
            } else {
              return metadata.parsed;
            }
          };
          this.getMetadataFormat = function() {
            return metadata.format;
          };
          this._setMetadataPair = function(key, value) {
            metadata.parsed[key] = value;
          };
          this._setMetadataFormat = function(format) {
            metadata.format = format;
          };
          this._setMetadataRaw = function(raw) {
            metadata.raw = raw;
          };
        };
        showdown2.subParser("anchors", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("anchors.before", text2, options, globals);
          var writeAnchorTag = function(wholeMatch, linkText, linkId, url, m5, m6, title) {
            if (showdown2.helper.isUndefined(title)) {
              title = "";
            }
            linkId = linkId.toLowerCase();
            if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
              url = "";
            } else if (!url) {
              if (!linkId) {
                linkId = linkText.toLowerCase().replace(/ ?\n/g, " ");
              }
              url = "#" + linkId;
              if (!showdown2.helper.isUndefined(globals.gUrls[linkId])) {
                url = globals.gUrls[linkId];
                if (!showdown2.helper.isUndefined(globals.gTitles[linkId])) {
                  title = globals.gTitles[linkId];
                }
              } else {
                return wholeMatch;
              }
            }
            url = url.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var result = '<a href="' + url + '"';
            if (title !== "" && title !== null) {
              title = title.replace(/"/g, "&quot;");
              title = title.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
              result += ' title="' + title + '"';
            }
            if (options.openLinksInNewWindow && !/^#/.test(url)) {
              result += ' rel="noopener noreferrer" target="\xA8E95Eblank"';
            }
            result += ">" + linkText + "</a>";
            return result;
          };
          text2 = text2.replace(/\[((?:\[[^\]]*]|[^\[\]])*)] ?(?:\n *)?\[(.*?)]()()()()/g, writeAnchorTag);
          text2 = text2.replace(
            /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<([^>]*)>(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
            writeAnchorTag
          );
          text2 = text2.replace(
            /\[((?:\[[^\]]*]|[^\[\]])*)]()[ \t]*\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?:[ \t]*((["'])([^"]*?)\5))?[ \t]?\)/g,
            writeAnchorTag
          );
          text2 = text2.replace(/\[([^\[\]]+)]()()()()()/g, writeAnchorTag);
          if (options.ghMentions) {
            text2 = text2.replace(/(^|\s)(\\)?(@([a-z\d]+(?:[a-z\d.-]+?[a-z\d]+)*))/gmi, function(wm, st, escape, mentions, username) {
              if (escape === "\\") {
                return st + mentions;
              }
              if (!showdown2.helper.isString(options.ghMentionsLink)) {
                throw new Error("ghMentionsLink option must be a string");
              }
              var lnk = options.ghMentionsLink.replace(/\{u}/g, username), target = "";
              if (options.openLinksInNewWindow) {
                target = ' rel="noopener noreferrer" target="\xA8E95Eblank"';
              }
              return st + '<a href="' + lnk + '"' + target + ">" + mentions + "</a>";
            });
          }
          text2 = globals.converter._dispatch("anchors.after", text2, options, globals);
          return text2;
        });
        var simpleURLRegex = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+?\.[^'">\s]+?)()(\1)?(?=\s|$)(?!["<>])/gi, simpleURLRegex2 = /([*~_]+|\b)(((https?|ftp|dict):\/\/|www\.)[^'">\s]+\.[^'">\s]+?)([.!?,()\[\]])?(\1)?(?=\s|$)(?!["<>])/gi, delimUrlRegex = /()<(((https?|ftp|dict):\/\/|www\.)[^'">\s]+)()>()/gi, simpleMailRegex = /(^|\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)(?=$|\s)/gmi, delimMailRegex = /<()(?:mailto:)?([-.\w]+@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+)>/gi, replaceLink = function(options) {
          "use strict";
          return function(wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {
            link = link.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var lnkTxt = link, append4 = "", target = "", lmc = leadingMagicChars || "", tmc = trailingMagicChars || "";
            if (/^www\./i.test(link)) {
              link = link.replace(/^www\./i, "http://www.");
            }
            if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {
              append4 = trailingPunctuation;
            }
            if (options.openLinksInNewWindow) {
              target = ' rel="noopener noreferrer" target="\xA8E95Eblank"';
            }
            return lmc + '<a href="' + link + '"' + target + ">" + lnkTxt + "</a>" + append4 + tmc;
          };
        }, replaceMail = function(options, globals) {
          "use strict";
          return function(wholeMatch, b2, mail) {
            var href = "mailto:";
            b2 = b2 || "";
            mail = showdown2.subParser("unescapeSpecialChars")(mail, options, globals);
            if (options.encodeEmails) {
              href = showdown2.helper.encodeEmailAddress(href + mail);
              mail = showdown2.helper.encodeEmailAddress(mail);
            } else {
              href = href + mail;
            }
            return b2 + '<a href="' + href + '">' + mail + "</a>";
          };
        };
        showdown2.subParser("autoLinks", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("autoLinks.before", text2, options, globals);
          text2 = text2.replace(delimUrlRegex, replaceLink(options));
          text2 = text2.replace(delimMailRegex, replaceMail(options, globals));
          text2 = globals.converter._dispatch("autoLinks.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("simplifiedAutoLinks", function(text2, options, globals) {
          "use strict";
          if (!options.simplifiedAutoLink) {
            return text2;
          }
          text2 = globals.converter._dispatch("simplifiedAutoLinks.before", text2, options, globals);
          if (options.excludeTrailingPunctuationFromURLs) {
            text2 = text2.replace(simpleURLRegex2, replaceLink(options));
          } else {
            text2 = text2.replace(simpleURLRegex, replaceLink(options));
          }
          text2 = text2.replace(simpleMailRegex, replaceMail(options, globals));
          text2 = globals.converter._dispatch("simplifiedAutoLinks.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("blockGamut", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("blockGamut.before", text2, options, globals);
          text2 = showdown2.subParser("blockQuotes")(text2, options, globals);
          text2 = showdown2.subParser("headers")(text2, options, globals);
          text2 = showdown2.subParser("horizontalRule")(text2, options, globals);
          text2 = showdown2.subParser("lists")(text2, options, globals);
          text2 = showdown2.subParser("codeBlocks")(text2, options, globals);
          text2 = showdown2.subParser("tables")(text2, options, globals);
          text2 = showdown2.subParser("hashHTMLBlocks")(text2, options, globals);
          text2 = showdown2.subParser("paragraphs")(text2, options, globals);
          text2 = globals.converter._dispatch("blockGamut.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("blockQuotes", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("blockQuotes.before", text2, options, globals);
          text2 = text2 + "\n\n";
          var rgx = /(^ {0,3}>[ \t]?.+\n(.+\n)*\n*)+/gm;
          if (options.splitAdjacentBlockquotes) {
            rgx = /^ {0,3}>[\s\S]*?(?:\n\n)/gm;
          }
          text2 = text2.replace(rgx, function(bq) {
            bq = bq.replace(/^[ \t]*>[ \t]?/gm, "");
            bq = bq.replace(/¨0/g, "");
            bq = bq.replace(/^[ \t]+$/gm, "");
            bq = showdown2.subParser("githubCodeBlocks")(bq, options, globals);
            bq = showdown2.subParser("blockGamut")(bq, options, globals);
            bq = bq.replace(/(^|\n)/g, "$1  ");
            bq = bq.replace(/(\s*<pre>[^\r]+?<\/pre>)/gm, function(wholeMatch, m1) {
              var pre = m1;
              pre = pre.replace(/^  /mg, "\xA80");
              pre = pre.replace(/¨0/g, "");
              return pre;
            });
            return showdown2.subParser("hashBlock")("<blockquote>\n" + bq + "\n</blockquote>", options, globals);
          });
          text2 = globals.converter._dispatch("blockQuotes.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("codeBlocks", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("codeBlocks.before", text2, options, globals);
          text2 += "\xA80";
          var pattern = /(?:\n\n|^)((?:(?:[ ]{4}|\t).*\n+)+)(\n*[ ]{0,3}[^ \t\n]|(?=¨0))/g;
          text2 = text2.replace(pattern, function(wholeMatch, m1, m2) {
            var codeblock = m1, nextChar = m2, end = "\n";
            codeblock = showdown2.subParser("outdent")(codeblock, options, globals);
            codeblock = showdown2.subParser("encodeCode")(codeblock, options, globals);
            codeblock = showdown2.subParser("detab")(codeblock, options, globals);
            codeblock = codeblock.replace(/^\n+/g, "");
            codeblock = codeblock.replace(/\n+$/g, "");
            if (options.omitExtraWLInCodeBlocks) {
              end = "";
            }
            codeblock = "<pre><code>" + codeblock + end + "</code></pre>";
            return showdown2.subParser("hashBlock")(codeblock, options, globals) + nextChar;
          });
          text2 = text2.replace(/¨0/, "");
          text2 = globals.converter._dispatch("codeBlocks.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("codeSpans", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("codeSpans.before", text2, options, globals);
          if (typeof text2 === "undefined") {
            text2 = "";
          }
          text2 = text2.replace(
            /(^|[^\\])(`+)([^\r]*?[^`])\2(?!`)/gm,
            function(wholeMatch, m1, m2, m3) {
              var c6 = m3;
              c6 = c6.replace(/^([ \t]*)/g, "");
              c6 = c6.replace(/[ \t]*$/g, "");
              c6 = showdown2.subParser("encodeCode")(c6, options, globals);
              c6 = m1 + "<code>" + c6 + "</code>";
              c6 = showdown2.subParser("hashHTMLSpans")(c6, options, globals);
              return c6;
            }
          );
          text2 = globals.converter._dispatch("codeSpans.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("completeHTMLDocument", function(text2, options, globals) {
          "use strict";
          if (!options.completeHTMLDocument) {
            return text2;
          }
          text2 = globals.converter._dispatch("completeHTMLDocument.before", text2, options, globals);
          var doctype = "html", doctypeParsed = "<!DOCTYPE HTML>\n", title = "", charset = '<meta charset="utf-8">\n', lang = "", metadata = "";
          if (typeof globals.metadata.parsed.doctype !== "undefined") {
            doctypeParsed = "<!DOCTYPE " + globals.metadata.parsed.doctype + ">\n";
            doctype = globals.metadata.parsed.doctype.toString().toLowerCase();
            if (doctype === "html" || doctype === "html5") {
              charset = '<meta charset="utf-8">';
            }
          }
          for (var meta in globals.metadata.parsed) {
            if (globals.metadata.parsed.hasOwnProperty(meta)) {
              switch (meta.toLowerCase()) {
                case "doctype":
                  break;
                case "title":
                  title = "<title>" + globals.metadata.parsed.title + "</title>\n";
                  break;
                case "charset":
                  if (doctype === "html" || doctype === "html5") {
                    charset = '<meta charset="' + globals.metadata.parsed.charset + '">\n';
                  } else {
                    charset = '<meta name="charset" content="' + globals.metadata.parsed.charset + '">\n';
                  }
                  break;
                case "language":
                case "lang":
                  lang = ' lang="' + globals.metadata.parsed[meta] + '"';
                  metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
                  break;
                default:
                  metadata += '<meta name="' + meta + '" content="' + globals.metadata.parsed[meta] + '">\n';
              }
            }
          }
          text2 = doctypeParsed + "<html" + lang + ">\n<head>\n" + title + charset + metadata + "</head>\n<body>\n" + text2.trim() + "\n</body>\n</html>";
          text2 = globals.converter._dispatch("completeHTMLDocument.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("detab", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("detab.before", text2, options, globals);
          text2 = text2.replace(/\t(?=\t)/g, "    ");
          text2 = text2.replace(/\t/g, "\xA8A\xA8B");
          text2 = text2.replace(/¨B(.+?)¨A/g, function(wholeMatch, m1) {
            var leadingText = m1, numSpaces = 4 - leadingText.length % 4;
            for (var i3 = 0; i3 < numSpaces; i3++) {
              leadingText += " ";
            }
            return leadingText;
          });
          text2 = text2.replace(/¨A/g, "    ");
          text2 = text2.replace(/¨B/g, "");
          text2 = globals.converter._dispatch("detab.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("ellipsis", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("ellipsis.before", text2, options, globals);
          text2 = text2.replace(/\.\.\./g, "\u2026");
          text2 = globals.converter._dispatch("ellipsis.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("emoji", function(text2, options, globals) {
          "use strict";
          if (!options.emoji) {
            return text2;
          }
          text2 = globals.converter._dispatch("emoji.before", text2, options, globals);
          var emojiRgx = /:([\S]+?):/g;
          text2 = text2.replace(emojiRgx, function(wm, emojiCode) {
            if (showdown2.helper.emojis.hasOwnProperty(emojiCode)) {
              return showdown2.helper.emojis[emojiCode];
            }
            return wm;
          });
          text2 = globals.converter._dispatch("emoji.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("encodeAmpsAndAngles", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("encodeAmpsAndAngles.before", text2, options, globals);
          text2 = text2.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\w+);)/g, "&amp;");
          text2 = text2.replace(/<(?![a-z\/?$!])/gi, "&lt;");
          text2 = text2.replace(/</g, "&lt;");
          text2 = text2.replace(/>/g, "&gt;");
          text2 = globals.converter._dispatch("encodeAmpsAndAngles.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("encodeBackslashEscapes", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("encodeBackslashEscapes.before", text2, options, globals);
          text2 = text2.replace(/\\(\\)/g, showdown2.helper.escapeCharactersCallback);
          text2 = text2.replace(/\\([`*_{}\[\]()>#+.!~=|-])/g, showdown2.helper.escapeCharactersCallback);
          text2 = globals.converter._dispatch("encodeBackslashEscapes.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("encodeCode", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("encodeCode.before", text2, options, globals);
          text2 = text2.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/([*_{}\[\]\\=~-])/g, showdown2.helper.escapeCharactersCallback);
          text2 = globals.converter._dispatch("encodeCode.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("escapeSpecialCharsWithinTagAttributes", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("escapeSpecialCharsWithinTagAttributes.before", text2, options, globals);
          var tags = /<\/?[a-z\d_:-]+(?:[\s]+[\s\S]+?)?>/gi, comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;
          text2 = text2.replace(tags, function(wholeMatch) {
            return wholeMatch.replace(/(.)<\/?code>(?=.)/g, "$1`").replace(/([\\`*_~=|])/g, showdown2.helper.escapeCharactersCallback);
          });
          text2 = text2.replace(comments, function(wholeMatch) {
            return wholeMatch.replace(/([\\`*_~=|])/g, showdown2.helper.escapeCharactersCallback);
          });
          text2 = globals.converter._dispatch("escapeSpecialCharsWithinTagAttributes.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("githubCodeBlocks", function(text2, options, globals) {
          "use strict";
          if (!options.ghCodeBlocks) {
            return text2;
          }
          text2 = globals.converter._dispatch("githubCodeBlocks.before", text2, options, globals);
          text2 += "\xA80";
          text2 = text2.replace(/(?:^|\n)(?: {0,3})(```+|~~~+)(?: *)([^\s`~]*)\n([\s\S]*?)\n(?: {0,3})\1/g, function(wholeMatch, delim, language, codeblock) {
            var end = options.omitExtraWLInCodeBlocks ? "" : "\n";
            codeblock = showdown2.subParser("encodeCode")(codeblock, options, globals);
            codeblock = showdown2.subParser("detab")(codeblock, options, globals);
            codeblock = codeblock.replace(/^\n+/g, "");
            codeblock = codeblock.replace(/\n+$/g, "");
            codeblock = "<pre><code" + (language ? ' class="' + language + " language-" + language + '"' : "") + ">" + codeblock + end + "</code></pre>";
            codeblock = showdown2.subParser("hashBlock")(codeblock, options, globals);
            return "\n\n\xA8G" + (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock }) - 1) + "G\n\n";
          });
          text2 = text2.replace(/¨0/, "");
          return globals.converter._dispatch("githubCodeBlocks.after", text2, options, globals);
        });
        showdown2.subParser("hashBlock", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("hashBlock.before", text2, options, globals);
          text2 = text2.replace(/(^\n+|\n+$)/g, "");
          text2 = "\n\n\xA8K" + (globals.gHtmlBlocks.push(text2) - 1) + "K\n\n";
          text2 = globals.converter._dispatch("hashBlock.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("hashCodeTags", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("hashCodeTags.before", text2, options, globals);
          var repFunc = function(wholeMatch, match2, left, right) {
            var codeblock = left + showdown2.subParser("encodeCode")(match2, options, globals) + right;
            return "\xA8C" + (globals.gHtmlSpans.push(codeblock) - 1) + "C";
          };
          text2 = showdown2.helper.replaceRecursiveRegExp(text2, repFunc, "<code\\b[^>]*>", "</code>", "gim");
          text2 = globals.converter._dispatch("hashCodeTags.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("hashElement", function(text2, options, globals) {
          "use strict";
          return function(wholeMatch, m1) {
            var blockText = m1;
            blockText = blockText.replace(/\n\n/g, "\n");
            blockText = blockText.replace(/^\n/, "");
            blockText = blockText.replace(/\n+$/g, "");
            blockText = "\n\n\xA8K" + (globals.gHtmlBlocks.push(blockText) - 1) + "K\n\n";
            return blockText;
          };
        });
        showdown2.subParser("hashHTMLBlocks", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("hashHTMLBlocks.before", text2, options, globals);
          var blockTags = [
            "pre",
            "div",
            "h1",
            "h2",
            "h3",
            "h4",
            "h5",
            "h6",
            "blockquote",
            "table",
            "dl",
            "ol",
            "ul",
            "script",
            "noscript",
            "form",
            "fieldset",
            "iframe",
            "math",
            "style",
            "section",
            "header",
            "footer",
            "nav",
            "article",
            "aside",
            "address",
            "audio",
            "canvas",
            "figure",
            "hgroup",
            "output",
            "video",
            "p"
          ], repFunc = function(wholeMatch, match2, left, right) {
            var txt = wholeMatch;
            if (left.search(/\bmarkdown\b/) !== -1) {
              txt = left + globals.converter.makeHtml(match2) + right;
            }
            return "\n\n\xA8K" + (globals.gHtmlBlocks.push(txt) - 1) + "K\n\n";
          };
          if (options.backslashEscapesHTMLTags) {
            text2 = text2.replace(/\\<(\/?[^>]+?)>/g, function(wm, inside) {
              return "&lt;" + inside + "&gt;";
            });
          }
          for (var i3 = 0; i3 < blockTags.length; ++i3) {
            var opTagPos, rgx1 = new RegExp("^ {0,3}(<" + blockTags[i3] + "\\b[^>]*>)", "im"), patLeft = "<" + blockTags[i3] + "\\b[^>]*>", patRight = "</" + blockTags[i3] + ">";
            while ((opTagPos = showdown2.helper.regexIndexOf(text2, rgx1)) !== -1) {
              var subTexts = showdown2.helper.splitAtIndex(text2, opTagPos), newSubText1 = showdown2.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, "im");
              if (newSubText1 === subTexts[1]) {
                break;
              }
              text2 = subTexts[0].concat(newSubText1);
            }
          }
          text2 = text2.replace(
            /(\n {0,3}(<(hr)\b([^<>])*?\/?>)[ \t]*(?=\n{2,}))/g,
            showdown2.subParser("hashElement")(text2, options, globals)
          );
          text2 = showdown2.helper.replaceRecursiveRegExp(text2, function(txt) {
            return "\n\n\xA8K" + (globals.gHtmlBlocks.push(txt) - 1) + "K\n\n";
          }, "^ {0,3}<!--", "-->", "gm");
          text2 = text2.replace(
            /(?:\n\n)( {0,3}(?:<([?%])[^\r]*?\2>)[ \t]*(?=\n{2,}))/g,
            showdown2.subParser("hashElement")(text2, options, globals)
          );
          text2 = globals.converter._dispatch("hashHTMLBlocks.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("hashHTMLSpans", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("hashHTMLSpans.before", text2, options, globals);
          function hashHTMLSpan(html2) {
            return "\xA8C" + (globals.gHtmlSpans.push(html2) - 1) + "C";
          }
          text2 = text2.replace(/<[^>]+?\/>/gi, function(wm) {
            return hashHTMLSpan(wm);
          });
          text2 = text2.replace(/<([^>]+?)>[\s\S]*?<\/\1>/g, function(wm) {
            return hashHTMLSpan(wm);
          });
          text2 = text2.replace(/<([^>]+?)\s[^>]+?>[\s\S]*?<\/\1>/g, function(wm) {
            return hashHTMLSpan(wm);
          });
          text2 = text2.replace(/<[^>]+?>/gi, function(wm) {
            return hashHTMLSpan(wm);
          });
          text2 = globals.converter._dispatch("hashHTMLSpans.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("unhashHTMLSpans", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("unhashHTMLSpans.before", text2, options, globals);
          for (var i3 = 0; i3 < globals.gHtmlSpans.length; ++i3) {
            var repText = globals.gHtmlSpans[i3], limit = 0;
            while (/¨C(\d+)C/.test(repText)) {
              var num = RegExp.$1;
              repText = repText.replace("\xA8C" + num + "C", globals.gHtmlSpans[num]);
              if (limit === 10) {
                console.error("maximum nesting of 10 spans reached!!!");
                break;
              }
              ++limit;
            }
            text2 = text2.replace("\xA8C" + i3 + "C", repText);
          }
          text2 = globals.converter._dispatch("unhashHTMLSpans.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("hashPreCodeTags", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("hashPreCodeTags.before", text2, options, globals);
          var repFunc = function(wholeMatch, match2, left, right) {
            var codeblock = left + showdown2.subParser("encodeCode")(match2, options, globals) + right;
            return "\n\n\xA8G" + (globals.ghCodeBlocks.push({ text: wholeMatch, codeblock }) - 1) + "G\n\n";
          };
          text2 = showdown2.helper.replaceRecursiveRegExp(text2, repFunc, "^ {0,3}<pre\\b[^>]*>\\s*<code\\b[^>]*>", "^ {0,3}</code>\\s*</pre>", "gim");
          text2 = globals.converter._dispatch("hashPreCodeTags.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("headers", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("headers.before", text2, options, globals);
          var headerLevelStart = isNaN(parseInt(options.headerLevelStart)) ? 1 : parseInt(options.headerLevelStart), setextRegexH1 = options.smoothLivePreview ? /^(.+)[ \t]*\n={2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n=+[ \t]*\n+/gm, setextRegexH2 = options.smoothLivePreview ? /^(.+)[ \t]*\n-{2,}[ \t]*\n+/gm : /^(.+)[ \t]*\n-+[ \t]*\n+/gm;
          text2 = text2.replace(setextRegexH1, function(wholeMatch, m1) {
            var spanGamut = showdown2.subParser("spanGamut")(m1, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m1) + '"', hLevel = headerLevelStart, hashBlock = "<h" + hLevel + hID + ">" + spanGamut + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(hashBlock, options, globals);
          });
          text2 = text2.replace(setextRegexH2, function(matchFound, m1) {
            var spanGamut = showdown2.subParser("spanGamut")(m1, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m1) + '"', hLevel = headerLevelStart + 1, hashBlock = "<h" + hLevel + hID + ">" + spanGamut + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(hashBlock, options, globals);
          });
          var atxStyle = options.requireSpaceBeforeHeadingText ? /^(#{1,6})[ \t]+(.+?)[ \t]*#*\n+/gm : /^(#{1,6})[ \t]*(.+?)[ \t]*#*\n+/gm;
          text2 = text2.replace(atxStyle, function(wholeMatch, m1, m2) {
            var hText = m2;
            if (options.customizedHeaderId) {
              hText = m2.replace(/\s?\{([^{]+?)}\s*$/, "");
            }
            var span = showdown2.subParser("spanGamut")(hText, options, globals), hID = options.noHeaderId ? "" : ' id="' + headerId(m2) + '"', hLevel = headerLevelStart - 1 + m1.length, header = "<h" + hLevel + hID + ">" + span + "</h" + hLevel + ">";
            return showdown2.subParser("hashBlock")(header, options, globals);
          });
          function headerId(m2) {
            var title, prefix3;
            if (options.customizedHeaderId) {
              var match2 = m2.match(/\{([^{]+?)}\s*$/);
              if (match2 && match2[1]) {
                m2 = match2[1];
              }
            }
            title = m2;
            if (showdown2.helper.isString(options.prefixHeaderId)) {
              prefix3 = options.prefixHeaderId;
            } else if (options.prefixHeaderId === true) {
              prefix3 = "section-";
            } else {
              prefix3 = "";
            }
            if (!options.rawPrefixHeaderId) {
              title = prefix3 + title;
            }
            if (options.ghCompatibleHeaderId) {
              title = title.replace(/ /g, "-").replace(/&amp;/g, "").replace(/¨T/g, "").replace(/¨D/g, "").replace(/[&+$,\/:;=?@"#{}|^¨~\[\]`\\*)(%.!'<>]/g, "").toLowerCase();
            } else if (options.rawHeaderId) {
              title = title.replace(/ /g, "-").replace(/&amp;/g, "&").replace(/¨T/g, "\xA8").replace(/¨D/g, "$").replace(/["']/g, "-").toLowerCase();
            } else {
              title = title.replace(/[^\w]/g, "").toLowerCase();
            }
            if (options.rawPrefixHeaderId) {
              title = prefix3 + title;
            }
            if (globals.hashLinkCounts[title]) {
              title = title + "-" + globals.hashLinkCounts[title]++;
            } else {
              globals.hashLinkCounts[title] = 1;
            }
            return title;
          }
          text2 = globals.converter._dispatch("headers.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("horizontalRule", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("horizontalRule.before", text2, options, globals);
          var key = showdown2.subParser("hashBlock")("<hr />", options, globals);
          text2 = text2.replace(/^ {0,2}( ?-){3,}[ \t]*$/gm, key);
          text2 = text2.replace(/^ {0,2}( ?\*){3,}[ \t]*$/gm, key);
          text2 = text2.replace(/^ {0,2}( ?_){3,}[ \t]*$/gm, key);
          text2 = globals.converter._dispatch("horizontalRule.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("images", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("images.before", text2, options, globals);
          var inlineRegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<?([\S]+?(?:\([\S]*?\)[\S]*?)?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, crazyRegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<([^>]*)>(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(?:(["'])([^"]*?)\6))?[ \t]?\)/g, base64RegExp = /!\[([^\]]*?)][ \t]*()\([ \t]?<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*(?:(["'])([^"]*?)\6)?[ \t]?\)/g, referenceRegExp = /!\[([^\]]*?)] ?(?:\n *)?\[([\s\S]*?)]()()()()()/g, refShortcutRegExp = /!\[([^\[\]]+)]()()()()()/g;
          function writeImageTagBase64(wholeMatch, altText, linkId, url, width, height, m5, title) {
            url = url.replace(/\s/g, "");
            return writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title);
          }
          function writeImageTag(wholeMatch, altText, linkId, url, width, height, m5, title) {
            var gUrls = globals.gUrls, gTitles = globals.gTitles, gDims = globals.gDimensions;
            linkId = linkId.toLowerCase();
            if (!title) {
              title = "";
            }
            if (wholeMatch.search(/\(<?\s*>? ?(['"].*['"])?\)$/m) > -1) {
              url = "";
            } else if (url === "" || url === null) {
              if (linkId === "" || linkId === null) {
                linkId = altText.toLowerCase().replace(/ ?\n/g, " ");
              }
              url = "#" + linkId;
              if (!showdown2.helper.isUndefined(gUrls[linkId])) {
                url = gUrls[linkId];
                if (!showdown2.helper.isUndefined(gTitles[linkId])) {
                  title = gTitles[linkId];
                }
                if (!showdown2.helper.isUndefined(gDims[linkId])) {
                  width = gDims[linkId].width;
                  height = gDims[linkId].height;
                }
              } else {
                return wholeMatch;
              }
            }
            altText = altText.replace(/"/g, "&quot;").replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            url = url.replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
            var result = '<img src="' + url + '" alt="' + altText + '"';
            if (title && showdown2.helper.isString(title)) {
              title = title.replace(/"/g, "&quot;").replace(showdown2.helper.regexes.asteriskDashAndColon, showdown2.helper.escapeCharactersCallback);
              result += ' title="' + title + '"';
            }
            if (width && height) {
              width = width === "*" ? "auto" : width;
              height = height === "*" ? "auto" : height;
              result += ' width="' + width + '"';
              result += ' height="' + height + '"';
            }
            result += " />";
            return result;
          }
          text2 = text2.replace(referenceRegExp, writeImageTag);
          text2 = text2.replace(base64RegExp, writeImageTagBase64);
          text2 = text2.replace(crazyRegExp, writeImageTag);
          text2 = text2.replace(inlineRegExp, writeImageTag);
          text2 = text2.replace(refShortcutRegExp, writeImageTag);
          text2 = globals.converter._dispatch("images.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("italicsAndBold", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("italicsAndBold.before", text2, options, globals);
          function parseInside(txt, left, right) {
            return left + txt + right;
          }
          if (options.literalMidWordUnderscores) {
            text2 = text2.replace(/\b___(\S[\s\S]*?)___\b/g, function(wm, txt) {
              return parseInside(txt, "<strong><em>", "</em></strong>");
            });
            text2 = text2.replace(/\b__(\S[\s\S]*?)__\b/g, function(wm, txt) {
              return parseInside(txt, "<strong>", "</strong>");
            });
            text2 = text2.replace(/\b_(\S[\s\S]*?)_\b/g, function(wm, txt) {
              return parseInside(txt, "<em>", "</em>");
            });
          } else {
            text2 = text2.replace(/___(\S[\s\S]*?)___/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<strong><em>", "</em></strong>") : wm;
            });
            text2 = text2.replace(/__(\S[\s\S]*?)__/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<strong>", "</strong>") : wm;
            });
            text2 = text2.replace(/_([^\s_][\s\S]*?)_/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<em>", "</em>") : wm;
            });
          }
          if (options.literalMidWordAsterisks) {
            text2 = text2.replace(/([^*]|^)\B\*\*\*(\S[\s\S]*?)\*\*\*\B(?!\*)/g, function(wm, lead, txt) {
              return parseInside(txt, lead + "<strong><em>", "</em></strong>");
            });
            text2 = text2.replace(/([^*]|^)\B\*\*(\S[\s\S]*?)\*\*\B(?!\*)/g, function(wm, lead, txt) {
              return parseInside(txt, lead + "<strong>", "</strong>");
            });
            text2 = text2.replace(/([^*]|^)\B\*(\S[\s\S]*?)\*\B(?!\*)/g, function(wm, lead, txt) {
              return parseInside(txt, lead + "<em>", "</em>");
            });
          } else {
            text2 = text2.replace(/\*\*\*(\S[\s\S]*?)\*\*\*/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<strong><em>", "</em></strong>") : wm;
            });
            text2 = text2.replace(/\*\*(\S[\s\S]*?)\*\*/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<strong>", "</strong>") : wm;
            });
            text2 = text2.replace(/\*([^\s*][\s\S]*?)\*/g, function(wm, m2) {
              return /\S$/.test(m2) ? parseInside(m2, "<em>", "</em>") : wm;
            });
          }
          text2 = globals.converter._dispatch("italicsAndBold.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("lists", function(text2, options, globals) {
          "use strict";
          function processListItems(listStr, trimTrailing) {
            globals.gListLevel++;
            listStr = listStr.replace(/\n{2,}$/, "\n");
            listStr += "\xA80";
            var rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0| {0,3}([*+-]|\d+[.])[ \t]+))/gm, isParagraphed = /\n[ \t]*\n(?!¨0)/.test(listStr);
            if (options.disableForced4SpacesIndentedSublists) {
              rgx = /(\n)?(^ {0,3})([*+-]|\d+[.])[ \t]+((\[(x|X| )?])?[ \t]*[^\r]+?(\n{1,2}))(?=\n*(¨0|\2([*+-]|\d+[.])[ \t]+))/gm;
            }
            listStr = listStr.replace(rgx, function(wholeMatch, m1, m2, m3, m4, taskbtn, checked) {
              checked = checked && checked.trim() !== "";
              var item = showdown2.subParser("outdent")(m4, options, globals), bulletStyle = "";
              if (taskbtn && options.tasklists) {
                bulletStyle = ' class="task-list-item" style="list-style-type: none;"';
                item = item.replace(/^[ \t]*\[(x|X| )?]/m, function() {
                  var otp = '<input type="checkbox" disabled style="margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;"';
                  if (checked) {
                    otp += " checked";
                  }
                  otp += ">";
                  return otp;
                });
              }
              item = item.replace(/^([-*+]|\d\.)[ \t]+[\S\n ]*/g, function(wm2) {
                return "\xA8A" + wm2;
              });
              if (m1 || item.search(/\n{2,}/) > -1) {
                item = showdown2.subParser("githubCodeBlocks")(item, options, globals);
                item = showdown2.subParser("blockGamut")(item, options, globals);
              } else {
                item = showdown2.subParser("lists")(item, options, globals);
                item = item.replace(/\n$/, "");
                item = showdown2.subParser("hashHTMLBlocks")(item, options, globals);
                item = item.replace(/\n\n+/g, "\n\n");
                if (isParagraphed) {
                  item = showdown2.subParser("paragraphs")(item, options, globals);
                } else {
                  item = showdown2.subParser("spanGamut")(item, options, globals);
                }
              }
              item = item.replace("\xA8A", "");
              item = "<li" + bulletStyle + ">" + item + "</li>\n";
              return item;
            });
            listStr = listStr.replace(/¨0/g, "");
            globals.gListLevel--;
            if (trimTrailing) {
              listStr = listStr.replace(/\s+$/, "");
            }
            return listStr;
          }
          function styleStartNumber(list, listType) {
            if (listType === "ol") {
              var res = list.match(/^ *(\d+)\./);
              if (res && res[1] !== "1") {
                return ' start="' + res[1] + '"';
              }
            }
            return "";
          }
          function parseConsecutiveLists(list, listType, trimTrailing) {
            var olRgx = options.disableForced4SpacesIndentedSublists ? /^ ?\d+\.[ \t]/gm : /^ {0,3}\d+\.[ \t]/gm, ulRgx = options.disableForced4SpacesIndentedSublists ? /^ ?[*+-][ \t]/gm : /^ {0,3}[*+-][ \t]/gm, counterRxg = listType === "ul" ? olRgx : ulRgx, result = "";
            if (list.search(counterRxg) !== -1) {
              (function parseCL(txt) {
                var pos = txt.search(counterRxg), style2 = styleStartNumber(list, listType);
                if (pos !== -1) {
                  result += "\n\n<" + listType + style2 + ">\n" + processListItems(txt.slice(0, pos), !!trimTrailing) + "</" + listType + ">\n";
                  listType = listType === "ul" ? "ol" : "ul";
                  counterRxg = listType === "ul" ? olRgx : ulRgx;
                  parseCL(txt.slice(pos));
                } else {
                  result += "\n\n<" + listType + style2 + ">\n" + processListItems(txt, !!trimTrailing) + "</" + listType + ">\n";
                }
              })(list);
            } else {
              var style = styleStartNumber(list, listType);
              result = "\n\n<" + listType + style + ">\n" + processListItems(list, !!trimTrailing) + "</" + listType + ">\n";
            }
            return result;
          }
          text2 = globals.converter._dispatch("lists.before", text2, options, globals);
          text2 += "\xA80";
          if (globals.gListLevel) {
            text2 = text2.replace(
              /^(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
              function(wholeMatch, list, m2) {
                var listType = m2.search(/[*+-]/g) > -1 ? "ul" : "ol";
                return parseConsecutiveLists(list, listType, true);
              }
            );
          } else {
            text2 = text2.replace(
              /(\n\n|^\n?)(( {0,3}([*+-]|\d+[.])[ \t]+)[^\r]+?(¨0|\n{2,}(?=\S)(?![ \t]*(?:[*+-]|\d+[.])[ \t]+)))/gm,
              function(wholeMatch, m1, list, m3) {
                var listType = m3.search(/[*+-]/g) > -1 ? "ul" : "ol";
                return parseConsecutiveLists(list, listType, false);
              }
            );
          }
          text2 = text2.replace(/¨0/, "");
          text2 = globals.converter._dispatch("lists.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("metadata", function(text2, options, globals) {
          "use strict";
          if (!options.metadata) {
            return text2;
          }
          text2 = globals.converter._dispatch("metadata.before", text2, options, globals);
          function parseMetadataContents(content) {
            globals.metadata.raw = content;
            content = content.replace(/&/g, "&amp;").replace(/"/g, "&quot;");
            content = content.replace(/\n {4}/g, " ");
            content.replace(/^([\S ]+): +([\s\S]+?)$/gm, function(wm, key, value) {
              globals.metadata.parsed[key] = value;
              return "";
            });
          }
          text2 = text2.replace(/^\s*«««+(\S*?)\n([\s\S]+?)\n»»»+\n/, function(wholematch, format, content) {
            parseMetadataContents(content);
            return "\xA8M";
          });
          text2 = text2.replace(/^\s*---+(\S*?)\n([\s\S]+?)\n---+\n/, function(wholematch, format, content) {
            if (format) {
              globals.metadata.format = format;
            }
            parseMetadataContents(content);
            return "\xA8M";
          });
          text2 = text2.replace(/¨M/g, "");
          text2 = globals.converter._dispatch("metadata.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("outdent", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("outdent.before", text2, options, globals);
          text2 = text2.replace(/^(\t|[ ]{1,4})/gm, "\xA80");
          text2 = text2.replace(/¨0/g, "");
          text2 = globals.converter._dispatch("outdent.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("paragraphs", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("paragraphs.before", text2, options, globals);
          text2 = text2.replace(/^\n+/g, "");
          text2 = text2.replace(/\n+$/g, "");
          var grafs = text2.split(/\n{2,}/g), grafsOut = [], end = grafs.length;
          for (var i3 = 0; i3 < end; i3++) {
            var str = grafs[i3];
            if (str.search(/¨(K|G)(\d+)\1/g) >= 0) {
              grafsOut.push(str);
            } else if (str.search(/\S/) >= 0) {
              str = showdown2.subParser("spanGamut")(str, options, globals);
              str = str.replace(/^([ \t]*)/g, "<p>");
              str += "</p>";
              grafsOut.push(str);
            }
          }
          end = grafsOut.length;
          for (i3 = 0; i3 < end; i3++) {
            var blockText = "", grafsOutIt = grafsOut[i3], codeFlag = false;
            while (/¨(K|G)(\d+)\1/.test(grafsOutIt)) {
              var delim = RegExp.$1, num = RegExp.$2;
              if (delim === "K") {
                blockText = globals.gHtmlBlocks[num];
              } else {
                if (codeFlag) {
                  blockText = showdown2.subParser("encodeCode")(globals.ghCodeBlocks[num].text, options, globals);
                } else {
                  blockText = globals.ghCodeBlocks[num].codeblock;
                }
              }
              blockText = blockText.replace(/\$/g, "$$$$");
              grafsOutIt = grafsOutIt.replace(/(\n\n)?¨(K|G)\d+\2(\n\n)?/, blockText);
              if (/^<pre\b[^>]*>\s*<code\b[^>]*>/.test(grafsOutIt)) {
                codeFlag = true;
              }
            }
            grafsOut[i3] = grafsOutIt;
          }
          text2 = grafsOut.join("\n");
          text2 = text2.replace(/^\n+/g, "");
          text2 = text2.replace(/\n+$/g, "");
          return globals.converter._dispatch("paragraphs.after", text2, options, globals);
        });
        showdown2.subParser("runExtension", function(ext, text2, options, globals) {
          "use strict";
          if (ext.filter) {
            text2 = ext.filter(text2, globals.converter, options);
          } else if (ext.regex) {
            var re = ext.regex;
            if (!(re instanceof RegExp)) {
              re = new RegExp(re, "g");
            }
            text2 = text2.replace(re, ext.replace);
          }
          return text2;
        });
        showdown2.subParser("spanGamut", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("spanGamut.before", text2, options, globals);
          text2 = showdown2.subParser("codeSpans")(text2, options, globals);
          text2 = showdown2.subParser("escapeSpecialCharsWithinTagAttributes")(text2, options, globals);
          text2 = showdown2.subParser("encodeBackslashEscapes")(text2, options, globals);
          text2 = showdown2.subParser("images")(text2, options, globals);
          text2 = showdown2.subParser("anchors")(text2, options, globals);
          text2 = showdown2.subParser("autoLinks")(text2, options, globals);
          text2 = showdown2.subParser("simplifiedAutoLinks")(text2, options, globals);
          text2 = showdown2.subParser("emoji")(text2, options, globals);
          text2 = showdown2.subParser("underline")(text2, options, globals);
          text2 = showdown2.subParser("italicsAndBold")(text2, options, globals);
          text2 = showdown2.subParser("strikethrough")(text2, options, globals);
          text2 = showdown2.subParser("ellipsis")(text2, options, globals);
          text2 = showdown2.subParser("hashHTMLSpans")(text2, options, globals);
          text2 = showdown2.subParser("encodeAmpsAndAngles")(text2, options, globals);
          if (options.simpleLineBreaks) {
            if (!/\n\n¨K/.test(text2)) {
              text2 = text2.replace(/\n+/g, "<br />\n");
            }
          } else {
            text2 = text2.replace(/  +\n/g, "<br />\n");
          }
          text2 = globals.converter._dispatch("spanGamut.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("strikethrough", function(text2, options, globals) {
          "use strict";
          function parseInside(txt) {
            if (options.simplifiedAutoLink) {
              txt = showdown2.subParser("simplifiedAutoLinks")(txt, options, globals);
            }
            return "<del>" + txt + "</del>";
          }
          if (options.strikethrough) {
            text2 = globals.converter._dispatch("strikethrough.before", text2, options, globals);
            text2 = text2.replace(/(?:~){2}([\s\S]+?)(?:~){2}/g, function(wm, txt) {
              return parseInside(txt);
            });
            text2 = globals.converter._dispatch("strikethrough.after", text2, options, globals);
          }
          return text2;
        });
        showdown2.subParser("stripLinkDefinitions", function(text2, options, globals) {
          "use strict";
          var regex = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?([^>\s]+)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n+|(?=¨0))/gm, base64Regex = /^ {0,3}\[(.+)]:[ \t]*\n?[ \t]*<?(data:.+?\/.+?;base64,[A-Za-z0-9+/=\n]+?)>?(?: =([*\d]+[A-Za-z%]{0,4})x([*\d]+[A-Za-z%]{0,4}))?[ \t]*\n?[ \t]*(?:(\n*)["|'(](.+?)["|')][ \t]*)?(?:\n\n|(?=¨0)|(?=\n\[))/gm;
          text2 += "\xA80";
          var replaceFunc = function(wholeMatch, linkId, url, width, height, blankLines, title) {
            linkId = linkId.toLowerCase();
            if (url.match(/^data:.+?\/.+?;base64,/)) {
              globals.gUrls[linkId] = url.replace(/\s/g, "");
            } else {
              globals.gUrls[linkId] = showdown2.subParser("encodeAmpsAndAngles")(url, options, globals);
            }
            if (blankLines) {
              return blankLines + title;
            } else {
              if (title) {
                globals.gTitles[linkId] = title.replace(/"|'/g, "&quot;");
              }
              if (options.parseImgDimensions && width && height) {
                globals.gDimensions[linkId] = {
                  width,
                  height
                };
              }
            }
            return "";
          };
          text2 = text2.replace(base64Regex, replaceFunc);
          text2 = text2.replace(regex, replaceFunc);
          text2 = text2.replace(/¨0/, "");
          return text2;
        });
        showdown2.subParser("tables", function(text2, options, globals) {
          "use strict";
          if (!options.tables) {
            return text2;
          }
          var tableRgx = /^ {0,3}\|?.+\|.+\n {0,3}\|?[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*:?[ \t]*(?:[-=]){2,}[\s\S]+?(?:\n\n|¨0)/gm, singeColTblRgx = /^ {0,3}\|.+\|[ \t]*\n {0,3}\|[ \t]*:?[ \t]*(?:[-=]){2,}[ \t]*:?[ \t]*\|[ \t]*\n( {0,3}\|.+\|[ \t]*\n)*(?:\n|¨0)/gm;
          function parseStyles(sLine) {
            if (/^:[ \t]*--*$/.test(sLine)) {
              return ' style="text-align:left;"';
            } else if (/^--*[ \t]*:[ \t]*$/.test(sLine)) {
              return ' style="text-align:right;"';
            } else if (/^:[ \t]*--*[ \t]*:$/.test(sLine)) {
              return ' style="text-align:center;"';
            } else {
              return "";
            }
          }
          function parseHeaders(header, style) {
            var id3 = "";
            header = header.trim();
            if (options.tablesHeaderId || options.tableHeaderId) {
              id3 = ' id="' + header.replace(/ /g, "_").toLowerCase() + '"';
            }
            header = showdown2.subParser("spanGamut")(header, options, globals);
            return "<th" + id3 + style + ">" + header + "</th>\n";
          }
          function parseCells(cell, style) {
            var subText = showdown2.subParser("spanGamut")(cell, options, globals);
            return "<td" + style + ">" + subText + "</td>\n";
          }
          function buildTable(headers, cells) {
            var tb = "<table>\n<thead>\n<tr>\n", tblLgn = headers.length;
            for (var i3 = 0; i3 < tblLgn; ++i3) {
              tb += headers[i3];
            }
            tb += "</tr>\n</thead>\n<tbody>\n";
            for (i3 = 0; i3 < cells.length; ++i3) {
              tb += "<tr>\n";
              for (var ii = 0; ii < tblLgn; ++ii) {
                tb += cells[i3][ii];
              }
              tb += "</tr>\n";
            }
            tb += "</tbody>\n</table>\n";
            return tb;
          }
          function parseTable(rawTable) {
            var i3, tableLines = rawTable.split("\n");
            for (i3 = 0; i3 < tableLines.length; ++i3) {
              if (/^ {0,3}\|/.test(tableLines[i3])) {
                tableLines[i3] = tableLines[i3].replace(/^ {0,3}\|/, "");
              }
              if (/\|[ \t]*$/.test(tableLines[i3])) {
                tableLines[i3] = tableLines[i3].replace(/\|[ \t]*$/, "");
              }
              tableLines[i3] = showdown2.subParser("codeSpans")(tableLines[i3], options, globals);
            }
            var rawHeaders = tableLines[0].split("|").map(function(s2) {
              return s2.trim();
            }), rawStyles = tableLines[1].split("|").map(function(s2) {
              return s2.trim();
            }), rawCells = [], headers = [], styles = [], cells = [];
            tableLines.shift();
            tableLines.shift();
            for (i3 = 0; i3 < tableLines.length; ++i3) {
              if (tableLines[i3].trim() === "") {
                continue;
              }
              rawCells.push(
                tableLines[i3].split("|").map(function(s2) {
                  return s2.trim();
                })
              );
            }
            if (rawHeaders.length < rawStyles.length) {
              return rawTable;
            }
            for (i3 = 0; i3 < rawStyles.length; ++i3) {
              styles.push(parseStyles(rawStyles[i3]));
            }
            for (i3 = 0; i3 < rawHeaders.length; ++i3) {
              if (showdown2.helper.isUndefined(styles[i3])) {
                styles[i3] = "";
              }
              headers.push(parseHeaders(rawHeaders[i3], styles[i3]));
            }
            for (i3 = 0; i3 < rawCells.length; ++i3) {
              var row = [];
              for (var ii = 0; ii < headers.length; ++ii) {
                if (showdown2.helper.isUndefined(rawCells[i3][ii])) {
                }
                row.push(parseCells(rawCells[i3][ii], styles[ii]));
              }
              cells.push(row);
            }
            return buildTable(headers, cells);
          }
          text2 = globals.converter._dispatch("tables.before", text2, options, globals);
          text2 = text2.replace(/\\(\|)/g, showdown2.helper.escapeCharactersCallback);
          text2 = text2.replace(tableRgx, parseTable);
          text2 = text2.replace(singeColTblRgx, parseTable);
          text2 = globals.converter._dispatch("tables.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("underline", function(text2, options, globals) {
          "use strict";
          if (!options.underline) {
            return text2;
          }
          text2 = globals.converter._dispatch("underline.before", text2, options, globals);
          if (options.literalMidWordUnderscores) {
            text2 = text2.replace(/\b___(\S[\s\S]*?)___\b/g, function(wm, txt) {
              return "<u>" + txt + "</u>";
            });
            text2 = text2.replace(/\b__(\S[\s\S]*?)__\b/g, function(wm, txt) {
              return "<u>" + txt + "</u>";
            });
          } else {
            text2 = text2.replace(/___(\S[\s\S]*?)___/g, function(wm, m2) {
              return /\S$/.test(m2) ? "<u>" + m2 + "</u>" : wm;
            });
            text2 = text2.replace(/__(\S[\s\S]*?)__/g, function(wm, m2) {
              return /\S$/.test(m2) ? "<u>" + m2 + "</u>" : wm;
            });
          }
          text2 = text2.replace(/(_)/g, showdown2.helper.escapeCharactersCallback);
          text2 = globals.converter._dispatch("underline.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("unescapeSpecialChars", function(text2, options, globals) {
          "use strict";
          text2 = globals.converter._dispatch("unescapeSpecialChars.before", text2, options, globals);
          text2 = text2.replace(/¨E(\d+)E/g, function(wholeMatch, m1) {
            var charCodeToReplace = parseInt(m1);
            return String.fromCharCode(charCodeToReplace);
          });
          text2 = globals.converter._dispatch("unescapeSpecialChars.after", text2, options, globals);
          return text2;
        });
        showdown2.subParser("makeMarkdown.blockquote", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes()) {
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              var innerTxt = showdown2.subParser("makeMarkdown.node")(children[i3], globals);
              if (innerTxt === "") {
                continue;
              }
              txt += innerTxt;
            }
          }
          txt = txt.trim();
          txt = "> " + txt.split("\n").join("\n> ");
          return txt;
        });
        showdown2.subParser("makeMarkdown.codeBlock", function(node2, globals) {
          "use strict";
          var lang = node2.getAttribute("language"), num = node2.getAttribute("precodenum");
          return "```" + lang + "\n" + globals.preList[num] + "\n```";
        });
        showdown2.subParser("makeMarkdown.codeSpan", function(node2) {
          "use strict";
          return "`" + node2.innerHTML + "`";
        });
        showdown2.subParser("makeMarkdown.emphasis", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes()) {
            txt += "*";
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt += "*";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.header", function(node2, globals, headerLevel) {
          "use strict";
          var headerMark = new Array(headerLevel + 1).join("#"), txt = "";
          if (node2.hasChildNodes()) {
            txt = headerMark + " ";
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.hr", function() {
          "use strict";
          return "---";
        });
        showdown2.subParser("makeMarkdown.image", function(node2) {
          "use strict";
          var txt = "";
          if (node2.hasAttribute("src")) {
            txt += "![" + node2.getAttribute("alt") + "](";
            txt += "<" + node2.getAttribute("src") + ">";
            if (node2.hasAttribute("width") && node2.hasAttribute("height")) {
              txt += " =" + node2.getAttribute("width") + "x" + node2.getAttribute("height");
            }
            if (node2.hasAttribute("title")) {
              txt += ' "' + node2.getAttribute("title") + '"';
            }
            txt += ")";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.links", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes() && node2.hasAttribute("href")) {
            var children = node2.childNodes, childrenLength = children.length;
            txt = "[";
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt += "](";
            txt += "<" + node2.getAttribute("href") + ">";
            if (node2.hasAttribute("title")) {
              txt += ' "' + node2.getAttribute("title") + '"';
            }
            txt += ")";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.list", function(node2, globals, type) {
          "use strict";
          var txt = "";
          if (!node2.hasChildNodes()) {
            return "";
          }
          var listItems = node2.childNodes, listItemsLenght = listItems.length, listNum = node2.getAttribute("start") || 1;
          for (var i3 = 0; i3 < listItemsLenght; ++i3) {
            if (typeof listItems[i3].tagName === "undefined" || listItems[i3].tagName.toLowerCase() !== "li") {
              continue;
            }
            var bullet = "";
            if (type === "ol") {
              bullet = listNum.toString() + ". ";
            } else {
              bullet = "- ";
            }
            txt += bullet + showdown2.subParser("makeMarkdown.listItem")(listItems[i3], globals);
            ++listNum;
          }
          txt += "\n<!-- -->\n";
          return txt.trim();
        });
        showdown2.subParser("makeMarkdown.listItem", function(node2, globals) {
          "use strict";
          var listItemTxt = "";
          var children = node2.childNodes, childrenLenght = children.length;
          for (var i3 = 0; i3 < childrenLenght; ++i3) {
            listItemTxt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
          }
          if (!/\n$/.test(listItemTxt)) {
            listItemTxt += "\n";
          } else {
            listItemTxt = listItemTxt.split("\n").join("\n    ").replace(/^ {4}$/gm, "").replace(/\n\n+/g, "\n\n");
          }
          return listItemTxt;
        });
        showdown2.subParser("makeMarkdown.node", function(node2, globals, spansOnly) {
          "use strict";
          spansOnly = spansOnly || false;
          var txt = "";
          if (node2.nodeType === 3) {
            return showdown2.subParser("makeMarkdown.txt")(node2, globals);
          }
          if (node2.nodeType === 8) {
            return "<!--" + node2.data + "-->\n\n";
          }
          if (node2.nodeType !== 1) {
            return "";
          }
          var tagName = node2.tagName.toLowerCase();
          switch (tagName) {
            //
            // BLOCKS
            //
            case "h1":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 1) + "\n\n";
              }
              break;
            case "h2":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 2) + "\n\n";
              }
              break;
            case "h3":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 3) + "\n\n";
              }
              break;
            case "h4":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 4) + "\n\n";
              }
              break;
            case "h5":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 5) + "\n\n";
              }
              break;
            case "h6":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.header")(node2, globals, 6) + "\n\n";
              }
              break;
            case "p":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.paragraph")(node2, globals) + "\n\n";
              }
              break;
            case "blockquote":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.blockquote")(node2, globals) + "\n\n";
              }
              break;
            case "hr":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.hr")(node2, globals) + "\n\n";
              }
              break;
            case "ol":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.list")(node2, globals, "ol") + "\n\n";
              }
              break;
            case "ul":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.list")(node2, globals, "ul") + "\n\n";
              }
              break;
            case "precode":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.codeBlock")(node2, globals) + "\n\n";
              }
              break;
            case "pre":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.pre")(node2, globals) + "\n\n";
              }
              break;
            case "table":
              if (!spansOnly) {
                txt = showdown2.subParser("makeMarkdown.table")(node2, globals) + "\n\n";
              }
              break;
            //
            // SPANS
            //
            case "code":
              txt = showdown2.subParser("makeMarkdown.codeSpan")(node2, globals);
              break;
            case "em":
            case "i":
              txt = showdown2.subParser("makeMarkdown.emphasis")(node2, globals);
              break;
            case "strong":
            case "b":
              txt = showdown2.subParser("makeMarkdown.strong")(node2, globals);
              break;
            case "del":
              txt = showdown2.subParser("makeMarkdown.strikethrough")(node2, globals);
              break;
            case "a":
              txt = showdown2.subParser("makeMarkdown.links")(node2, globals);
              break;
            case "img":
              txt = showdown2.subParser("makeMarkdown.image")(node2, globals);
              break;
            default:
              txt = node2.outerHTML + "\n\n";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.paragraph", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes()) {
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
          }
          txt = txt.trim();
          return txt;
        });
        showdown2.subParser("makeMarkdown.pre", function(node2, globals) {
          "use strict";
          var num = node2.getAttribute("prenum");
          return "<pre>" + globals.preList[num] + "</pre>";
        });
        showdown2.subParser("makeMarkdown.strikethrough", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes()) {
            txt += "~~";
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt += "~~";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.strong", function(node2, globals) {
          "use strict";
          var txt = "";
          if (node2.hasChildNodes()) {
            txt += "**";
            var children = node2.childNodes, childrenLength = children.length;
            for (var i3 = 0; i3 < childrenLength; ++i3) {
              txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals);
            }
            txt += "**";
          }
          return txt;
        });
        showdown2.subParser("makeMarkdown.table", function(node2, globals) {
          "use strict";
          var txt = "", tableArray = [[], []], headings = node2.querySelectorAll("thead>tr>th"), rows = node2.querySelectorAll("tbody>tr"), i3, ii;
          for (i3 = 0; i3 < headings.length; ++i3) {
            var headContent = showdown2.subParser("makeMarkdown.tableCell")(headings[i3], globals), allign = "---";
            if (headings[i3].hasAttribute("style")) {
              var style = headings[i3].getAttribute("style").toLowerCase().replace(/\s/g, "");
              switch (style) {
                case "text-align:left;":
                  allign = ":---";
                  break;
                case "text-align:right;":
                  allign = "---:";
                  break;
                case "text-align:center;":
                  allign = ":---:";
                  break;
              }
            }
            tableArray[0][i3] = headContent.trim();
            tableArray[1][i3] = allign;
          }
          for (i3 = 0; i3 < rows.length; ++i3) {
            var r4 = tableArray.push([]) - 1, cols = rows[i3].getElementsByTagName("td");
            for (ii = 0; ii < headings.length; ++ii) {
              var cellContent = " ";
              if (typeof cols[ii] !== "undefined") {
                cellContent = showdown2.subParser("makeMarkdown.tableCell")(cols[ii], globals);
              }
              tableArray[r4].push(cellContent);
            }
          }
          var cellSpacesCount = 3;
          for (i3 = 0; i3 < tableArray.length; ++i3) {
            for (ii = 0; ii < tableArray[i3].length; ++ii) {
              var strLen = tableArray[i3][ii].length;
              if (strLen > cellSpacesCount) {
                cellSpacesCount = strLen;
              }
            }
          }
          for (i3 = 0; i3 < tableArray.length; ++i3) {
            for (ii = 0; ii < tableArray[i3].length; ++ii) {
              if (i3 === 1) {
                if (tableArray[i3][ii].slice(-1) === ":") {
                  tableArray[i3][ii] = showdown2.helper.padEnd(tableArray[i3][ii].slice(-1), cellSpacesCount - 1, "-") + ":";
                } else {
                  tableArray[i3][ii] = showdown2.helper.padEnd(tableArray[i3][ii], cellSpacesCount, "-");
                }
              } else {
                tableArray[i3][ii] = showdown2.helper.padEnd(tableArray[i3][ii], cellSpacesCount);
              }
            }
            txt += "| " + tableArray[i3].join(" | ") + " |\n";
          }
          return txt.trim();
        });
        showdown2.subParser("makeMarkdown.tableCell", function(node2, globals) {
          "use strict";
          var txt = "";
          if (!node2.hasChildNodes()) {
            return "";
          }
          var children = node2.childNodes, childrenLength = children.length;
          for (var i3 = 0; i3 < childrenLength; ++i3) {
            txt += showdown2.subParser("makeMarkdown.node")(children[i3], globals, true);
          }
          return txt.trim();
        });
        showdown2.subParser("makeMarkdown.txt", function(node2) {
          "use strict";
          var txt = node2.nodeValue;
          txt = txt.replace(/ +/g, " ");
          txt = txt.replace(/¨NBSP;/g, " ");
          txt = showdown2.helper.unescapeHTMLEntities(txt);
          txt = txt.replace(/([*_~|`])/g, "\\$1");
          txt = txt.replace(/^(\s*)>/g, "\\$1>");
          txt = txt.replace(/^#/gm, "\\#");
          txt = txt.replace(/^(\s*)([-=]{3,})(\s*)$/, "$1\\$2$3");
          txt = txt.replace(/^( {0,3}\d+)\./gm, "$1\\.");
          txt = txt.replace(/^( {0,3})([+-])/gm, "$1\\$2");
          txt = txt.replace(/]([\s]*)\(/g, "\\]$1\\(");
          txt = txt.replace(/^ {0,3}\[([\S \t]*?)]:/gm, "\\[$1]:");
          return txt;
        });
        var root = this;
        if (typeof define === "function" && define.amd) {
          define(function() {
            "use strict";
            return showdown2;
          });
        } else if (typeof module !== "undefined" && module.exports) {
          module.exports = showdown2;
        } else {
          root.showdown = showdown2;
        }
      }).call(exports);
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
  var require_use_sync_external_store_shim_development = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
      "use strict";
      (function() {
        function is2(x2, y2) {
          return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        function useSyncExternalStore$2(subscribe4, getSnapshot) {
          didWarnOld18Alpha || void 0 === React12.startTransition || (didWarnOld18Alpha = true, console.error(
            "You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."
          ));
          var value = getSnapshot();
          if (!didWarnUncachedGetSnapshot) {
            var cachedValue = getSnapshot();
            objectIs(value, cachedValue) || (console.error(
              "The result of getSnapshot should be cached to avoid an infinite loop"
            ), didWarnUncachedGetSnapshot = true);
          }
          cachedValue = useState27({
            inst: { value, getSnapshot }
          });
          var inst = cachedValue[0].inst, forceUpdate = cachedValue[1];
          useLayoutEffect8(
            function() {
              inst.value = value;
              inst.getSnapshot = getSnapshot;
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            },
            [subscribe4, value, getSnapshot]
          );
          useEffect35(
            function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              return subscribe4(function() {
                checkIfSnapshotChanged(inst) && forceUpdate({ inst });
              });
            },
            [subscribe4]
          );
          useDebugValue2(value);
          return value;
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          inst = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(inst, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function useSyncExternalStore$1(subscribe4, getSnapshot) {
          return getSnapshot();
        }
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
        var React12 = require_react(), objectIs = "function" === typeof Object.is ? Object.is : is2, useState27 = React12.useState, useEffect35 = React12.useEffect, useLayoutEffect8 = React12.useLayoutEffect, useDebugValue2 = React12.useDebugValue, didWarnOld18Alpha = false, didWarnUncachedGetSnapshot = false, shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
        exports.useSyncExternalStore = void 0 !== React12.useSyncExternalStore ? React12.useSyncExternalStore : shim;
        "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ && "function" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
      })();
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_use_sync_external_store_shim_development();
      }
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize(fn) {
    var cache3 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache3[arg] === void 0) cache3[arg] = fn(arg);
      return cache3[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef2(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense2;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef2;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/hoist-non-react-statics/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is2();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i3 = 0; i3 < keys.length; ++i3) {
            var key = keys[i3];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e3) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics;
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var emotion_is_prop_valid_esm_exports = {};
  __export(emotion_is_prop_valid_esm_exports, {
    default: () => isPropValid
  });
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|fetchpriority|fetchPriority|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize(
        function(prop2) {
          return reactPropsRegex.test(prop2) || prop2.charCodeAt(0) === 111 && prop2.charCodeAt(1) === 110 && prop2.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/highlight-words-core/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/highlight-words-core/dist/index.js"(exports, module) {
      module.exports = /******/
      function(modules) {
        var installedModules = {};
        function __webpack_require__(moduleId) {
          if (installedModules[moduleId])
            return installedModules[moduleId].exports;
          var module2 = installedModules[moduleId] = {
            /******/
            exports: {},
            /******/
            id: moduleId,
            /******/
            loaded: false
            /******/
          };
          modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
          module2.loaded = true;
          return module2.exports;
        }
        __webpack_require__.m = modules;
        __webpack_require__.c = installedModules;
        __webpack_require__.p = "";
        return __webpack_require__(0);
      }([
        /* 0 */
        /***/
        function(module2, exports2, __webpack_require__) {
          module2.exports = __webpack_require__(1);
        },
        /* 1 */
        /***/
        function(module2, exports2, __webpack_require__) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var _utils = __webpack_require__(2);
          Object.defineProperty(exports2, "combineChunks", {
            enumerable: true,
            get: function get() {
              return _utils.combineChunks;
            }
          });
          Object.defineProperty(exports2, "fillInChunks", {
            enumerable: true,
            get: function get() {
              return _utils.fillInChunks;
            }
          });
          Object.defineProperty(exports2, "findAll", {
            enumerable: true,
            get: function get() {
              return _utils.findAll;
            }
          });
          Object.defineProperty(exports2, "findChunks", {
            enumerable: true,
            get: function get() {
              return _utils.findChunks;
            }
          });
        },
        /* 2 */
        /***/
        function(module2, exports2) {
          "use strict";
          Object.defineProperty(exports2, "__esModule", {
            value: true
          });
          var findAll2 = exports2.findAll = function findAll3(_ref4) {
            var autoEscape = _ref4.autoEscape, _ref$caseSensitive = _ref4.caseSensitive, caseSensitive = _ref$caseSensitive === void 0 ? false : _ref$caseSensitive, _ref$findChunks = _ref4.findChunks, findChunks = _ref$findChunks === void 0 ? defaultFindChunks : _ref$findChunks, sanitize2 = _ref4.sanitize, searchWords = _ref4.searchWords, textToHighlight = _ref4.textToHighlight;
            return fillInChunks({
              chunksToHighlight: combineChunks({
                chunks: findChunks({
                  autoEscape,
                  caseSensitive,
                  sanitize: sanitize2,
                  searchWords,
                  textToHighlight
                })
              }),
              totalLength: textToHighlight ? textToHighlight.length : 0
            });
          };
          var combineChunks = exports2.combineChunks = function combineChunks2(_ref22) {
            var chunks = _ref22.chunks;
            chunks = chunks.sort(function(first, second) {
              return first.start - second.start;
            }).reduce(function(processedChunks, nextChunk) {
              if (processedChunks.length === 0) {
                return [nextChunk];
              } else {
                var prevChunk = processedChunks.pop();
                if (nextChunk.start < prevChunk.end) {
                  var endIndex = Math.max(prevChunk.end, nextChunk.end);
                  processedChunks.push({ highlight: false, start: prevChunk.start, end: endIndex });
                } else {
                  processedChunks.push(prevChunk, nextChunk);
                }
                return processedChunks;
              }
            }, []);
            return chunks;
          };
          var defaultFindChunks = function defaultFindChunks2(_ref32) {
            var autoEscape = _ref32.autoEscape, caseSensitive = _ref32.caseSensitive, _ref3$sanitize = _ref32.sanitize, sanitize2 = _ref3$sanitize === void 0 ? defaultSanitize : _ref3$sanitize, searchWords = _ref32.searchWords, textToHighlight = _ref32.textToHighlight;
            textToHighlight = sanitize2(textToHighlight);
            return searchWords.filter(function(searchWord) {
              return searchWord;
            }).reduce(function(chunks, searchWord) {
              searchWord = sanitize2(searchWord);
              if (autoEscape) {
                searchWord = escapeRegExpFn(searchWord);
              }
              var regex = new RegExp(searchWord, caseSensitive ? "g" : "gi");
              var match2 = void 0;
              while (match2 = regex.exec(textToHighlight)) {
                var _start = match2.index;
                var _end = regex.lastIndex;
                if (_end > _start) {
                  chunks.push({ highlight: false, start: _start, end: _end });
                }
                if (match2.index === regex.lastIndex) {
                  regex.lastIndex++;
                }
              }
              return chunks;
            }, []);
          };
          exports2.findChunks = defaultFindChunks;
          var fillInChunks = exports2.fillInChunks = function fillInChunks2(_ref4) {
            var chunksToHighlight = _ref4.chunksToHighlight, totalLength = _ref4.totalLength;
            var allChunks = [];
            var append4 = function append5(start2, end, highlight) {
              if (end - start2 > 0) {
                allChunks.push({
                  start: start2,
                  end,
                  highlight
                });
              }
            };
            if (chunksToHighlight.length === 0) {
              append4(0, totalLength, false);
            } else {
              var lastIndex = 0;
              chunksToHighlight.forEach(function(chunk) {
                append4(lastIndex, chunk.start, false);
                append4(chunk.start, chunk.end, true);
                lastIndex = chunk.end;
              });
              append4(lastIndex, totalLength, false);
            }
            return allChunks;
          };
          function defaultSanitize(string2) {
            return string2;
          }
          function escapeRegExpFn(string2) {
            return string2.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
          }
        }
        /******/
      ]);
    }
  });

  // node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType2(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef2(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense2;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef2;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/prop-types/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty2 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i3 = 0; i3 < 10; i3++) {
            test2["_" + String.fromCharCode(i3)] = i3;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n3) {
            return test2[n3];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to2 = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from2 = Object(arguments[s2]);
          for (var key in from2) {
            if (hasOwnProperty2.call(from2, key)) {
              to2[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i3 = 0; i3 < symbols.length; i3++) {
              if (propIsEnumerable.call(from2, symbols[i3])) {
                to2[symbols[i3]] = from2[symbols[i3]];
              }
            }
          }
        }
        return to2;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text2) {
          var message = "Warning: " + text2;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error2;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error2 = ex;
              }
              if (error2 && !(error2 instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
                loggedTypeFailures[error2.message] = true;
                var stack2 = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error2.message + (stack2 != null ? stack2 : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is3();
      var assign3 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text2) {
          var message = "Warning: " + text2;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x2) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement6, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is2(x2, y2) {
          if (x2 === y2) {
            return x2 !== 0 || 1 / x2 === 1 / y2;
          } else {
            return x2 !== x2 && y2 !== y2;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey2 = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey2] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey2] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i3 = 0; i3 < propValue.length; i3++) {
              var error2 = typeChecker(propValue, i3, componentName, location, propFullName + "[" + i3 + "]", ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement6(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i3 = 0; i3 < expectedValues.length; i3++) {
              if (is2(propValue, expectedValues[i3])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error2 = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error2 instanceof Error) {
                  return error2;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker = arrayOfTypeCheckers[i3];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i3 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i4 = 0; i4 < arrayOfTypeCheckers.length; i4++) {
              var checker2 = arrayOfTypeCheckers[i4];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign3({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error2 = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error2) {
                return error2;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement6(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is3();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/downshift/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development4 = __commonJS({
    "node_modules/downshift/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = 60103;
          var REACT_PORTAL_TYPE = 60106;
          var REACT_FRAGMENT_TYPE = 60107;
          var REACT_STRICT_MODE_TYPE = 60108;
          var REACT_PROFILER_TYPE = 60114;
          var REACT_PROVIDER_TYPE = 60109;
          var REACT_CONTEXT_TYPE = 60110;
          var REACT_FORWARD_REF_TYPE = 60112;
          var REACT_SUSPENSE_TYPE = 60113;
          var REACT_SUSPENSE_LIST_TYPE = 60120;
          var REACT_MEMO_TYPE = 60115;
          var REACT_LAZY_TYPE = 60116;
          var REACT_BLOCK_TYPE = 60121;
          var REACT_SERVER_BLOCK_TYPE = 60122;
          var REACT_FUNDAMENTAL_TYPE = 60117;
          var REACT_SCOPE_TYPE = 60119;
          var REACT_OPAQUE_ID_TYPE = 60128;
          var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
          var REACT_OFFSCREEN_TYPE = 60130;
          var REACT_LEGACY_HIDDEN_TYPE = 60131;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            REACT_ELEMENT_TYPE = symbolFor("react.element");
            REACT_PORTAL_TYPE = symbolFor("react.portal");
            REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
            REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
            REACT_PROFILER_TYPE = symbolFor("react.profiler");
            REACT_PROVIDER_TYPE = symbolFor("react.provider");
            REACT_CONTEXT_TYPE = symbolFor("react.context");
            REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
            REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
            REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
            REACT_MEMO_TYPE = symbolFor("react.memo");
            REACT_LAZY_TYPE = symbolFor("react.lazy");
            REACT_BLOCK_TYPE = symbolFor("react.block");
            REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
            REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
            REACT_SCOPE_TYPE = symbolFor("react.scope");
            REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
            REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
            REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
            REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
          }
          var enableScopeAPI = false;
          function isValidElementType2(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef2 = REACT_FORWARD_REF_TYPE;
          var Fragment10 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal2 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode2 = REACT_STRICT_MODE_TYPE;
          var Suspense2 = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef2(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef2;
          exports.Fragment = Fragment10;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal2;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode2;
          exports.Suspense = Suspense2;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef2;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType2;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/downshift/node_modules/react-is/index.js
  var require_react_is4 = __commonJS({
    "node_modules/downshift/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development4();
      }
    }
  });

  // node_modules/autosize/dist/autosize.js
  var require_autosize = __commonJS({
    "node_modules/autosize/dist/autosize.js"(exports, module) {
      (function(global2, factory) {
        if (typeof define === "function" && define.amd) {
          define(["module", "exports"], factory);
        } else if (typeof exports !== "undefined") {
          factory(module, exports);
        } else {
          var mod = {
            exports: {}
          };
          factory(mod, mod.exports);
          global2.autosize = mod.exports;
        }
      })(exports, function(module2, exports2) {
        "use strict";
        var map = typeof Map === "function" ? /* @__PURE__ */ new Map() : /* @__PURE__ */ function() {
          var keys = [];
          var values = [];
          return {
            has: function has(key) {
              return keys.indexOf(key) > -1;
            },
            get: function get(key) {
              return values[keys.indexOf(key)];
            },
            set: function set(key, value) {
              if (keys.indexOf(key) === -1) {
                keys.push(key);
                values.push(value);
              }
            },
            delete: function _delete(key) {
              var index2 = keys.indexOf(key);
              if (index2 > -1) {
                keys.splice(index2, 1);
                values.splice(index2, 1);
              }
            }
          };
        }();
        var createEvent = function createEvent2(name) {
          return new Event(name, { bubbles: true });
        };
        try {
          new Event("test");
        } catch (e3) {
          createEvent = function createEvent2(name) {
            var evt = document.createEvent("Event");
            evt.initEvent(name, true, false);
            return evt;
          };
        }
        function assign3(ta) {
          if (!ta || !ta.nodeName || ta.nodeName !== "TEXTAREA" || map.has(ta)) return;
          var heightOffset = null;
          var clientWidth = null;
          var cachedHeight = null;
          function init2() {
            var style = window.getComputedStyle(ta, null);
            if (style.resize === "vertical") {
              ta.style.resize = "none";
            } else if (style.resize === "both") {
              ta.style.resize = "horizontal";
            }
            if (style.boxSizing === "content-box") {
              heightOffset = -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
            } else {
              heightOffset = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            }
            if (isNaN(heightOffset)) {
              heightOffset = 0;
            }
            update4();
          }
          function changeOverflow(value) {
            {
              var width = ta.style.width;
              ta.style.width = "0px";
              ta.offsetWidth;
              ta.style.width = width;
            }
            ta.style.overflowY = value;
          }
          function getParentOverflows(el) {
            var arr = [];
            while (el && el.parentNode && el.parentNode instanceof Element) {
              if (el.parentNode.scrollTop) {
                arr.push({
                  node: el.parentNode,
                  scrollTop: el.parentNode.scrollTop
                });
              }
              el = el.parentNode;
            }
            return arr;
          }
          function resize() {
            if (ta.scrollHeight === 0) {
              return;
            }
            var overflows = getParentOverflows(ta);
            var docTop = document.documentElement && document.documentElement.scrollTop;
            ta.style.height = "";
            ta.style.height = ta.scrollHeight + heightOffset + "px";
            clientWidth = ta.clientWidth;
            overflows.forEach(function(el) {
              el.node.scrollTop = el.scrollTop;
            });
            if (docTop) {
              document.documentElement.scrollTop = docTop;
            }
          }
          function update4() {
            resize();
            var styleHeight = Math.round(parseFloat(ta.style.height));
            var computed = window.getComputedStyle(ta, null);
            var actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(computed.height)) : ta.offsetHeight;
            if (actualHeight < styleHeight) {
              if (computed.overflowY === "hidden") {
                changeOverflow("scroll");
                resize();
                actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
              }
            } else {
              if (computed.overflowY !== "hidden") {
                changeOverflow("hidden");
                resize();
                actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
              }
            }
            if (cachedHeight !== actualHeight) {
              cachedHeight = actualHeight;
              var evt = createEvent("autosize:resized");
              try {
                ta.dispatchEvent(evt);
              } catch (err) {
              }
            }
          }
          var pageResize = function pageResize2() {
            if (ta.clientWidth !== clientWidth) {
              update4();
            }
          };
          var destroy2 = function(style) {
            window.removeEventListener("resize", pageResize, false);
            ta.removeEventListener("input", update4, false);
            ta.removeEventListener("keyup", update4, false);
            ta.removeEventListener("autosize:destroy", destroy2, false);
            ta.removeEventListener("autosize:update", update4, false);
            Object.keys(style).forEach(function(key) {
              ta.style[key] = style[key];
            });
            map.delete(ta);
          }.bind(ta, {
            height: ta.style.height,
            resize: ta.style.resize,
            overflowY: ta.style.overflowY,
            overflowX: ta.style.overflowX,
            wordWrap: ta.style.wordWrap
          });
          ta.addEventListener("autosize:destroy", destroy2, false);
          if ("onpropertychange" in ta && "oninput" in ta) {
            ta.addEventListener("keyup", update4, false);
          }
          window.addEventListener("resize", pageResize, false);
          ta.addEventListener("input", update4, false);
          ta.addEventListener("autosize:update", update4, false);
          ta.style.overflowX = "hidden";
          ta.style.wordWrap = "break-word";
          map.set(ta, {
            destroy: destroy2,
            update: update4
          });
          init2();
        }
        function destroy(ta) {
          var methods = map.get(ta);
          if (methods) {
            methods.destroy();
          }
        }
        function update3(ta) {
          var methods = map.get(ta);
          if (methods) {
            methods.update();
          }
        }
        var autosize = null;
        if (typeof window === "undefined" || typeof window.getComputedStyle !== "function") {
          autosize = function autosize2(el) {
            return el;
          };
          autosize.destroy = function(el) {
            return el;
          };
          autosize.update = function(el) {
            return el;
          };
        } else {
          autosize = function autosize2(el, options) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], function(x2) {
                return assign3(x2, options);
              });
            }
            return el;
          };
          autosize.destroy = function(el) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], destroy);
            }
            return el;
          };
          autosize.update = function(el) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], update3);
            }
            return el;
          };
        }
        exports2.default = autosize;
        module2.exports = exports2["default"];
      });
    }
  });

  // node_modules/computed-style/dist/computedStyle.commonjs.js
  var require_computedStyle_commonjs = __commonJS({
    "node_modules/computed-style/dist/computedStyle.commonjs.js"(exports, module) {
      var computedStyle = function(el, prop2, getComputedStyle5) {
        getComputedStyle5 = window.getComputedStyle;
        return (
          // If we have getComputedStyle
          (getComputedStyle5 ? (
            // Query it
            // TODO: From CSS-Query notes, we might need (node, null) for FF
            getComputedStyle5(el)
          ) : (
            // Otherwise, we are in IE and use currentStyle
            el.currentStyle
          ))[
            // Switch to camelCase for CSSOM
            // DEV: Grabbed from jQuery
            // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194
            // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597
            prop2.replace(/-(\w)/gi, function(word, letter) {
              return letter.toUpperCase();
            })
          ]
        );
      };
      module.exports = computedStyle;
    }
  });

  // node_modules/line-height/lib/line-height.js
  var require_line_height = __commonJS({
    "node_modules/line-height/lib/line-height.js"(exports, module) {
      var computedStyle = require_computedStyle_commonjs();
      function lineHeight(node2) {
        var lnHeightStr = computedStyle(node2, "line-height");
        var lnHeight = parseFloat(lnHeightStr, 10);
        if (lnHeightStr === lnHeight + "") {
          var _lnHeightStyle = node2.style.lineHeight;
          node2.style.lineHeight = lnHeightStr + "em";
          lnHeightStr = computedStyle(node2, "line-height");
          lnHeight = parseFloat(lnHeightStr, 10);
          if (_lnHeightStyle) {
            node2.style.lineHeight = _lnHeightStyle;
          } else {
            delete node2.style.lineHeight;
          }
        }
        if (lnHeightStr.indexOf("pt") !== -1) {
          lnHeight *= 4;
          lnHeight /= 3;
        } else if (lnHeightStr.indexOf("mm") !== -1) {
          lnHeight *= 96;
          lnHeight /= 25.4;
        } else if (lnHeightStr.indexOf("cm") !== -1) {
          lnHeight *= 96;
          lnHeight /= 2.54;
        } else if (lnHeightStr.indexOf("in") !== -1) {
          lnHeight *= 96;
        } else if (lnHeightStr.indexOf("pc") !== -1) {
          lnHeight *= 16;
        }
        lnHeight = Math.round(lnHeight);
        if (lnHeightStr === "normal") {
          var nodeName = node2.nodeName;
          var _node = document.createElement(nodeName);
          _node.innerHTML = "&nbsp;";
          if (nodeName.toUpperCase() === "TEXTAREA") {
            _node.setAttribute("rows", "1");
          }
          var fontSizeStr = computedStyle(node2, "font-size");
          _node.style.fontSize = fontSizeStr;
          _node.style.padding = "0px";
          _node.style.border = "0px";
          var body = document.body;
          body.appendChild(_node);
          var height = _node.offsetHeight;
          lnHeight = height;
          body.removeChild(_node);
        }
        return lnHeight;
      }
      module.exports = lineHeight;
    }
  });

  // node_modules/react-autosize-textarea/lib/TextareaAutosize.js
  var require_TextareaAutosize = __commonJS({
    "node_modules/react-autosize-textarea/lib/TextareaAutosize.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || function() {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2) if (b2.hasOwnProperty(p2)) d2[p2] = b2[p2];
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __2() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__2.prototype = b2.prototype, new __2());
        };
      }();
      var __assign2 = exports && exports.__assign || Object.assign || function(t4) {
        for (var s2, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
          s2 = arguments[i3];
          for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2))
            t4[p2] = s2[p2];
        }
        return t4;
      };
      var __rest = exports && exports.__rest || function(s2, e3) {
        var t4 = {};
        for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2) && e3.indexOf(p2) < 0)
          t4[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function") {
          for (var i3 = 0, p2 = Object.getOwnPropertySymbols(s2); i3 < p2.length; i3++) if (e3.indexOf(p2[i3]) < 0)
            t4[p2[i3]] = s2[p2[i3]];
        }
        return t4;
      };
      exports.__esModule = true;
      var React12 = require_react();
      var PropTypes2 = require_prop_types();
      var autosize = require_autosize();
      var _getLineHeight = require_line_height();
      var getLineHeight2 = _getLineHeight;
      var RESIZED = "autosize:resized";
      var TextareaAutosizeClass = (
        /** @class */
        function(_super) {
          __extends(TextareaAutosizeClass2, _super);
          function TextareaAutosizeClass2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
              lineHeight: null
            };
            _this.textarea = null;
            _this.onResize = function(e3) {
              if (_this.props.onResize) {
                _this.props.onResize(e3);
              }
            };
            _this.updateLineHeight = function() {
              if (_this.textarea) {
                _this.setState({
                  lineHeight: getLineHeight2(_this.textarea)
                });
              }
            };
            _this.onChange = function(e3) {
              var onChange = _this.props.onChange;
              _this.currentValue = e3.currentTarget.value;
              onChange && onChange(e3);
            };
            return _this;
          }
          TextareaAutosizeClass2.prototype.componentDidMount = function() {
            var _this = this;
            var _a = this.props, maxRows = _a.maxRows, async = _a.async;
            if (typeof maxRows === "number") {
              this.updateLineHeight();
            }
            if (typeof maxRows === "number" || async) {
              setTimeout(function() {
                return _this.textarea && autosize(_this.textarea);
              });
            } else {
              this.textarea && autosize(this.textarea);
            }
            if (this.textarea) {
              this.textarea.addEventListener(RESIZED, this.onResize);
            }
          };
          TextareaAutosizeClass2.prototype.componentWillUnmount = function() {
            if (this.textarea) {
              this.textarea.removeEventListener(RESIZED, this.onResize);
              autosize.destroy(this.textarea);
            }
          };
          TextareaAutosizeClass2.prototype.render = function() {
            var _this = this;
            var _a = this, _b = _a.props, onResize2 = _b.onResize, maxRows = _b.maxRows, onChange = _b.onChange, style = _b.style, innerRef = _b.innerRef, children = _b.children, props = __rest(_b, ["onResize", "maxRows", "onChange", "style", "innerRef", "children"]), lineHeight = _a.state.lineHeight;
            var maxHeight = maxRows && lineHeight ? lineHeight * maxRows : null;
            return React12.createElement("textarea", __assign2({}, props, { onChange: this.onChange, style: maxHeight ? __assign2({}, style, { maxHeight }) : style, ref: function(element) {
              _this.textarea = element;
              if (typeof _this.props.innerRef === "function") {
                _this.props.innerRef(element);
              } else if (_this.props.innerRef) {
                _this.props.innerRef.current = element;
              }
            } }), children);
          };
          TextareaAutosizeClass2.prototype.componentDidUpdate = function() {
            this.textarea && autosize.update(this.textarea);
          };
          TextareaAutosizeClass2.defaultProps = {
            rows: 1,
            async: false
          };
          TextareaAutosizeClass2.propTypes = {
            rows: PropTypes2.number,
            maxRows: PropTypes2.number,
            onResize: PropTypes2.func,
            innerRef: PropTypes2.any,
            async: PropTypes2.bool
          };
          return TextareaAutosizeClass2;
        }(React12.Component)
      );
      exports.TextareaAutosize = React12.forwardRef(function(props, ref) {
        return React12.createElement(TextareaAutosizeClass, __assign2({}, props, { innerRef: ref }));
      });
    }
  });

  // node_modules/react-autosize-textarea/lib/index.js
  var require_lib = __commonJS({
    "node_modules/react-autosize-textarea/lib/index.js"(exports) {
      "use strict";
      exports.__esModule = true;
      var TextareaAutosize_1 = require_TextareaAutosize();
      exports["default"] = TextareaAutosize_1.TextareaAutosize;
    }
  });

  // node_modules/@wordpress/hooks/build-module/validateNamespace.js
  function validateNamespace(namespace) {
    if ("string" !== typeof namespace || "" === namespace) {
      console.error("The namespace must be a non-empty string.");
      return false;
    }
    if (!/^[a-zA-Z][a-zA-Z0-9_.\-\/]*$/.test(namespace)) {
      console.error("The namespace can only contain numbers, letters, dashes, periods, underscores and slashes.");
      return false;
    }
    return true;
  }
  var validateNamespace_default = validateNamespace;

  // node_modules/@wordpress/hooks/build-module/validateHookName.js
  function validateHookName(hookName) {
    if ("string" !== typeof hookName || "" === hookName) {
      console.error("The hook name must be a non-empty string.");
      return false;
    }
    if (/^__/.test(hookName)) {
      console.error("The hook name cannot begin with `__`.");
      return false;
    }
    if (!/^[a-zA-Z][a-zA-Z0-9_.-]*$/.test(hookName)) {
      console.error("The hook name can only contain numbers, letters, dashes, periods and underscores.");
      return false;
    }
    return true;
  }
  var validateHookName_default = validateHookName;

  // node_modules/@wordpress/hooks/build-module/createAddHook.js
  function createAddHook(hooks, storeKey) {
    return function addHook(hookName, namespace, callback, priority2 = 10) {
      const hooksStore = hooks[storeKey];
      if (!validateHookName_default(hookName)) {
        return;
      }
      if (!validateNamespace_default(namespace)) {
        return;
      }
      if ("function" !== typeof callback) {
        console.error("The hook callback must be a function.");
        return;
      }
      if ("number" !== typeof priority2) {
        console.error("If specified, the hook priority must be a number.");
        return;
      }
      const handler = {
        callback,
        priority: priority2,
        namespace
      };
      if (hooksStore[hookName]) {
        const handlers = hooksStore[hookName].handlers;
        let i3;
        for (i3 = handlers.length; i3 > 0; i3--) {
          if (priority2 >= handlers[i3 - 1].priority) {
            break;
          }
        }
        if (i3 === handlers.length) {
          handlers[i3] = handler;
        } else {
          handlers.splice(i3, 0, handler);
        }
        hooksStore.__current.forEach((hookInfo) => {
          if (hookInfo.name === hookName && hookInfo.currentIndex >= i3) {
            hookInfo.currentIndex++;
          }
        });
      } else {
        hooksStore[hookName] = {
          handlers: [handler],
          runs: 0
        };
      }
      if (hookName !== "hookAdded") {
        hooks.doAction("hookAdded", hookName, namespace, callback, priority2);
      }
    };
  }
  var createAddHook_default = createAddHook;

  // node_modules/@wordpress/hooks/build-module/createRemoveHook.js
  function createRemoveHook(hooks, storeKey, removeAll = false) {
    return function removeHook(hookName, namespace) {
      const hooksStore = hooks[storeKey];
      if (!validateHookName_default(hookName)) {
        return;
      }
      if (!removeAll && !validateNamespace_default(namespace)) {
        return;
      }
      if (!hooksStore[hookName]) {
        return 0;
      }
      let handlersRemoved = 0;
      if (removeAll) {
        handlersRemoved = hooksStore[hookName].handlers.length;
        hooksStore[hookName] = {
          runs: hooksStore[hookName].runs,
          handlers: []
        };
      } else {
        const handlers = hooksStore[hookName].handlers;
        for (let i3 = handlers.length - 1; i3 >= 0; i3--) {
          if (handlers[i3].namespace === namespace) {
            handlers.splice(i3, 1);
            handlersRemoved++;
            hooksStore.__current.forEach((hookInfo) => {
              if (hookInfo.name === hookName && hookInfo.currentIndex >= i3) {
                hookInfo.currentIndex--;
              }
            });
          }
        }
      }
      if (hookName !== "hookRemoved") {
        hooks.doAction("hookRemoved", hookName, namespace);
      }
      return handlersRemoved;
    };
  }
  var createRemoveHook_default = createRemoveHook;

  // node_modules/@wordpress/hooks/build-module/createHasHook.js
  function createHasHook(hooks, storeKey) {
    return function hasHook(hookName, namespace) {
      const hooksStore = hooks[storeKey];
      if ("undefined" !== typeof namespace) {
        return hookName in hooksStore && hooksStore[hookName].handlers.some((hook) => hook.namespace === namespace);
      }
      return hookName in hooksStore;
    };
  }
  var createHasHook_default = createHasHook;

  // node_modules/@wordpress/hooks/build-module/createRunHook.js
  function createRunHook(hooks, storeKey, returnFirstArg, async) {
    return function runHook(hookName, ...args) {
      const hooksStore = hooks[storeKey];
      if (!hooksStore[hookName]) {
        hooksStore[hookName] = {
          handlers: [],
          runs: 0
        };
      }
      hooksStore[hookName].runs++;
      const handlers = hooksStore[hookName].handlers;
      if (true) {
        if ("hookAdded" !== hookName && hooksStore.all) {
          handlers.push(...hooksStore.all.handlers);
        }
      }
      if (!handlers || !handlers.length) {
        return returnFirstArg ? args[0] : void 0;
      }
      const hookInfo = {
        name: hookName,
        currentIndex: 0
      };
      async function asyncRunner() {
        try {
          hooksStore.__current.add(hookInfo);
          let result = returnFirstArg ? args[0] : void 0;
          while (hookInfo.currentIndex < handlers.length) {
            const handler = handlers[hookInfo.currentIndex];
            result = await handler.callback.apply(null, args);
            if (returnFirstArg) {
              args[0] = result;
            }
            hookInfo.currentIndex++;
          }
          return returnFirstArg ? result : void 0;
        } finally {
          hooksStore.__current.delete(hookInfo);
        }
      }
      function syncRunner() {
        try {
          hooksStore.__current.add(hookInfo);
          let result = returnFirstArg ? args[0] : void 0;
          while (hookInfo.currentIndex < handlers.length) {
            const handler = handlers[hookInfo.currentIndex];
            result = handler.callback.apply(null, args);
            if (returnFirstArg) {
              args[0] = result;
            }
            hookInfo.currentIndex++;
          }
          return returnFirstArg ? result : void 0;
        } finally {
          hooksStore.__current.delete(hookInfo);
        }
      }
      return (async ? asyncRunner : syncRunner)();
    };
  }
  var createRunHook_default = createRunHook;

  // node_modules/@wordpress/hooks/build-module/createCurrentHook.js
  function createCurrentHook(hooks, storeKey) {
    return function currentHook() {
      var _currentArray$at$name;
      const hooksStore = hooks[storeKey];
      const currentArray = Array.from(hooksStore.__current);
      return (_currentArray$at$name = currentArray.at(-1)?.name) !== null && _currentArray$at$name !== void 0 ? _currentArray$at$name : null;
    };
  }
  var createCurrentHook_default = createCurrentHook;

  // node_modules/@wordpress/hooks/build-module/createDoingHook.js
  function createDoingHook(hooks, storeKey) {
    return function doingHook(hookName) {
      const hooksStore = hooks[storeKey];
      if ("undefined" === typeof hookName) {
        return hooksStore.__current.size > 0;
      }
      return Array.from(hooksStore.__current).some((hook) => hook.name === hookName);
    };
  }
  var createDoingHook_default = createDoingHook;

  // node_modules/@wordpress/hooks/build-module/createDidHook.js
  function createDidHook(hooks, storeKey) {
    return function didHook(hookName) {
      const hooksStore = hooks[storeKey];
      if (!validateHookName_default(hookName)) {
        return;
      }
      return hooksStore[hookName] && hooksStore[hookName].runs ? hooksStore[hookName].runs : 0;
    };
  }
  var createDidHook_default = createDidHook;

  // node_modules/@wordpress/hooks/build-module/createHooks.js
  var _Hooks = class {
    constructor() {
      this.actions = /* @__PURE__ */ Object.create(null);
      this.actions.__current = /* @__PURE__ */ new Set();
      this.filters = /* @__PURE__ */ Object.create(null);
      this.filters.__current = /* @__PURE__ */ new Set();
      this.addAction = createAddHook_default(this, "actions");
      this.addFilter = createAddHook_default(this, "filters");
      this.removeAction = createRemoveHook_default(this, "actions");
      this.removeFilter = createRemoveHook_default(this, "filters");
      this.hasAction = createHasHook_default(this, "actions");
      this.hasFilter = createHasHook_default(this, "filters");
      this.removeAllActions = createRemoveHook_default(this, "actions", true);
      this.removeAllFilters = createRemoveHook_default(this, "filters", true);
      this.doAction = createRunHook_default(this, "actions", false, false);
      this.doActionAsync = createRunHook_default(this, "actions", false, true);
      this.applyFilters = createRunHook_default(this, "filters", true, false);
      this.applyFiltersAsync = createRunHook_default(this, "filters", true, true);
      this.currentAction = createCurrentHook_default(this, "actions");
      this.currentFilter = createCurrentHook_default(this, "filters");
      this.doingAction = createDoingHook_default(this, "actions");
      this.doingFilter = createDoingHook_default(this, "filters");
      this.didAction = createDidHook_default(this, "actions");
      this.didFilter = createDidHook_default(this, "filters");
    }
  };
  function createHooks() {
    return new _Hooks();
  }
  var createHooks_default = createHooks;

  // node_modules/@wordpress/hooks/build-module/index.js
  var defaultHooks = createHooks_default();
  var {
    addAction,
    addFilter,
    removeAction,
    removeFilter,
    hasAction,
    hasFilter,
    removeAllActions,
    removeAllFilters,
    doAction,
    doActionAsync,
    applyFilters,
    applyFiltersAsync,
    currentAction,
    currentFilter,
    doingAction,
    doingFilter,
    didAction,
    didFilter,
    actions,
    filters
  } = defaultHooks;

  // node_modules/@wordpress/deprecated/build-module/index.js
  var logged = /* @__PURE__ */ Object.create(null);
  function deprecated(feature, options = {}) {
    const {
      since,
      version,
      alternative,
      plugin,
      link,
      hint
    } = options;
    const pluginMessage = plugin ? ` from ${plugin}` : "";
    const sinceMessage = since ? ` since version ${since}` : "";
    const versionMessage = version ? ` and will be removed${pluginMessage} in version ${version}` : "";
    const useInsteadMessage = alternative ? ` Please use ${alternative} instead.` : "";
    const linkMessage = link ? ` See: ${link}` : "";
    const hintMessage = hint ? ` Note: ${hint}` : "";
    const message = `${feature} is deprecated${sinceMessage}${versionMessage}.${useInsteadMessage}${linkMessage}${hintMessage}`;
    if (message in logged) {
      return;
    }
    doAction("deprecated", feature, options, message);
    console.warn(message);
    logged[message] = true;
  }

  // node_modules/redux/dist/redux.mjs
  var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
  var symbol_observable_default = $$observable;
  var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
  var ActionTypes = {
    INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
    REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
    PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
  };
  var actionTypes_default = ActionTypes;
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    let proto = obj;
    while (Object.getPrototypeOf(proto) !== null) {
      proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;
  }
  function miniKindOf(val) {
    if (val === void 0)
      return "undefined";
    if (val === null)
      return "null";
    const type = typeof val;
    switch (type) {
      case "boolean":
      case "string":
      case "number":
      case "symbol":
      case "function": {
        return type;
      }
    }
    if (Array.isArray(val))
      return "array";
    if (isDate(val))
      return "date";
    if (isError(val))
      return "error";
    const constructorName = ctorName(val);
    switch (constructorName) {
      case "Symbol":
      case "Promise":
      case "WeakMap":
      case "WeakSet":
      case "Map":
      case "Set":
        return constructorName;
    }
    return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\s/g, "");
  }
  function ctorName(val) {
    return typeof val.constructor === "function" ? val.constructor.name : null;
  }
  function isError(val) {
    return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
  }
  function isDate(val) {
    if (val instanceof Date)
      return true;
    return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
  }
  function kindOf(val) {
    let typeOfVal = typeof val;
    if (true) {
      typeOfVal = miniKindOf(val);
    }
    return typeOfVal;
  }
  function createStore(reducer2, preloadedState, enhancer) {
    if (typeof reducer2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer2)}'`);
    }
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(false ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
      }
      return enhancer(createStore)(reducer2, preloadedState);
    }
    let currentReducer = reducer2;
    let currentState = preloadedState;
    let currentListeners = /* @__PURE__ */ new Map();
    let nextListeners = currentListeners;
    let listenerIdCounter = 0;
    let isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = /* @__PURE__ */ new Map();
        currentListeners.forEach((listener2, key) => {
          nextListeners.set(key, listener2);
        });
      }
    }
    function getState2() {
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe4(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(false ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener2)}'`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      let isSubscribed = true;
      ensureCanMutateNextListeners();
      const listenerId = listenerIdCounter++;
      nextListeners.set(listenerId, listener2);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        nextListeners.delete(listenerId);
        currentListeners = null;
      };
    }
    function dispatch2(action) {
      if (!isPlainObject(action)) {
        throw new Error(false ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
      }
      if (typeof action.type === "undefined") {
        throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (typeof action.type !== "string") {
        throw new Error(false ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      const listeners = currentListeners = nextListeners;
      listeners.forEach((listener2) => {
        listener2();
      });
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(false ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
      }
      currentReducer = nextReducer;
      dispatch2({
        type: actionTypes_default.REPLACE
      });
    }
    function observable() {
      const outerSubscribe = subscribe4;
      return {
        /**
         * The minimal observable subscription method.
         * @param observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(false ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
          }
          function observeState() {
            const observerAsObserver = observer;
            if (observerAsObserver.next) {
              observerAsObserver.next(getState2());
            }
          }
          observeState();
          const unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        },
        [symbol_observable_default]() {
          return this;
        }
      };
    }
    dispatch2({
      type: actionTypes_default.INIT
    });
    const store6 = {
      dispatch: dispatch2,
      subscribe: subscribe4,
      getState: getState2,
      replaceReducer,
      [symbol_observable_default]: observable
    };
    return store6;
  }
  function compose(...funcs) {
    if (funcs.length === 0) {
      return (arg) => arg;
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce((a2, b2) => (...args) => a2(b2(...args)));
  }
  function applyMiddleware(...middlewares2) {
    return (createStore22) => (reducer2, preloadedState) => {
      const store6 = createStore22(reducer2, preloadedState);
      let dispatch2 = () => {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      const middlewareAPI = {
        getState: store6.getState,
        dispatch: (action, ...args) => dispatch2(action, ...args)
      };
      const chain2 = middlewares2.map((middleware2) => middleware2(middlewareAPI));
      dispatch2 = compose(...chain2)(store6.dispatch);
      return {
        ...store6,
        dispatch: dispatch2
      };
    };
  }

  // node_modules/@wordpress/data/build-module/redux-store/index.js
  var import_equivalent_key_map2 = __toESM(require_equivalent_key_map());

  // node_modules/@wordpress/redux-routine/build-module/is-generator.js
  function isGenerator(object) {
    return !!object && typeof object[Symbol.iterator] === "function" && typeof object.next === "function";
  }

  // node_modules/@wordpress/redux-routine/build-module/runtime.js
  var import_rungen = __toESM(require_dist());

  // node_modules/is-promise/index.mjs
  function isPromise(obj) {
    return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
  }

  // node_modules/is-plain-object/dist/is-plain-object.mjs
  function isObject(o3) {
    return Object.prototype.toString.call(o3) === "[object Object]";
  }
  function isPlainObject2(o3) {
    var ctor, prot;
    if (isObject(o3) === false) return false;
    ctor = o3.constructor;
    if (ctor === void 0) return true;
    prot = ctor.prototype;
    if (isObject(prot) === false) return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }

  // node_modules/@wordpress/redux-routine/build-module/is-action.js
  function isAction(object) {
    return isPlainObject2(object) && typeof object.type === "string";
  }
  function isActionOfType(object, expectedType) {
    return isAction(object) && object.type === expectedType;
  }

  // node_modules/@wordpress/redux-routine/build-module/runtime.js
  function createRuntime(controls = {}, dispatch2) {
    const rungenControls = Object.entries(controls).map(([actionType, control]) => (value, next3, iterate, yieldNext, yieldError) => {
      if (!isActionOfType(value, actionType)) {
        return false;
      }
      const routine = control(value);
      if (isPromise(routine)) {
        routine.then(yieldNext, yieldError);
      } else {
        yieldNext(routine);
      }
      return true;
    });
    const unhandledActionControl = (value, next3) => {
      if (!isAction(value)) {
        return false;
      }
      dispatch2(value);
      next3();
      return true;
    };
    rungenControls.push(unhandledActionControl);
    const rungenRuntime = (0, import_rungen.create)(rungenControls);
    return (action) => new Promise((resolve, reject) => rungenRuntime(action, (result) => {
      if (isAction(result)) {
        dispatch2(result);
      }
      resolve(result);
    }, reject));
  }

  // node_modules/@wordpress/redux-routine/build-module/index.js
  function createMiddleware(controls = {}) {
    return (store6) => {
      const runtime = createRuntime(controls, store6.dispatch);
      return (next3) => (action) => {
        if (!isGenerator(action)) {
          return next3(action);
        }
        return runtime(action);
      };
    };
  }

  // node_modules/tslib/tslib.es6.mjs
  var __assign = function() {
    __assign = Object.assign || function __assign2(t4) {
      for (var s2, i3 = 1, n3 = arguments.length; i3 < n3; i3++) {
        s2 = arguments[i3];
        for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2)) t4[p2] = s2[p2];
      }
      return t4;
    };
    return __assign.apply(this, arguments);
  };

  // node_modules/lower-case/dist.es2015/index.js
  function lowerCase(str) {
    return str.toLowerCase();
  }

  // node_modules/no-case/dist.es2015/index.js
  var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
  var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
  function noCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.splitRegexp, splitRegexp2 = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp2 = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter2 = _d === void 0 ? " " : _d;
    var result = replace(replace(input, splitRegexp2, "$1\0$2"), stripRegexp2, "\0");
    var start2 = 0;
    var end = result.length;
    while (result.charAt(start2) === "\0")
      start2++;
    while (result.charAt(end - 1) === "\0")
      end--;
    return result.slice(start2, end).split("\0").map(transform).join(delimiter2);
  }
  function replace(input, re, value) {
    if (re instanceof RegExp)
      return input.replace(re, value);
    return re.reduce(function(input2, re2) {
      return input2.replace(re2, value);
    }, input);
  }

  // node_modules/pascal-case/dist.es2015/index.js
  function pascalCaseTransform(input, index2) {
    var firstChar = input.charAt(0);
    var lowerChars = input.substr(1).toLowerCase();
    if (index2 > 0 && firstChar >= "0" && firstChar <= "9") {
      return "_" + firstChar + lowerChars;
    }
    return "" + firstChar.toUpperCase() + lowerChars;
  }
  function pascalCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return noCase(input, __assign({ delimiter: "", transform: pascalCaseTransform }, options));
  }

  // node_modules/camel-case/dist.es2015/index.js
  function camelCaseTransform(input, index2) {
    if (index2 === 0)
      return input.toLowerCase();
    return pascalCaseTransform(input, index2);
  }
  function camelCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return pascalCase(input, __assign({ transform: camelCaseTransform }, options));
  }

  // node_modules/dot-case/dist.es2015/index.js
  function dotCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return noCase(input, __assign({ delimiter: "." }, options));
  }

  // node_modules/param-case/dist.es2015/index.js
  function paramCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return dotCase(input, __assign({ delimiter: "-" }, options));
  }

  // node_modules/@wordpress/compose/build-module/utils/create-higher-order-component/index.js
  function createHigherOrderComponent(mapComponent, modifierName) {
    return (Inner) => {
      const Outer = mapComponent(Inner);
      Outer.displayName = hocName(modifierName, Inner);
      return Outer;
    };
  }
  var hocName = (name, Inner) => {
    const inner = Inner.displayName || Inner.name || "Component";
    const outer = pascalCase(name !== null && name !== void 0 ? name : "");
    return `${outer}(${inner})`;
  };

  // node_modules/@wordpress/compose/build-module/utils/debounce/index.js
  var debounce = (func, wait, options) => {
    let lastArgs;
    let lastThis;
    let maxWait = 0;
    let result;
    let timerId;
    let lastCallTime;
    let lastInvokeTime = 0;
    let leading = false;
    let maxing = false;
    let trailing = true;
    if (options) {
      leading = !!options.leading;
      maxing = "maxWait" in options;
      if (options.maxWait !== void 0) {
        maxWait = Math.max(options.maxWait, wait);
      }
      trailing = "trailing" in options ? !!options.trailing : trailing;
    }
    function invokeFunc(time2) {
      const args = lastArgs;
      const thisArg = lastThis;
      lastArgs = void 0;
      lastThis = void 0;
      lastInvokeTime = time2;
      result = func.apply(thisArg, args);
      return result;
    }
    function startTimer(pendingFunc, waitTime) {
      timerId = setTimeout(pendingFunc, waitTime);
    }
    function cancelTimer() {
      if (timerId !== void 0) {
        clearTimeout(timerId);
      }
    }
    function leadingEdge(time2) {
      lastInvokeTime = time2;
      startTimer(timerExpired, wait);
      return leading ? invokeFunc(time2) : result;
    }
    function getTimeSinceLastCall(time2) {
      return time2 - (lastCallTime || 0);
    }
    function remainingWait(time2) {
      const timeSinceLastCall = getTimeSinceLastCall(time2);
      const timeSinceLastInvoke = time2 - lastInvokeTime;
      const timeWaiting = wait - timeSinceLastCall;
      return maxing ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
    }
    function shouldInvoke(time2) {
      const timeSinceLastCall = getTimeSinceLastCall(time2);
      const timeSinceLastInvoke = time2 - lastInvokeTime;
      return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }
    function timerExpired() {
      const time2 = Date.now();
      if (shouldInvoke(time2)) {
        return trailingEdge(time2);
      }
      startTimer(timerExpired, remainingWait(time2));
      return void 0;
    }
    function clearTimer() {
      timerId = void 0;
    }
    function trailingEdge(time2) {
      clearTimer();
      if (trailing && lastArgs) {
        return invokeFunc(time2);
      }
      lastArgs = lastThis = void 0;
      return result;
    }
    function cancel() {
      cancelTimer();
      lastInvokeTime = 0;
      clearTimer();
      lastArgs = lastCallTime = lastThis = void 0;
    }
    function flush3() {
      return pending() ? trailingEdge(Date.now()) : result;
    }
    function pending() {
      return timerId !== void 0;
    }
    function debounced(...args) {
      const time2 = Date.now();
      const isInvoking = shouldInvoke(time2);
      lastArgs = args;
      lastThis = this;
      lastCallTime = time2;
      if (isInvoking) {
        if (!pending()) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          startTimer(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (!pending()) {
        startTimer(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush3;
    debounced.pending = pending;
    return debounced;
  };

  // node_modules/@wordpress/compose/build-module/utils/observable-map/index.js
  function observableMap() {
    const map = /* @__PURE__ */ new Map();
    const listeners = /* @__PURE__ */ new Map();
    function callListeners(name) {
      const list = listeners.get(name);
      if (!list) {
        return;
      }
      for (const listener2 of list) {
        listener2();
      }
    }
    return {
      get(name) {
        return map.get(name);
      },
      set(name, value) {
        map.set(name, value);
        callListeners(name);
      },
      delete(name) {
        map.delete(name);
        callListeners(name);
      },
      subscribe(name, listener2) {
        let list = listeners.get(name);
        if (!list) {
          list = /* @__PURE__ */ new Set();
          listeners.set(name, list);
        }
        list.add(listener2);
        return () => {
          list.delete(listener2);
          if (list.size === 0) {
            listeners.delete(name);
          }
        };
      }
    };
  }

  // node_modules/@wordpress/compose/build-module/higher-order/pipe.js
  var basePipe = (reverse = false) => (...funcs) => (...args) => {
    const functions = funcs.flat();
    if (reverse) {
      functions.reverse();
    }
    return functions.reduce((prev2, func) => [func(...prev2)], args)[0];
  };
  var pipe = basePipe();
  var pipe_default = pipe;

  // node_modules/@wordpress/compose/build-module/higher-order/compose.js
  var compose2 = basePipe(true);
  var compose_default = compose2;

  // node_modules/@wordpress/is-shallow-equal/build-module/objects.js
  function isShallowEqualObjects(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    const aKeys = Object.keys(a2);
    const bKeys = Object.keys(b2);
    if (aKeys.length !== bKeys.length) {
      return false;
    }
    let i3 = 0;
    while (i3 < aKeys.length) {
      const key = aKeys[i3];
      const aValue = a2[key];
      if (
        // In iterating only the keys of the first object after verifying
        // equal lengths, account for the case that an explicit `undefined`
        // value in the first is implicitly undefined in the second.
        //
        // Example: isShallowEqualObjects( { a: undefined }, { b: 5 } )
        aValue === void 0 && !b2.hasOwnProperty(key) || aValue !== b2[key]
      ) {
        return false;
      }
      i3++;
    }
    return true;
  }

  // node_modules/@wordpress/is-shallow-equal/build-module/arrays.js
  function isShallowEqualArrays(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (a2.length !== b2.length) {
      return false;
    }
    for (let i3 = 0, len = a2.length; i3 < len; i3++) {
      if (a2[i3] !== b2[i3]) {
        return false;
      }
    }
    return true;
  }

  // node_modules/@wordpress/is-shallow-equal/build-module/index.js
  function isShallowEqual(a2, b2) {
    if (a2 && b2) {
      if (a2.constructor === Object && b2.constructor === Object) {
        return isShallowEqualObjects(a2, b2);
      } else if (Array.isArray(a2) && Array.isArray(b2)) {
        return isShallowEqualArrays(a2, b2);
      }
    }
    return a2 === b2;
  }

  // node_modules/@wordpress/element/build-module/react.js
  var import_react = __toESM(require_react());

  // node_modules/@wordpress/element/build-module/react-platform.js
  var import_react_dom = __toESM(require_react_dom());
  var import_client = __toESM(require_client());

  // node_modules/@wordpress/element/build-module/utils.js
  var isEmptyElement = (element) => {
    if (typeof element === "number") {
      return false;
    }
    if (typeof element?.valueOf() === "string" || Array.isArray(element)) {
      return !element.length;
    }
    return !element;
  };

  // node_modules/@wordpress/element/build-module/platform.js
  var Platform = {
    OS: "web",
    select: (spec) => "web" in spec ? spec.web : spec.default,
    isWeb: true
  };
  var platform_default = Platform;

  // node_modules/@wordpress/escape-html/build-module/escape-greater.js
  function __unstableEscapeGreaterThan(value) {
    return value.replace(/>/g, "&gt;");
  }

  // node_modules/@wordpress/escape-html/build-module/index.js
  var REGEXP_INVALID_ATTRIBUTE_NAME = /[\u007F-\u009F "'>/="\uFDD0-\uFDEF]/;
  function escapeAmpersand(value) {
    return value.replace(/&(?!([a-z0-9]+|#[0-9]+|#x[a-f0-9]+);)/gi, "&amp;");
  }
  function escapeQuotationMark(value) {
    return value.replace(/"/g, "&quot;");
  }
  function escapeLessThan(value) {
    return value.replace(/</g, "&lt;");
  }
  function escapeAttribute(value) {
    return __unstableEscapeGreaterThan(escapeQuotationMark(escapeAmpersand(value)));
  }
  function escapeHTML(value) {
    return escapeLessThan(escapeAmpersand(value));
  }
  function escapeEditableHTML(value) {
    return escapeLessThan(value.replace(/&/g, "&amp;"));
  }
  function isValidAttributeName(name) {
    return !REGEXP_INVALID_ATTRIBUTE_NAME.test(name);
  }

  // node_modules/@wordpress/element/build-module/raw-html.js
  function RawHTML({
    children,
    ...props
  }) {
    let rawHtml = "";
    import_react.Children.toArray(children).forEach((child) => {
      if (typeof child === "string" && child.trim() !== "") {
        rawHtml += child;
      }
    });
    return (0, import_react.createElement)("div", {
      dangerouslySetInnerHTML: {
        __html: rawHtml
      },
      ...props
    });
  }

  // node_modules/@wordpress/element/build-module/serialize.js
  var {
    Provider,
    Consumer
  } = (0, import_react.createContext)(void 0);
  var ForwardRef = (0, import_react.forwardRef)(() => {
    return null;
  });
  var ATTRIBUTES_TYPES = /* @__PURE__ */ new Set(["string", "boolean", "number"]);
  var SELF_CLOSING_TAGS = /* @__PURE__ */ new Set(["area", "base", "br", "col", "command", "embed", "hr", "img", "input", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
  var BOOLEAN_ATTRIBUTES = /* @__PURE__ */ new Set(["allowfullscreen", "allowpaymentrequest", "allowusermedia", "async", "autofocus", "autoplay", "checked", "controls", "default", "defer", "disabled", "download", "formnovalidate", "hidden", "ismap", "itemscope", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "selected", "typemustmatch"]);
  var ENUMERATED_ATTRIBUTES = /* @__PURE__ */ new Set(["autocapitalize", "autocomplete", "charset", "contenteditable", "crossorigin", "decoding", "dir", "draggable", "enctype", "formenctype", "formmethod", "http-equiv", "inputmode", "kind", "method", "preload", "scope", "shape", "spellcheck", "translate", "type", "wrap"]);
  var CSS_PROPERTIES_SUPPORTS_UNITLESS = /* @__PURE__ */ new Set(["animation", "animationIterationCount", "baselineShift", "borderImageOutset", "borderImageSlice", "borderImageWidth", "columnCount", "cx", "cy", "fillOpacity", "flexGrow", "flexShrink", "floodOpacity", "fontWeight", "gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart", "lineHeight", "opacity", "order", "orphans", "r", "rx", "ry", "shapeImageThreshold", "stopOpacity", "strokeDasharray", "strokeDashoffset", "strokeMiterlimit", "strokeOpacity", "strokeWidth", "tabSize", "widows", "x", "y", "zIndex", "zoom"]);
  function hasPrefix(string2, prefixes2) {
    return prefixes2.some((prefix3) => string2.indexOf(prefix3) === 0);
  }
  function isInternalAttribute(attribute) {
    return "key" === attribute || "children" === attribute;
  }
  function getNormalAttributeValue(attribute, value) {
    switch (attribute) {
      case "style":
        return renderStyle(value);
    }
    return value;
  }
  var SVG_ATTRIBUTE_WITH_DASHES_LIST = ["accentHeight", "alignmentBaseline", "arabicForm", "baselineShift", "capHeight", "clipPath", "clipRule", "colorInterpolation", "colorInterpolationFilters", "colorProfile", "colorRendering", "dominantBaseline", "enableBackground", "fillOpacity", "fillRule", "floodColor", "floodOpacity", "fontFamily", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontWeight", "glyphName", "glyphOrientationHorizontal", "glyphOrientationVertical", "horizAdvX", "horizOriginX", "imageRendering", "letterSpacing", "lightingColor", "markerEnd", "markerMid", "markerStart", "overlinePosition", "overlineThickness", "paintOrder", "panose1", "pointerEvents", "renderingIntent", "shapeRendering", "stopColor", "stopOpacity", "strikethroughPosition", "strikethroughThickness", "strokeDasharray", "strokeDashoffset", "strokeLinecap", "strokeLinejoin", "strokeMiterlimit", "strokeOpacity", "strokeWidth", "textAnchor", "textDecoration", "textRendering", "underlinePosition", "underlineThickness", "unicodeBidi", "unicodeRange", "unitsPerEm", "vAlphabetic", "vHanging", "vIdeographic", "vMathematical", "vectorEffect", "vertAdvY", "vertOriginX", "vertOriginY", "wordSpacing", "writingMode", "xmlnsXlink", "xHeight"].reduce((map, attribute) => {
    map[attribute.toLowerCase()] = attribute;
    return map;
  }, {});
  var CASE_SENSITIVE_SVG_ATTRIBUTES = ["allowReorder", "attributeName", "attributeType", "autoReverse", "baseFrequency", "baseProfile", "calcMode", "clipPathUnits", "contentScriptType", "contentStyleType", "diffuseConstant", "edgeMode", "externalResourcesRequired", "filterRes", "filterUnits", "glyphRef", "gradientTransform", "gradientUnits", "kernelMatrix", "kernelUnitLength", "keyPoints", "keySplines", "keyTimes", "lengthAdjust", "limitingConeAngle", "markerHeight", "markerUnits", "markerWidth", "maskContentUnits", "maskUnits", "numOctaves", "pathLength", "patternContentUnits", "patternTransform", "patternUnits", "pointsAtX", "pointsAtY", "pointsAtZ", "preserveAlpha", "preserveAspectRatio", "primitiveUnits", "refX", "refY", "repeatCount", "repeatDur", "requiredExtensions", "requiredFeatures", "specularConstant", "specularExponent", "spreadMethod", "startOffset", "stdDeviation", "stitchTiles", "suppressContentEditableWarning", "suppressHydrationWarning", "surfaceScale", "systemLanguage", "tableValues", "targetX", "targetY", "textLength", "viewBox", "viewTarget", "xChannelSelector", "yChannelSelector"].reduce((map, attribute) => {
    map[attribute.toLowerCase()] = attribute;
    return map;
  }, {});
  var SVG_ATTRIBUTES_WITH_COLONS = ["xlink:actuate", "xlink:arcrole", "xlink:href", "xlink:role", "xlink:show", "xlink:title", "xlink:type", "xml:base", "xml:lang", "xml:space", "xmlns:xlink"].reduce((map, attribute) => {
    map[attribute.replace(":", "").toLowerCase()] = attribute;
    return map;
  }, {});
  function getNormalAttributeName(attribute) {
    switch (attribute) {
      case "htmlFor":
        return "for";
      case "className":
        return "class";
    }
    const attributeLowerCase = attribute.toLowerCase();
    if (CASE_SENSITIVE_SVG_ATTRIBUTES[attributeLowerCase]) {
      return CASE_SENSITIVE_SVG_ATTRIBUTES[attributeLowerCase];
    } else if (SVG_ATTRIBUTE_WITH_DASHES_LIST[attributeLowerCase]) {
      return paramCase(SVG_ATTRIBUTE_WITH_DASHES_LIST[attributeLowerCase]);
    } else if (SVG_ATTRIBUTES_WITH_COLONS[attributeLowerCase]) {
      return SVG_ATTRIBUTES_WITH_COLONS[attributeLowerCase];
    }
    return attributeLowerCase;
  }
  function getNormalStylePropertyName(property) {
    if (property.startsWith("--")) {
      return property;
    }
    if (hasPrefix(property, ["ms", "O", "Moz", "Webkit"])) {
      return "-" + paramCase(property);
    }
    return paramCase(property);
  }
  function getNormalStylePropertyValue(property, value) {
    if (typeof value === "number" && 0 !== value && !CSS_PROPERTIES_SUPPORTS_UNITLESS.has(property)) {
      return value + "px";
    }
    return value;
  }
  function renderElement(element, context2, legacyContext = {}) {
    if (null === element || void 0 === element || false === element) {
      return "";
    }
    if (Array.isArray(element)) {
      return renderChildren(element, context2, legacyContext);
    }
    switch (typeof element) {
      case "string":
        return escapeHTML(element);
      case "number":
        return element.toString();
    }
    const {
      type,
      props
    } = (
      /** @type {{type?: any, props?: any}} */
      element
    );
    switch (type) {
      case import_react.StrictMode:
      case import_react.Fragment:
        return renderChildren(props.children, context2, legacyContext);
      case RawHTML:
        const {
          children,
          ...wrapperProps
        } = props;
        return renderNativeComponent(!Object.keys(wrapperProps).length ? null : "div", {
          ...wrapperProps,
          dangerouslySetInnerHTML: {
            __html: children
          }
        }, context2, legacyContext);
    }
    switch (typeof type) {
      case "string":
        return renderNativeComponent(type, props, context2, legacyContext);
      case "function":
        if (type.prototype && typeof type.prototype.render === "function") {
          return renderComponent(type, props, context2, legacyContext);
        }
        return renderElement(type(props, legacyContext), context2, legacyContext);
    }
    switch (type && type.$$typeof) {
      case Provider.$$typeof:
        return renderChildren(props.children, props.value, legacyContext);
      case Consumer.$$typeof:
        return renderElement(props.children(context2 || type._currentValue), context2, legacyContext);
      case ForwardRef.$$typeof:
        return renderElement(type.render(props), context2, legacyContext);
    }
    return "";
  }
  function renderNativeComponent(type, props, context2, legacyContext = {}) {
    let content = "";
    if (type === "textarea" && props.hasOwnProperty("value")) {
      content = renderChildren(props.value, context2, legacyContext);
      const {
        value,
        ...restProps
      } = props;
      props = restProps;
    } else if (props.dangerouslySetInnerHTML && typeof props.dangerouslySetInnerHTML.__html === "string") {
      content = props.dangerouslySetInnerHTML.__html;
    } else if (typeof props.children !== "undefined") {
      content = renderChildren(props.children, context2, legacyContext);
    }
    if (!type) {
      return content;
    }
    const attributes = renderAttributes(props);
    if (SELF_CLOSING_TAGS.has(type)) {
      return "<" + type + attributes + "/>";
    }
    return "<" + type + attributes + ">" + content + "</" + type + ">";
  }
  function renderComponent(Component4, props, context2, legacyContext = {}) {
    const instance = new /** @type {import('react').ComponentClass} */
    Component4(props, legacyContext);
    if (typeof // Ignore reason: Current prettier reformats parens and mangles type assertion
    // prettier-ignore
    /** @type {{getChildContext?: () => unknown}} */
    instance.getChildContext === "function") {
      Object.assign(
        legacyContext,
        /** @type {{getChildContext?: () => unknown}} */
        instance.getChildContext()
      );
    }
    const html2 = renderElement(instance.render(), context2, legacyContext);
    return html2;
  }
  function renderChildren(children, context2, legacyContext = {}) {
    let result = "";
    children = Array.isArray(children) ? children : [children];
    for (let i3 = 0; i3 < children.length; i3++) {
      const child = children[i3];
      result += renderElement(child, context2, legacyContext);
    }
    return result;
  }
  function renderAttributes(props) {
    let result = "";
    for (const key in props) {
      const attribute = getNormalAttributeName(key);
      if (!isValidAttributeName(attribute)) {
        continue;
      }
      let value = getNormalAttributeValue(key, props[key]);
      if (!ATTRIBUTES_TYPES.has(typeof value)) {
        continue;
      }
      if (isInternalAttribute(key)) {
        continue;
      }
      const isBooleanAttribute = BOOLEAN_ATTRIBUTES.has(attribute);
      if (isBooleanAttribute && value === false) {
        continue;
      }
      const isMeaningfulAttribute = isBooleanAttribute || hasPrefix(key, ["data-", "aria-"]) || ENUMERATED_ATTRIBUTES.has(attribute);
      if (typeof value === "boolean" && !isMeaningfulAttribute) {
        continue;
      }
      result += " " + attribute;
      if (isBooleanAttribute) {
        continue;
      }
      if (typeof value === "string") {
        value = escapeAttribute(value);
      }
      result += '="' + value + '"';
    }
    return result;
  }
  function renderStyle(style) {
    if (!isPlainObject2(style)) {
      return style;
    }
    let result;
    for (const property in style) {
      const value = style[property];
      if (null === value || void 0 === value) {
        continue;
      }
      if (result) {
        result += ";";
      } else {
        result = "";
      }
      const normalName = getNormalStylePropertyName(property);
      const normalValue = getNormalStylePropertyValue(property, value);
      result += normalName + ":" + normalValue;
    }
    return result;
  }
  var serialize_default = renderElement;

  // node_modules/@wordpress/compose/build-module/hooks/use-instance-id/index.js
  var instanceMap = /* @__PURE__ */ new WeakMap();
  function createId(object) {
    const instances = instanceMap.get(object) || 0;
    instanceMap.set(object, instances + 1);
    return instances;
  }
  function useInstanceId(object, prefix3, preferredId) {
    return (0, import_react.useMemo)(() => {
      if (preferredId) {
        return preferredId;
      }
      const id3 = createId(object);
      return prefix3 ? `${prefix3}-${id3}` : id3;
    }, [object, preferredId, prefix3]);
  }
  var use_instance_id_default = useInstanceId;

  // node_modules/@wordpress/dom/build-module/focusable.js
  var focusable_exports = {};
  __export(focusable_exports, {
    find: () => find
  });
  function buildSelector(sequential) {
    return [sequential ? '[tabindex]:not([tabindex^="-"])' : "[tabindex]", "a[href]", "button:not([disabled])", 'input:not([type="hidden"]):not([disabled])', "select:not([disabled])", "textarea:not([disabled])", 'iframe:not([tabindex^="-"])', "object", "embed", "area[href]", "[contenteditable]:not([contenteditable=false])"].join(",");
  }
  function isVisible(element) {
    return element.offsetWidth > 0 || element.offsetHeight > 0 || element.getClientRects().length > 0;
  }
  function isValidFocusableArea(element) {
    const map = element.closest("map[name]");
    if (!map) {
      return false;
    }
    const img = element.ownerDocument.querySelector('img[usemap="#' + map.name + '"]');
    return !!img && isVisible(img);
  }
  function find(context2, {
    sequential = false
  } = {}) {
    const elements2 = context2.querySelectorAll(buildSelector(sequential));
    return Array.from(elements2).filter((element) => {
      if (!isVisible(element)) {
        return false;
      }
      const {
        nodeName
      } = element;
      if ("AREA" === nodeName) {
        return isValidFocusableArea(
          /** @type {HTMLAreaElement} */
          element
        );
      }
      return true;
    });
  }

  // node_modules/@wordpress/dom/build-module/tabbable.js
  var tabbable_exports = {};
  __export(tabbable_exports, {
    find: () => find2,
    findNext: () => findNext,
    findPrevious: () => findPrevious,
    isTabbableIndex: () => isTabbableIndex
  });
  function getTabIndex(element) {
    const tabIndex = element.getAttribute("tabindex");
    return tabIndex === null ? 0 : parseInt(tabIndex, 10);
  }
  function isTabbableIndex(element) {
    return getTabIndex(element) !== -1;
  }
  function createStatefulCollapseRadioGroup() {
    const CHOSEN_RADIO_BY_NAME = {};
    return function collapseRadioGroup(result, element) {
      const {
        nodeName,
        type,
        checked,
        name
      } = element;
      if (nodeName !== "INPUT" || type !== "radio" || !name) {
        return result.concat(element);
      }
      const hasChosen = CHOSEN_RADIO_BY_NAME.hasOwnProperty(name);
      const isChosen = checked || !hasChosen;
      if (!isChosen) {
        return result;
      }
      if (hasChosen) {
        const hadChosenElement = CHOSEN_RADIO_BY_NAME[name];
        result = result.filter((e3) => e3 !== hadChosenElement);
      }
      CHOSEN_RADIO_BY_NAME[name] = element;
      return result.concat(element);
    };
  }
  function mapElementToObjectTabbable(element, index2) {
    return {
      element,
      index: index2
    };
  }
  function mapObjectTabbableToElement(object) {
    return object.element;
  }
  function compareObjectTabbables(a2, b2) {
    const aTabIndex = getTabIndex(a2.element);
    const bTabIndex = getTabIndex(b2.element);
    if (aTabIndex === bTabIndex) {
      return a2.index - b2.index;
    }
    return aTabIndex - bTabIndex;
  }
  function filterTabbable(focusables) {
    return focusables.filter(isTabbableIndex).map(mapElementToObjectTabbable).sort(compareObjectTabbables).map(mapObjectTabbableToElement).reduce(createStatefulCollapseRadioGroup(), []);
  }
  function find2(context2) {
    return filterTabbable(find(context2));
  }
  function findPrevious(element) {
    return filterTabbable(find(element.ownerDocument.body)).reverse().find((focusable) => (
      // eslint-disable-next-line no-bitwise
      element.compareDocumentPosition(focusable) & element.DOCUMENT_POSITION_PRECEDING
    ));
  }
  function findNext(element) {
    return filterTabbable(find(element.ownerDocument.body)).find((focusable) => (
      // eslint-disable-next-line no-bitwise
      element.compareDocumentPosition(focusable) & element.DOCUMENT_POSITION_FOLLOWING
    ));
  }

  // node_modules/@wordpress/dom/build-module/utils/assert-is-defined.js
  function assertIsDefined(val, name) {
    if (val === void 0 || val === null) {
      throw new Error(`Expected '${name}' to be defined, but received ${val}`);
    }
  }

  // node_modules/@wordpress/dom/build-module/dom/is-html-input-element.js
  function isHTMLInputElement(node2) {
    return node2?.nodeName === "INPUT";
  }

  // node_modules/@wordpress/dom/build-module/dom/is-text-field.js
  function isTextField(node2) {
    const nonTextInputs = ["button", "checkbox", "hidden", "file", "radio", "image", "range", "reset", "submit", "number", "email", "time"];
    return isHTMLInputElement(node2) && node2.type && !nonTextInputs.includes(node2.type) || node2.nodeName === "TEXTAREA" || /** @type {HTMLElement} */
    node2.contentEditable === "true";
  }

  // node_modules/@wordpress/dom/build-module/dom/get-computed-style.js
  function getComputedStyle2(element) {
    assertIsDefined(element.ownerDocument.defaultView, "element.ownerDocument.defaultView");
    return element.ownerDocument.defaultView.getComputedStyle(element);
  }

  // node_modules/@wordpress/dom/build-module/dom/get-scroll-container.js
  function getScrollContainer(node2, direction = "vertical") {
    if (!node2) {
      return void 0;
    }
    if (direction === "vertical" || direction === "all") {
      if (node2.scrollHeight > node2.clientHeight) {
        const {
          overflowY
        } = getComputedStyle2(node2);
        if (/(auto|scroll)/.test(overflowY)) {
          return node2;
        }
      }
    }
    if (direction === "horizontal" || direction === "all") {
      if (node2.scrollWidth > node2.clientWidth) {
        const {
          overflowX
        } = getComputedStyle2(node2);
        if (/(auto|scroll)/.test(overflowX)) {
          return node2;
        }
      }
    }
    if (node2.ownerDocument === node2.parentNode) {
      return node2;
    }
    return getScrollContainer(
      /** @type {Element} */
      node2.parentNode,
      direction
    );
  }

  // node_modules/@wordpress/dom/build-module/dom/is-input-or-text-area.js
  function isInputOrTextArea(element) {
    return element.tagName === "INPUT" || element.tagName === "TEXTAREA";
  }

  // node_modules/@wordpress/dom/build-module/dom/is-form-element.js
  function isFormElement(element) {
    if (!element) {
      return false;
    }
    const {
      tagName
    } = element;
    const checkForInputTextarea = isInputOrTextArea(element);
    return checkForInputTextarea || tagName === "BUTTON" || tagName === "SELECT";
  }

  // node_modules/@wordpress/dom/build-module/dom/is-rtl.js
  function isRTL(element) {
    return getComputedStyle2(element).direction === "rtl";
  }

  // node_modules/@wordpress/dom/build-module/dom/caret-range-from-point.js
  function caretRangeFromPoint(doc, x2, y2) {
    if (doc.caretRangeFromPoint) {
      return doc.caretRangeFromPoint(x2, y2);
    }
    if (!doc.caretPositionFromPoint) {
      return null;
    }
    const point = doc.caretPositionFromPoint(x2, y2);
    if (!point) {
      return null;
    }
    const range = doc.createRange();
    range.setStart(point.offsetNode, point.offset);
    range.collapse(true);
    return range;
  }

  // node_modules/@wordpress/dom/build-module/dom/hidden-caret-range-from-point.js
  function hiddenCaretRangeFromPoint(doc, x2, y2, container) {
    const originalZIndex = container.style.zIndex;
    const originalPosition = container.style.position;
    const {
      position: position2 = "static"
    } = getComputedStyle2(container);
    if (position2 === "static") {
      container.style.position = "relative";
    }
    container.style.zIndex = "10000";
    const range = caretRangeFromPoint(doc, x2, y2);
    container.style.zIndex = originalZIndex;
    container.style.position = originalPosition;
    return range;
  }

  // node_modules/@wordpress/dom/build-module/dom/scroll-if-no-range.js
  function scrollIfNoRange(container, alignToTop, callback) {
    let range = callback();
    if (!range || !range.startContainer || !container.contains(range.startContainer)) {
      container.scrollIntoView(alignToTop);
      range = callback();
      if (!range || !range.startContainer || !container.contains(range.startContainer)) {
        return null;
      }
    }
    return range;
  }

  // node_modules/@wordpress/dom/build-module/dom/place-caret-at-edge.js
  function getRange(container, isReverse, x2) {
    const {
      ownerDocument
    } = container;
    const isReverseDir = isRTL(container) ? !isReverse : isReverse;
    const containerRect = container.getBoundingClientRect();
    if (x2 === void 0) {
      x2 = isReverse ? containerRect.right - 1 : containerRect.left + 1;
    } else if (x2 <= containerRect.left) {
      x2 = containerRect.left + 1;
    } else if (x2 >= containerRect.right) {
      x2 = containerRect.right - 1;
    }
    const y2 = isReverseDir ? containerRect.bottom - 1 : containerRect.top + 1;
    return hiddenCaretRangeFromPoint(ownerDocument, x2, y2, container);
  }
  function placeCaretAtEdge(container, isReverse, x2) {
    if (!container) {
      return;
    }
    container.focus();
    if (isInputOrTextArea(container)) {
      if (typeof container.selectionStart !== "number") {
        return;
      }
      if (isReverse) {
        container.selectionStart = container.value.length;
        container.selectionEnd = container.value.length;
      } else {
        container.selectionStart = 0;
        container.selectionEnd = 0;
      }
      return;
    }
    if (!container.isContentEditable) {
      return;
    }
    const range = scrollIfNoRange(container, isReverse, () => getRange(container, isReverse, x2));
    if (!range) {
      return;
    }
    const {
      ownerDocument
    } = container;
    const {
      defaultView
    } = ownerDocument;
    assertIsDefined(defaultView, "defaultView");
    const selection2 = defaultView.getSelection();
    assertIsDefined(selection2, "selection");
    selection2.removeAllRanges();
    selection2.addRange(range);
  }

  // node_modules/@wordpress/dom/build-module/dom/place-caret-at-horizontal-edge.js
  function placeCaretAtHorizontalEdge(container, isReverse) {
    return placeCaretAtEdge(container, isReverse, void 0);
  }

  // node_modules/@wordpress/dom/build-module/dom/insert-after.js
  function insertAfter(newNode, referenceNode) {
    assertIsDefined(referenceNode.parentNode, "referenceNode.parentNode");
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
  }

  // node_modules/@wordpress/dom/build-module/dom/remove.js
  function remove(node2) {
    assertIsDefined(node2.parentNode, "node.parentNode");
    node2.parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/dom/build-module/dom/replace.js
  function replace2(processedNode, newNode) {
    assertIsDefined(processedNode.parentNode, "processedNode.parentNode");
    insertAfter(newNode, processedNode.parentNode);
    remove(processedNode);
  }

  // node_modules/@wordpress/dom/build-module/dom/unwrap.js
  function unwrap(node2) {
    const parent = node2.parentNode;
    assertIsDefined(parent, "node.parentNode");
    while (node2.firstChild) {
      parent.insertBefore(node2.firstChild, node2);
    }
    parent.removeChild(node2);
  }

  // node_modules/@wordpress/dom/build-module/dom/replace-tag.js
  function replaceTag(node2, tagName) {
    const newNode = node2.ownerDocument.createElement(tagName);
    while (node2.firstChild) {
      newNode.appendChild(node2.firstChild);
    }
    assertIsDefined(node2.parentNode, "node.parentNode");
    node2.parentNode.replaceChild(newNode, node2);
    return newNode;
  }

  // node_modules/@wordpress/dom/build-module/dom/wrap.js
  function wrap(newNode, referenceNode) {
    assertIsDefined(referenceNode.parentNode, "referenceNode.parentNode");
    referenceNode.parentNode.insertBefore(newNode, referenceNode);
    newNode.appendChild(referenceNode);
  }

  // node_modules/@wordpress/dom/build-module/dom/is-empty.js
  function isEmpty(element) {
    switch (element.nodeType) {
      case element.TEXT_NODE:
        return /^[ \f\n\r\t\v\u00a0]*$/.test(element.nodeValue || "");
      case element.ELEMENT_NODE:
        if (element.hasAttributes()) {
          return false;
        } else if (!element.hasChildNodes()) {
          return true;
        }
        return (
          /** @type {Element[]} */
          Array.from(element.childNodes).every(isEmpty)
        );
      default:
        return true;
    }
  }

  // node_modules/@wordpress/dom/build-module/phrasing-content.js
  var textContentSchema = {
    strong: {},
    em: {},
    s: {},
    del: {},
    ins: {},
    a: {
      attributes: ["href", "target", "rel", "id"]
    },
    code: {},
    abbr: {
      attributes: ["title"]
    },
    sub: {},
    sup: {},
    br: {},
    small: {},
    // To do: fix blockquote.
    // cite: {},
    q: {
      attributes: ["cite"]
    },
    dfn: {
      attributes: ["title"]
    },
    data: {
      attributes: ["value"]
    },
    time: {
      attributes: ["datetime"]
    },
    var: {},
    samp: {},
    kbd: {},
    i: {},
    b: {},
    u: {},
    mark: {},
    ruby: {},
    rt: {},
    rp: {},
    bdi: {
      attributes: ["dir"]
    },
    bdo: {
      attributes: ["dir"]
    },
    wbr: {},
    "#text": {}
  };
  var excludedElements = ["#text", "br"];
  Object.keys(textContentSchema).filter((element) => !excludedElements.includes(element)).forEach((tag) => {
    const {
      [tag]: removedTag,
      ...restSchema
    } = textContentSchema;
    textContentSchema[tag].children = restSchema;
  });
  var embeddedContentSchema = {
    audio: {
      attributes: ["src", "preload", "autoplay", "mediagroup", "loop", "muted"]
    },
    canvas: {
      attributes: ["width", "height"]
    },
    embed: {
      attributes: ["src", "type", "width", "height"]
    },
    img: {
      attributes: ["alt", "src", "srcset", "usemap", "ismap", "width", "height"]
    },
    object: {
      attributes: ["data", "type", "name", "usemap", "form", "width", "height"]
    },
    video: {
      attributes: ["src", "poster", "preload", "playsinline", "autoplay", "mediagroup", "loop", "muted", "controls", "width", "height"]
    }
  };
  var phrasingContentSchema = {
    ...textContentSchema,
    ...embeddedContentSchema
  };
  function getPhrasingContentSchema(context2) {
    if (context2 !== "paste") {
      return phrasingContentSchema;
    }
    const {
      u: u2,
      // Used to mark misspelling. Shouldn't be pasted.
      abbr,
      // Invisible.
      data,
      // Invisible.
      time: time2,
      // Invisible.
      wbr,
      // Invisible.
      bdi,
      // Invisible.
      bdo,
      // Invisible.
      ...remainingContentSchema
    } = {
      ...phrasingContentSchema,
      // We shouldn't paste potentially sensitive information which is not
      // visible to the user when pasted, so strip the attributes.
      ins: {
        children: phrasingContentSchema.ins.children
      },
      del: {
        children: phrasingContentSchema.del.children
      }
    };
    return remainingContentSchema;
  }
  function isPhrasingContent(node2) {
    const tag = node2.nodeName.toLowerCase();
    return getPhrasingContentSchema().hasOwnProperty(tag) || tag === "span";
  }
  function isTextContent(node2) {
    const tag = node2.nodeName.toLowerCase();
    return textContentSchema.hasOwnProperty(tag) || tag === "span";
  }

  // node_modules/@wordpress/dom/build-module/dom/is-element.js
  function isElement(node2) {
    return !!node2 && node2.nodeType === node2.ELEMENT_NODE;
  }

  // node_modules/@wordpress/dom/build-module/dom/clean-node-list.js
  var noop = () => {
  };
  function cleanNodeList(nodeList, doc, schema, inline3) {
    Array.from(nodeList).forEach((node2) => {
      const tag = node2.nodeName.toLowerCase();
      if (schema.hasOwnProperty(tag) && (!schema[tag].isMatch || schema[tag].isMatch?.(node2))) {
        if (isElement(node2)) {
          const {
            attributes = [],
            classes = [],
            children,
            require: require2 = [],
            allowEmpty
          } = schema[tag];
          if (children && !allowEmpty && isEmpty(node2)) {
            remove(node2);
            return;
          }
          if (node2.hasAttributes()) {
            Array.from(node2.attributes).forEach(({
              name
            }) => {
              if (name !== "class" && !attributes.includes(name)) {
                node2.removeAttribute(name);
              }
            });
            if (node2.classList && node2.classList.length) {
              const mattchers = classes.map((item) => {
                if (item === "*") {
                  return () => true;
                } else if (typeof item === "string") {
                  return (className) => className === item;
                } else if (item instanceof RegExp) {
                  return (className) => item.test(className);
                }
                return noop;
              });
              Array.from(node2.classList).forEach((name) => {
                if (!mattchers.some((isMatch) => isMatch(name))) {
                  node2.classList.remove(name);
                }
              });
              if (!node2.classList.length) {
                node2.removeAttribute("class");
              }
            }
          }
          if (node2.hasChildNodes()) {
            if (children === "*") {
              return;
            }
            if (children) {
              if (require2.length && !node2.querySelector(require2.join(","))) {
                cleanNodeList(node2.childNodes, doc, schema, inline3);
                unwrap(node2);
              } else if (node2.parentNode && node2.parentNode.nodeName === "BODY" && isPhrasingContent(node2)) {
                cleanNodeList(node2.childNodes, doc, schema, inline3);
                if (Array.from(node2.childNodes).some((child) => !isPhrasingContent(child))) {
                  unwrap(node2);
                }
              } else {
                cleanNodeList(node2.childNodes, doc, children, inline3);
              }
            } else {
              while (node2.firstChild) {
                remove(node2.firstChild);
              }
            }
          }
        }
      } else {
        cleanNodeList(node2.childNodes, doc, schema, inline3);
        if (inline3 && !isPhrasingContent(node2) && node2.nextElementSibling) {
          insertAfter(doc.createElement("br"), node2);
        }
        unwrap(node2);
      }
    });
  }

  // node_modules/@wordpress/dom/build-module/dom/remove-invalid-html.js
  function removeInvalidHTML(HTML, schema, inline3) {
    const doc = document.implementation.createHTMLDocument("");
    doc.body.innerHTML = HTML;
    cleanNodeList(doc.body.childNodes, doc, schema, inline3);
    return doc.body.innerHTML;
  }

  // node_modules/@wordpress/dom/build-module/data-transfer.js
  function getFilesFromDataTransfer(dataTransfer) {
    const files = Array.from(dataTransfer.files);
    Array.from(dataTransfer.items).forEach((item) => {
      const file = item.getAsFile();
      if (file && !files.find(({
        name,
        type,
        size: size4
      }) => name === file.name && type === file.type && size4 === file.size)) {
        files.push(file);
      }
    });
    return files;
  }

  // node_modules/@wordpress/dom/build-module/index.js
  var focus = {
    focusable: focusable_exports,
    tabbable: tabbable_exports
  };

  // node_modules/@wordpress/compose/build-module/hooks/use-ref-effect/index.js
  function useRefEffect(callback, dependencies) {
    const cleanupRef = (0, import_react.useRef)();
    return (0, import_react.useCallback)((node2) => {
      if (node2) {
        cleanupRef.current = callback(node2);
      } else if (cleanupRef.current) {
        cleanupRef.current();
      }
    }, dependencies);
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-constrained-tabbing/index.js
  function useConstrainedTabbing() {
    return useRefEffect((node2) => {
      function onKeyDown(event) {
        const {
          key,
          shiftKey,
          target
        } = event;
        if (key !== "Tab") {
          return;
        }
        const action = shiftKey ? "findPrevious" : "findNext";
        const nextElement = focus.tabbable[action](
          /** @type {HTMLElement} */
          target
        ) || null;
        if (
          /** @type {HTMLElement} */
          target.contains(nextElement)
        ) {
          event.preventDefault();
          nextElement?.focus();
          return;
        }
        if (node2.contains(nextElement)) {
          return;
        }
        const domAction = shiftKey ? "append" : "prepend";
        const {
          ownerDocument
        } = node2;
        const trap = ownerDocument.createElement("div");
        trap.tabIndex = -1;
        node2[domAction](trap);
        trap.addEventListener("blur", () => node2.removeChild(trap));
        trap.focus();
      }
      node2.addEventListener("keydown", onKeyDown);
      return () => {
        node2.removeEventListener("keydown", onKeyDown);
      };
    }, []);
  }
  var use_constrained_tabbing_default = useConstrainedTabbing;

  // node_modules/memize/dist/index.js
  function memize(fn, options) {
    var size4 = 0;
    var head;
    var tail;
    options = options || {};
    function memoized() {
      var node2 = head, len = arguments.length, args, i3;
      searchCache: while (node2) {
        if (node2.args.length !== arguments.length) {
          node2 = node2.next;
          continue;
        }
        for (i3 = 0; i3 < len; i3++) {
          if (node2.args[i3] !== arguments[i3]) {
            node2 = node2.next;
            continue searchCache;
          }
        }
        if (node2 !== head) {
          if (node2 === tail) {
            tail = node2.prev;
          }
          node2.prev.next = node2.next;
          if (node2.next) {
            node2.next.prev = node2.prev;
          }
          node2.next = head;
          node2.prev = null;
          head.prev = node2;
          head = node2;
        }
        return node2.val;
      }
      args = new Array(len);
      for (i3 = 0; i3 < len; i3++) {
        args[i3] = arguments[i3];
      }
      node2 = {
        args,
        // Generate the result from original function
        val: fn.apply(null, args)
      };
      if (head) {
        head.prev = node2;
        node2.next = head;
      } else {
        tail = node2;
      }
      if (size4 === /** @type {MemizeOptions} */
      options.maxSize) {
        tail = /** @type {MemizeCacheNode} */
        tail.prev;
        tail.next = null;
      } else {
        size4++;
      }
      head = node2;
      return node2.val;
    }
    memoized.clear = function() {
      head = null;
      tail = null;
      size4 = 0;
    };
    return memoized;
  }

  // node_modules/@wordpress/i18n/build-module/sprintf.js
  var import_sprintf_js = __toESM(require_sprintf());
  var logErrorOnce = memize(console.error);
  function sprintf(format, ...args) {
    try {
      return import_sprintf_js.default.sprintf(format, ...args);
    } catch (error2) {
      if (error2 instanceof Error) {
        logErrorOnce("sprintf error: \n\n" + error2.toString());
      }
      return format;
    }
  }

  // node_modules/@tannin/postfix/index.js
  var PRECEDENCE;
  var OPENERS;
  var TERMINATORS;
  var PATTERN;
  PRECEDENCE = {
    "(": 9,
    "!": 8,
    "*": 7,
    "/": 7,
    "%": 7,
    "+": 6,
    "-": 6,
    "<": 5,
    "<=": 5,
    ">": 5,
    ">=": 5,
    "==": 4,
    "!=": 4,
    "&&": 3,
    "||": 2,
    "?": 1,
    "?:": 1
  };
  OPENERS = ["(", "?"];
  TERMINATORS = {
    ")": ["("],
    ":": ["?", "?:"]
  };
  PATTERN = /<=|>=|==|!=|&&|\|\||\?:|\(|!|\*|\/|%|\+|-|<|>|\?|\)|:/;
  function postfix(expression) {
    var terms = [], stack2 = [], match2, operator, term, element;
    while (match2 = expression.match(PATTERN)) {
      operator = match2[0];
      term = expression.substr(0, match2.index).trim();
      if (term) {
        terms.push(term);
      }
      while (element = stack2.pop()) {
        if (TERMINATORS[operator]) {
          if (TERMINATORS[operator][0] === element) {
            operator = TERMINATORS[operator][1] || operator;
            break;
          }
        } else if (OPENERS.indexOf(element) >= 0 || PRECEDENCE[element] < PRECEDENCE[operator]) {
          stack2.push(element);
          break;
        }
        terms.push(element);
      }
      if (!TERMINATORS[operator]) {
        stack2.push(operator);
      }
      expression = expression.substr(match2.index + operator.length);
    }
    expression = expression.trim();
    if (expression) {
      terms.push(expression);
    }
    return terms.concat(stack2.reverse());
  }

  // node_modules/@tannin/evaluate/index.js
  var OPERATORS = {
    "!": function(a2) {
      return !a2;
    },
    "*": function(a2, b2) {
      return a2 * b2;
    },
    "/": function(a2, b2) {
      return a2 / b2;
    },
    "%": function(a2, b2) {
      return a2 % b2;
    },
    "+": function(a2, b2) {
      return a2 + b2;
    },
    "-": function(a2, b2) {
      return a2 - b2;
    },
    "<": function(a2, b2) {
      return a2 < b2;
    },
    "<=": function(a2, b2) {
      return a2 <= b2;
    },
    ">": function(a2, b2) {
      return a2 > b2;
    },
    ">=": function(a2, b2) {
      return a2 >= b2;
    },
    "==": function(a2, b2) {
      return a2 === b2;
    },
    "!=": function(a2, b2) {
      return a2 !== b2;
    },
    "&&": function(a2, b2) {
      return a2 && b2;
    },
    "||": function(a2, b2) {
      return a2 || b2;
    },
    "?:": function(a2, b2, c6) {
      if (a2) {
        throw b2;
      }
      return c6;
    }
  };
  function evaluate(postfix2, variables) {
    var stack2 = [], i3, j2, args, getOperatorResult, term, value;
    for (i3 = 0; i3 < postfix2.length; i3++) {
      term = postfix2[i3];
      getOperatorResult = OPERATORS[term];
      if (getOperatorResult) {
        j2 = getOperatorResult.length;
        args = Array(j2);
        while (j2--) {
          args[j2] = stack2.pop();
        }
        try {
          value = getOperatorResult.apply(null, args);
        } catch (earlyReturn) {
          return earlyReturn;
        }
      } else if (variables.hasOwnProperty(term)) {
        value = variables[term];
      } else {
        value = +term;
      }
      stack2.push(value);
    }
    return stack2[0];
  }

  // node_modules/@tannin/compile/index.js
  function compile(expression) {
    var terms = postfix(expression);
    return function(variables) {
      return evaluate(terms, variables);
    };
  }

  // node_modules/@tannin/plural-forms/index.js
  function pluralForms(expression) {
    var evaluate3 = compile(expression);
    return function(n3) {
      return +evaluate3({ n: n3 });
    };
  }

  // node_modules/tannin/index.js
  var DEFAULT_OPTIONS = {
    contextDelimiter: "",
    onMissingKey: null
  };
  function getPluralExpression(pf) {
    var parts, i3, part;
    parts = pf.split(";");
    for (i3 = 0; i3 < parts.length; i3++) {
      part = parts[i3].trim();
      if (part.indexOf("plural=") === 0) {
        return part.substr(7);
      }
    }
  }
  function Tannin(data, options) {
    var key;
    this.data = data;
    this.pluralForms = {};
    this.options = {};
    for (key in DEFAULT_OPTIONS) {
      this.options[key] = options !== void 0 && key in options ? options[key] : DEFAULT_OPTIONS[key];
    }
  }
  Tannin.prototype.getPluralForm = function(domain, n3) {
    var getPluralForm = this.pluralForms[domain], config2, plural, pf;
    if (!getPluralForm) {
      config2 = this.data[domain][""];
      pf = config2["Plural-Forms"] || config2["plural-forms"] || // Ignore reason: As known, there's no way to document the empty
      // string property on a key to guarantee this as metadata.
      // @ts-ignore
      config2.plural_forms;
      if (typeof pf !== "function") {
        plural = getPluralExpression(
          config2["Plural-Forms"] || config2["plural-forms"] || // Ignore reason: As known, there's no way to document the empty
          // string property on a key to guarantee this as metadata.
          // @ts-ignore
          config2.plural_forms
        );
        pf = pluralForms(plural);
      }
      getPluralForm = this.pluralForms[domain] = pf;
    }
    return getPluralForm(n3);
  };
  Tannin.prototype.dcnpgettext = function(domain, context2, singular, plural, n3) {
    var index2, key, entry;
    if (n3 === void 0) {
      index2 = 0;
    } else {
      index2 = this.getPluralForm(domain, n3);
    }
    key = singular;
    if (context2) {
      key = context2 + this.options.contextDelimiter + singular;
    }
    entry = this.data[domain][key];
    if (entry && entry[index2]) {
      return entry[index2];
    }
    if (this.options.onMissingKey) {
      this.options.onMissingKey(singular, domain);
    }
    return index2 === 0 ? singular : plural;
  };

  // node_modules/@wordpress/i18n/build-module/create-i18n.js
  var DEFAULT_LOCALE_DATA = {
    "": {
      /** @param {number} n */
      plural_forms(n3) {
        return n3 === 1 ? 0 : 1;
      }
    }
  };
  var I18N_HOOK_REGEXP = /^i18n\.(n?gettext|has_translation)(_|$)/;
  var createI18n = (initialData, initialDomain, hooks) => {
    const tannin = new Tannin({});
    const listeners = /* @__PURE__ */ new Set();
    const notifyListeners = () => {
      listeners.forEach((listener2) => listener2());
    };
    const subscribe4 = (callback) => {
      listeners.add(callback);
      return () => listeners.delete(callback);
    };
    const getLocaleData2 = (domain = "default") => tannin.data[domain];
    const doSetLocaleData = (data, domain = "default") => {
      tannin.data[domain] = {
        ...tannin.data[domain],
        ...data
      };
      tannin.data[domain][""] = {
        ...DEFAULT_LOCALE_DATA[""],
        ...tannin.data[domain]?.[""]
      };
      delete tannin.pluralForms[domain];
    };
    const setLocaleData2 = (data, domain) => {
      doSetLocaleData(data, domain);
      notifyListeners();
    };
    const addLocaleData = (data, domain = "default") => {
      tannin.data[domain] = {
        ...tannin.data[domain],
        ...data,
        // Populate default domain configuration (supported locale date which omits
        // a plural forms expression).
        "": {
          ...DEFAULT_LOCALE_DATA[""],
          ...tannin.data[domain]?.[""],
          ...data?.[""]
        }
      };
      delete tannin.pluralForms[domain];
      notifyListeners();
    };
    const resetLocaleData2 = (data, domain) => {
      tannin.data = {};
      tannin.pluralForms = {};
      setLocaleData2(data, domain);
    };
    const dcnpgettext = (domain = "default", context2, single, plural, number2) => {
      if (!tannin.data[domain]) {
        doSetLocaleData(void 0, domain);
      }
      return tannin.dcnpgettext(domain, context2, single, plural, number2);
    };
    const getFilterDomain = (domain = "default") => domain;
    const __2 = (text2, domain) => {
      let translation = dcnpgettext(domain, void 0, text2);
      if (!hooks) {
        return translation;
      }
      translation = /** @type {string} */
      /** @type {*} */
      hooks.applyFilters("i18n.gettext", translation, text2, domain);
      return (
        /** @type {string} */
        /** @type {*} */
        hooks.applyFilters("i18n.gettext_" + getFilterDomain(domain), translation, text2, domain)
      );
    };
    const _x2 = (text2, context2, domain) => {
      let translation = dcnpgettext(domain, context2, text2);
      if (!hooks) {
        return translation;
      }
      translation = /** @type {string} */
      /** @type {*} */
      hooks.applyFilters("i18n.gettext_with_context", translation, text2, context2, domain);
      return (
        /** @type {string} */
        /** @type {*} */
        hooks.applyFilters("i18n.gettext_with_context_" + getFilterDomain(domain), translation, text2, context2, domain)
      );
    };
    const _n2 = (single, plural, number2, domain) => {
      let translation = dcnpgettext(domain, void 0, single, plural, number2);
      if (!hooks) {
        return translation;
      }
      translation = /** @type {string} */
      /** @type {*} */
      hooks.applyFilters("i18n.ngettext", translation, single, plural, number2, domain);
      return (
        /** @type {string} */
        /** @type {*} */
        hooks.applyFilters("i18n.ngettext_" + getFilterDomain(domain), translation, single, plural, number2, domain)
      );
    };
    const _nx2 = (single, plural, number2, context2, domain) => {
      let translation = dcnpgettext(domain, context2, single, plural, number2);
      if (!hooks) {
        return translation;
      }
      translation = /** @type {string} */
      /** @type {*} */
      hooks.applyFilters("i18n.ngettext_with_context", translation, single, plural, number2, context2, domain);
      return (
        /** @type {string} */
        /** @type {*} */
        hooks.applyFilters("i18n.ngettext_with_context_" + getFilterDomain(domain), translation, single, plural, number2, context2, domain)
      );
    };
    const isRTL4 = () => {
      return "rtl" === _x2("ltr", "text direction");
    };
    const hasTranslation2 = (single, context2, domain) => {
      const key = context2 ? context2 + "" + single : single;
      let result = !!tannin.data?.[domain !== null && domain !== void 0 ? domain : "default"]?.[key];
      if (hooks) {
        result = /** @type { boolean } */
        /** @type {*} */
        hooks.applyFilters("i18n.has_translation", result, single, context2, domain);
        result = /** @type { boolean } */
        /** @type {*} */
        hooks.applyFilters("i18n.has_translation_" + getFilterDomain(domain), result, single, context2, domain);
      }
      return result;
    };
    if (initialData) {
      setLocaleData2(initialData, initialDomain);
    }
    if (hooks) {
      const onHookAddedOrRemoved = (hookName) => {
        if (I18N_HOOK_REGEXP.test(hookName)) {
          notifyListeners();
        }
      };
      hooks.addAction("hookAdded", "core/i18n", onHookAddedOrRemoved);
      hooks.addAction("hookRemoved", "core/i18n", onHookAddedOrRemoved);
    }
    return {
      getLocaleData: getLocaleData2,
      setLocaleData: setLocaleData2,
      addLocaleData,
      resetLocaleData: resetLocaleData2,
      subscribe: subscribe4,
      __: __2,
      _x: _x2,
      _n: _n2,
      _nx: _nx2,
      isRTL: isRTL4,
      hasTranslation: hasTranslation2
    };
  };

  // node_modules/@wordpress/i18n/build-module/default-i18n.js
  var i18n = createI18n(void 0, void 0, defaultHooks);
  var getLocaleData = i18n.getLocaleData.bind(i18n);
  var setLocaleData = i18n.setLocaleData.bind(i18n);
  var resetLocaleData = i18n.resetLocaleData.bind(i18n);
  var subscribe = i18n.subscribe.bind(i18n);
  var __ = i18n.__.bind(i18n);
  var _x = i18n._x.bind(i18n);
  var _n = i18n._n.bind(i18n);
  var _nx = i18n._nx.bind(i18n);
  var isRTL2 = i18n.isRTL.bind(i18n);
  var hasTranslation = i18n.hasTranslation.bind(i18n);

  // node_modules/@wordpress/keycodes/build-module/platform.js
  function isAppleOS(_window = null) {
    if (!_window) {
      if (typeof window === "undefined") {
        return false;
      }
      _window = window;
    }
    const {
      platform: platform2
    } = _window.navigator;
    return platform2.indexOf("Mac") !== -1 || ["iPad", "iPhone"].includes(platform2);
  }

  // node_modules/@wordpress/keycodes/build-module/index.js
  var BACKSPACE = 8;
  var ENTER = 13;
  var ESCAPE = 27;
  var LEFT = 37;
  var RIGHT = 39;
  var DELETE = 46;
  var ALT = "alt";
  var CTRL = "ctrl";
  var COMMAND = "meta";
  var SHIFT = "shift";
  function capitaliseFirstCharacter(string2) {
    return string2.length < 2 ? string2.toUpperCase() : string2.charAt(0).toUpperCase() + string2.slice(1);
  }
  function mapValues(object, mapFn) {
    return Object.fromEntries(Object.entries(object).map(([key, value]) => [key, mapFn(value)]));
  }
  var modifiers = {
    primary: (_isApple) => _isApple() ? [COMMAND] : [CTRL],
    primaryShift: (_isApple) => _isApple() ? [SHIFT, COMMAND] : [CTRL, SHIFT],
    primaryAlt: (_isApple) => _isApple() ? [ALT, COMMAND] : [CTRL, ALT],
    secondary: (_isApple) => _isApple() ? [SHIFT, ALT, COMMAND] : [CTRL, SHIFT, ALT],
    access: (_isApple) => _isApple() ? [CTRL, ALT] : [SHIFT, ALT],
    ctrl: () => [CTRL],
    alt: () => [ALT],
    ctrlShift: () => [CTRL, SHIFT],
    shift: () => [SHIFT],
    shiftAlt: () => [SHIFT, ALT],
    undefined: () => []
  };
  var rawShortcut = /* @__PURE__ */ mapValues(modifiers, (modifier) => {
    return (
      /** @type {WPKeyHandler<string>} */
      (character2, _isApple = isAppleOS) => {
        return [...modifier(_isApple), character2.toLowerCase()].join("+");
      }
    );
  });
  var displayShortcutList = /* @__PURE__ */ mapValues(modifiers, (modifier) => {
    return (
      /** @type {WPKeyHandler<string[]>} */
      (character2, _isApple = isAppleOS) => {
        const isApple2 = _isApple();
        const replacementKeyMap = {
          [ALT]: isApple2 ? "\u2325" : "Alt",
          [CTRL]: isApple2 ? "\u2303" : "Ctrl",
          // Make sure ⌃ is the U+2303 UP ARROWHEAD unicode character and not the caret character.
          [COMMAND]: "\u2318",
          [SHIFT]: isApple2 ? "\u21E7" : "Shift"
        };
        const modifierKeys = modifier(_isApple).reduce(
          (accumulator, key) => {
            var _replacementKeyMap$ke;
            const replacementKey = (_replacementKeyMap$ke = replacementKeyMap[key]) !== null && _replacementKeyMap$ke !== void 0 ? _replacementKeyMap$ke : key;
            if (isApple2) {
              return [...accumulator, replacementKey];
            }
            return [...accumulator, replacementKey, "+"];
          },
          /** @type {string[]} */
          []
        );
        return [...modifierKeys, capitaliseFirstCharacter(character2)];
      }
    );
  });
  var displayShortcut = /* @__PURE__ */ mapValues(displayShortcutList, (shortcutList) => {
    return (
      /** @type {WPKeyHandler<string>} */
      (character2, _isApple = isAppleOS) => shortcutList(character2, _isApple).join("")
    );
  });
  var shortcutAriaLabel = /* @__PURE__ */ mapValues(modifiers, (modifier) => {
    return (
      /** @type {WPKeyHandler<string>} */
      (character2, _isApple = isAppleOS) => {
        const isApple2 = _isApple();
        const replacementKeyMap = {
          [SHIFT]: "Shift",
          [COMMAND]: isApple2 ? "Command" : "Control",
          [CTRL]: "Control",
          [ALT]: isApple2 ? "Option" : "Alt",
          /* translators: comma as in the character ',' */
          ",": __("Comma"),
          /* translators: period as in the character '.' */
          ".": __("Period"),
          /* translators: backtick as in the character '`' */
          "`": __("Backtick"),
          /* translators: tilde as in the character '~' */
          "~": __("Tilde")
        };
        return [...modifier(_isApple), character2].map((key) => {
          var _replacementKeyMap$ke2;
          return capitaliseFirstCharacter((_replacementKeyMap$ke2 = replacementKeyMap[key]) !== null && _replacementKeyMap$ke2 !== void 0 ? _replacementKeyMap$ke2 : key);
        }).join(isApple2 ? " " : " + ");
      }
    );
  });
  function getEventModifiers(event) {
    return (
      /** @type {WPModifierPart[]} */
      [ALT, CTRL, COMMAND, SHIFT].filter((key) => event[
        /** @type {'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'} */
        `${key}Key`
      ])
    );
  }
  var isKeyboardEvent = /* @__PURE__ */ mapValues(modifiers, (getModifiers) => {
    return (
      /** @type {WPEventKeyHandler} */
      (event, character2, _isApple = isAppleOS) => {
        const mods = getModifiers(_isApple);
        const eventMods = getEventModifiers(event);
        const replacementWithShiftKeyMap = {
          Comma: ",",
          Backslash: "\\",
          // Windows returns `\` for both IntlRo and IntlYen.
          IntlRo: "\\",
          IntlYen: "\\"
        };
        const modsDiff = mods.filter((mod) => !eventMods.includes(mod));
        const eventModsDiff = eventMods.filter((mod) => !mods.includes(mod));
        if (modsDiff.length > 0 || eventModsDiff.length > 0) {
          return false;
        }
        let key = event.key.toLowerCase();
        if (!character2) {
          return mods.includes(
            /** @type {WPModifierPart} */
            key
          );
        }
        if (event.altKey && character2.length === 1) {
          key = String.fromCharCode(event.keyCode).toLowerCase();
        }
        if (event.shiftKey && character2.length === 1 && replacementWithShiftKeyMap[event.code]) {
          key = replacementWithShiftKeyMap[event.code];
        }
        if (character2 === "del") {
          character2 = "delete";
        }
        return key === character2.toLowerCase();
      }
    );
  });

  // node_modules/@wordpress/compose/build-module/hooks/use-focus-on-mount/index.js
  function useFocusOnMount(focusOnMount = "firstElement") {
    const focusOnMountRef = (0, import_react.useRef)(focusOnMount);
    const setFocus = (target) => {
      target.focus({
        // When focusing newly mounted dialogs,
        // the position of the popover is often not right on the first render
        // This prevents the layout shifts when focusing the dialogs.
        preventScroll: true
      });
    };
    const timerIdRef = (0, import_react.useRef)();
    (0, import_react.useEffect)(() => {
      focusOnMountRef.current = focusOnMount;
    }, [focusOnMount]);
    return useRefEffect((node2) => {
      var _node$ownerDocument$a;
      if (!node2 || focusOnMountRef.current === false) {
        return;
      }
      if (node2.contains((_node$ownerDocument$a = node2.ownerDocument?.activeElement) !== null && _node$ownerDocument$a !== void 0 ? _node$ownerDocument$a : null)) {
        return;
      }
      if (focusOnMountRef.current !== "firstElement") {
        setFocus(node2);
        return;
      }
      timerIdRef.current = setTimeout(() => {
        const firstTabbable = focus.tabbable.find(node2)[0];
        if (firstTabbable) {
          setFocus(firstTabbable);
        }
      }, 0);
      return () => {
        if (timerIdRef.current) {
          clearTimeout(timerIdRef.current);
        }
      };
    }, []);
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-focus-return/index.js
  var origin = null;
  function useFocusReturn(onFocusReturn) {
    const ref = (0, import_react.useRef)(null);
    const focusedBeforeMount = (0, import_react.useRef)(null);
    const onFocusReturnRef = (0, import_react.useRef)(onFocusReturn);
    (0, import_react.useEffect)(() => {
      onFocusReturnRef.current = onFocusReturn;
    }, [onFocusReturn]);
    return (0, import_react.useCallback)((node2) => {
      if (node2) {
        var _activeDocument$activ;
        ref.current = node2;
        if (focusedBeforeMount.current) {
          return;
        }
        const activeDocument = node2.ownerDocument.activeElement instanceof window.HTMLIFrameElement ? node2.ownerDocument.activeElement.contentDocument : node2.ownerDocument;
        focusedBeforeMount.current = (_activeDocument$activ = activeDocument?.activeElement) !== null && _activeDocument$activ !== void 0 ? _activeDocument$activ : null;
      } else if (focusedBeforeMount.current) {
        const isFocused = ref.current?.contains(ref.current?.ownerDocument.activeElement);
        if (ref.current?.isConnected && !isFocused) {
          var _origin;
          (_origin = origin) !== null && _origin !== void 0 ? _origin : origin = focusedBeforeMount.current;
          return;
        }
        if (onFocusReturnRef.current) {
          onFocusReturnRef.current();
        } else {
          (!focusedBeforeMount.current.isConnected ? origin : focusedBeforeMount.current)?.focus();
        }
        origin = null;
      }
    }, []);
  }
  var use_focus_return_default = useFocusReturn;

  // node_modules/@wordpress/compose/build-module/hooks/use-focus-outside/index.js
  var INPUT_BUTTON_TYPES = ["button", "submit"];
  function isFocusNormalizedButton(eventTarget) {
    if (!(eventTarget instanceof window.HTMLElement)) {
      return false;
    }
    switch (eventTarget.nodeName) {
      case "A":
      case "BUTTON":
        return true;
      case "INPUT":
        return INPUT_BUTTON_TYPES.includes(eventTarget.type);
    }
    return false;
  }
  function useFocusOutside(onFocusOutside) {
    const currentOnFocusOutsideRef = (0, import_react.useRef)(onFocusOutside);
    (0, import_react.useEffect)(() => {
      currentOnFocusOutsideRef.current = onFocusOutside;
    }, [onFocusOutside]);
    const preventBlurCheckRef = (0, import_react.useRef)(false);
    const blurCheckTimeoutIdRef = (0, import_react.useRef)();
    const cancelBlurCheck = (0, import_react.useCallback)(() => {
      clearTimeout(blurCheckTimeoutIdRef.current);
    }, []);
    (0, import_react.useEffect)(() => {
      return () => cancelBlurCheck();
    }, []);
    (0, import_react.useEffect)(() => {
      if (!onFocusOutside) {
        cancelBlurCheck();
      }
    }, [onFocusOutside, cancelBlurCheck]);
    const normalizeButtonFocus = (0, import_react.useCallback)((event) => {
      const {
        type,
        target
      } = event;
      const isInteractionEnd = ["mouseup", "touchend"].includes(type);
      if (isInteractionEnd) {
        preventBlurCheckRef.current = false;
      } else if (isFocusNormalizedButton(target)) {
        preventBlurCheckRef.current = true;
      }
    }, []);
    const queueBlurCheck = (0, import_react.useCallback)((event) => {
      event.persist();
      if (preventBlurCheckRef.current) {
        return;
      }
      const ignoreForRelatedTarget = event.target.getAttribute("data-unstable-ignore-focus-outside-for-relatedtarget");
      if (ignoreForRelatedTarget && event.relatedTarget?.closest(ignoreForRelatedTarget)) {
        return;
      }
      blurCheckTimeoutIdRef.current = setTimeout(() => {
        if (!document.hasFocus()) {
          event.preventDefault();
          return;
        }
        if ("function" === typeof currentOnFocusOutsideRef.current) {
          currentOnFocusOutsideRef.current(event);
        }
      }, 0);
    }, []);
    return {
      onFocus: cancelBlurCheck,
      onMouseDown: normalizeButtonFocus,
      onMouseUp: normalizeButtonFocus,
      onTouchStart: normalizeButtonFocus,
      onTouchEnd: normalizeButtonFocus,
      onBlur: queueBlurCheck
    };
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-merge-refs/index.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref && ref.hasOwnProperty("current")) {
      ref.current = value;
    }
  }
  function useMergeRefs(refs) {
    const element = (0, import_react.useRef)();
    const isAttachedRef = (0, import_react.useRef)(false);
    const didElementChangeRef = (0, import_react.useRef)(false);
    const previousRefsRef = (0, import_react.useRef)([]);
    const currentRefsRef = (0, import_react.useRef)(refs);
    currentRefsRef.current = refs;
    (0, import_react.useLayoutEffect)(() => {
      if (didElementChangeRef.current === false && isAttachedRef.current === true) {
        refs.forEach((ref, index2) => {
          const previousRef = previousRefsRef.current[index2];
          if (ref !== previousRef) {
            assignRef(previousRef, null);
            assignRef(ref, element.current);
          }
        });
      }
      previousRefsRef.current = refs;
    }, refs);
    (0, import_react.useLayoutEffect)(() => {
      didElementChangeRef.current = false;
    });
    return (0, import_react.useCallback)((value) => {
      assignRef(element, value);
      didElementChangeRef.current = true;
      isAttachedRef.current = value !== null;
      const refsToAssign = value ? currentRefsRef.current : previousRefsRef.current;
      for (const ref of refsToAssign) {
        assignRef(ref, value);
      }
    }, []);
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-dialog/index.js
  function useDialog(options) {
    const currentOptions = (0, import_react.useRef)();
    const {
      constrainTabbing = options.focusOnMount !== false
    } = options;
    (0, import_react.useEffect)(() => {
      currentOptions.current = options;
    }, Object.values(options));
    const constrainedTabbingRef = use_constrained_tabbing_default();
    const focusOnMountRef = useFocusOnMount(options.focusOnMount);
    const focusReturnRef = use_focus_return_default();
    const focusOutsideProps = useFocusOutside((event) => {
      if (currentOptions.current?.__unstableOnClose) {
        currentOptions.current.__unstableOnClose("focus-outside", event);
      } else if (currentOptions.current?.onClose) {
        currentOptions.current.onClose();
      }
    });
    const closeOnEscapeRef = (0, import_react.useCallback)((node2) => {
      if (!node2) {
        return;
      }
      node2.addEventListener("keydown", (event) => {
        if (event.keyCode === ESCAPE && !event.defaultPrevented && currentOptions.current?.onClose) {
          event.preventDefault();
          currentOptions.current.onClose();
        }
      });
    }, []);
    return [useMergeRefs([constrainTabbing ? constrainedTabbingRef : null, options.focusOnMount !== false ? focusReturnRef : null, options.focusOnMount !== false ? focusOnMountRef : null, closeOnEscapeRef]), {
      ...focusOutsideProps,
      tabIndex: -1
    }];
  }
  var use_dialog_default = useDialog;

  // node_modules/@wordpress/compose/build-module/hooks/use-disabled/index.js
  function useDisabled({
    isDisabled: isDisabledProp = false
  } = {}) {
    return useRefEffect((node2) => {
      if (isDisabledProp) {
        return;
      }
      const defaultView = node2?.ownerDocument?.defaultView;
      if (!defaultView) {
        return;
      }
      const updates = [];
      const disable = () => {
        node2.childNodes.forEach((child) => {
          if (!(child instanceof defaultView.HTMLElement)) {
            return;
          }
          if (!child.getAttribute("inert")) {
            child.setAttribute("inert", "true");
            updates.push(() => {
              child.removeAttribute("inert");
            });
          }
        });
      };
      const debouncedDisable = debounce(disable, 0, {
        leading: true
      });
      disable();
      const observer = new window.MutationObserver(debouncedDisable);
      observer.observe(node2, {
        childList: true
      });
      return () => {
        if (observer) {
          observer.disconnect();
        }
        debouncedDisable.cancel();
        updates.forEach((update3) => update3());
      };
    }, [isDisabledProp]);
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-media-query/index.js
  var matchMediaCache = /* @__PURE__ */ new Map();
  function getMediaQueryList(query2) {
    if (!query2) {
      return null;
    }
    let match2 = matchMediaCache.get(query2);
    if (match2) {
      return match2;
    }
    if (typeof window !== "undefined" && typeof window.matchMedia === "function") {
      match2 = window.matchMedia(query2);
      matchMediaCache.set(query2, match2);
      return match2;
    }
    return null;
  }
  function useMediaQuery(query2) {
    const source = (0, import_react.useMemo)(() => {
      const mediaQueryList = getMediaQueryList(query2);
      return {
        /** @type {(onStoreChange: () => void) => () => void} */
        subscribe(onStoreChange) {
          if (!mediaQueryList) {
            return () => {
            };
          }
          mediaQueryList.addEventListener?.("change", onStoreChange);
          return () => {
            mediaQueryList.removeEventListener?.("change", onStoreChange);
          };
        },
        getValue() {
          var _mediaQueryList$match;
          return (_mediaQueryList$match = mediaQueryList?.matches) !== null && _mediaQueryList$match !== void 0 ? _mediaQueryList$match : false;
        }
      };
    }, [query2]);
    return (0, import_react.useSyncExternalStore)(source.subscribe, source.getValue, () => false);
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-previous/index.js
  function usePrevious(value) {
    const ref = (0, import_react.useRef)();
    (0, import_react.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-reduced-motion/index.js
  var useReducedMotion = () => useMediaQuery("(prefers-reduced-motion: reduce)");
  var use_reduced_motion_default = useReducedMotion;

  // node_modules/@wordpress/compose/build-module/hooks/use-viewport-match/index.js
  var BREAKPOINTS = {
    xhuge: 1920,
    huge: 1440,
    wide: 1280,
    xlarge: 1080,
    large: 960,
    medium: 782,
    small: 600,
    mobile: 480
  };
  var CONDITIONS = {
    ">=": "min-width",
    "<": "max-width"
  };
  var OPERATOR_EVALUATORS = {
    ">=": (breakpointValue, width) => width >= breakpointValue,
    "<": (breakpointValue, width) => width < breakpointValue
  };
  var ViewportMatchWidthContext = (0, import_react.createContext)(
    /** @type {null | number} */
    null
  );
  var useViewportMatch = (breakpoint, operator = ">=") => {
    const simulatedWidth = (0, import_react.useContext)(ViewportMatchWidthContext);
    const mediaQuery = !simulatedWidth && `(${CONDITIONS[operator]}: ${BREAKPOINTS[breakpoint]}px)`;
    const mediaQueryResult = useMediaQuery(mediaQuery || void 0);
    if (simulatedWidth) {
      return OPERATOR_EVALUATORS[operator](BREAKPOINTS[breakpoint], simulatedWidth);
    }
    return mediaQueryResult;
  };
  useViewportMatch.__experimentalWidthProvider = ViewportMatchWidthContext.Provider;
  var use_viewport_match_default = useViewportMatch;

  // node_modules/@wordpress/priority-queue/build-module/request-idle-callback.js
  var import_requestidlecallback = __toESM(require_requestidlecallback());
  function createRequestIdleCallback() {
    if (typeof window === "undefined") {
      return (callback) => {
        setTimeout(() => callback(Date.now()), 0);
      };
    }
    return window.requestIdleCallback;
  }
  var request_idle_callback_default = createRequestIdleCallback();

  // node_modules/@wordpress/priority-queue/build-module/index.js
  var createQueue = () => {
    const waitingList = /* @__PURE__ */ new Map();
    let isRunning = false;
    const runWaitingList = (deadline) => {
      for (const [nextElement, callback] of waitingList) {
        waitingList.delete(nextElement);
        callback();
        if ("number" === typeof deadline || deadline.timeRemaining() <= 0) {
          break;
        }
      }
      if (waitingList.size === 0) {
        isRunning = false;
        return;
      }
      request_idle_callback_default(runWaitingList);
    };
    const add = (element, item) => {
      waitingList.set(element, item);
      if (!isRunning) {
        isRunning = true;
        request_idle_callback_default(runWaitingList);
      }
    };
    const flush3 = (element) => {
      const callback = waitingList.get(element);
      if (void 0 === callback) {
        return false;
      }
      waitingList.delete(element);
      callback();
      return true;
    };
    const cancel = (element) => {
      return waitingList.delete(element);
    };
    const reset = () => {
      waitingList.clear();
      isRunning = false;
    };
    return {
      add,
      flush: flush3,
      cancel,
      reset
    };
  };

  // node_modules/use-memo-one/dist/use-memo-one.esm.js
  var import_react4 = __toESM(require_react());
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false;
    }
    for (var i3 = 0; i3 < newInputs.length; i3++) {
      if (newInputs[i3] !== lastInputs[i3]) {
        return false;
      }
    }
    return true;
  }
  function useMemoOne(getResult, inputs) {
    var initial = (0, import_react4.useState)(function() {
      return {
        inputs,
        result: getResult()
      };
    })[0];
    var isFirstRun = (0, import_react4.useRef)(true);
    var committed = (0, import_react4.useRef)(initial);
    var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
    var cache3 = useCache ? committed.current : {
      inputs,
      result: getResult()
    };
    (0, import_react4.useEffect)(function() {
      isFirstRun.current = false;
      committed.current = cache3;
    }, [cache3]);
    return cache3.result;
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-debounce/index.js
  function useDebounce(fn, wait, options) {
    const debounced = useMemoOne(() => debounce(fn, wait !== null && wait !== void 0 ? wait : 0, options), [fn, wait, options]);
    (0, import_react.useEffect)(() => () => debounced.cancel(), [debounced]);
    return debounced;
  }

  // node_modules/@wordpress/compose/build-module/hooks/use-observable-value/index.js
  function useObservableValue(map, name) {
    const [subscribe4, getValue3] = (0, import_react.useMemo)(() => [(listener2) => map.subscribe(name, listener2), () => map.get(name)], [map, name]);
    return (0, import_react.useSyncExternalStore)(subscribe4, getValue3, getValue3);
  }

  // node_modules/@wordpress/data/build-module/redux-store/combine-reducers.js
  function combineReducers(reducers) {
    const keys = Object.keys(reducers);
    return function combinedReducer(state = {}, action) {
      const nextState = {};
      let hasChanged = false;
      for (const key of keys) {
        const reducer2 = reducers[key];
        const prevStateForKey = state[key];
        const nextStateForKey = reducer2(prevStateForKey, action);
        nextState[key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== prevStateForKey;
      }
      return hasChanged ? nextState : state;
    };
  }

  // node_modules/@wordpress/data/build-module/factory.js
  function createRegistrySelector(registrySelector) {
    const selectorsByRegistry = /* @__PURE__ */ new WeakMap();
    const wrappedSelector = (...args) => {
      let selector2 = selectorsByRegistry.get(wrappedSelector.registry);
      if (!selector2) {
        selector2 = registrySelector(wrappedSelector.registry.select);
        selectorsByRegistry.set(wrappedSelector.registry, selector2);
      }
      return selector2(...args);
    };
    wrappedSelector.isRegistrySelector = true;
    return wrappedSelector;
  }
  function createRegistryControl(registryControl) {
    registryControl.isRegistryControl = true;
    return registryControl;
  }

  // node_modules/@wordpress/data/build-module/controls.js
  var SELECT = "@@data/SELECT";
  var RESOLVE_SELECT = "@@data/RESOLVE_SELECT";
  var DISPATCH = "@@data/DISPATCH";
  var builtinControls = {
    [SELECT]: createRegistryControl((registry) => ({
      storeKey,
      selectorName,
      args
    }) => registry.select(storeKey)[selectorName](...args)),
    [RESOLVE_SELECT]: createRegistryControl((registry) => ({
      storeKey,
      selectorName,
      args
    }) => {
      const method = registry.select(storeKey)[selectorName].hasResolver ? "resolveSelect" : "select";
      return registry[method](storeKey)[selectorName](...args);
    }),
    [DISPATCH]: createRegistryControl((registry) => ({
      storeKey,
      actionName,
      args
    }) => registry.dispatch(storeKey)[actionName](...args))
  };

  // node_modules/@wordpress/private-apis/build-module/implementation.js
  var CORE_MODULES_USING_PRIVATE_APIS = ["@wordpress/block-directory", "@wordpress/block-editor", "@wordpress/block-library", "@wordpress/blocks", "@wordpress/commands", "@wordpress/components", "@wordpress/core-commands", "@wordpress/core-data", "@wordpress/customize-widgets", "@wordpress/data", "@wordpress/edit-post", "@wordpress/edit-site", "@wordpress/edit-widgets", "@wordpress/editor", "@wordpress/format-library", "@wordpress/patterns", "@wordpress/preferences", "@wordpress/reusable-blocks", "@wordpress/router", "@wordpress/dataviews", "@wordpress/fields", "@wordpress/media-utils", "@wordpress/upload-media"];
  var registeredPrivateApis = [];
  var requiredConsent = "I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.";
  var allowReRegistration = globalThis.IS_WORDPRESS_CORE ? false : true;
  var __dangerousOptInToUnstableAPIsOnlyForCoreModules = (consent, moduleName) => {
    if (!CORE_MODULES_USING_PRIVATE_APIS.includes(moduleName)) {
      throw new Error(`You tried to opt-in to unstable APIs as module "${moduleName}". This feature is only for JavaScript modules shipped with WordPress core. Please do not use it in plugins and themes as the unstable APIs will be removed without a warning. If you ignore this error and depend on unstable features, your product will inevitably break on one of the next WordPress releases.`);
    }
    if (!allowReRegistration && registeredPrivateApis.includes(moduleName)) {
      throw new Error(`You tried to opt-in to unstable APIs as module "${moduleName}" which is already registered. This feature is only for JavaScript modules shipped with WordPress core. Please do not use it in plugins and themes as the unstable APIs will be removed without a warning. If you ignore this error and depend on unstable features, your product will inevitably break on one of the next WordPress releases.`);
    }
    if (consent !== requiredConsent) {
      throw new Error(`You tried to opt-in to unstable APIs without confirming you know the consequences. This feature is only for JavaScript modules shipped with WordPress core. Please do not use it in plugins and themes as the unstable APIs will removed without a warning. If you ignore this error and depend on unstable features, your product will inevitably break on the next WordPress release.`);
    }
    registeredPrivateApis.push(moduleName);
    return {
      lock,
      unlock
    };
  };
  function lock(object, privateData) {
    if (!object) {
      throw new Error("Cannot lock an undefined object.");
    }
    const _object = object;
    if (!(__private in _object)) {
      _object[__private] = {};
    }
    lockedData.set(_object[__private], privateData);
  }
  function unlock(object) {
    if (!object) {
      throw new Error("Cannot unlock an undefined object.");
    }
    const _object = object;
    if (!(__private in _object)) {
      throw new Error("Cannot unlock an object that was not locked before. ");
    }
    return lockedData.get(_object[__private]);
  }
  var lockedData = /* @__PURE__ */ new WeakMap();
  var __private = Symbol("Private API ID");

  // node_modules/@wordpress/data/build-module/lock-unlock.js
  var {
    lock: lock2,
    unlock: unlock2
  } = __dangerousOptInToUnstableAPIsOnlyForCoreModules("I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.", "@wordpress/data");

  // node_modules/@wordpress/data/build-module/promise-middleware.js
  var promiseMiddleware = () => (next3) => (action) => {
    if (isPromise(action)) {
      return action.then((resolvedAction) => {
        if (resolvedAction) {
          return next3(resolvedAction);
        }
      });
    }
    return next3(action);
  };
  var promise_middleware_default = promiseMiddleware;

  // node_modules/@wordpress/data/build-module/resolvers-cache-middleware.js
  var createResolversCacheMiddleware = (registry, storeName) => () => (next3) => (action) => {
    const resolvers = registry.select(storeName).getCachedResolvers();
    const resolverEntries = Object.entries(resolvers);
    resolverEntries.forEach(([selectorName, resolversByArgs]) => {
      const resolver = registry.stores[storeName]?.resolvers?.[selectorName];
      if (!resolver || !resolver.shouldInvalidate) {
        return;
      }
      resolversByArgs.forEach((value, args) => {
        if (value === void 0) {
          return;
        }
        if (value.status !== "finished" && value.status !== "error") {
          return;
        }
        if (!resolver.shouldInvalidate(action, ...args)) {
          return;
        }
        registry.dispatch(storeName).invalidateResolution(selectorName, args);
      });
    });
    return next3(action);
  };
  var resolvers_cache_middleware_default = createResolversCacheMiddleware;

  // node_modules/@wordpress/data/build-module/redux-store/thunk-middleware.js
  function createThunkMiddleware(args) {
    return () => (next3) => (action) => {
      if (typeof action === "function") {
        return action(args);
      }
      return next3(action);
    };
  }

  // node_modules/@wordpress/data/build-module/redux-store/metadata/reducer.js
  var import_equivalent_key_map = __toESM(require_equivalent_key_map());

  // node_modules/@wordpress/data/build-module/redux-store/metadata/utils.js
  var onSubKey = (actionProperty) => (reducer2) => (state = {}, action) => {
    const key = action[actionProperty];
    if (key === void 0) {
      return state;
    }
    const nextKeyState = reducer2(state[key], action);
    if (nextKeyState === state[key]) {
      return state;
    }
    return {
      ...state,
      [key]: nextKeyState
    };
  };
  function selectorArgsToStateKey(args) {
    if (args === void 0 || args === null) {
      return [];
    }
    const len = args.length;
    let idx = len;
    while (idx > 0 && args[idx - 1] === void 0) {
      idx--;
    }
    return idx === len ? args : args.slice(0, idx);
  }

  // node_modules/@wordpress/data/build-module/redux-store/metadata/reducer.js
  var subKeysIsResolved = onSubKey("selectorName")((state = new import_equivalent_key_map.default(), action) => {
    switch (action.type) {
      case "START_RESOLUTION": {
        const nextState = new import_equivalent_key_map.default(state);
        nextState.set(selectorArgsToStateKey(action.args), {
          status: "resolving"
        });
        return nextState;
      }
      case "FINISH_RESOLUTION": {
        const nextState = new import_equivalent_key_map.default(state);
        nextState.set(selectorArgsToStateKey(action.args), {
          status: "finished"
        });
        return nextState;
      }
      case "FAIL_RESOLUTION": {
        const nextState = new import_equivalent_key_map.default(state);
        nextState.set(selectorArgsToStateKey(action.args), {
          status: "error",
          error: action.error
        });
        return nextState;
      }
      case "START_RESOLUTIONS": {
        const nextState = new import_equivalent_key_map.default(state);
        for (const resolutionArgs of action.args) {
          nextState.set(selectorArgsToStateKey(resolutionArgs), {
            status: "resolving"
          });
        }
        return nextState;
      }
      case "FINISH_RESOLUTIONS": {
        const nextState = new import_equivalent_key_map.default(state);
        for (const resolutionArgs of action.args) {
          nextState.set(selectorArgsToStateKey(resolutionArgs), {
            status: "finished"
          });
        }
        return nextState;
      }
      case "FAIL_RESOLUTIONS": {
        const nextState = new import_equivalent_key_map.default(state);
        action.args.forEach((resolutionArgs, idx) => {
          const resolutionState = {
            status: "error",
            error: void 0
          };
          const error2 = action.errors[idx];
          if (error2) {
            resolutionState.error = error2;
          }
          nextState.set(selectorArgsToStateKey(resolutionArgs), resolutionState);
        });
        return nextState;
      }
      case "INVALIDATE_RESOLUTION": {
        const nextState = new import_equivalent_key_map.default(state);
        nextState.delete(selectorArgsToStateKey(action.args));
        return nextState;
      }
    }
    return state;
  });
  var isResolved = (state = {}, action) => {
    switch (action.type) {
      case "INVALIDATE_RESOLUTION_FOR_STORE":
        return {};
      case "INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR": {
        if (action.selectorName in state) {
          const {
            [action.selectorName]: removedSelector,
            ...restState
          } = state;
          return restState;
        }
        return state;
      }
      case "START_RESOLUTION":
      case "FINISH_RESOLUTION":
      case "FAIL_RESOLUTION":
      case "START_RESOLUTIONS":
      case "FINISH_RESOLUTIONS":
      case "FAIL_RESOLUTIONS":
      case "INVALIDATE_RESOLUTION":
        return subKeysIsResolved(state, action);
    }
    return state;
  };
  var reducer_default = isResolved;

  // node_modules/@wordpress/data/build-module/redux-store/metadata/selectors.js
  var selectors_exports = {};
  __export(selectors_exports, {
    countSelectorsByStatus: () => countSelectorsByStatus,
    getCachedResolvers: () => getCachedResolvers,
    getIsResolving: () => getIsResolving,
    getResolutionError: () => getResolutionError,
    getResolutionState: () => getResolutionState,
    hasFinishedResolution: () => hasFinishedResolution,
    hasResolutionFailed: () => hasResolutionFailed,
    hasResolvingSelectors: () => hasResolvingSelectors,
    hasStartedResolution: () => hasStartedResolution,
    isResolving: () => isResolving
  });

  // node_modules/rememo/rememo.js
  var LEAF_KEY = {};
  function arrayOf(value) {
    return [value];
  }
  function isObjectLike(value) {
    return !!value && "object" === typeof value;
  }
  function createCache() {
    var cache3 = {
      clear: function() {
        cache3.head = null;
      }
    };
    return cache3;
  }
  function isShallowEqual2(a2, b2, fromIndex) {
    var i3;
    if (a2.length !== b2.length) {
      return false;
    }
    for (i3 = fromIndex; i3 < a2.length; i3++) {
      if (a2[i3] !== b2[i3]) {
        return false;
      }
    }
    return true;
  }
  function rememo_default(selector2, getDependants) {
    var rootCache;
    var normalizedGetDependants = getDependants ? getDependants : arrayOf;
    function getCache(dependants) {
      var caches = rootCache, isUniqueByDependants = true, i3, dependant, map, cache3;
      for (i3 = 0; i3 < dependants.length; i3++) {
        dependant = dependants[i3];
        if (!isObjectLike(dependant)) {
          isUniqueByDependants = false;
          break;
        }
        if (caches.has(dependant)) {
          caches = caches.get(dependant);
        } else {
          map = /* @__PURE__ */ new WeakMap();
          caches.set(dependant, map);
          caches = map;
        }
      }
      if (!caches.has(LEAF_KEY)) {
        cache3 = createCache();
        cache3.isUniqueByDependants = isUniqueByDependants;
        caches.set(LEAF_KEY, cache3);
      }
      return caches.get(LEAF_KEY);
    }
    function clear2() {
      rootCache = /* @__PURE__ */ new WeakMap();
    }
    function callSelector() {
      var len = arguments.length, cache3, node2, i3, args, dependants;
      args = new Array(len);
      for (i3 = 0; i3 < len; i3++) {
        args[i3] = arguments[i3];
      }
      dependants = normalizedGetDependants.apply(null, args);
      cache3 = getCache(dependants);
      if (!cache3.isUniqueByDependants) {
        if (cache3.lastDependants && !isShallowEqual2(dependants, cache3.lastDependants, 0)) {
          cache3.clear();
        }
        cache3.lastDependants = dependants;
      }
      node2 = cache3.head;
      while (node2) {
        if (!isShallowEqual2(node2.args, args, 1)) {
          node2 = node2.next;
          continue;
        }
        if (node2 !== cache3.head) {
          node2.prev.next = node2.next;
          if (node2.next) {
            node2.next.prev = node2.prev;
          }
          node2.next = cache3.head;
          node2.prev = null;
          cache3.head.prev = node2;
          cache3.head = node2;
        }
        return node2.val;
      }
      node2 = /** @type {CacheNode} */
      {
        // Generate the result from original function
        val: selector2.apply(null, args)
      };
      args[0] = null;
      node2.args = args;
      if (cache3.head) {
        cache3.head.prev = node2;
        node2.next = cache3.head;
      }
      cache3.head = node2;
      return node2.val;
    }
    callSelector.getDependants = normalizedGetDependants;
    callSelector.clear = clear2;
    clear2();
    return (
      /** @type {S & EnhancedSelector} */
      callSelector
    );
  }

  // node_modules/@wordpress/data/build-module/redux-store/metadata/selectors.js
  function getResolutionState(state, selectorName, args) {
    const map = state[selectorName];
    if (!map) {
      return;
    }
    return map.get(selectorArgsToStateKey(args));
  }
  function getIsResolving(state, selectorName, args) {
    deprecated("wp.data.select( store ).getIsResolving", {
      since: "6.6",
      version: "6.8",
      alternative: "wp.data.select( store ).getResolutionState"
    });
    const resolutionState = getResolutionState(state, selectorName, args);
    return resolutionState && resolutionState.status === "resolving";
  }
  function hasStartedResolution(state, selectorName, args) {
    return getResolutionState(state, selectorName, args) !== void 0;
  }
  function hasFinishedResolution(state, selectorName, args) {
    const status = getResolutionState(state, selectorName, args)?.status;
    return status === "finished" || status === "error";
  }
  function hasResolutionFailed(state, selectorName, args) {
    return getResolutionState(state, selectorName, args)?.status === "error";
  }
  function getResolutionError(state, selectorName, args) {
    const resolutionState = getResolutionState(state, selectorName, args);
    return resolutionState?.status === "error" ? resolutionState.error : null;
  }
  function isResolving(state, selectorName, args) {
    return getResolutionState(state, selectorName, args)?.status === "resolving";
  }
  function getCachedResolvers(state) {
    return state;
  }
  function hasResolvingSelectors(state) {
    return Object.values(state).some((selectorState) => (
      /**
       * This uses the internal `_map` property of `EquivalentKeyMap` for
       * optimization purposes, since the `EquivalentKeyMap` implementation
       * does not support a `.values()` implementation.
       *
       * @see https://github.com/aduth/equivalent-key-map
       */
      Array.from(selectorState._map.values()).some((resolution) => resolution[1]?.status === "resolving")
    ));
  }
  var countSelectorsByStatus = rememo_default((state) => {
    const selectorsByStatus = {};
    Object.values(state).forEach((selectorState) => (
      /**
       * This uses the internal `_map` property of `EquivalentKeyMap` for
       * optimization purposes, since the `EquivalentKeyMap` implementation
       * does not support a `.values()` implementation.
       *
       * @see https://github.com/aduth/equivalent-key-map
       */
      Array.from(selectorState._map.values()).forEach((resolution) => {
        var _resolution$1$status;
        const currentStatus = (_resolution$1$status = resolution[1]?.status) !== null && _resolution$1$status !== void 0 ? _resolution$1$status : "error";
        if (!selectorsByStatus[currentStatus]) {
          selectorsByStatus[currentStatus] = 0;
        }
        selectorsByStatus[currentStatus]++;
      })
    ));
    return selectorsByStatus;
  }, (state) => [state]);

  // node_modules/@wordpress/data/build-module/redux-store/metadata/actions.js
  var actions_exports = {};
  __export(actions_exports, {
    failResolution: () => failResolution,
    failResolutions: () => failResolutions,
    finishResolution: () => finishResolution,
    finishResolutions: () => finishResolutions,
    invalidateResolution: () => invalidateResolution,
    invalidateResolutionForStore: () => invalidateResolutionForStore,
    invalidateResolutionForStoreSelector: () => invalidateResolutionForStoreSelector,
    startResolution: () => startResolution,
    startResolutions: () => startResolutions
  });
  function startResolution(selectorName, args) {
    return {
      type: "START_RESOLUTION",
      selectorName,
      args
    };
  }
  function finishResolution(selectorName, args) {
    return {
      type: "FINISH_RESOLUTION",
      selectorName,
      args
    };
  }
  function failResolution(selectorName, args, error2) {
    return {
      type: "FAIL_RESOLUTION",
      selectorName,
      args,
      error: error2
    };
  }
  function startResolutions(selectorName, args) {
    return {
      type: "START_RESOLUTIONS",
      selectorName,
      args
    };
  }
  function finishResolutions(selectorName, args) {
    return {
      type: "FINISH_RESOLUTIONS",
      selectorName,
      args
    };
  }
  function failResolutions(selectorName, args, errors) {
    return {
      type: "FAIL_RESOLUTIONS",
      selectorName,
      args,
      errors
    };
  }
  function invalidateResolution(selectorName, args) {
    return {
      type: "INVALIDATE_RESOLUTION",
      selectorName,
      args
    };
  }
  function invalidateResolutionForStore() {
    return {
      type: "INVALIDATE_RESOLUTION_FOR_STORE"
    };
  }
  function invalidateResolutionForStoreSelector(selectorName) {
    return {
      type: "INVALIDATE_RESOLUTION_FOR_STORE_SELECTOR",
      selectorName
    };
  }

  // node_modules/@wordpress/data/build-module/redux-store/index.js
  var trimUndefinedValues = (array) => {
    const result = [...array];
    for (let i3 = result.length - 1; i3 >= 0; i3--) {
      if (result[i3] === void 0) {
        result.splice(i3, 1);
      }
    }
    return result;
  };
  var mapValues2 = (obj, callback) => Object.fromEntries(Object.entries(obj !== null && obj !== void 0 ? obj : {}).map(([key, value]) => [key, callback(value, key)]));
  var devToolsReplacer = (key, state) => {
    if (state instanceof Map) {
      return Object.fromEntries(state);
    }
    if (state instanceof window.HTMLElement) {
      return null;
    }
    return state;
  };
  function createResolversCache() {
    const cache3 = {};
    return {
      isRunning(selectorName, args) {
        return cache3[selectorName] && cache3[selectorName].get(trimUndefinedValues(args));
      },
      clear(selectorName, args) {
        if (cache3[selectorName]) {
          cache3[selectorName].delete(trimUndefinedValues(args));
        }
      },
      markAsRunning(selectorName, args) {
        if (!cache3[selectorName]) {
          cache3[selectorName] = new import_equivalent_key_map2.default();
        }
        cache3[selectorName].set(trimUndefinedValues(args), true);
      }
    };
  }
  function createBindingCache(bind) {
    const cache3 = /* @__PURE__ */ new WeakMap();
    return {
      get(item, itemName) {
        let boundItem = cache3.get(item);
        if (!boundItem) {
          boundItem = bind(item, itemName);
          cache3.set(item, boundItem);
        }
        return boundItem;
      }
    };
  }
  function createReduxStore(key, options) {
    const privateActions = {};
    const privateSelectors = {};
    const privateRegistrationFunctions = {
      privateActions,
      registerPrivateActions: (actions2) => {
        Object.assign(privateActions, actions2);
      },
      privateSelectors,
      registerPrivateSelectors: (selectors) => {
        Object.assign(privateSelectors, selectors);
      }
    };
    const storeDescriptor = {
      name: key,
      instantiate: (registry) => {
        const listeners = /* @__PURE__ */ new Set();
        const reducer2 = options.reducer;
        const thunkArgs = {
          registry,
          get dispatch() {
            return thunkActions;
          },
          get select() {
            return thunkSelectors;
          },
          get resolveSelect() {
            return getResolveSelectors();
          }
        };
        const store6 = instantiateReduxStore(key, options, registry, thunkArgs);
        lock2(store6, privateRegistrationFunctions);
        const resolversCache = createResolversCache();
        function bindAction(action) {
          return (...args) => Promise.resolve(store6.dispatch(action(...args)));
        }
        const actions2 = {
          ...mapValues2(actions_exports, bindAction),
          ...mapValues2(options.actions, bindAction)
        };
        const boundPrivateActions = createBindingCache(bindAction);
        const allActions = new Proxy(() => {
        }, {
          get: (target, prop2) => {
            const privateAction = privateActions[prop2];
            return privateAction ? boundPrivateActions.get(privateAction, prop2) : actions2[prop2];
          }
        });
        const thunkActions = new Proxy(allActions, {
          apply: (target, thisArg, [action]) => store6.dispatch(action)
        });
        lock2(actions2, allActions);
        const resolvers = options.resolvers ? mapResolvers(options.resolvers) : {};
        function bindSelector(selector2, selectorName) {
          if (selector2.isRegistrySelector) {
            selector2.registry = registry;
          }
          const boundSelector = (...args) => {
            args = normalize(selector2, args);
            const state = store6.__unstableOriginalGetState();
            if (selector2.isRegistrySelector) {
              selector2.registry = registry;
            }
            return selector2(state.root, ...args);
          };
          boundSelector.__unstableNormalizeArgs = selector2.__unstableNormalizeArgs;
          const resolver = resolvers[selectorName];
          if (!resolver) {
            boundSelector.hasResolver = false;
            return boundSelector;
          }
          return mapSelectorWithResolver(boundSelector, selectorName, resolver, store6, resolversCache);
        }
        function bindMetadataSelector(metaDataSelector) {
          const boundSelector = (...args) => {
            const state = store6.__unstableOriginalGetState();
            const originalSelectorName = args && args[0];
            const originalSelectorArgs = args && args[1];
            const targetSelector = options?.selectors?.[originalSelectorName];
            if (originalSelectorName && targetSelector) {
              args[1] = normalize(targetSelector, originalSelectorArgs);
            }
            return metaDataSelector(state.metadata, ...args);
          };
          boundSelector.hasResolver = false;
          return boundSelector;
        }
        const selectors = {
          ...mapValues2(selectors_exports, bindMetadataSelector),
          ...mapValues2(options.selectors, bindSelector)
        };
        const boundPrivateSelectors = createBindingCache(bindSelector);
        for (const [selectorName, selector2] of Object.entries(privateSelectors)) {
          boundPrivateSelectors.get(selector2, selectorName);
        }
        const allSelectors = new Proxy(() => {
        }, {
          get: (target, prop2) => {
            const privateSelector = privateSelectors[prop2];
            return privateSelector ? boundPrivateSelectors.get(privateSelector, prop2) : selectors[prop2];
          }
        });
        const thunkSelectors = new Proxy(allSelectors, {
          apply: (target, thisArg, [selector2]) => selector2(store6.__unstableOriginalGetState())
        });
        lock2(selectors, allSelectors);
        const resolveSelectors = mapResolveSelectors(selectors, store6);
        const suspendSelectors = mapSuspendSelectors(selectors, store6);
        const getSelectors = () => selectors;
        const getActions = () => actions2;
        const getResolveSelectors = () => resolveSelectors;
        const getSuspendSelectors = () => suspendSelectors;
        store6.__unstableOriginalGetState = store6.getState;
        store6.getState = () => store6.__unstableOriginalGetState().root;
        const subscribe4 = store6 && ((listener2) => {
          listeners.add(listener2);
          return () => listeners.delete(listener2);
        });
        let lastState = store6.__unstableOriginalGetState();
        store6.subscribe(() => {
          const state = store6.__unstableOriginalGetState();
          const hasChanged = state !== lastState;
          lastState = state;
          if (hasChanged) {
            for (const listener2 of listeners) {
              listener2();
            }
          }
        });
        return {
          reducer: reducer2,
          store: store6,
          actions: actions2,
          selectors,
          resolvers,
          getSelectors,
          getResolveSelectors,
          getSuspendSelectors,
          getActions,
          subscribe: subscribe4
        };
      }
    };
    lock2(storeDescriptor, privateRegistrationFunctions);
    return storeDescriptor;
  }
  function instantiateReduxStore(key, options, registry, thunkArgs) {
    const controls = {
      ...options.controls,
      ...builtinControls
    };
    const normalizedControls = mapValues2(controls, (control) => control.isRegistryControl ? control(registry) : control);
    const middlewares2 = [resolvers_cache_middleware_default(registry, key), promise_middleware_default, createMiddleware(normalizedControls), createThunkMiddleware(thunkArgs)];
    const enhancers = [applyMiddleware(...middlewares2)];
    if (typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__) {
      enhancers.push(window.__REDUX_DEVTOOLS_EXTENSION__({
        name: key,
        instanceId: key,
        serialize: {
          replacer: devToolsReplacer
        }
      }));
    }
    const {
      reducer: reducer2,
      initialState
    } = options;
    const enhancedReducer = combineReducers({
      metadata: reducer_default,
      root: reducer2
    });
    return createStore(enhancedReducer, {
      root: initialState
    }, compose_default(enhancers));
  }
  function mapResolveSelectors(selectors, store6) {
    const {
      getIsResolving: getIsResolving2,
      hasStartedResolution: hasStartedResolution2,
      hasFinishedResolution: hasFinishedResolution2,
      hasResolutionFailed: hasResolutionFailed2,
      isResolving: isResolving2,
      getCachedResolvers: getCachedResolvers2,
      getResolutionState: getResolutionState2,
      getResolutionError: getResolutionError2,
      hasResolvingSelectors: hasResolvingSelectors2,
      countSelectorsByStatus: countSelectorsByStatus2,
      ...storeSelectors
    } = selectors;
    return mapValues2(storeSelectors, (selector2, selectorName) => {
      if (!selector2.hasResolver) {
        return async (...args) => selector2.apply(null, args);
      }
      return (...args) => {
        return new Promise((resolve, reject) => {
          const hasFinished = () => selectors.hasFinishedResolution(selectorName, args);
          const finalize = (result2) => {
            const hasFailed = selectors.hasResolutionFailed(selectorName, args);
            if (hasFailed) {
              const error2 = selectors.getResolutionError(selectorName, args);
              reject(error2);
            } else {
              resolve(result2);
            }
          };
          const getResult = () => selector2.apply(null, args);
          const result = getResult();
          if (hasFinished()) {
            return finalize(result);
          }
          const unsubscribe = store6.subscribe(() => {
            if (hasFinished()) {
              unsubscribe();
              finalize(getResult());
            }
          });
        });
      };
    });
  }
  function mapSuspendSelectors(selectors, store6) {
    return mapValues2(selectors, (selector2, selectorName) => {
      if (!selector2.hasResolver) {
        return selector2;
      }
      return (...args) => {
        const result = selector2.apply(null, args);
        if (selectors.hasFinishedResolution(selectorName, args)) {
          if (selectors.hasResolutionFailed(selectorName, args)) {
            throw selectors.getResolutionError(selectorName, args);
          }
          return result;
        }
        throw new Promise((resolve) => {
          const unsubscribe = store6.subscribe(() => {
            if (selectors.hasFinishedResolution(selectorName, args)) {
              resolve();
              unsubscribe();
            }
          });
        });
      };
    });
  }
  function mapResolvers(resolvers) {
    return mapValues2(resolvers, (resolver) => {
      if (resolver.fulfill) {
        return resolver;
      }
      return {
        ...resolver,
        // Copy the enumerable properties of the resolver function.
        fulfill: resolver
        // Add the fulfill method.
      };
    });
  }
  function mapSelectorWithResolver(selector2, selectorName, resolver, store6, resolversCache) {
    function fulfillSelector(args) {
      const state = store6.getState();
      if (resolversCache.isRunning(selectorName, args) || typeof resolver.isFulfilled === "function" && resolver.isFulfilled(state, ...args)) {
        return;
      }
      const {
        metadata
      } = store6.__unstableOriginalGetState();
      if (hasStartedResolution(metadata, selectorName, args)) {
        return;
      }
      resolversCache.markAsRunning(selectorName, args);
      setTimeout(async () => {
        resolversCache.clear(selectorName, args);
        store6.dispatch(startResolution(selectorName, args));
        try {
          const action = resolver.fulfill(...args);
          if (action) {
            await store6.dispatch(action);
          }
          store6.dispatch(finishResolution(selectorName, args));
        } catch (error2) {
          store6.dispatch(failResolution(selectorName, args, error2));
        }
      }, 0);
    }
    const selectorResolver = (...args) => {
      args = normalize(selector2, args);
      fulfillSelector(args);
      return selector2(...args);
    };
    selectorResolver.hasResolver = true;
    return selectorResolver;
  }
  function normalize(selector2, args) {
    if (selector2.__unstableNormalizeArgs && typeof selector2.__unstableNormalizeArgs === "function" && args?.length) {
      return selector2.__unstableNormalizeArgs(args);
    }
    return args;
  }

  // node_modules/@wordpress/data/build-module/store/index.js
  var coreDataStore = {
    name: "core/data",
    instantiate(registry) {
      const getCoreDataSelector = (selectorName) => (key, ...args) => {
        return registry.select(key)[selectorName](...args);
      };
      const getCoreDataAction = (actionName) => (key, ...args) => {
        return registry.dispatch(key)[actionName](...args);
      };
      return {
        getSelectors() {
          return Object.fromEntries(["getIsResolving", "hasStartedResolution", "hasFinishedResolution", "isResolving", "getCachedResolvers"].map((selectorName) => [selectorName, getCoreDataSelector(selectorName)]));
        },
        getActions() {
          return Object.fromEntries(["startResolution", "finishResolution", "invalidateResolution", "invalidateResolutionForStore", "invalidateResolutionForStoreSelector"].map((actionName) => [actionName, getCoreDataAction(actionName)]));
        },
        subscribe() {
          return () => () => {
          };
        }
      };
    }
  };
  var store_default = coreDataStore;

  // node_modules/@wordpress/data/build-module/utils/emitter.js
  function createEmitter() {
    let isPaused2 = false;
    let isPending = false;
    const listeners = /* @__PURE__ */ new Set();
    const notifyListeners = () => (
      // We use Array.from to clone the listeners Set
      // This ensures that we don't run a listener
      // that was added as a response to another listener.
      Array.from(listeners).forEach((listener2) => listener2())
    );
    return {
      get isPaused() {
        return isPaused2;
      },
      subscribe(listener2) {
        listeners.add(listener2);
        return () => listeners.delete(listener2);
      },
      pause() {
        isPaused2 = true;
      },
      resume() {
        isPaused2 = false;
        if (isPending) {
          isPending = false;
          notifyListeners();
        }
      },
      emit() {
        if (isPaused2) {
          isPending = true;
          return;
        }
        notifyListeners();
      }
    };
  }

  // node_modules/@wordpress/data/build-module/registry.js
  function getStoreName(storeNameOrDescriptor) {
    return typeof storeNameOrDescriptor === "string" ? storeNameOrDescriptor : storeNameOrDescriptor.name;
  }
  function createRegistry(storeConfigs = {}, parent = null) {
    const stores = {};
    const emitter = createEmitter();
    let listeningStores = null;
    function globalListener2() {
      emitter.emit();
    }
    const subscribe4 = (listener2, storeNameOrDescriptor) => {
      if (!storeNameOrDescriptor) {
        return emitter.subscribe(listener2);
      }
      const storeName = getStoreName(storeNameOrDescriptor);
      const store6 = stores[storeName];
      if (store6) {
        return store6.subscribe(listener2);
      }
      if (!parent) {
        return emitter.subscribe(listener2);
      }
      return parent.subscribe(listener2, storeNameOrDescriptor);
    };
    function select2(storeNameOrDescriptor) {
      const storeName = getStoreName(storeNameOrDescriptor);
      listeningStores?.add(storeName);
      const store6 = stores[storeName];
      if (store6) {
        return store6.getSelectors();
      }
      return parent?.select(storeName);
    }
    function __unstableMarkListeningStores(callback, ref) {
      listeningStores = /* @__PURE__ */ new Set();
      try {
        return callback.call(this);
      } finally {
        ref.current = Array.from(listeningStores);
        listeningStores = null;
      }
    }
    function resolveSelect2(storeNameOrDescriptor) {
      const storeName = getStoreName(storeNameOrDescriptor);
      listeningStores?.add(storeName);
      const store6 = stores[storeName];
      if (store6) {
        return store6.getResolveSelectors();
      }
      return parent && parent.resolveSelect(storeName);
    }
    function suspendSelect2(storeNameOrDescriptor) {
      const storeName = getStoreName(storeNameOrDescriptor);
      listeningStores?.add(storeName);
      const store6 = stores[storeName];
      if (store6) {
        return store6.getSuspendSelectors();
      }
      return parent && parent.suspendSelect(storeName);
    }
    function dispatch2(storeNameOrDescriptor) {
      const storeName = getStoreName(storeNameOrDescriptor);
      const store6 = stores[storeName];
      if (store6) {
        return store6.getActions();
      }
      return parent && parent.dispatch(storeName);
    }
    function withPlugins(attributes) {
      return Object.fromEntries(Object.entries(attributes).map(([key, attribute]) => {
        if (typeof attribute !== "function") {
          return [key, attribute];
        }
        return [key, function() {
          return registry[key].apply(null, arguments);
        }];
      }));
    }
    function registerStoreInstance(name, createStore3) {
      if (stores[name]) {
        console.error('Store "' + name + '" is already registered.');
        return stores[name];
      }
      const store6 = createStore3();
      if (typeof store6.getSelectors !== "function") {
        throw new TypeError("store.getSelectors must be a function");
      }
      if (typeof store6.getActions !== "function") {
        throw new TypeError("store.getActions must be a function");
      }
      if (typeof store6.subscribe !== "function") {
        throw new TypeError("store.subscribe must be a function");
      }
      store6.emitter = createEmitter();
      const currentSubscribe = store6.subscribe;
      store6.subscribe = (listener2) => {
        const unsubscribeFromEmitter = store6.emitter.subscribe(listener2);
        const unsubscribeFromStore = currentSubscribe(() => {
          if (store6.emitter.isPaused) {
            store6.emitter.emit();
            return;
          }
          listener2();
        });
        return () => {
          unsubscribeFromStore?.();
          unsubscribeFromEmitter?.();
        };
      };
      stores[name] = store6;
      store6.subscribe(globalListener2);
      if (parent) {
        try {
          unlock2(store6.store).registerPrivateActions(unlock2(parent).privateActionsOf(name));
          unlock2(store6.store).registerPrivateSelectors(unlock2(parent).privateSelectorsOf(name));
        } catch (e3) {
        }
      }
      return store6;
    }
    function register2(store6) {
      registerStoreInstance(store6.name, () => store6.instantiate(registry));
    }
    function registerGenericStore2(name, store6) {
      deprecated("wp.data.registerGenericStore", {
        since: "5.9",
        alternative: "wp.data.register( storeDescriptor )"
      });
      registerStoreInstance(name, () => store6);
    }
    function registerStore2(storeName, options) {
      if (!options.reducer) {
        throw new TypeError("Must specify store reducer");
      }
      const store6 = registerStoreInstance(storeName, () => createReduxStore(storeName, options).instantiate(registry));
      return store6.store;
    }
    function batch2(callback) {
      if (emitter.isPaused) {
        callback();
        return;
      }
      emitter.pause();
      Object.values(stores).forEach((store6) => store6.emitter.pause());
      try {
        callback();
      } finally {
        emitter.resume();
        Object.values(stores).forEach((store6) => store6.emitter.resume());
      }
    }
    let registry = {
      batch: batch2,
      stores,
      namespaces: stores,
      // TODO: Deprecate/remove this.
      subscribe: subscribe4,
      select: select2,
      resolveSelect: resolveSelect2,
      suspendSelect: suspendSelect2,
      dispatch: dispatch2,
      use: use2,
      register: register2,
      registerGenericStore: registerGenericStore2,
      registerStore: registerStore2,
      __unstableMarkListeningStores
    };
    function use2(plugin, options) {
      if (!plugin) {
        return;
      }
      registry = {
        ...registry,
        ...plugin(registry, options)
      };
      return registry;
    }
    registry.register(store_default);
    for (const [name, config2] of Object.entries(storeConfigs)) {
      registry.register(createReduxStore(name, config2));
    }
    if (parent) {
      parent.subscribe(globalListener2);
    }
    const registryWithPlugins = withPlugins(registry);
    lock2(registryWithPlugins, {
      privateActionsOf: (name) => {
        try {
          return unlock2(stores[name].store).privateActions;
        } catch (e3) {
          return {};
        }
      },
      privateSelectorsOf: (name) => {
        try {
          return unlock2(stores[name].store).privateSelectors;
        } catch (e3) {
          return {};
        }
      }
    });
    return registryWithPlugins;
  }

  // node_modules/@wordpress/data/build-module/default-registry.js
  var default_registry_default = createRegistry();

  // node_modules/@wordpress/data/build-module/components/registry-provider/context.js
  var Context = (0, import_react.createContext)(default_registry_default);
  var {
    Consumer: Consumer2,
    Provider: Provider2
  } = Context;

  // node_modules/@wordpress/data/build-module/components/registry-provider/use-registry.js
  function useRegistry() {
    return (0, import_react.useContext)(Context);
  }

  // node_modules/@wordpress/data/build-module/components/async-mode-provider/context.js
  var Context2 = (0, import_react.createContext)(false);
  var {
    Consumer: Consumer3,
    Provider: Provider3
  } = Context2;

  // node_modules/@wordpress/data/build-module/components/async-mode-provider/use-async-mode.js
  function useAsyncMode() {
    return (0, import_react.useContext)(Context2);
  }

  // node_modules/@wordpress/data/build-module/components/use-select/index.js
  var renderQueue = createQueue();
  function warnOnUnstableReference(a2, b2) {
    if (!a2 || !b2) {
      return;
    }
    const keys = typeof a2 === "object" && typeof b2 === "object" ? Object.keys(a2).filter((k2) => a2[k2] !== b2[k2]) : [];
    console.warn("The `useSelect` hook returns different values when called with the same state and parameters.\nThis can lead to unnecessary re-renders and performance issues if not fixed.\n\nNon-equal value keys: %s\n\n", keys.join(", "));
  }
  function Store(registry, suspense) {
    const select2 = suspense ? registry.suspendSelect : registry.select;
    const queueContext = {};
    let lastMapSelect;
    let lastMapResult;
    let lastMapResultValid = false;
    let lastIsAsync;
    let subscriber;
    let didWarnUnstableReference;
    const storeStatesOnMount = /* @__PURE__ */ new Map();
    function getStoreState(name) {
      var _registry$stores$name;
      return (_registry$stores$name = registry.stores[name]?.store?.getState?.()) !== null && _registry$stores$name !== void 0 ? _registry$stores$name : {};
    }
    const createSubscriber = (stores) => {
      const activeStores = [...stores];
      const activeSubscriptions = /* @__PURE__ */ new Set();
      function subscribe4(listener2) {
        if (lastMapResultValid) {
          for (const name of activeStores) {
            if (storeStatesOnMount.get(name) !== getStoreState(name)) {
              lastMapResultValid = false;
            }
          }
        }
        storeStatesOnMount.clear();
        const onStoreChange = () => {
          lastMapResultValid = false;
          listener2();
        };
        const onChange = () => {
          if (lastIsAsync) {
            renderQueue.add(queueContext, onStoreChange);
          } else {
            onStoreChange();
          }
        };
        const unsubs = [];
        function subscribeStore(storeName) {
          unsubs.push(registry.subscribe(onChange, storeName));
        }
        for (const storeName of activeStores) {
          subscribeStore(storeName);
        }
        activeSubscriptions.add(subscribeStore);
        return () => {
          activeSubscriptions.delete(subscribeStore);
          for (const unsub of unsubs.values()) {
            unsub?.();
          }
          renderQueue.cancel(queueContext);
        };
      }
      function updateStores(newStores) {
        for (const newStore of newStores) {
          if (activeStores.includes(newStore)) {
            continue;
          }
          activeStores.push(newStore);
          for (const subscription of activeSubscriptions) {
            subscription(newStore);
          }
        }
      }
      return {
        subscribe: subscribe4,
        updateStores
      };
    };
    return (mapSelect, isAsync) => {
      function updateValue() {
        if (lastMapResultValid && mapSelect === lastMapSelect) {
          return lastMapResult;
        }
        const listeningStores = {
          current: null
        };
        const mapResult = registry.__unstableMarkListeningStores(() => mapSelect(select2, registry), listeningStores);
        if (globalThis.SCRIPT_DEBUG) {
          if (!didWarnUnstableReference) {
            const secondMapResult = mapSelect(select2, registry);
            if (!isShallowEqual(mapResult, secondMapResult)) {
              warnOnUnstableReference(mapResult, secondMapResult);
              didWarnUnstableReference = true;
            }
          }
        }
        if (!subscriber) {
          for (const name of listeningStores.current) {
            storeStatesOnMount.set(name, getStoreState(name));
          }
          subscriber = createSubscriber(listeningStores.current);
        } else {
          subscriber.updateStores(listeningStores.current);
        }
        if (!isShallowEqual(lastMapResult, mapResult)) {
          lastMapResult = mapResult;
        }
        lastMapSelect = mapSelect;
        lastMapResultValid = true;
      }
      function getValue3() {
        updateValue();
        return lastMapResult;
      }
      if (lastIsAsync && !isAsync) {
        lastMapResultValid = false;
        renderQueue.cancel(queueContext);
      }
      updateValue();
      lastIsAsync = isAsync;
      return {
        subscribe: subscriber.subscribe,
        getValue: getValue3
      };
    };
  }
  function _useStaticSelect(storeName) {
    return useRegistry().select(storeName);
  }
  function _useMappingSelect(suspense, mapSelect, deps) {
    const registry = useRegistry();
    const isAsync = useAsyncMode();
    const store6 = (0, import_react.useMemo)(() => Store(registry, suspense), [registry, suspense]);
    const selector2 = (0, import_react.useCallback)(mapSelect, deps);
    const {
      subscribe: subscribe4,
      getValue: getValue3
    } = store6(selector2, isAsync);
    const result = (0, import_react.useSyncExternalStore)(subscribe4, getValue3, getValue3);
    (0, import_react.useDebugValue)(result);
    return result;
  }
  function useSelect(mapSelect, deps) {
    const staticSelectMode = typeof mapSelect !== "function";
    const staticSelectModeRef = (0, import_react.useRef)(staticSelectMode);
    if (staticSelectMode !== staticSelectModeRef.current) {
      const prevMode = staticSelectModeRef.current ? "static" : "mapping";
      const nextMode = staticSelectMode ? "static" : "mapping";
      throw new Error(`Switching useSelect from ${prevMode} to ${nextMode} is not allowed`);
    }
    return staticSelectMode ? _useStaticSelect(mapSelect) : _useMappingSelect(false, mapSelect, deps);
  }

  // node_modules/@wordpress/data/build-module/components/use-dispatch/use-dispatch.js
  var useDispatch = (storeNameOrDescriptor) => {
    const {
      dispatch: dispatch2
    } = useRegistry();
    return storeNameOrDescriptor === void 0 ? dispatch2 : dispatch2(storeNameOrDescriptor);
  };
  var use_dispatch_default = useDispatch;

  // node_modules/@wordpress/data/build-module/dispatch.js
  function dispatch(storeNameOrDescriptor) {
    return default_registry_default.dispatch(storeNameOrDescriptor);
  }

  // node_modules/@wordpress/data/build-module/select.js
  function select(storeNameOrDescriptor) {
    return default_registry_default.select(storeNameOrDescriptor);
  }

  // node_modules/@wordpress/data/build-module/index.js
  var combineReducers2 = combineReducers;
  var resolveSelect = default_registry_default.resolveSelect;
  var suspendSelect = default_registry_default.suspendSelect;
  var subscribe2 = default_registry_default.subscribe;
  var registerGenericStore = default_registry_default.registerGenericStore;
  var registerStore = default_registry_default.registerStore;
  var use = default_registry_default.use;
  var register = default_registry_default.register;

  // node_modules/colord/index.mjs
  var r = { grad: 0.9, turn: 360, rad: 360 / (2 * Math.PI) };
  var t = function(r4) {
    return "string" == typeof r4 ? r4.length > 0 : "number" == typeof r4;
  };
  var n = function(r4, t4, n3) {
    return void 0 === t4 && (t4 = 0), void 0 === n3 && (n3 = Math.pow(10, t4)), Math.round(n3 * r4) / n3 + 0;
  };
  var e = function(r4, t4, n3) {
    return void 0 === t4 && (t4 = 0), void 0 === n3 && (n3 = 1), r4 > n3 ? n3 : r4 > t4 ? r4 : t4;
  };
  var u = function(r4) {
    return (r4 = isFinite(r4) ? r4 % 360 : 0) > 0 ? r4 : r4 + 360;
  };
  var a = function(r4) {
    return { r: e(r4.r, 0, 255), g: e(r4.g, 0, 255), b: e(r4.b, 0, 255), a: e(r4.a) };
  };
  var o = function(r4) {
    return { r: n(r4.r), g: n(r4.g), b: n(r4.b), a: n(r4.a, 3) };
  };
  var i = /^#([0-9a-f]{3,8})$/i;
  var s = function(r4) {
    var t4 = r4.toString(16);
    return t4.length < 2 ? "0" + t4 : t4;
  };
  var h = function(r4) {
    var t4 = r4.r, n3 = r4.g, e3 = r4.b, u2 = r4.a, a2 = Math.max(t4, n3, e3), o3 = a2 - Math.min(t4, n3, e3), i3 = o3 ? a2 === t4 ? (n3 - e3) / o3 : a2 === n3 ? 2 + (e3 - t4) / o3 : 4 + (t4 - n3) / o3 : 0;
    return { h: 60 * (i3 < 0 ? i3 + 6 : i3), s: a2 ? o3 / a2 * 100 : 0, v: a2 / 255 * 100, a: u2 };
  };
  var b = function(r4) {
    var t4 = r4.h, n3 = r4.s, e3 = r4.v, u2 = r4.a;
    t4 = t4 / 360 * 6, n3 /= 100, e3 /= 100;
    var a2 = Math.floor(t4), o3 = e3 * (1 - n3), i3 = e3 * (1 - (t4 - a2) * n3), s2 = e3 * (1 - (1 - t4 + a2) * n3), h2 = a2 % 6;
    return { r: 255 * [e3, i3, o3, o3, s2, e3][h2], g: 255 * [s2, e3, e3, i3, o3, o3][h2], b: 255 * [o3, o3, s2, e3, e3, i3][h2], a: u2 };
  };
  var g = function(r4) {
    return { h: u(r4.h), s: e(r4.s, 0, 100), l: e(r4.l, 0, 100), a: e(r4.a) };
  };
  var d = function(r4) {
    return { h: n(r4.h), s: n(r4.s), l: n(r4.l), a: n(r4.a, 3) };
  };
  var f = function(r4) {
    return b((n3 = (t4 = r4).s, { h: t4.h, s: (n3 *= ((e3 = t4.l) < 50 ? e3 : 100 - e3) / 100) > 0 ? 2 * n3 / (e3 + n3) * 100 : 0, v: e3 + n3, a: t4.a }));
    var t4, n3, e3;
  };
  var c = function(r4) {
    return { h: (t4 = h(r4)).h, s: (u2 = (200 - (n3 = t4.s)) * (e3 = t4.v) / 100) > 0 && u2 < 200 ? n3 * e3 / 100 / (u2 <= 100 ? u2 : 200 - u2) * 100 : 0, l: u2 / 2, a: t4.a };
    var t4, n3, e3, u2;
  };
  var l = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s*,\s*([+-]?\d*\.?\d+)%\s*,\s*([+-]?\d*\.?\d+)%\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
  var p = /^hsla?\(\s*([+-]?\d*\.?\d+)(deg|rad|grad|turn)?\s+([+-]?\d*\.?\d+)%\s+([+-]?\d*\.?\d+)%\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
  var v = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*,\s*([+-]?\d*\.?\d+)(%)?\s*(?:,\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
  var m = /^rgba?\(\s*([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s+([+-]?\d*\.?\d+)(%)?\s*(?:\/\s*([+-]?\d*\.?\d+)(%)?\s*)?\)$/i;
  var y = { string: [[function(r4) {
    var t4 = i.exec(r4);
    return t4 ? (r4 = t4[1]).length <= 4 ? { r: parseInt(r4[0] + r4[0], 16), g: parseInt(r4[1] + r4[1], 16), b: parseInt(r4[2] + r4[2], 16), a: 4 === r4.length ? n(parseInt(r4[3] + r4[3], 16) / 255, 2) : 1 } : 6 === r4.length || 8 === r4.length ? { r: parseInt(r4.substr(0, 2), 16), g: parseInt(r4.substr(2, 2), 16), b: parseInt(r4.substr(4, 2), 16), a: 8 === r4.length ? n(parseInt(r4.substr(6, 2), 16) / 255, 2) : 1 } : null : null;
  }, "hex"], [function(r4) {
    var t4 = v.exec(r4) || m.exec(r4);
    return t4 ? t4[2] !== t4[4] || t4[4] !== t4[6] ? null : a({ r: Number(t4[1]) / (t4[2] ? 100 / 255 : 1), g: Number(t4[3]) / (t4[4] ? 100 / 255 : 1), b: Number(t4[5]) / (t4[6] ? 100 / 255 : 1), a: void 0 === t4[7] ? 1 : Number(t4[7]) / (t4[8] ? 100 : 1) }) : null;
  }, "rgb"], [function(t4) {
    var n3 = l.exec(t4) || p.exec(t4);
    if (!n3) return null;
    var e3, u2, a2 = g({ h: (e3 = n3[1], u2 = n3[2], void 0 === u2 && (u2 = "deg"), Number(e3) * (r[u2] || 1)), s: Number(n3[3]), l: Number(n3[4]), a: void 0 === n3[5] ? 1 : Number(n3[5]) / (n3[6] ? 100 : 1) });
    return f(a2);
  }, "hsl"]], object: [[function(r4) {
    var n3 = r4.r, e3 = r4.g, u2 = r4.b, o3 = r4.a, i3 = void 0 === o3 ? 1 : o3;
    return t(n3) && t(e3) && t(u2) ? a({ r: Number(n3), g: Number(e3), b: Number(u2), a: Number(i3) }) : null;
  }, "rgb"], [function(r4) {
    var n3 = r4.h, e3 = r4.s, u2 = r4.l, a2 = r4.a, o3 = void 0 === a2 ? 1 : a2;
    if (!t(n3) || !t(e3) || !t(u2)) return null;
    var i3 = g({ h: Number(n3), s: Number(e3), l: Number(u2), a: Number(o3) });
    return f(i3);
  }, "hsl"], [function(r4) {
    var n3 = r4.h, a2 = r4.s, o3 = r4.v, i3 = r4.a, s2 = void 0 === i3 ? 1 : i3;
    if (!t(n3) || !t(a2) || !t(o3)) return null;
    var h2 = function(r5) {
      return { h: u(r5.h), s: e(r5.s, 0, 100), v: e(r5.v, 0, 100), a: e(r5.a) };
    }({ h: Number(n3), s: Number(a2), v: Number(o3), a: Number(s2) });
    return b(h2);
  }, "hsv"]] };
  var N = function(r4, t4) {
    for (var n3 = 0; n3 < t4.length; n3++) {
      var e3 = t4[n3][0](r4);
      if (e3) return [e3, t4[n3][1]];
    }
    return [null, void 0];
  };
  var x = function(r4) {
    return "string" == typeof r4 ? N(r4.trim(), y.string) : "object" == typeof r4 && null !== r4 ? N(r4, y.object) : [null, void 0];
  };
  var M = function(r4, t4) {
    var n3 = c(r4);
    return { h: n3.h, s: e(n3.s + 100 * t4, 0, 100), l: n3.l, a: n3.a };
  };
  var H = function(r4) {
    return (299 * r4.r + 587 * r4.g + 114 * r4.b) / 1e3 / 255;
  };
  var $ = function(r4, t4) {
    var n3 = c(r4);
    return { h: n3.h, s: n3.s, l: e(n3.l + 100 * t4, 0, 100), a: n3.a };
  };
  var j = function() {
    function r4(r5) {
      this.parsed = x(r5)[0], this.rgba = this.parsed || { r: 0, g: 0, b: 0, a: 1 };
    }
    return r4.prototype.isValid = function() {
      return null !== this.parsed;
    }, r4.prototype.brightness = function() {
      return n(H(this.rgba), 2);
    }, r4.prototype.isDark = function() {
      return H(this.rgba) < 0.5;
    }, r4.prototype.isLight = function() {
      return H(this.rgba) >= 0.5;
    }, r4.prototype.toHex = function() {
      return r5 = o(this.rgba), t4 = r5.r, e3 = r5.g, u2 = r5.b, i3 = (a2 = r5.a) < 1 ? s(n(255 * a2)) : "", "#" + s(t4) + s(e3) + s(u2) + i3;
      var r5, t4, e3, u2, a2, i3;
    }, r4.prototype.toRgb = function() {
      return o(this.rgba);
    }, r4.prototype.toRgbString = function() {
      return r5 = o(this.rgba), t4 = r5.r, n3 = r5.g, e3 = r5.b, (u2 = r5.a) < 1 ? "rgba(" + t4 + ", " + n3 + ", " + e3 + ", " + u2 + ")" : "rgb(" + t4 + ", " + n3 + ", " + e3 + ")";
      var r5, t4, n3, e3, u2;
    }, r4.prototype.toHsl = function() {
      return d(c(this.rgba));
    }, r4.prototype.toHslString = function() {
      return r5 = d(c(this.rgba)), t4 = r5.h, n3 = r5.s, e3 = r5.l, (u2 = r5.a) < 1 ? "hsla(" + t4 + ", " + n3 + "%, " + e3 + "%, " + u2 + ")" : "hsl(" + t4 + ", " + n3 + "%, " + e3 + "%)";
      var r5, t4, n3, e3, u2;
    }, r4.prototype.toHsv = function() {
      return r5 = h(this.rgba), { h: n(r5.h), s: n(r5.s), v: n(r5.v), a: n(r5.a, 3) };
      var r5;
    }, r4.prototype.invert = function() {
      return w({ r: 255 - (r5 = this.rgba).r, g: 255 - r5.g, b: 255 - r5.b, a: r5.a });
      var r5;
    }, r4.prototype.saturate = function(r5) {
      return void 0 === r5 && (r5 = 0.1), w(M(this.rgba, r5));
    }, r4.prototype.desaturate = function(r5) {
      return void 0 === r5 && (r5 = 0.1), w(M(this.rgba, -r5));
    }, r4.prototype.grayscale = function() {
      return w(M(this.rgba, -1));
    }, r4.prototype.lighten = function(r5) {
      return void 0 === r5 && (r5 = 0.1), w($(this.rgba, r5));
    }, r4.prototype.darken = function(r5) {
      return void 0 === r5 && (r5 = 0.1), w($(this.rgba, -r5));
    }, r4.prototype.rotate = function(r5) {
      return void 0 === r5 && (r5 = 15), this.hue(this.hue() + r5);
    }, r4.prototype.alpha = function(r5) {
      return "number" == typeof r5 ? w({ r: (t4 = this.rgba).r, g: t4.g, b: t4.b, a: r5 }) : n(this.rgba.a, 3);
      var t4;
    }, r4.prototype.hue = function(r5) {
      var t4 = c(this.rgba);
      return "number" == typeof r5 ? w({ h: r5, s: t4.s, l: t4.l, a: t4.a }) : n(t4.h);
    }, r4.prototype.isEqual = function(r5) {
      return this.toHex() === w(r5).toHex();
    }, r4;
  }();
  var w = function(r4) {
    return r4 instanceof j ? r4 : new j(r4);
  };
  var S = [];
  var k = function(r4) {
    r4.forEach(function(r5) {
      S.indexOf(r5) < 0 && (r5(j, y), S.push(r5));
    });
  };

  // node_modules/colord/plugins/names.mjs
  function names_default(e3, f2) {
    var a2 = { white: "#ffffff", bisque: "#ffe4c4", blue: "#0000ff", cadetblue: "#5f9ea0", chartreuse: "#7fff00", chocolate: "#d2691e", coral: "#ff7f50", antiquewhite: "#faebd7", aqua: "#00ffff", azure: "#f0ffff", whitesmoke: "#f5f5f5", papayawhip: "#ffefd5", plum: "#dda0dd", blanchedalmond: "#ffebcd", black: "#000000", gold: "#ffd700", goldenrod: "#daa520", gainsboro: "#dcdcdc", cornsilk: "#fff8dc", cornflowerblue: "#6495ed", burlywood: "#deb887", aquamarine: "#7fffd4", beige: "#f5f5dc", crimson: "#dc143c", cyan: "#00ffff", darkblue: "#00008b", darkcyan: "#008b8b", darkgoldenrod: "#b8860b", darkkhaki: "#bdb76b", darkgray: "#a9a9a9", darkgreen: "#006400", darkgrey: "#a9a9a9", peachpuff: "#ffdab9", darkmagenta: "#8b008b", darkred: "#8b0000", darkorchid: "#9932cc", darkorange: "#ff8c00", darkslateblue: "#483d8b", gray: "#808080", darkslategray: "#2f4f4f", darkslategrey: "#2f4f4f", deeppink: "#ff1493", deepskyblue: "#00bfff", wheat: "#f5deb3", firebrick: "#b22222", floralwhite: "#fffaf0", ghostwhite: "#f8f8ff", darkviolet: "#9400d3", magenta: "#ff00ff", green: "#008000", dodgerblue: "#1e90ff", grey: "#808080", honeydew: "#f0fff0", hotpink: "#ff69b4", blueviolet: "#8a2be2", forestgreen: "#228b22", lawngreen: "#7cfc00", indianred: "#cd5c5c", indigo: "#4b0082", fuchsia: "#ff00ff", brown: "#a52a2a", maroon: "#800000", mediumblue: "#0000cd", lightcoral: "#f08080", darkturquoise: "#00ced1", lightcyan: "#e0ffff", ivory: "#fffff0", lightyellow: "#ffffe0", lightsalmon: "#ffa07a", lightseagreen: "#20b2aa", linen: "#faf0e6", mediumaquamarine: "#66cdaa", lemonchiffon: "#fffacd", lime: "#00ff00", khaki: "#f0e68c", mediumseagreen: "#3cb371", limegreen: "#32cd32", mediumspringgreen: "#00fa9a", lightskyblue: "#87cefa", lightblue: "#add8e6", midnightblue: "#191970", lightpink: "#ffb6c1", mistyrose: "#ffe4e1", moccasin: "#ffe4b5", mintcream: "#f5fffa", lightslategray: "#778899", lightslategrey: "#778899", navajowhite: "#ffdead", navy: "#000080", mediumvioletred: "#c71585", powderblue: "#b0e0e6", palegoldenrod: "#eee8aa", oldlace: "#fdf5e6", paleturquoise: "#afeeee", mediumturquoise: "#48d1cc", mediumorchid: "#ba55d3", rebeccapurple: "#663399", lightsteelblue: "#b0c4de", mediumslateblue: "#7b68ee", thistle: "#d8bfd8", tan: "#d2b48c", orchid: "#da70d6", mediumpurple: "#9370db", purple: "#800080", pink: "#ffc0cb", skyblue: "#87ceeb", springgreen: "#00ff7f", palegreen: "#98fb98", red: "#ff0000", yellow: "#ffff00", slateblue: "#6a5acd", lavenderblush: "#fff0f5", peru: "#cd853f", palevioletred: "#db7093", violet: "#ee82ee", teal: "#008080", slategray: "#708090", slategrey: "#708090", aliceblue: "#f0f8ff", darkseagreen: "#8fbc8f", darkolivegreen: "#556b2f", greenyellow: "#adff2f", seagreen: "#2e8b57", seashell: "#fff5ee", tomato: "#ff6347", silver: "#c0c0c0", sienna: "#a0522d", lavender: "#e6e6fa", lightgreen: "#90ee90", orange: "#ffa500", orangered: "#ff4500", steelblue: "#4682b4", royalblue: "#4169e1", turquoise: "#40e0d0", yellowgreen: "#9acd32", salmon: "#fa8072", saddlebrown: "#8b4513", sandybrown: "#f4a460", rosybrown: "#bc8f8f", darksalmon: "#e9967a", lightgoldenrodyellow: "#fafad2", snow: "#fffafa", lightgrey: "#d3d3d3", lightgray: "#d3d3d3", dimgray: "#696969", dimgrey: "#696969", olivedrab: "#6b8e23", olive: "#808000" }, r4 = {};
    for (var d2 in a2) r4[a2[d2]] = d2;
    var l2 = {};
    e3.prototype.toName = function(f3) {
      if (!(this.rgba.a || this.rgba.r || this.rgba.g || this.rgba.b)) return "transparent";
      var d3, i3, n3 = r4[this.toHex()];
      if (n3) return n3;
      if (null == f3 ? void 0 : f3.closest) {
        var o3 = this.toRgb(), t4 = 1 / 0, b2 = "black";
        if (!l2.length) for (var c6 in a2) l2[c6] = new e3(a2[c6]).toRgb();
        for (var g2 in a2) {
          var u2 = (d3 = o3, i3 = l2[g2], Math.pow(d3.r - i3.r, 2) + Math.pow(d3.g - i3.g, 2) + Math.pow(d3.b - i3.b, 2));
          u2 < t4 && (t4 = u2, b2 = g2);
        }
        return b2;
      }
    };
    f2.string.push([function(f3) {
      var r5 = f3.toLowerCase(), d3 = "transparent" === r5 ? "#0000" : a2[r5];
      return d3 ? new e3(d3).toRgb() : null;
    }, "name"]);
  }

  // node_modules/colord/plugins/a11y.mjs
  var o2 = function(o3) {
    var t4 = o3 / 255;
    return t4 < 0.04045 ? t4 / 12.92 : Math.pow((t4 + 0.055) / 1.055, 2.4);
  };
  var t2 = function(t4) {
    return 0.2126 * o2(t4.r) + 0.7152 * o2(t4.g) + 0.0722 * o2(t4.b);
  };
  function a11y_default(o3) {
    o3.prototype.luminance = function() {
      return o4 = t2(this.rgba), void 0 === (r4 = 2) && (r4 = 0), void 0 === n3 && (n3 = Math.pow(10, r4)), Math.round(n3 * o4) / n3 + 0;
      var o4, r4, n3;
    }, o3.prototype.contrast = function(r4) {
      void 0 === r4 && (r4 = "#FFF");
      var n3, a2, i3, e3, v2, u2, d2, c6 = r4 instanceof o3 ? r4 : new o3(r4);
      return e3 = this.rgba, v2 = c6.toRgb(), u2 = t2(e3), d2 = t2(v2), n3 = u2 > d2 ? (u2 + 0.05) / (d2 + 0.05) : (d2 + 0.05) / (u2 + 0.05), void 0 === (a2 = 2) && (a2 = 0), void 0 === i3 && (i3 = Math.pow(10, a2)), Math.floor(i3 * n3) / i3 + 0;
    }, o3.prototype.isReadable = function(o4, t4) {
      return void 0 === o4 && (o4 = "#FFF"), void 0 === t4 && (t4 = {}), this.contrast(o4) >= (e3 = void 0 === (i3 = (r4 = t4).size) ? "normal" : i3, "AAA" === (a2 = void 0 === (n3 = r4.level) ? "AA" : n3) && "normal" === e3 ? 7 : "AA" === a2 && "large" === e3 ? 3 : 4.5);
      var r4, n3, a2, i3, e3;
    };
  }

  // node_modules/@wordpress/rich-text/build-module/store/reducer.js
  function formatTypes(state = {}, action) {
    switch (action.type) {
      case "ADD_FORMAT_TYPES":
        return {
          ...state,
          // Key format types by their name.
          ...action.formatTypes.reduce((newFormatTypes, type) => ({
            ...newFormatTypes,
            [type.name]: type
          }), {})
        };
      case "REMOVE_FORMAT_TYPES":
        return Object.fromEntries(Object.entries(state).filter(([key]) => !action.names.includes(key)));
    }
    return state;
  }
  var reducer_default2 = combineReducers2({
    formatTypes
  });

  // node_modules/@wordpress/rich-text/build-module/store/selectors.js
  var selectors_exports2 = {};
  __export(selectors_exports2, {
    getFormatType: () => getFormatType,
    getFormatTypeForBareElement: () => getFormatTypeForBareElement,
    getFormatTypeForClassName: () => getFormatTypeForClassName,
    getFormatTypes: () => getFormatTypes
  });
  var getFormatTypes = rememo_default((state) => Object.values(state.formatTypes), (state) => [state.formatTypes]);
  function getFormatType(state, name) {
    return state.formatTypes[name];
  }
  function getFormatTypeForBareElement(state, bareElementTagName) {
    const formatTypes2 = getFormatTypes(state);
    return formatTypes2.find(({
      className,
      tagName
    }) => {
      return className === null && bareElementTagName === tagName;
    }) || formatTypes2.find(({
      className,
      tagName
    }) => {
      return className === null && "*" === tagName;
    });
  }
  function getFormatTypeForClassName(state, elementClassName) {
    return getFormatTypes(state).find(({
      className
    }) => {
      if (className === null) {
        return false;
      }
      return ` ${elementClassName} `.indexOf(` ${className} `) >= 0;
    });
  }

  // node_modules/@wordpress/rich-text/build-module/store/actions.js
  var actions_exports2 = {};
  __export(actions_exports2, {
    addFormatTypes: () => addFormatTypes,
    removeFormatTypes: () => removeFormatTypes
  });
  function addFormatTypes(formatTypes2) {
    return {
      type: "ADD_FORMAT_TYPES",
      formatTypes: Array.isArray(formatTypes2) ? formatTypes2 : [formatTypes2]
    };
  }
  function removeFormatTypes(names) {
    return {
      type: "REMOVE_FORMAT_TYPES",
      names: Array.isArray(names) ? names : [names]
    };
  }

  // node_modules/@wordpress/rich-text/build-module/store/index.js
  var STORE_NAME = "core/rich-text";
  var store = createReduxStore(STORE_NAME, {
    reducer: reducer_default2,
    selectors: selectors_exports2,
    actions: actions_exports2
  });
  register(store);

  // node_modules/@wordpress/rich-text/build-module/is-format-equal.js
  function isFormatEqual(format1, format2) {
    if (format1 === format2) {
      return true;
    }
    if (!format1 || !format2) {
      return false;
    }
    if (format1.type !== format2.type) {
      return false;
    }
    const attributes1 = format1.attributes;
    const attributes2 = format2.attributes;
    if (attributes1 === attributes2) {
      return true;
    }
    if (!attributes1 || !attributes2) {
      return false;
    }
    const keys1 = Object.keys(attributes1);
    const keys2 = Object.keys(attributes2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    const length2 = keys1.length;
    for (let i3 = 0; i3 < length2; i3++) {
      const name = keys1[i3];
      if (attributes1[name] !== attributes2[name]) {
        return false;
      }
    }
    return true;
  }

  // node_modules/@wordpress/rich-text/build-module/normalise-formats.js
  function normaliseFormats(value) {
    const newFormats = value.formats.slice();
    newFormats.forEach((formatsAtIndex, index2) => {
      const formatsAtPreviousIndex = newFormats[index2 - 1];
      if (formatsAtPreviousIndex) {
        const newFormatsAtIndex = formatsAtIndex.slice();
        newFormatsAtIndex.forEach((format, formatIndex) => {
          const previousFormat = formatsAtPreviousIndex[formatIndex];
          if (isFormatEqual(format, previousFormat)) {
            newFormatsAtIndex[formatIndex] = previousFormat;
          }
        });
        newFormats[index2] = newFormatsAtIndex;
      }
    });
    return {
      ...value,
      formats: newFormats
    };
  }

  // node_modules/@wordpress/rich-text/build-module/create-element.js
  function createElement2({
    implementation
  }, html2) {
    if (!createElement2.body) {
      createElement2.body = implementation.createHTMLDocument("").body;
    }
    createElement2.body.innerHTML = html2;
    return createElement2.body;
  }

  // node_modules/@wordpress/rich-text/build-module/special-characters.js
  var OBJECT_REPLACEMENT_CHARACTER = "\uFFFC";
  var ZWNBSP = "\uFEFF";

  // node_modules/@wordpress/rich-text/build-module/get-active-formats.js
  function getActiveFormats(value, EMPTY_ACTIVE_FORMATS3 = []) {
    const {
      formats,
      start: start2,
      end,
      activeFormats
    } = value;
    if (start2 === void 0) {
      return EMPTY_ACTIVE_FORMATS3;
    }
    if (start2 === end) {
      if (activeFormats) {
        return activeFormats;
      }
      const formatsBefore = formats[start2 - 1] || EMPTY_ACTIVE_FORMATS3;
      const formatsAfter = formats[start2] || EMPTY_ACTIVE_FORMATS3;
      if (formatsBefore.length < formatsAfter.length) {
        return formatsBefore;
      }
      return formatsAfter;
    }
    if (!formats[start2]) {
      return EMPTY_ACTIVE_FORMATS3;
    }
    const selectedFormats = formats.slice(start2, end);
    const _activeFormats = [...selectedFormats[0]];
    let i3 = selectedFormats.length;
    while (i3--) {
      const formatsAtIndex = selectedFormats[i3];
      if (!formatsAtIndex) {
        return EMPTY_ACTIVE_FORMATS3;
      }
      let ii = _activeFormats.length;
      while (ii--) {
        const format = _activeFormats[ii];
        if (!formatsAtIndex.find((_format) => isFormatEqual(format, _format))) {
          _activeFormats.splice(ii, 1);
        }
      }
      if (_activeFormats.length === 0) {
        return EMPTY_ACTIVE_FORMATS3;
      }
    }
    return _activeFormats || EMPTY_ACTIVE_FORMATS3;
  }

  // node_modules/@wordpress/rich-text/build-module/get-format-type.js
  function getFormatType2(name) {
    return select(store).getFormatType(name);
  }

  // node_modules/@wordpress/rich-text/build-module/to-tree.js
  function restoreOnAttributes(attributes, isEditableTree) {
    if (isEditableTree) {
      return attributes;
    }
    const newAttributes = {};
    for (const key in attributes) {
      let newKey = key;
      if (key.startsWith("data-disable-rich-text-")) {
        newKey = key.slice("data-disable-rich-text-".length);
      }
      newAttributes[newKey] = attributes[key];
    }
    return newAttributes;
  }
  function fromFormat({
    type,
    tagName,
    attributes,
    unregisteredAttributes,
    object,
    boundaryClass,
    isEditableTree
  }) {
    const formatType = getFormatType2(type);
    let elementAttributes = {};
    if (boundaryClass && isEditableTree) {
      elementAttributes["data-rich-text-format-boundary"] = "true";
    }
    if (!formatType) {
      if (attributes) {
        elementAttributes = {
          ...attributes,
          ...elementAttributes
        };
      }
      return {
        type,
        attributes: restoreOnAttributes(elementAttributes, isEditableTree),
        object
      };
    }
    elementAttributes = {
      ...unregisteredAttributes,
      ...elementAttributes
    };
    for (const name in attributes) {
      const key = formatType.attributes ? formatType.attributes[name] : false;
      if (key) {
        elementAttributes[key] = attributes[name];
      } else {
        elementAttributes[name] = attributes[name];
      }
    }
    if (formatType.className) {
      if (elementAttributes.class) {
        elementAttributes.class = `${formatType.className} ${elementAttributes.class}`;
      } else {
        elementAttributes.class = formatType.className;
      }
    }
    if (isEditableTree && formatType.contentEditable === false) {
      elementAttributes.contenteditable = "false";
    }
    return {
      type: tagName || formatType.tagName,
      object: formatType.object,
      attributes: restoreOnAttributes(elementAttributes, isEditableTree)
    };
  }
  function isEqualUntil(a2, b2, index2) {
    do {
      if (a2[index2] !== b2[index2]) {
        return false;
      }
    } while (index2--);
    return true;
  }
  function toTree({
    value,
    preserveWhiteSpace,
    createEmpty: createEmpty2,
    append: append4,
    getLastChild: getLastChild3,
    getParent: getParent3,
    isText: isText3,
    getText: getText3,
    remove: remove5,
    appendText: appendText3,
    onStartIndex,
    onEndIndex,
    isEditableTree,
    placeholder
  }) {
    const {
      formats,
      replacements,
      text: text2,
      start: start2,
      end
    } = value;
    const formatsLength = formats.length + 1;
    const tree = createEmpty2();
    const activeFormats = getActiveFormats(value);
    const deepestActiveFormat = activeFormats[activeFormats.length - 1];
    let lastCharacterFormats;
    let lastCharacter;
    append4(tree, "");
    for (let i3 = 0; i3 < formatsLength; i3++) {
      const character2 = text2.charAt(i3);
      const shouldInsertPadding = isEditableTree && // Pad the line if the line is empty.
      (!lastCharacter || // Pad the line if the previous character is a line break, otherwise
      // the line break won't be visible.
      lastCharacter === "\n");
      const characterFormats = formats[i3];
      let pointer = getLastChild3(tree);
      if (characterFormats) {
        characterFormats.forEach((format, formatIndex) => {
          if (pointer && lastCharacterFormats && // Reuse the last element if all formats remain the same.
          isEqualUntil(characterFormats, lastCharacterFormats, formatIndex)) {
            pointer = getLastChild3(pointer);
            return;
          }
          const {
            type,
            tagName,
            attributes,
            unregisteredAttributes
          } = format;
          const boundaryClass = isEditableTree && format === deepestActiveFormat;
          const parent = getParent3(pointer);
          const newNode = append4(parent, fromFormat({
            type,
            tagName,
            attributes,
            unregisteredAttributes,
            boundaryClass,
            isEditableTree
          }));
          if (isText3(pointer) && getText3(pointer).length === 0) {
            remove5(pointer);
          }
          pointer = append4(newNode, "");
        });
      }
      if (i3 === 0) {
        if (onStartIndex && start2 === 0) {
          onStartIndex(tree, pointer);
        }
        if (onEndIndex && end === 0) {
          onEndIndex(tree, pointer);
        }
      }
      if (character2 === OBJECT_REPLACEMENT_CHARACTER) {
        const replacement = replacements[i3];
        if (!replacement) {
          continue;
        }
        const {
          type,
          attributes,
          innerHTML
        } = replacement;
        const formatType = getFormatType2(type);
        if (isEditableTree && type === "#comment") {
          pointer = append4(getParent3(pointer), {
            type: "span",
            attributes: {
              contenteditable: "false",
              "data-rich-text-comment": attributes["data-rich-text-comment"]
            }
          });
          append4(append4(pointer, {
            type: "span"
          }), attributes["data-rich-text-comment"].trim());
        } else if (!isEditableTree && type === "script") {
          pointer = append4(getParent3(pointer), fromFormat({
            type: "script",
            isEditableTree
          }));
          append4(pointer, {
            html: decodeURIComponent(attributes["data-rich-text-script"])
          });
        } else if (formatType?.contentEditable === false) {
          pointer = append4(getParent3(pointer), fromFormat({
            ...replacement,
            isEditableTree,
            boundaryClass: start2 === i3 && end === i3 + 1
          }));
          if (innerHTML) {
            append4(pointer, {
              html: innerHTML
            });
          }
        } else {
          pointer = append4(getParent3(pointer), fromFormat({
            ...replacement,
            object: true,
            isEditableTree
          }));
        }
        pointer = append4(getParent3(pointer), "");
      } else if (!preserveWhiteSpace && character2 === "\n") {
        pointer = append4(getParent3(pointer), {
          type: "br",
          attributes: isEditableTree ? {
            "data-rich-text-line-break": "true"
          } : void 0,
          object: true
        });
        pointer = append4(getParent3(pointer), "");
      } else if (!isText3(pointer)) {
        pointer = append4(getParent3(pointer), character2);
      } else {
        appendText3(pointer, character2);
      }
      if (onStartIndex && start2 === i3 + 1) {
        onStartIndex(tree, pointer);
      }
      if (onEndIndex && end === i3 + 1) {
        onEndIndex(tree, pointer);
      }
      if (shouldInsertPadding && i3 === text2.length) {
        append4(getParent3(pointer), ZWNBSP);
        if (placeholder && text2.length === 0) {
          append4(getParent3(pointer), {
            type: "span",
            attributes: {
              "data-rich-text-placeholder": placeholder,
              // Necessary to prevent the placeholder from catching
              // selection and being editable.
              style: "pointer-events:none;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;"
            }
          });
        }
      }
      lastCharacterFormats = characterFormats;
      lastCharacter = character2;
    }
    return tree;
  }

  // node_modules/@wordpress/rich-text/build-module/to-html-string.js
  function toHTMLString({
    value,
    preserveWhiteSpace
  }) {
    const tree = toTree({
      value,
      preserveWhiteSpace,
      createEmpty,
      append,
      getLastChild,
      getParent,
      isText,
      getText,
      remove: remove2,
      appendText
    });
    return createChildrenHTML(tree.children);
  }
  function createEmpty() {
    return {};
  }
  function getLastChild({
    children
  }) {
    return children && children[children.length - 1];
  }
  function append(parent, object) {
    if (typeof object === "string") {
      object = {
        text: object
      };
    }
    object.parent = parent;
    parent.children = parent.children || [];
    parent.children.push(object);
    return object;
  }
  function appendText(object, text2) {
    object.text += text2;
  }
  function getParent({
    parent
  }) {
    return parent;
  }
  function isText({
    text: text2
  }) {
    return typeof text2 === "string";
  }
  function getText({
    text: text2
  }) {
    return text2;
  }
  function remove2(object) {
    const index2 = object.parent.children.indexOf(object);
    if (index2 !== -1) {
      object.parent.children.splice(index2, 1);
    }
    return object;
  }
  function createElementHTML({
    type,
    attributes,
    object,
    children
  }) {
    if (type === "#comment") {
      return `<!--${attributes["data-rich-text-comment"]}-->`;
    }
    let attributeString = "";
    for (const key in attributes) {
      if (!isValidAttributeName(key)) {
        continue;
      }
      attributeString += ` ${key}="${escapeAttribute(attributes[key])}"`;
    }
    if (object) {
      return `<${type}${attributeString}>`;
    }
    return `<${type}${attributeString}>${createChildrenHTML(children)}</${type}>`;
  }
  function createChildrenHTML(children = []) {
    return children.map((child) => {
      if (child.html !== void 0) {
        return child.html;
      }
      return child.text === void 0 ? createElementHTML(child) : escapeEditableHTML(child.text);
    }).join("");
  }

  // node_modules/@wordpress/rich-text/build-module/get-text-content.js
  function getTextContent({
    text: text2
  }) {
    return text2.replace(OBJECT_REPLACEMENT_CHARACTER, "");
  }

  // node_modules/@wordpress/rich-text/build-module/create.js
  function createEmptyValue() {
    return {
      formats: [],
      replacements: [],
      text: ""
    };
  }
  function toFormat({
    tagName,
    attributes
  }) {
    let formatType;
    if (attributes && attributes.class) {
      formatType = select(store).getFormatTypeForClassName(attributes.class);
      if (formatType) {
        attributes.class = ` ${attributes.class} `.replace(` ${formatType.className} `, " ").trim();
        if (!attributes.class) {
          delete attributes.class;
        }
      }
    }
    if (!formatType) {
      formatType = select(store).getFormatTypeForBareElement(tagName);
    }
    if (!formatType) {
      return attributes ? {
        type: tagName,
        attributes
      } : {
        type: tagName
      };
    }
    if (formatType.__experimentalCreatePrepareEditableTree && !formatType.__experimentalCreateOnChangeEditableValue) {
      return null;
    }
    if (!attributes) {
      return {
        formatType,
        type: formatType.name,
        tagName
      };
    }
    const registeredAttributes = {};
    const unregisteredAttributes = {};
    const _attributes = {
      ...attributes
    };
    for (const key in formatType.attributes) {
      const name = formatType.attributes[key];
      registeredAttributes[key] = _attributes[name];
      delete _attributes[name];
      if (typeof registeredAttributes[key] === "undefined") {
        delete registeredAttributes[key];
      }
    }
    for (const name in _attributes) {
      unregisteredAttributes[name] = attributes[name];
    }
    if (formatType.contentEditable === false) {
      delete unregisteredAttributes.contenteditable;
    }
    return {
      formatType,
      type: formatType.name,
      tagName,
      attributes: registeredAttributes,
      unregisteredAttributes
    };
  }
  var RichTextData = class _RichTextData {
    #value;
    static empty() {
      return new _RichTextData();
    }
    static fromPlainText(text2) {
      return new _RichTextData(create2({
        text: text2
      }));
    }
    static fromHTMLString(html2) {
      return new _RichTextData(create2({
        html: html2
      }));
    }
    /**
     * Create a RichTextData instance from an HTML element.
     *
     * @param {HTMLElement}                    htmlElement The HTML element to create the instance from.
     * @param {{preserveWhiteSpace?: boolean}} options     Options.
     * @return {RichTextData} The RichTextData instance.
     */
    static fromHTMLElement(htmlElement, options = {}) {
      const {
        preserveWhiteSpace = false
      } = options;
      const element = preserveWhiteSpace ? htmlElement : collapseWhiteSpace(htmlElement);
      const richTextData = new _RichTextData(create2({
        element
      }));
      Object.defineProperty(richTextData, "originalHTML", {
        value: htmlElement.innerHTML
      });
      return richTextData;
    }
    constructor(init2 = createEmptyValue()) {
      this.#value = init2;
    }
    toPlainText() {
      return getTextContent(this.#value);
    }
    // We could expose `toHTMLElement` at some point as well, but we'd only use
    // it internally.
    /**
     * Convert the rich text value to an HTML string.
     *
     * @param {{preserveWhiteSpace?: boolean}} options Options.
     * @return {string} The HTML string.
     */
    toHTMLString({
      preserveWhiteSpace
    } = {}) {
      return this.originalHTML || toHTMLString({
        value: this.#value,
        preserveWhiteSpace
      });
    }
    valueOf() {
      return this.toHTMLString();
    }
    toString() {
      return this.toHTMLString();
    }
    toJSON() {
      return this.toHTMLString();
    }
    get length() {
      return this.text.length;
    }
    get formats() {
      return this.#value.formats;
    }
    get replacements() {
      return this.#value.replacements;
    }
    get text() {
      return this.#value.text;
    }
  };
  for (const name of Object.getOwnPropertyNames(String.prototype)) {
    if (RichTextData.prototype.hasOwnProperty(name)) {
      continue;
    }
    Object.defineProperty(RichTextData.prototype, name, {
      value(...args) {
        return this.toHTMLString()[name](...args);
      }
    });
  }
  function create2({
    element,
    text: text2,
    html: html2,
    range,
    __unstableIsEditableTree: isEditableTree
  } = {}) {
    if (html2 instanceof RichTextData) {
      return {
        text: html2.text,
        formats: html2.formats,
        replacements: html2.replacements
      };
    }
    if (typeof text2 === "string" && text2.length > 0) {
      return {
        formats: Array(text2.length),
        replacements: Array(text2.length),
        text: text2
      };
    }
    if (typeof html2 === "string" && html2.length > 0) {
      element = createElement2(document, html2);
    }
    if (typeof element !== "object") {
      return createEmptyValue();
    }
    return createFromElement({
      element,
      range,
      isEditableTree
    });
  }
  function accumulateSelection(accumulator, node2, range, value) {
    if (!range) {
      return;
    }
    const {
      parentNode
    } = node2;
    const {
      startContainer,
      startOffset,
      endContainer,
      endOffset
    } = range;
    const currentLength = accumulator.text.length;
    if (value.start !== void 0) {
      accumulator.start = currentLength + value.start;
    } else if (node2 === startContainer && node2.nodeType === node2.TEXT_NODE) {
      accumulator.start = currentLength + startOffset;
    } else if (parentNode === startContainer && node2 === startContainer.childNodes[startOffset]) {
      accumulator.start = currentLength;
    } else if (parentNode === startContainer && node2 === startContainer.childNodes[startOffset - 1]) {
      accumulator.start = currentLength + value.text.length;
    } else if (node2 === startContainer) {
      accumulator.start = currentLength;
    }
    if (value.end !== void 0) {
      accumulator.end = currentLength + value.end;
    } else if (node2 === endContainer && node2.nodeType === node2.TEXT_NODE) {
      accumulator.end = currentLength + endOffset;
    } else if (parentNode === endContainer && node2 === endContainer.childNodes[endOffset - 1]) {
      accumulator.end = currentLength + value.text.length;
    } else if (parentNode === endContainer && node2 === endContainer.childNodes[endOffset]) {
      accumulator.end = currentLength;
    } else if (node2 === endContainer) {
      accumulator.end = currentLength + endOffset;
    }
  }
  function filterRange(node2, range, filter2) {
    if (!range) {
      return;
    }
    const {
      startContainer,
      endContainer
    } = range;
    let {
      startOffset,
      endOffset
    } = range;
    if (node2 === startContainer) {
      startOffset = filter2(node2.nodeValue.slice(0, startOffset)).length;
    }
    if (node2 === endContainer) {
      endOffset = filter2(node2.nodeValue.slice(0, endOffset)).length;
    }
    return {
      startContainer,
      startOffset,
      endContainer,
      endOffset
    };
  }
  function collapseWhiteSpace(element, isRoot = true) {
    const clone = element.cloneNode(true);
    clone.normalize();
    Array.from(clone.childNodes).forEach((node2, i3, nodes) => {
      if (node2.nodeType === node2.TEXT_NODE) {
        let newNodeValue = node2.nodeValue;
        if (/[\n\t\r\f]/.test(newNodeValue)) {
          newNodeValue = newNodeValue.replace(/[\n\t\r\f]+/g, " ");
        }
        if (newNodeValue.indexOf("  ") !== -1) {
          newNodeValue = newNodeValue.replace(/ {2,}/g, " ");
        }
        if (i3 === 0 && newNodeValue.startsWith(" ")) {
          newNodeValue = newNodeValue.slice(1);
        } else if (isRoot && i3 === nodes.length - 1 && newNodeValue.endsWith(" ")) {
          newNodeValue = newNodeValue.slice(0, -1);
        }
        node2.nodeValue = newNodeValue;
      } else if (node2.nodeType === node2.ELEMENT_NODE) {
        collapseWhiteSpace(node2, false);
      }
    });
    return clone;
  }
  var CARRIAGE_RETURN = "\r";
  function removeReservedCharacters(string2) {
    return string2.replace(new RegExp(`[${ZWNBSP}${OBJECT_REPLACEMENT_CHARACTER}${CARRIAGE_RETURN}]`, "gu"), "");
  }
  function createFromElement({
    element,
    range,
    isEditableTree
  }) {
    const accumulator = createEmptyValue();
    if (!element) {
      return accumulator;
    }
    if (!element.hasChildNodes()) {
      accumulateSelection(accumulator, element, range, createEmptyValue());
      return accumulator;
    }
    const length2 = element.childNodes.length;
    for (let index2 = 0; index2 < length2; index2++) {
      const node2 = element.childNodes[index2];
      const tagName = node2.nodeName.toLowerCase();
      if (node2.nodeType === node2.TEXT_NODE) {
        const text2 = removeReservedCharacters(node2.nodeValue);
        range = filterRange(node2, range, removeReservedCharacters);
        accumulateSelection(accumulator, node2, range, {
          text: text2
        });
        accumulator.formats.length += text2.length;
        accumulator.replacements.length += text2.length;
        accumulator.text += text2;
        continue;
      }
      if (node2.nodeType === node2.COMMENT_NODE || node2.nodeType === node2.ELEMENT_NODE && node2.tagName === "SPAN" && node2.hasAttribute("data-rich-text-comment")) {
        const value2 = {
          formats: [,],
          replacements: [{
            type: "#comment",
            attributes: {
              "data-rich-text-comment": node2.nodeType === node2.COMMENT_NODE ? node2.nodeValue : node2.getAttribute("data-rich-text-comment")
            }
          }],
          text: OBJECT_REPLACEMENT_CHARACTER
        };
        accumulateSelection(accumulator, node2, range, value2);
        mergePair(accumulator, value2);
        continue;
      }
      if (node2.nodeType !== node2.ELEMENT_NODE) {
        continue;
      }
      if (isEditableTree && // Ignore any line breaks that are not inserted by us.
      tagName === "br" && !node2.getAttribute("data-rich-text-line-break")) {
        accumulateSelection(accumulator, node2, range, createEmptyValue());
        continue;
      }
      if (tagName === "script") {
        const value2 = {
          formats: [,],
          replacements: [{
            type: tagName,
            attributes: {
              "data-rich-text-script": node2.getAttribute("data-rich-text-script") || encodeURIComponent(node2.innerHTML)
            }
          }],
          text: OBJECT_REPLACEMENT_CHARACTER
        };
        accumulateSelection(accumulator, node2, range, value2);
        mergePair(accumulator, value2);
        continue;
      }
      if (tagName === "br") {
        accumulateSelection(accumulator, node2, range, createEmptyValue());
        mergePair(accumulator, create2({
          text: "\n"
        }));
        continue;
      }
      const format = toFormat({
        tagName,
        attributes: getAttributes({
          element: node2
        })
      });
      if (format?.formatType?.contentEditable === false) {
        delete format.formatType;
        accumulateSelection(accumulator, node2, range, createEmptyValue());
        mergePair(accumulator, {
          formats: [,],
          replacements: [{
            ...format,
            innerHTML: node2.innerHTML
          }],
          text: OBJECT_REPLACEMENT_CHARACTER
        });
        continue;
      }
      if (format) {
        delete format.formatType;
      }
      const value = createFromElement({
        element: node2,
        range,
        isEditableTree
      });
      accumulateSelection(accumulator, node2, range, value);
      if (!format || node2.getAttribute("data-rich-text-placeholder")) {
        mergePair(accumulator, value);
      } else if (value.text.length === 0) {
        if (format.attributes) {
          mergePair(accumulator, {
            formats: [,],
            replacements: [format],
            text: OBJECT_REPLACEMENT_CHARACTER
          });
        }
      } else {
        let mergeFormats = function(formats) {
          if (mergeFormats.formats === formats) {
            return mergeFormats.newFormats;
          }
          const newFormats = formats ? [format, ...formats] : [format];
          mergeFormats.formats = formats;
          mergeFormats.newFormats = newFormats;
          return newFormats;
        };
        mergeFormats.newFormats = [format];
        mergePair(accumulator, {
          ...value,
          formats: Array.from(value.formats, mergeFormats)
        });
      }
    }
    return accumulator;
  }
  function getAttributes({
    element
  }) {
    if (!element.hasAttributes()) {
      return;
    }
    const length2 = element.attributes.length;
    let accumulator;
    for (let i3 = 0; i3 < length2; i3++) {
      const {
        name,
        value
      } = element.attributes[i3];
      if (name.indexOf("data-rich-text-") === 0) {
        continue;
      }
      const safeName = /^on/i.test(name) ? "data-disable-rich-text-" + name : name;
      accumulator = accumulator || {};
      accumulator[safeName] = value;
    }
    return accumulator;
  }

  // node_modules/@wordpress/rich-text/build-module/concat.js
  function mergePair(a2, b2) {
    a2.formats = a2.formats.concat(b2.formats);
    a2.replacements = a2.replacements.concat(b2.replacements);
    a2.text += b2.text;
    return a2;
  }

  // node_modules/@wordpress/rich-text/build-module/get-active-format.js
  function getActiveFormat(value, formatType) {
    return getActiveFormats(value).find(({
      type
    }) => type === formatType);
  }

  // node_modules/@wordpress/rich-text/build-module/get-active-object.js
  function getActiveObject({
    start: start2,
    end,
    replacements,
    text: text2
  }) {
    if (start2 + 1 !== end || text2[start2] !== OBJECT_REPLACEMENT_CHARACTER) {
      return;
    }
    return replacements[start2];
  }

  // node_modules/@wordpress/rich-text/build-module/is-collapsed.js
  function isCollapsed({
    start: start2,
    end
  }) {
    if (start2 === void 0 || end === void 0) {
      return;
    }
    return start2 === end;
  }

  // node_modules/@wordpress/rich-text/build-module/is-empty.js
  function isEmpty2({
    text: text2
  }) {
    return text2.length === 0;
  }

  // node_modules/@wordpress/rich-text/build-module/remove-format.js
  function removeFormat(value, formatType, startIndex = value.start, endIndex = value.end) {
    const {
      formats,
      activeFormats
    } = value;
    const newFormats = formats.slice();
    if (startIndex === endIndex) {
      const format = newFormats[startIndex]?.find(({
        type
      }) => type === formatType);
      if (format) {
        while (newFormats[startIndex]?.find((newFormat) => newFormat === format)) {
          filterFormats(newFormats, startIndex, formatType);
          startIndex--;
        }
        endIndex++;
        while (newFormats[endIndex]?.find((newFormat) => newFormat === format)) {
          filterFormats(newFormats, endIndex, formatType);
          endIndex++;
        }
      }
    } else {
      for (let i3 = startIndex; i3 < endIndex; i3++) {
        if (newFormats[i3]) {
          filterFormats(newFormats, i3, formatType);
        }
      }
    }
    return normaliseFormats({
      ...value,
      formats: newFormats,
      activeFormats: activeFormats?.filter(({
        type
      }) => type !== formatType) || []
    });
  }
  function filterFormats(formats, index2, formatType) {
    const newFormats = formats[index2].filter(({
      type
    }) => type !== formatType);
    if (newFormats.length) {
      formats[index2] = newFormats;
    } else {
      delete formats[index2];
    }
  }

  // node_modules/@wordpress/rich-text/build-module/insert.js
  function insert(value, valueToInsert, startIndex = value.start, endIndex = value.end) {
    const {
      formats,
      replacements,
      text: text2
    } = value;
    if (typeof valueToInsert === "string") {
      valueToInsert = create2({
        text: valueToInsert
      });
    }
    const index2 = startIndex + valueToInsert.text.length;
    return normaliseFormats({
      formats: formats.slice(0, startIndex).concat(valueToInsert.formats, formats.slice(endIndex)),
      replacements: replacements.slice(0, startIndex).concat(valueToInsert.replacements, replacements.slice(endIndex)),
      text: text2.slice(0, startIndex) + valueToInsert.text + text2.slice(endIndex),
      start: index2,
      end: index2
    });
  }

  // node_modules/@wordpress/rich-text/build-module/remove.js
  function remove3(value, startIndex, endIndex) {
    return insert(value, create2(), startIndex, endIndex);
  }

  // node_modules/@wordpress/rich-text/build-module/slice.js
  function slice(value, startIndex = value.start, endIndex = value.end) {
    const {
      formats,
      replacements,
      text: text2
    } = value;
    if (startIndex === void 0 || endIndex === void 0) {
      return {
        ...value
      };
    }
    return {
      formats: formats.slice(startIndex, endIndex),
      replacements: replacements.slice(startIndex, endIndex),
      text: text2.slice(startIndex, endIndex)
    };
  }

  // node_modules/@wordpress/rich-text/build-module/split.js
  function split({
    formats,
    replacements,
    text: text2,
    start: start2,
    end
  }, string2) {
    if (typeof string2 !== "string") {
      return splitAtSelection(...arguments);
    }
    let nextStart = 0;
    return text2.split(string2).map((substring) => {
      const startIndex = nextStart;
      const value = {
        formats: formats.slice(startIndex, startIndex + substring.length),
        replacements: replacements.slice(startIndex, startIndex + substring.length),
        text: substring
      };
      nextStart += string2.length + substring.length;
      if (start2 !== void 0 && end !== void 0) {
        if (start2 >= startIndex && start2 < nextStart) {
          value.start = start2 - startIndex;
        } else if (start2 < startIndex && end > startIndex) {
          value.start = 0;
        }
        if (end >= startIndex && end < nextStart) {
          value.end = end - startIndex;
        } else if (start2 < nextStart && end > nextStart) {
          value.end = substring.length;
        }
      }
      return value;
    });
  }
  function splitAtSelection({
    formats,
    replacements,
    text: text2,
    start: start2,
    end
  }, startIndex = start2, endIndex = end) {
    if (start2 === void 0 || end === void 0) {
      return;
    }
    const before = {
      formats: formats.slice(0, startIndex),
      replacements: replacements.slice(0, startIndex),
      text: text2.slice(0, startIndex)
    };
    const after = {
      formats: formats.slice(endIndex),
      replacements: replacements.slice(endIndex),
      text: text2.slice(endIndex),
      start: 0,
      end: 0
    };
    return [before, after];
  }

  // node_modules/@wordpress/rich-text/build-module/is-range-equal.js
  function isRangeEqual(a2, b2) {
    return a2 === b2 || a2 && b2 && a2.startContainer === b2.startContainer && a2.startOffset === b2.startOffset && a2.endContainer === b2.endContainer && a2.endOffset === b2.endOffset;
  }

  // node_modules/@wordpress/rich-text/build-module/to-dom.js
  function createPathToNode(node2, rootNode, path) {
    const parentNode = node2.parentNode;
    let i3 = 0;
    while (node2 = node2.previousSibling) {
      i3++;
    }
    path = [i3, ...path];
    if (parentNode !== rootNode) {
      path = createPathToNode(parentNode, rootNode, path);
    }
    return path;
  }
  function getNodeByPath(node2, path) {
    path = [...path];
    while (node2 && path.length > 1) {
      node2 = node2.childNodes[path.shift()];
    }
    return {
      node: node2,
      offset: path[0]
    };
  }
  function append2(element, child) {
    if (child.html !== void 0) {
      return element.innerHTML += child.html;
    }
    if (typeof child === "string") {
      child = element.ownerDocument.createTextNode(child);
    }
    const {
      type,
      attributes
    } = child;
    if (type) {
      if (type === "#comment") {
        child = element.ownerDocument.createComment(attributes["data-rich-text-comment"]);
      } else {
        child = element.ownerDocument.createElement(type);
        for (const key in attributes) {
          child.setAttribute(key, attributes[key]);
        }
      }
    }
    return element.appendChild(child);
  }
  function appendText2(node2, text2) {
    node2.appendData(text2);
  }
  function getLastChild2({
    lastChild
  }) {
    return lastChild;
  }
  function getParent2({
    parentNode
  }) {
    return parentNode;
  }
  function isText2(node2) {
    return node2.nodeType === node2.TEXT_NODE;
  }
  function getText2({
    nodeValue
  }) {
    return nodeValue;
  }
  function remove4(node2) {
    return node2.parentNode.removeChild(node2);
  }
  function toDom({
    value,
    prepareEditableTree,
    isEditableTree = true,
    placeholder,
    doc = document
  }) {
    let startPath = [];
    let endPath = [];
    if (prepareEditableTree) {
      value = {
        ...value,
        formats: prepareEditableTree(value)
      };
    }
    const createEmpty2 = () => createElement2(doc, "");
    const tree = toTree({
      value,
      createEmpty: createEmpty2,
      append: append2,
      getLastChild: getLastChild2,
      getParent: getParent2,
      isText: isText2,
      getText: getText2,
      remove: remove4,
      appendText: appendText2,
      onStartIndex(body, pointer) {
        startPath = createPathToNode(pointer, body, [pointer.nodeValue.length]);
      },
      onEndIndex(body, pointer) {
        endPath = createPathToNode(pointer, body, [pointer.nodeValue.length]);
      },
      isEditableTree,
      placeholder
    });
    return {
      body: tree,
      selection: {
        startPath,
        endPath
      }
    };
  }
  function apply({
    value,
    current,
    prepareEditableTree,
    __unstableDomOnly,
    placeholder
  }) {
    const {
      body,
      selection: selection2
    } = toDom({
      value,
      prepareEditableTree,
      placeholder,
      doc: current.ownerDocument
    });
    applyValue(body, current);
    if (value.start !== void 0 && !__unstableDomOnly) {
      applySelection(selection2, current);
    }
  }
  function applyValue(future, current) {
    let i3 = 0;
    let futureChild;
    while (futureChild = future.firstChild) {
      const currentChild = current.childNodes[i3];
      if (!currentChild) {
        current.appendChild(futureChild);
      } else if (!currentChild.isEqualNode(futureChild)) {
        if (currentChild.nodeName !== futureChild.nodeName || currentChild.nodeType === currentChild.TEXT_NODE && currentChild.data !== futureChild.data) {
          current.replaceChild(futureChild, currentChild);
        } else {
          const currentAttributes = currentChild.attributes;
          const futureAttributes = futureChild.attributes;
          if (currentAttributes) {
            let ii = currentAttributes.length;
            while (ii--) {
              const {
                name
              } = currentAttributes[ii];
              if (!futureChild.getAttribute(name)) {
                currentChild.removeAttribute(name);
              }
            }
          }
          if (futureAttributes) {
            for (let ii = 0; ii < futureAttributes.length; ii++) {
              const {
                name,
                value
              } = futureAttributes[ii];
              if (currentChild.getAttribute(name) !== value) {
                currentChild.setAttribute(name, value);
              }
            }
          }
          applyValue(futureChild, currentChild);
          future.removeChild(futureChild);
        }
      } else {
        future.removeChild(futureChild);
      }
      i3++;
    }
    while (current.childNodes[i3]) {
      current.removeChild(current.childNodes[i3]);
    }
  }
  function applySelection({
    startPath,
    endPath
  }, current) {
    const {
      node: startContainer,
      offset: startOffset
    } = getNodeByPath(current, startPath);
    const {
      node: endContainer,
      offset: endOffset
    } = getNodeByPath(current, endPath);
    const {
      ownerDocument
    } = current;
    const {
      defaultView
    } = ownerDocument;
    const selection2 = defaultView.getSelection();
    const range = ownerDocument.createRange();
    range.setStart(startContainer, startOffset);
    range.setEnd(endContainer, endOffset);
    const {
      activeElement
    } = ownerDocument;
    if (selection2.rangeCount > 0) {
      if (isRangeEqual(range, selection2.getRangeAt(0))) {
        return;
      }
      selection2.removeAllRanges();
    }
    selection2.addRange(range);
    if (activeElement !== ownerDocument.activeElement) {
      if (activeElement instanceof defaultView.HTMLElement) {
        activeElement.focus();
      }
    }
  }

  // node_modules/@wordpress/dom-ready/build-module/index.js
  function domReady(callback) {
    if (typeof document === "undefined") {
      return;
    }
    if (document.readyState === "complete" || // DOMContentLoaded + Images/Styles/etc loaded, so we call directly.
    document.readyState === "interactive") {
      return void callback();
    }
    document.addEventListener("DOMContentLoaded", callback);
  }

  // node_modules/@wordpress/a11y/build-module/script/add-container.js
  function addContainer(ariaLive = "polite") {
    const container = document.createElement("div");
    container.id = `a11y-speak-${ariaLive}`;
    container.className = "a11y-speak-region";
    container.setAttribute("style", "position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;");
    container.setAttribute("aria-live", ariaLive);
    container.setAttribute("aria-relevant", "additions text");
    container.setAttribute("aria-atomic", "true");
    const {
      body
    } = document;
    if (body) {
      body.appendChild(container);
    }
    return container;
  }

  // node_modules/@wordpress/a11y/build-module/script/add-intro-text.js
  function addIntroText() {
    const introText = document.createElement("p");
    introText.id = "a11y-speak-intro-text";
    introText.className = "a11y-speak-intro-text";
    introText.textContent = __("Notifications");
    introText.setAttribute("style", "position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;");
    introText.setAttribute("hidden", "hidden");
    const {
      body
    } = document;
    if (body) {
      body.appendChild(introText);
    }
    return introText;
  }

  // node_modules/@wordpress/a11y/build-module/shared/clear.js
  function clear() {
    const regions = document.getElementsByClassName("a11y-speak-region");
    const introText = document.getElementById("a11y-speak-intro-text");
    for (let i3 = 0; i3 < regions.length; i3++) {
      regions[i3].textContent = "";
    }
    if (introText) {
      introText.setAttribute("hidden", "hidden");
    }
  }

  // node_modules/@wordpress/a11y/build-module/shared/filter-message.js
  var previousMessage = "";
  function filterMessage(message) {
    message = message.replace(/<[^<>]+>/g, " ");
    if (previousMessage === message) {
      message += "\xA0";
    }
    previousMessage = message;
    return message;
  }

  // node_modules/@wordpress/a11y/build-module/shared/index.js
  function speak(message, ariaLive) {
    clear();
    message = filterMessage(message);
    const introText = document.getElementById("a11y-speak-intro-text");
    const containerAssertive = document.getElementById("a11y-speak-assertive");
    const containerPolite = document.getElementById("a11y-speak-polite");
    if (containerAssertive && ariaLive === "assertive") {
      containerAssertive.textContent = message;
    } else if (containerPolite) {
      containerPolite.textContent = message;
    }
    if (introText) {
      introText.removeAttribute("hidden");
    }
  }

  // node_modules/@wordpress/a11y/build-module/index.js
  function setup() {
    const introText = document.getElementById("a11y-speak-intro-text");
    const containerAssertive = document.getElementById("a11y-speak-assertive");
    const containerPolite = document.getElementById("a11y-speak-polite");
    if (introText === null) {
      addIntroText();
    }
    if (containerAssertive === null) {
      addContainer("assertive");
    }
    if (containerPolite === null) {
      addContainer("polite");
    }
  }
  domReady(setup);

  // node_modules/@wordpress/rich-text/build-module/component/use-anchor.js
  function getFormatElement(range, editableContentElement, tagName, className) {
    let element = range.startContainer;
    if (element.nodeType === element.TEXT_NODE && range.startOffset === element.length && element.nextSibling) {
      element = element.nextSibling;
      while (element.firstChild) {
        element = element.firstChild;
      }
    }
    if (element.nodeType !== element.ELEMENT_NODE) {
      element = element.parentElement;
    }
    if (!element) {
      return;
    }
    if (element === editableContentElement) {
      return;
    }
    if (!editableContentElement.contains(element)) {
      return;
    }
    const selector2 = tagName + (className ? "." + className : "");
    while (element !== editableContentElement) {
      if (element.matches(selector2)) {
        return element;
      }
      element = element.parentElement;
    }
  }
  function createVirtualAnchorElement(range, editableContentElement) {
    return {
      contextElement: editableContentElement,
      getBoundingClientRect() {
        return editableContentElement.contains(range.startContainer) ? range.getBoundingClientRect() : editableContentElement.getBoundingClientRect();
      }
    };
  }
  function getAnchor(editableContentElement, tagName, className) {
    if (!editableContentElement) {
      return;
    }
    const {
      ownerDocument
    } = editableContentElement;
    const {
      defaultView
    } = ownerDocument;
    const selection2 = defaultView.getSelection();
    if (!selection2) {
      return;
    }
    if (!selection2.rangeCount) {
      return;
    }
    const range = selection2.getRangeAt(0);
    if (!range || !range.startContainer) {
      return;
    }
    const formatElement = getFormatElement(range, editableContentElement, tagName, className);
    if (formatElement) {
      return formatElement;
    }
    return createVirtualAnchorElement(range, editableContentElement);
  }
  function useAnchor({
    editableContentElement,
    settings: settings2 = {}
  }) {
    const {
      tagName,
      className,
      isActive
    } = settings2;
    const [anchor, setAnchor] = (0, import_react.useState)(() => getAnchor(editableContentElement, tagName, className));
    const wasActive = usePrevious(isActive);
    (0, import_react.useLayoutEffect)(() => {
      if (!editableContentElement) {
        return;
      }
      function callback() {
        setAnchor(getAnchor(editableContentElement, tagName, className));
      }
      function attach() {
        ownerDocument.addEventListener("selectionchange", callback);
      }
      function detach() {
        ownerDocument.removeEventListener("selectionchange", callback);
      }
      const {
        ownerDocument
      } = editableContentElement;
      if (editableContentElement === ownerDocument.activeElement || // When a link is created, we need to attach the popover to the newly created anchor.
      !wasActive && isActive || // Sometimes we're _removing_ an active anchor, such as the inline color popover.
      // When we add the color, it switches from a virtual anchor to a `<mark>` element.
      // When we _remove_ the color, it switches from a `<mark>` element to a virtual anchor.
      wasActive && !isActive) {
        setAnchor(getAnchor(editableContentElement, tagName, className));
        attach();
      }
      editableContentElement.addEventListener("focusin", attach);
      editableContentElement.addEventListener("focusout", detach);
      return () => {
        detach();
        editableContentElement.removeEventListener("focusin", attach);
        editableContentElement.removeEventListener("focusout", detach);
      };
    }, [editableContentElement, tagName, className, isActive, wasActive]);
    return anchor;
  }

  // node_modules/@wordpress/rich-text/build-module/component/use-default-style.js
  var whiteSpace = "pre-wrap";
  var minWidth = "1px";
  function useDefaultStyle() {
    return (0, import_react.useCallback)((element) => {
      if (!element) {
        return;
      }
      element.style.whiteSpace = whiteSpace;
      element.style.minWidth = minWidth;
    }, []);
  }

  // node_modules/@wordpress/rich-text/build-module/component/use-boundary-style.js
  function useBoundaryStyle({
    record
  }) {
    const ref = (0, import_react.useRef)();
    const {
      activeFormats = [],
      replacements,
      start: start2
    } = record.current;
    const activeReplacement = replacements[start2];
    (0, import_react.useEffect)(() => {
      if ((!activeFormats || !activeFormats.length) && !activeReplacement) {
        return;
      }
      const boundarySelector = "*[data-rich-text-format-boundary]";
      const element = ref.current.querySelector(boundarySelector);
      if (!element) {
        return;
      }
      const {
        ownerDocument
      } = element;
      const {
        defaultView
      } = ownerDocument;
      const computedStyle = defaultView.getComputedStyle(element);
      const newColor = computedStyle.color.replace(")", ", 0.2)").replace("rgb", "rgba");
      const selector2 = `.rich-text:focus ${boundarySelector}`;
      const rule = `background-color: ${newColor}`;
      const style = `${selector2} {${rule}}`;
      const globalStyleId = "rich-text-boundary-style";
      let globalStyle = ownerDocument.getElementById(globalStyleId);
      if (!globalStyle) {
        globalStyle = ownerDocument.createElement("style");
        globalStyle.id = globalStyleId;
        ownerDocument.head.appendChild(globalStyle);
      }
      if (globalStyle.innerHTML !== style) {
        globalStyle.innerHTML = style;
      }
    }, [activeFormats, activeReplacement]);
    return ref;
  }

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/copy-handler.js
  var copy_handler_default = (props) => (element) => {
    function onCopy(event) {
      const {
        record
      } = props.current;
      const {
        ownerDocument
      } = element;
      if (isCollapsed(record.current) || !element.contains(ownerDocument.activeElement)) {
        return;
      }
      const selectedRecord = slice(record.current);
      const plainText = getTextContent(selectedRecord);
      const html2 = toHTMLString({
        value: selectedRecord
      });
      event.clipboardData.setData("text/plain", plainText);
      event.clipboardData.setData("text/html", html2);
      event.clipboardData.setData("rich-text", "true");
      event.preventDefault();
      if (event.type === "cut") {
        ownerDocument.execCommand("delete");
      }
    }
    const {
      defaultView
    } = element.ownerDocument;
    defaultView.addEventListener("copy", onCopy);
    defaultView.addEventListener("cut", onCopy);
    return () => {
      defaultView.removeEventListener("copy", onCopy);
      defaultView.removeEventListener("cut", onCopy);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/select-object.js
  var select_object_default = () => (element) => {
    function onClick(event) {
      const {
        target
      } = event;
      if (target === element || target.textContent && target.isContentEditable) {
        return;
      }
      const {
        ownerDocument
      } = target;
      const {
        defaultView
      } = ownerDocument;
      const selection2 = defaultView.getSelection();
      if (selection2.containsNode(target)) {
        return;
      }
      const range = ownerDocument.createRange();
      const nodeToSelect = target.isContentEditable ? target : target.closest("[contenteditable]");
      range.selectNode(nodeToSelect);
      selection2.removeAllRanges();
      selection2.addRange(range);
      event.preventDefault();
    }
    function onFocusIn(event) {
      if (event.relatedTarget && !element.contains(event.relatedTarget) && event.relatedTarget.tagName === "A") {
        onClick(event);
      }
    }
    element.addEventListener("click", onClick);
    element.addEventListener("focusin", onFocusIn);
    return () => {
      element.removeEventListener("click", onClick);
      element.removeEventListener("focusin", onFocusIn);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/format-boundaries.js
  var EMPTY_ACTIVE_FORMATS = [];
  var format_boundaries_default = (props) => (element) => {
    function onKeyDown(event) {
      const {
        keyCode,
        shiftKey,
        altKey,
        metaKey,
        ctrlKey
      } = event;
      if (
        // Only override left and right keys without modifiers pressed.
        shiftKey || altKey || metaKey || ctrlKey || keyCode !== LEFT && keyCode !== RIGHT
      ) {
        return;
      }
      const {
        record,
        applyRecord,
        forceRender
      } = props.current;
      const {
        text: text2,
        formats,
        start: start2,
        end,
        activeFormats: currentActiveFormats = []
      } = record.current;
      const collapsed = isCollapsed(record.current);
      const {
        ownerDocument
      } = element;
      const {
        defaultView
      } = ownerDocument;
      const {
        direction
      } = defaultView.getComputedStyle(element);
      const reverseKey = direction === "rtl" ? RIGHT : LEFT;
      const isReverse = event.keyCode === reverseKey;
      if (collapsed && currentActiveFormats.length === 0) {
        if (start2 === 0 && isReverse) {
          return;
        }
        if (end === text2.length && !isReverse) {
          return;
        }
      }
      if (!collapsed) {
        return;
      }
      const formatsBefore = formats[start2 - 1] || EMPTY_ACTIVE_FORMATS;
      const formatsAfter = formats[start2] || EMPTY_ACTIVE_FORMATS;
      const destination = isReverse ? formatsBefore : formatsAfter;
      const isIncreasing = currentActiveFormats.every((format, index2) => format === destination[index2]);
      let newActiveFormatsLength = currentActiveFormats.length;
      if (!isIncreasing) {
        newActiveFormatsLength--;
      } else if (newActiveFormatsLength < destination.length) {
        newActiveFormatsLength++;
      }
      if (newActiveFormatsLength === currentActiveFormats.length) {
        record.current._newActiveFormats = destination;
        return;
      }
      event.preventDefault();
      const origin2 = isReverse ? formatsAfter : formatsBefore;
      const source = isIncreasing ? destination : origin2;
      const newActiveFormats = source.slice(0, newActiveFormatsLength);
      const newValue = {
        ...record.current,
        activeFormats: newActiveFormats
      };
      record.current = newValue;
      applyRecord(newValue);
      forceRender();
    }
    element.addEventListener("keydown", onKeyDown);
    return () => {
      element.removeEventListener("keydown", onKeyDown);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/delete.js
  var delete_default = (props) => (element) => {
    function onKeyDown(event) {
      const {
        keyCode
      } = event;
      const {
        createRecord,
        handleChange
      } = props.current;
      if (event.defaultPrevented) {
        return;
      }
      if (keyCode !== DELETE && keyCode !== BACKSPACE) {
        return;
      }
      const currentValue = createRecord();
      const {
        start: start2,
        end,
        text: text2
      } = currentValue;
      if (start2 === 0 && end !== 0 && end === text2.length) {
        handleChange(remove3(currentValue));
        event.preventDefault();
      }
    }
    element.addEventListener("keydown", onKeyDown);
    return () => {
      element.removeEventListener("keydown", onKeyDown);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/update-formats.js
  function updateFormats({
    value,
    start: start2,
    end,
    formats
  }) {
    const min2 = Math.min(start2, end);
    const max2 = Math.max(start2, end);
    const formatsBefore = value.formats[min2 - 1] || [];
    const formatsAfter = value.formats[max2] || [];
    value.activeFormats = formats.map((format, index2) => {
      if (formatsBefore[index2]) {
        if (isFormatEqual(format, formatsBefore[index2])) {
          return formatsBefore[index2];
        }
      } else if (formatsAfter[index2]) {
        if (isFormatEqual(format, formatsAfter[index2])) {
          return formatsAfter[index2];
        }
      }
      return format;
    });
    while (--end >= start2) {
      if (value.activeFormats.length > 0) {
        value.formats[end] = value.activeFormats;
      } else {
        delete value.formats[end];
      }
    }
    return value;
  }

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/input-and-selection.js
  var INSERTION_INPUT_TYPES_TO_IGNORE = /* @__PURE__ */ new Set(["insertParagraph", "insertOrderedList", "insertUnorderedList", "insertHorizontalRule", "insertLink"]);
  var EMPTY_ACTIVE_FORMATS2 = [];
  var PLACEHOLDER_ATTR_NAME = "data-rich-text-placeholder";
  function fixPlaceholderSelection(defaultView) {
    const selection2 = defaultView.getSelection();
    const {
      anchorNode,
      anchorOffset
    } = selection2;
    if (anchorNode.nodeType !== anchorNode.ELEMENT_NODE) {
      return;
    }
    const targetNode = anchorNode.childNodes[anchorOffset];
    if (!targetNode || targetNode.nodeType !== targetNode.ELEMENT_NODE || !targetNode.hasAttribute(PLACEHOLDER_ATTR_NAME)) {
      return;
    }
    selection2.collapseToStart();
  }
  var input_and_selection_default = (props) => (element) => {
    const {
      ownerDocument
    } = element;
    const {
      defaultView
    } = ownerDocument;
    let isComposing = false;
    function onInput(event) {
      if (isComposing) {
        return;
      }
      let inputType;
      if (event) {
        inputType = event.inputType;
      }
      const {
        record,
        applyRecord,
        createRecord,
        handleChange
      } = props.current;
      if (inputType && (inputType.indexOf("format") === 0 || INSERTION_INPUT_TYPES_TO_IGNORE.has(inputType))) {
        applyRecord(record.current);
        return;
      }
      const currentValue = createRecord();
      const {
        start: start2,
        activeFormats: oldActiveFormats = []
      } = record.current;
      const change = updateFormats({
        value: currentValue,
        start: start2,
        end: currentValue.start,
        formats: oldActiveFormats
      });
      handleChange(change);
    }
    function handleSelectionChange() {
      const {
        record,
        applyRecord,
        createRecord,
        onSelectionChange
      } = props.current;
      if (element.contentEditable !== "true") {
        return;
      }
      if (ownerDocument.activeElement !== element) {
        ownerDocument.removeEventListener("selectionchange", handleSelectionChange);
        return;
      }
      if (isComposing) {
        return;
      }
      const {
        start: start2,
        end,
        text: text2
      } = createRecord();
      const oldRecord = record.current;
      if (text2 !== oldRecord.text) {
        onInput();
        return;
      }
      if (start2 === oldRecord.start && end === oldRecord.end) {
        if (oldRecord.text.length === 0 && start2 === 0) {
          fixPlaceholderSelection(defaultView);
        }
        return;
      }
      const newValue = {
        ...oldRecord,
        start: start2,
        end,
        // _newActiveFormats may be set on arrow key navigation to control
        // the right boundary position. If undefined, getActiveFormats will
        // give the active formats according to the browser.
        activeFormats: oldRecord._newActiveFormats,
        _newActiveFormats: void 0
      };
      const newActiveFormats = getActiveFormats(newValue, EMPTY_ACTIVE_FORMATS2);
      newValue.activeFormats = newActiveFormats;
      record.current = newValue;
      applyRecord(newValue, {
        domOnly: true
      });
      onSelectionChange(start2, end);
    }
    function onCompositionStart() {
      isComposing = true;
      ownerDocument.removeEventListener("selectionchange", handleSelectionChange);
      element.querySelector(`[${PLACEHOLDER_ATTR_NAME}]`)?.remove();
    }
    function onCompositionEnd() {
      isComposing = false;
      onInput({
        inputType: "insertText"
      });
      ownerDocument.addEventListener("selectionchange", handleSelectionChange);
    }
    function onFocus() {
      const {
        record,
        isSelected,
        onSelectionChange,
        applyRecord
      } = props.current;
      if (element.parentElement.closest('[contenteditable="true"]')) {
        return;
      }
      if (!isSelected) {
        const index2 = void 0;
        record.current = {
          ...record.current,
          start: index2,
          end: index2,
          activeFormats: EMPTY_ACTIVE_FORMATS2
        };
      } else {
        applyRecord(record.current, {
          domOnly: true
        });
      }
      onSelectionChange(record.current.start, record.current.end);
      window.queueMicrotask(handleSelectionChange);
      ownerDocument.addEventListener("selectionchange", handleSelectionChange);
    }
    element.addEventListener("input", onInput);
    element.addEventListener("compositionstart", onCompositionStart);
    element.addEventListener("compositionend", onCompositionEnd);
    element.addEventListener("focus", onFocus);
    return () => {
      element.removeEventListener("input", onInput);
      element.removeEventListener("compositionstart", onCompositionStart);
      element.removeEventListener("compositionend", onCompositionEnd);
      element.removeEventListener("focus", onFocus);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/selection-change-compat.js
  var selection_change_compat_default = () => (element) => {
    const {
      ownerDocument
    } = element;
    const {
      defaultView
    } = ownerDocument;
    const selection2 = defaultView?.getSelection();
    let range;
    function getRange2() {
      return selection2.rangeCount ? selection2.getRangeAt(0) : null;
    }
    function onDown(event) {
      const type = event.type === "keydown" ? "keyup" : "pointerup";
      function onCancel() {
        ownerDocument.removeEventListener(type, onUp);
        ownerDocument.removeEventListener("selectionchange", onCancel);
        ownerDocument.removeEventListener("input", onCancel);
      }
      function onUp() {
        onCancel();
        if (isRangeEqual(range, getRange2())) {
          return;
        }
        ownerDocument.dispatchEvent(new Event("selectionchange"));
      }
      ownerDocument.addEventListener(type, onUp);
      ownerDocument.addEventListener("selectionchange", onCancel);
      ownerDocument.addEventListener("input", onCancel);
      range = getRange2();
    }
    element.addEventListener("pointerdown", onDown);
    element.addEventListener("keydown", onDown);
    return () => {
      element.removeEventListener("pointerdown", onDown);
      element.removeEventListener("keydown", onDown);
    };
  };

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/prevent-focus-capture.js
  function preventFocusCapture() {
    return (element) => {
      const {
        ownerDocument
      } = element;
      const {
        defaultView
      } = ownerDocument;
      let value = null;
      function onPointerDown(event) {
        if (event.defaultPrevented) {
          return;
        }
        if (event.target === element) {
          return;
        }
        if (!event.target.contains(element)) {
          return;
        }
        value = element.getAttribute("contenteditable");
        element.setAttribute("contenteditable", "false");
        defaultView.getSelection().removeAllRanges();
      }
      function onPointerUp() {
        if (value !== null) {
          element.setAttribute("contenteditable", value);
          value = null;
        }
      }
      defaultView.addEventListener("pointerdown", onPointerDown);
      defaultView.addEventListener("pointerup", onPointerUp);
      return () => {
        defaultView.removeEventListener("pointerdown", onPointerDown);
        defaultView.removeEventListener("pointerup", onPointerUp);
      };
    };
  }

  // node_modules/@wordpress/rich-text/build-module/component/event-listeners/index.js
  var allEventListeners = [copy_handler_default, select_object_default, format_boundaries_default, delete_default, input_and_selection_default, selection_change_compat_default, preventFocusCapture];
  function useEventListeners(props) {
    const propsRef = (0, import_react.useRef)(props);
    (0, import_react.useInsertionEffect)(() => {
      propsRef.current = props;
    });
    const refEffects = (0, import_react.useMemo)(() => allEventListeners.map((refEffect) => refEffect(propsRef)), [propsRef]);
    return useRefEffect((element) => {
      const cleanups2 = refEffects.map((effect) => effect(element));
      return () => {
        cleanups2.forEach((cleanup) => cleanup());
      };
    }, [refEffects]);
  }

  // node_modules/@wordpress/rich-text/build-module/component/index.js
  function useRichText({
    value = "",
    selectionStart,
    selectionEnd,
    placeholder,
    onSelectionChange,
    preserveWhiteSpace,
    onChange,
    __unstableDisableFormats: disableFormats,
    __unstableIsSelected: isSelected,
    __unstableDependencies = [],
    __unstableAfterParse,
    __unstableBeforeSerialize,
    __unstableAddInvisibleFormats
  }) {
    const registry = useRegistry();
    const [, forceRender] = (0, import_react.useReducer)(() => ({}));
    const ref = (0, import_react.useRef)();
    function createRecord() {
      const {
        ownerDocument: {
          defaultView
        }
      } = ref.current;
      const selection2 = defaultView.getSelection();
      const range = selection2.rangeCount > 0 ? selection2.getRangeAt(0) : null;
      return create2({
        element: ref.current,
        range,
        __unstableIsEditableTree: true
      });
    }
    function applyRecord(newRecord, {
      domOnly
    } = {}) {
      apply({
        value: newRecord,
        current: ref.current,
        prepareEditableTree: __unstableAddInvisibleFormats,
        __unstableDomOnly: domOnly,
        placeholder
      });
    }
    const _valueRef = (0, import_react.useRef)(value);
    const recordRef = (0, import_react.useRef)();
    function setRecordFromProps() {
      _valueRef.current = value;
      recordRef.current = value;
      if (!(value instanceof RichTextData)) {
        recordRef.current = value ? RichTextData.fromHTMLString(value, {
          preserveWhiteSpace
        }) : RichTextData.empty();
      }
      recordRef.current = {
        text: recordRef.current.text,
        formats: recordRef.current.formats,
        replacements: recordRef.current.replacements
      };
      if (disableFormats) {
        recordRef.current.formats = Array(value.length);
        recordRef.current.replacements = Array(value.length);
      }
      if (__unstableAfterParse) {
        recordRef.current.formats = __unstableAfterParse(recordRef.current);
      }
      recordRef.current.start = selectionStart;
      recordRef.current.end = selectionEnd;
    }
    const hadSelectionUpdateRef = (0, import_react.useRef)(false);
    if (!recordRef.current) {
      hadSelectionUpdateRef.current = isSelected;
      setRecordFromProps();
    } else if (selectionStart !== recordRef.current.start || selectionEnd !== recordRef.current.end) {
      hadSelectionUpdateRef.current = isSelected;
      recordRef.current = {
        ...recordRef.current,
        start: selectionStart,
        end: selectionEnd,
        activeFormats: void 0
      };
    }
    function handleChange(newRecord) {
      recordRef.current = newRecord;
      applyRecord(newRecord);
      if (disableFormats) {
        _valueRef.current = newRecord.text;
      } else {
        const newFormats = __unstableBeforeSerialize ? __unstableBeforeSerialize(newRecord) : newRecord.formats;
        newRecord = {
          ...newRecord,
          formats: newFormats
        };
        if (typeof value === "string") {
          _valueRef.current = toHTMLString({
            value: newRecord,
            preserveWhiteSpace
          });
        } else {
          _valueRef.current = new RichTextData(newRecord);
        }
      }
      const {
        start: start2,
        end,
        formats,
        text: text2
      } = recordRef.current;
      registry.batch(() => {
        onSelectionChange(start2, end);
        onChange(_valueRef.current, {
          __unstableFormats: formats,
          __unstableText: text2
        });
      });
      forceRender();
    }
    function applyFromProps() {
      setRecordFromProps();
      applyRecord(recordRef.current);
    }
    const didMountRef = (0, import_react.useRef)(false);
    (0, import_react.useLayoutEffect)(() => {
      if (didMountRef.current && value !== _valueRef.current) {
        applyFromProps();
        forceRender();
      }
    }, [value]);
    (0, import_react.useLayoutEffect)(() => {
      if (!hadSelectionUpdateRef.current) {
        return;
      }
      if (ref.current.ownerDocument.activeElement !== ref.current) {
        ref.current.focus();
      }
      applyRecord(recordRef.current);
      hadSelectionUpdateRef.current = false;
    }, [hadSelectionUpdateRef.current]);
    const mergedRefs = useMergeRefs([ref, useDefaultStyle(), useBoundaryStyle({
      record: recordRef
    }), useEventListeners({
      record: recordRef,
      handleChange,
      applyRecord,
      createRecord,
      isSelected,
      onSelectionChange,
      forceRender
    }), useRefEffect(() => {
      applyFromProps();
      didMountRef.current = true;
    }, [placeholder, ...__unstableDependencies])]);
    return {
      value: recordRef.current,
      // A function to get the most recent value so event handlers in
      // useRichText implementations have access to it. For example when
      // listening to input events, we internally update the state, but this
      // state is not yet available to the input event handler because React
      // may re-render asynchronously.
      getValue: () => recordRef.current,
      onChange: handleChange,
      ref: mergedRefs
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/constants.js
  var BLOCK_ICON_DEFAULT = "block-default";
  var DEPRECATED_ENTRY_KEYS = ["attributes", "supports", "save", "migrate", "isEligible", "apiVersion"];
  var __EXPERIMENTAL_STYLE_PROPERTY = {
    // Kept for back-compatibility purposes.
    "--wp--style--color--link": {
      value: ["color", "link"],
      support: ["color", "link"]
    },
    aspectRatio: {
      value: ["dimensions", "aspectRatio"],
      support: ["dimensions", "aspectRatio"],
      useEngine: true
    },
    background: {
      value: ["color", "gradient"],
      support: ["color", "gradients"],
      useEngine: true
    },
    backgroundColor: {
      value: ["color", "background"],
      support: ["color", "background"],
      requiresOptOut: true,
      useEngine: true
    },
    backgroundImage: {
      value: ["background", "backgroundImage"],
      support: ["background", "backgroundImage"],
      useEngine: true
    },
    backgroundRepeat: {
      value: ["background", "backgroundRepeat"],
      support: ["background", "backgroundRepeat"],
      useEngine: true
    },
    backgroundSize: {
      value: ["background", "backgroundSize"],
      support: ["background", "backgroundSize"],
      useEngine: true
    },
    backgroundPosition: {
      value: ["background", "backgroundPosition"],
      support: ["background", "backgroundPosition"],
      useEngine: true
    },
    borderColor: {
      value: ["border", "color"],
      support: ["__experimentalBorder", "color"],
      useEngine: true
    },
    borderRadius: {
      value: ["border", "radius"],
      support: ["__experimentalBorder", "radius"],
      properties: {
        borderTopLeftRadius: "topLeft",
        borderTopRightRadius: "topRight",
        borderBottomLeftRadius: "bottomLeft",
        borderBottomRightRadius: "bottomRight"
      },
      useEngine: true
    },
    borderStyle: {
      value: ["border", "style"],
      support: ["__experimentalBorder", "style"],
      useEngine: true
    },
    borderWidth: {
      value: ["border", "width"],
      support: ["__experimentalBorder", "width"],
      useEngine: true
    },
    borderTopColor: {
      value: ["border", "top", "color"],
      support: ["__experimentalBorder", "color"],
      useEngine: true
    },
    borderTopStyle: {
      value: ["border", "top", "style"],
      support: ["__experimentalBorder", "style"],
      useEngine: true
    },
    borderTopWidth: {
      value: ["border", "top", "width"],
      support: ["__experimentalBorder", "width"],
      useEngine: true
    },
    borderRightColor: {
      value: ["border", "right", "color"],
      support: ["__experimentalBorder", "color"],
      useEngine: true
    },
    borderRightStyle: {
      value: ["border", "right", "style"],
      support: ["__experimentalBorder", "style"],
      useEngine: true
    },
    borderRightWidth: {
      value: ["border", "right", "width"],
      support: ["__experimentalBorder", "width"],
      useEngine: true
    },
    borderBottomColor: {
      value: ["border", "bottom", "color"],
      support: ["__experimentalBorder", "color"],
      useEngine: true
    },
    borderBottomStyle: {
      value: ["border", "bottom", "style"],
      support: ["__experimentalBorder", "style"],
      useEngine: true
    },
    borderBottomWidth: {
      value: ["border", "bottom", "width"],
      support: ["__experimentalBorder", "width"],
      useEngine: true
    },
    borderLeftColor: {
      value: ["border", "left", "color"],
      support: ["__experimentalBorder", "color"],
      useEngine: true
    },
    borderLeftStyle: {
      value: ["border", "left", "style"],
      support: ["__experimentalBorder", "style"],
      useEngine: true
    },
    borderLeftWidth: {
      value: ["border", "left", "width"],
      support: ["__experimentalBorder", "width"],
      useEngine: true
    },
    color: {
      value: ["color", "text"],
      support: ["color", "text"],
      requiresOptOut: true,
      useEngine: true
    },
    columnCount: {
      value: ["typography", "textColumns"],
      support: ["typography", "textColumns"],
      useEngine: true
    },
    filter: {
      value: ["filter", "duotone"],
      support: ["filter", "duotone"]
    },
    linkColor: {
      value: ["elements", "link", "color", "text"],
      support: ["color", "link"]
    },
    captionColor: {
      value: ["elements", "caption", "color", "text"],
      support: ["color", "caption"]
    },
    buttonColor: {
      value: ["elements", "button", "color", "text"],
      support: ["color", "button"]
    },
    buttonBackgroundColor: {
      value: ["elements", "button", "color", "background"],
      support: ["color", "button"]
    },
    headingColor: {
      value: ["elements", "heading", "color", "text"],
      support: ["color", "heading"]
    },
    headingBackgroundColor: {
      value: ["elements", "heading", "color", "background"],
      support: ["color", "heading"]
    },
    fontFamily: {
      value: ["typography", "fontFamily"],
      support: ["typography", "__experimentalFontFamily"],
      useEngine: true
    },
    fontSize: {
      value: ["typography", "fontSize"],
      support: ["typography", "fontSize"],
      useEngine: true
    },
    fontStyle: {
      value: ["typography", "fontStyle"],
      support: ["typography", "__experimentalFontStyle"],
      useEngine: true
    },
    fontWeight: {
      value: ["typography", "fontWeight"],
      support: ["typography", "__experimentalFontWeight"],
      useEngine: true
    },
    lineHeight: {
      value: ["typography", "lineHeight"],
      support: ["typography", "lineHeight"],
      useEngine: true
    },
    margin: {
      value: ["spacing", "margin"],
      support: ["spacing", "margin"],
      properties: {
        marginTop: "top",
        marginRight: "right",
        marginBottom: "bottom",
        marginLeft: "left"
      },
      useEngine: true
    },
    minHeight: {
      value: ["dimensions", "minHeight"],
      support: ["dimensions", "minHeight"],
      useEngine: true
    },
    padding: {
      value: ["spacing", "padding"],
      support: ["spacing", "padding"],
      properties: {
        paddingTop: "top",
        paddingRight: "right",
        paddingBottom: "bottom",
        paddingLeft: "left"
      },
      useEngine: true
    },
    textAlign: {
      value: ["typography", "textAlign"],
      support: ["typography", "textAlign"],
      useEngine: false
    },
    textDecoration: {
      value: ["typography", "textDecoration"],
      support: ["typography", "__experimentalTextDecoration"],
      useEngine: true
    },
    textTransform: {
      value: ["typography", "textTransform"],
      support: ["typography", "__experimentalTextTransform"],
      useEngine: true
    },
    letterSpacing: {
      value: ["typography", "letterSpacing"],
      support: ["typography", "__experimentalLetterSpacing"],
      useEngine: true
    },
    writingMode: {
      value: ["typography", "writingMode"],
      support: ["typography", "__experimentalWritingMode"],
      useEngine: true
    },
    "--wp--style--root--padding": {
      value: ["spacing", "padding"],
      support: ["spacing", "padding"],
      properties: {
        "--wp--style--root--padding-top": "top",
        "--wp--style--root--padding-right": "right",
        "--wp--style--root--padding-bottom": "bottom",
        "--wp--style--root--padding-left": "left"
      },
      rootOnly: true
    }
  };
  var __EXPERIMENTAL_PATHS_WITH_OVERRIDE = {
    "color.duotone": true,
    "color.gradients": true,
    "color.palette": true,
    "dimensions.aspectRatios": true,
    "typography.fontSizes": true,
    "spacing.spacingSizes": true
  };

  // node_modules/@wordpress/blocks/build-module/lock-unlock.js
  var {
    lock: lock3,
    unlock: unlock3
  } = __dangerousOptInToUnstableAPIsOnlyForCoreModules("I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.", "@wordpress/blocks");

  // node_modules/@wordpress/blocks/build-module/api/registration.js
  var i18nBlockSchema = {
    title: "block title",
    description: "block description",
    keywords: ["block keyword"],
    styles: [{
      label: "block style label"
    }],
    variations: [{
      title: "block variation title",
      description: "block variation description",
      keywords: ["block variation keyword"]
    }]
  };
  function isObject2(object) {
    return object !== null && typeof object === "object";
  }
  function getBlockSettingsFromMetadata({
    textdomain,
    ...metadata
  }) {
    const allowedFields = ["apiVersion", "title", "category", "parent", "ancestor", "icon", "description", "keywords", "attributes", "providesContext", "usesContext", "selectors", "supports", "styles", "example", "variations", "blockHooks", "allowedBlocks"];
    const settings2 = Object.fromEntries(Object.entries(metadata).filter(([key]) => allowedFields.includes(key)));
    if (textdomain) {
      Object.keys(i18nBlockSchema).forEach((key) => {
        if (!settings2[key]) {
          return;
        }
        settings2[key] = translateBlockSettingUsingI18nSchema(i18nBlockSchema[key], settings2[key], textdomain);
      });
    }
    return settings2;
  }
  function registerBlockType(blockNameOrMetadata, settings2) {
    const name = isObject2(blockNameOrMetadata) ? blockNameOrMetadata.name : blockNameOrMetadata;
    if (typeof name !== "string") {
      console.error("Block names must be strings.");
      return;
    }
    if (!/^[a-z][a-z0-9-]*\/[a-z][a-z0-9-]*$/.test(name)) {
      console.error("Block names must contain a namespace prefix, include only lowercase alphanumeric characters or dashes, and start with a letter. Example: my-plugin/my-custom-block");
      return;
    }
    if (select(store2).getBlockType(name)) {
      console.error('Block "' + name + '" is already registered.');
      return;
    }
    const {
      addBootstrappedBlockType: addBootstrappedBlockType2,
      addUnprocessedBlockType: addUnprocessedBlockType2
    } = unlock3(dispatch(store2));
    if (isObject2(blockNameOrMetadata)) {
      const metadata = getBlockSettingsFromMetadata(blockNameOrMetadata);
      addBootstrappedBlockType2(name, metadata);
    }
    addUnprocessedBlockType2(name, settings2);
    return select(store2).getBlockType(name);
  }
  function translateBlockSettingUsingI18nSchema(i18nSchema, settingValue, textdomain) {
    if (typeof i18nSchema === "string" && typeof settingValue === "string") {
      return _x(settingValue, i18nSchema, textdomain);
    }
    if (Array.isArray(i18nSchema) && i18nSchema.length && Array.isArray(settingValue)) {
      return settingValue.map((value) => translateBlockSettingUsingI18nSchema(i18nSchema[0], value, textdomain));
    }
    if (isObject2(i18nSchema) && Object.entries(i18nSchema).length && isObject2(settingValue)) {
      return Object.keys(settingValue).reduce((accumulator, key) => {
        if (!i18nSchema[key]) {
          accumulator[key] = settingValue[key];
          return accumulator;
        }
        accumulator[key] = translateBlockSettingUsingI18nSchema(i18nSchema[key], settingValue[key], textdomain);
        return accumulator;
      }, {});
    }
    return settingValue;
  }
  function getFreeformContentHandlerName() {
    return select(store2).getFreeformFallbackBlockName();
  }
  function getGroupingBlockName() {
    return select(store2).getGroupingBlockName();
  }
  function getUnregisteredTypeHandlerName() {
    return select(store2).getUnregisteredFallbackBlockName();
  }
  function getDefaultBlockName() {
    return select(store2).getDefaultBlockName();
  }
  function getBlockType(name) {
    return select(store2)?.getBlockType(name);
  }
  function getBlockTypes() {
    return select(store2).getBlockTypes();
  }
  function getBlockSupport(nameOrType, feature, defaultSupports) {
    return select(store2).getBlockSupport(nameOrType, feature, defaultSupports);
  }
  function hasBlockSupport(nameOrType, feature, defaultSupports) {
    return select(store2).hasBlockSupport(nameOrType, feature, defaultSupports);
  }
  var getBlockVariations = (blockName, scope) => {
    return select(store2).getBlockVariations(blockName, scope);
  };

  // node_modules/@wordpress/blocks/build-module/api/utils.js
  k([names_default, a11y_default]);
  var ICON_COLORS = ["#191e23", "#f8f9f9"];
  function isUnmodifiedBlock(block3) {
    var _getBlockType$attribu;
    return Object.entries((_getBlockType$attribu = getBlockType(block3.name)?.attributes) !== null && _getBlockType$attribu !== void 0 ? _getBlockType$attribu : {}).every(([key, definition]) => {
      const value = block3.attributes[key];
      if (definition.hasOwnProperty("default")) {
        return value === definition.default;
      }
      if (definition.type === "rich-text") {
        return !value?.length;
      }
      return value === void 0;
    });
  }
  function isUnmodifiedDefaultBlock(block3) {
    return block3.name === getDefaultBlockName() && isUnmodifiedBlock(block3);
  }
  function isValidIcon(icon) {
    return !!icon && (typeof icon === "string" || (0, import_react.isValidElement)(icon) || typeof icon === "function" || icon instanceof import_react.Component);
  }
  function normalizeIconObject(icon) {
    icon = icon || BLOCK_ICON_DEFAULT;
    if (isValidIcon(icon)) {
      return {
        src: icon
      };
    }
    if ("background" in icon) {
      const colordBgColor = w(icon.background);
      const getColorContrast = (iconColor) => colordBgColor.contrast(iconColor);
      const maxContrast = Math.max(...ICON_COLORS.map(getColorContrast));
      return {
        ...icon,
        foreground: icon.foreground ? icon.foreground : ICON_COLORS.find((iconColor) => getColorContrast(iconColor) === maxContrast),
        shadowColor: colordBgColor.alpha(0.3).toRgbString()
      };
    }
    return icon;
  }
  function normalizeBlockType(blockTypeOrName) {
    if (typeof blockTypeOrName === "string") {
      return getBlockType(blockTypeOrName);
    }
    return blockTypeOrName;
  }
  function getDefault(attributeSchema) {
    if (attributeSchema.default !== void 0) {
      return attributeSchema.default;
    }
    if (attributeSchema.type === "rich-text") {
      return new RichTextData();
    }
  }
  function __experimentalSanitizeBlockAttributes(name, attributes) {
    const blockType = getBlockType(name);
    if (void 0 === blockType) {
      throw new Error(`Block type '${name}' is not registered.`);
    }
    return Object.entries(blockType.attributes).reduce((accumulator, [key, schema]) => {
      const value = attributes[key];
      if (void 0 !== value) {
        if (schema.type === "rich-text") {
          if (value instanceof RichTextData) {
            accumulator[key] = value;
          } else if (typeof value === "string") {
            accumulator[key] = RichTextData.fromHTMLString(value);
          }
        } else if (schema.type === "string" && value instanceof RichTextData) {
          accumulator[key] = value.toHTMLString();
        } else {
          accumulator[key] = value;
        }
      } else {
        const _default = getDefault(schema);
        if (void 0 !== _default) {
          accumulator[key] = _default;
        }
      }
      if (["node", "children"].indexOf(schema.source) !== -1) {
        if (typeof accumulator[key] === "string") {
          accumulator[key] = [accumulator[key]];
        } else if (!Array.isArray(accumulator[key])) {
          accumulator[key] = [];
        }
      }
      return accumulator;
    }, {});
  }
  function omit(object, keys) {
    return Object.fromEntries(Object.entries(object).filter(([key]) => !keys.includes(key)));
  }

  // node_modules/@wordpress/blocks/build-module/store/reducer.js
  var DEFAULT_CATEGORIES = [{
    slug: "text",
    title: __("Text")
  }, {
    slug: "media",
    title: __("Media")
  }, {
    slug: "design",
    title: __("Design")
  }, {
    slug: "widgets",
    title: __("Widgets")
  }, {
    slug: "theme",
    title: __("Theme")
  }, {
    slug: "embed",
    title: __("Embeds")
  }, {
    slug: "reusable",
    title: __("Reusable blocks")
  }];
  function keyBlockTypesByName(types) {
    return types.reduce((newBlockTypes, block3) => ({
      ...newBlockTypes,
      [block3.name]: block3
    }), {});
  }
  function getUniqueItemsByName(items) {
    return items.reduce((acc, currentItem) => {
      if (!acc.some((item) => item.name === currentItem.name)) {
        acc.push(currentItem);
      }
      return acc;
    }, []);
  }
  function bootstrappedBlockTypes(state = {}, action) {
    switch (action.type) {
      case "ADD_BOOTSTRAPPED_BLOCK_TYPE":
        const {
          name,
          blockType
        } = action;
        const serverDefinition = state[name];
        let newDefinition;
        if (serverDefinition) {
          if (serverDefinition.blockHooks === void 0 && blockType.blockHooks) {
            newDefinition = {
              ...serverDefinition,
              ...newDefinition,
              blockHooks: blockType.blockHooks
            };
          }
          if (serverDefinition.allowedBlocks === void 0 && blockType.allowedBlocks) {
            newDefinition = {
              ...serverDefinition,
              ...newDefinition,
              allowedBlocks: blockType.allowedBlocks
            };
          }
        } else {
          newDefinition = Object.fromEntries(Object.entries(blockType).filter(([, value]) => value !== null && value !== void 0).map(([key, value]) => [camelCase(key), value]));
          newDefinition.name = name;
        }
        if (newDefinition) {
          return {
            ...state,
            [name]: newDefinition
          };
        }
        return state;
      case "REMOVE_BLOCK_TYPES":
        return omit(state, action.names);
    }
    return state;
  }
  function unprocessedBlockTypes(state = {}, action) {
    switch (action.type) {
      case "ADD_UNPROCESSED_BLOCK_TYPE":
        return {
          ...state,
          [action.name]: action.blockType
        };
      case "REMOVE_BLOCK_TYPES":
        return omit(state, action.names);
    }
    return state;
  }
  function blockTypes(state = {}, action) {
    switch (action.type) {
      case "ADD_BLOCK_TYPES":
        return {
          ...state,
          ...keyBlockTypesByName(action.blockTypes)
        };
      case "REMOVE_BLOCK_TYPES":
        return omit(state, action.names);
    }
    return state;
  }
  function blockStyles(state = {}, action) {
    var _state$action$blockNa;
    switch (action.type) {
      case "ADD_BLOCK_TYPES":
        return {
          ...state,
          ...Object.fromEntries(Object.entries(keyBlockTypesByName(action.blockTypes)).map(([name, blockType]) => {
            var _blockType$styles, _state$blockType$name;
            return [name, getUniqueItemsByName([...((_blockType$styles = blockType.styles) !== null && _blockType$styles !== void 0 ? _blockType$styles : []).map((style) => ({
              ...style,
              source: "block"
            })), ...((_state$blockType$name = state[blockType.name]) !== null && _state$blockType$name !== void 0 ? _state$blockType$name : []).filter(({
              source
            }) => "block" !== source)])];
          }))
        };
      case "ADD_BLOCK_STYLES":
        const updatedStyles = {};
        action.blockNames.forEach((blockName) => {
          var _state$blockName;
          updatedStyles[blockName] = getUniqueItemsByName([...(_state$blockName = state[blockName]) !== null && _state$blockName !== void 0 ? _state$blockName : [], ...action.styles]);
        });
        return {
          ...state,
          ...updatedStyles
        };
      case "REMOVE_BLOCK_STYLES":
        return {
          ...state,
          [action.blockName]: ((_state$action$blockNa = state[action.blockName]) !== null && _state$action$blockNa !== void 0 ? _state$action$blockNa : []).filter((style) => action.styleNames.indexOf(style.name) === -1)
        };
    }
    return state;
  }
  function blockVariations(state = {}, action) {
    var _state$action$blockNa2, _state$action$blockNa3;
    switch (action.type) {
      case "ADD_BLOCK_TYPES":
        return {
          ...state,
          ...Object.fromEntries(Object.entries(keyBlockTypesByName(action.blockTypes)).map(([name, blockType]) => {
            var _blockType$variations, _state$blockType$name2;
            return [name, getUniqueItemsByName([...((_blockType$variations = blockType.variations) !== null && _blockType$variations !== void 0 ? _blockType$variations : []).map((variation) => ({
              ...variation,
              source: "block"
            })), ...((_state$blockType$name2 = state[blockType.name]) !== null && _state$blockType$name2 !== void 0 ? _state$blockType$name2 : []).filter(({
              source
            }) => "block" !== source)])];
          }))
        };
      case "ADD_BLOCK_VARIATIONS":
        return {
          ...state,
          [action.blockName]: getUniqueItemsByName([...(_state$action$blockNa2 = state[action.blockName]) !== null && _state$action$blockNa2 !== void 0 ? _state$action$blockNa2 : [], ...action.variations])
        };
      case "REMOVE_BLOCK_VARIATIONS":
        return {
          ...state,
          [action.blockName]: ((_state$action$blockNa3 = state[action.blockName]) !== null && _state$action$blockNa3 !== void 0 ? _state$action$blockNa3 : []).filter((variation) => action.variationNames.indexOf(variation.name) === -1)
        };
    }
    return state;
  }
  function createBlockNameSetterReducer(setActionType) {
    return (state = null, action) => {
      switch (action.type) {
        case "REMOVE_BLOCK_TYPES":
          if (action.names.indexOf(state) !== -1) {
            return null;
          }
          return state;
        case setActionType:
          return action.name || null;
      }
      return state;
    };
  }
  var defaultBlockName = createBlockNameSetterReducer("SET_DEFAULT_BLOCK_NAME");
  var freeformFallbackBlockName = createBlockNameSetterReducer("SET_FREEFORM_FALLBACK_BLOCK_NAME");
  var unregisteredFallbackBlockName = createBlockNameSetterReducer("SET_UNREGISTERED_FALLBACK_BLOCK_NAME");
  var groupingBlockName = createBlockNameSetterReducer("SET_GROUPING_BLOCK_NAME");
  function categories(state = DEFAULT_CATEGORIES, action) {
    switch (action.type) {
      case "SET_CATEGORIES":
        return action.categories || [];
      case "UPDATE_CATEGORY": {
        if (!action.category || !Object.keys(action.category).length) {
          return state;
        }
        const categoryToChange = state.find(({
          slug
        }) => slug === action.slug);
        if (categoryToChange) {
          return state.map((category) => {
            if (category.slug === action.slug) {
              return {
                ...category,
                ...action.category
              };
            }
            return category;
          });
        }
      }
    }
    return state;
  }
  function collections(state = {}, action) {
    switch (action.type) {
      case "ADD_BLOCK_COLLECTION":
        return {
          ...state,
          [action.namespace]: {
            title: action.title,
            icon: action.icon
          }
        };
      case "REMOVE_BLOCK_COLLECTION":
        return omit(state, action.namespace);
    }
    return state;
  }
  function blockBindingsSources(state = {}, action) {
    if (action.type === "REGISTER_BLOCK_BINDINGS_SOURCE") {
      return {
        ...state,
        [action.sourceName]: {
          label: action.sourceLabel,
          getValue: action.getValue,
          setValue: action.setValue,
          setValues: action.setValues,
          getPlaceholder: action.getPlaceholder,
          canUserEditValue: action.canUserEditValue || (() => false)
        }
      };
    }
    return state;
  }
  var reducer_default3 = combineReducers2({
    bootstrappedBlockTypes,
    unprocessedBlockTypes,
    blockTypes,
    blockStyles,
    blockVariations,
    defaultBlockName,
    freeformFallbackBlockName,
    unregisteredFallbackBlockName,
    groupingBlockName,
    categories,
    collections,
    blockBindingsSources
  });

  // node_modules/@wordpress/blocks/build-module/store/selectors.js
  var selectors_exports3 = {};
  __export(selectors_exports3, {
    __experimentalHasContentRoleAttribute: () => __experimentalHasContentRoleAttribute,
    getActiveBlockVariation: () => getActiveBlockVariation,
    getBlockStyles: () => getBlockStyles,
    getBlockSupport: () => getBlockSupport2,
    getBlockType: () => getBlockType2,
    getBlockTypes: () => getBlockTypes2,
    getBlockVariations: () => getBlockVariations2,
    getCategories: () => getCategories,
    getChildBlockNames: () => getChildBlockNames,
    getCollections: () => getCollections,
    getDefaultBlockName: () => getDefaultBlockName2,
    getDefaultBlockVariation: () => getDefaultBlockVariation,
    getFreeformFallbackBlockName: () => getFreeformFallbackBlockName,
    getGroupingBlockName: () => getGroupingBlockName2,
    getUnregisteredFallbackBlockName: () => getUnregisteredFallbackBlockName,
    hasBlockSupport: () => hasBlockSupport2,
    hasChildBlocks: () => hasChildBlocks,
    hasChildBlocksWithInserterSupport: () => hasChildBlocksWithInserterSupport,
    isMatchingSearchTerm: () => isMatchingSearchTerm
  });
  var import_remove_accents = __toESM(require_remove_accents());

  // node_modules/@wordpress/blocks/build-module/store/utils.js
  var getValueFromObjectPath = (object, path, defaultValue2) => {
    var _value;
    const normalizedPath = Array.isArray(path) ? path : path.split(".");
    let value = object;
    normalizedPath.forEach((fieldName) => {
      value = value?.[fieldName];
    });
    return (_value = value) !== null && _value !== void 0 ? _value : defaultValue2;
  };

  // node_modules/@wordpress/blocks/build-module/store/selectors.js
  var getNormalizedBlockType = (state, nameOrType) => "string" === typeof nameOrType ? getBlockType2(state, nameOrType) : nameOrType;
  var getBlockTypes2 = rememo_default((state) => Object.values(state.blockTypes), (state) => [state.blockTypes]);
  function getBlockType2(state, name) {
    return state.blockTypes[name];
  }
  function getBlockStyles(state, name) {
    return state.blockStyles[name];
  }
  var getBlockVariations2 = rememo_default((state, blockName, scope) => {
    const variations = state.blockVariations[blockName];
    if (!variations || !scope) {
      return variations;
    }
    return variations.filter((variation) => {
      return (variation.scope || ["block", "inserter"]).includes(scope);
    });
  }, (state, blockName) => [state.blockVariations[blockName]]);
  function getActiveBlockVariation(state, blockName, attributes, scope) {
    const variations = getBlockVariations2(state, blockName, scope);
    if (!variations) {
      return variations;
    }
    const blockType = getBlockType2(state, blockName);
    const attributeKeys = Object.keys(blockType?.attributes || {});
    let match2;
    let maxMatchedAttributes = 0;
    for (const variation of variations) {
      if (Array.isArray(variation.isActive)) {
        const definedAttributes = variation.isActive.filter((attribute) => {
          const topLevelAttribute = attribute.split(".")[0];
          return attributeKeys.includes(topLevelAttribute);
        });
        const definedAttributesLength = definedAttributes.length;
        if (definedAttributesLength === 0) {
          continue;
        }
        const isMatch = definedAttributes.every((attribute) => {
          const attributeValue = getValueFromObjectPath(attributes, attribute);
          if (attributeValue === void 0) {
            return false;
          }
          return attributeValue === getValueFromObjectPath(variation.attributes, attribute);
        });
        if (isMatch && definedAttributesLength > maxMatchedAttributes) {
          match2 = variation;
          maxMatchedAttributes = definedAttributesLength;
        }
      } else if (variation.isActive?.(attributes, variation.attributes)) {
        return match2 || variation;
      }
    }
    return match2;
  }
  function getDefaultBlockVariation(state, blockName, scope) {
    const variations = getBlockVariations2(state, blockName, scope);
    const defaultVariation = [...variations].reverse().find(({
      isDefault
    }) => !!isDefault);
    return defaultVariation || variations[0];
  }
  function getCategories(state) {
    return state.categories;
  }
  function getCollections(state) {
    return state.collections;
  }
  function getDefaultBlockName2(state) {
    return state.defaultBlockName;
  }
  function getFreeformFallbackBlockName(state) {
    return state.freeformFallbackBlockName;
  }
  function getUnregisteredFallbackBlockName(state) {
    return state.unregisteredFallbackBlockName;
  }
  function getGroupingBlockName2(state) {
    return state.groupingBlockName;
  }
  var getChildBlockNames = rememo_default((state, blockName) => {
    return getBlockTypes2(state).filter((blockType) => {
      return blockType.parent?.includes(blockName);
    }).map(({
      name
    }) => name);
  }, (state) => [state.blockTypes]);
  var getBlockSupport2 = (state, nameOrType, feature, defaultSupports) => {
    const blockType = getNormalizedBlockType(state, nameOrType);
    if (!blockType?.supports) {
      return defaultSupports;
    }
    return getValueFromObjectPath(blockType.supports, feature, defaultSupports);
  };
  function hasBlockSupport2(state, nameOrType, feature, defaultSupports) {
    return !!getBlockSupport2(state, nameOrType, feature, defaultSupports);
  }
  function getNormalizedSearchTerm(term) {
    return (0, import_remove_accents.default)(term !== null && term !== void 0 ? term : "").toLowerCase().trim();
  }
  function isMatchingSearchTerm(state, nameOrType, searchTerm = "") {
    const blockType = getNormalizedBlockType(state, nameOrType);
    const normalizedSearchTerm = getNormalizedSearchTerm(searchTerm);
    const isSearchMatch = (candidate) => getNormalizedSearchTerm(candidate).includes(normalizedSearchTerm);
    return isSearchMatch(blockType.title) || blockType.keywords?.some(isSearchMatch) || isSearchMatch(blockType.category) || typeof blockType.description === "string" && isSearchMatch(blockType.description);
  }
  var hasChildBlocks = (state, blockName) => {
    return getChildBlockNames(state, blockName).length > 0;
  };
  var hasChildBlocksWithInserterSupport = (state, blockName) => {
    return getChildBlockNames(state, blockName).some((childBlockName) => {
      return hasBlockSupport2(state, childBlockName, "inserter", true);
    });
  };
  var __experimentalHasContentRoleAttribute = rememo_default((state, blockTypeName) => {
    const blockType = getBlockType2(state, blockTypeName);
    if (!blockType) {
      return false;
    }
    return Object.entries(blockType.attributes).some(([, {
      __experimentalRole
    }]) => __experimentalRole === "content");
  }, (state, blockTypeName) => [state.blockTypes[blockTypeName]?.attributes]);

  // node_modules/@wordpress/blocks/build-module/store/private-selectors.js
  var private_selectors_exports = {};
  __export(private_selectors_exports, {
    getAllBlockBindingsSources: () => getAllBlockBindingsSources,
    getBlockBindingsSource: () => getBlockBindingsSource,
    getBootstrappedBlockType: () => getBootstrappedBlockType,
    getSupportedStyles: () => getSupportedStyles,
    getUnprocessedBlockTypes: () => getUnprocessedBlockTypes
  });
  var ROOT_BLOCK_SUPPORTS = ["background", "backgroundColor", "color", "linkColor", "captionColor", "buttonColor", "headingColor", "fontFamily", "fontSize", "fontStyle", "fontWeight", "lineHeight", "padding", "contentSize", "wideSize", "blockGap", "textDecoration", "textTransform", "letterSpacing"];
  function filterElementBlockSupports(blockSupports, name, element) {
    return blockSupports.filter((support) => {
      if (support === "fontSize" && element === "heading") {
        return false;
      }
      if (support === "textDecoration" && !name && element !== "link") {
        return false;
      }
      if (support === "textTransform" && !name && !(["heading", "h1", "h2", "h3", "h4", "h5", "h6"].includes(element) || element === "button" || element === "caption" || element === "text")) {
        return false;
      }
      if (support === "letterSpacing" && !name && !(["heading", "h1", "h2", "h3", "h4", "h5", "h6"].includes(element) || element === "button" || element === "caption" || element === "text")) {
        return false;
      }
      if (support === "textColumns" && !name) {
        return false;
      }
      return true;
    });
  }
  var getSupportedStyles = rememo_default((state, name, element) => {
    if (!name) {
      return filterElementBlockSupports(ROOT_BLOCK_SUPPORTS, name, element);
    }
    const blockType = getBlockType2(state, name);
    if (!blockType) {
      return [];
    }
    const supportKeys = [];
    if (blockType?.supports?.spacing?.blockGap) {
      supportKeys.push("blockGap");
    }
    if (blockType?.supports?.shadow) {
      supportKeys.push("shadow");
    }
    Object.keys(__EXPERIMENTAL_STYLE_PROPERTY).forEach((styleName) => {
      if (!__EXPERIMENTAL_STYLE_PROPERTY[styleName].support) {
        return;
      }
      if (__EXPERIMENTAL_STYLE_PROPERTY[styleName].requiresOptOut) {
        if (__EXPERIMENTAL_STYLE_PROPERTY[styleName].support[0] in blockType.supports && getValueFromObjectPath(blockType.supports, __EXPERIMENTAL_STYLE_PROPERTY[styleName].support) !== false) {
          supportKeys.push(styleName);
          return;
        }
      }
      if (getValueFromObjectPath(blockType.supports, __EXPERIMENTAL_STYLE_PROPERTY[styleName].support, false)) {
        supportKeys.push(styleName);
      }
    });
    return filterElementBlockSupports(supportKeys, name, element);
  }, (state, name) => [state.blockTypes[name]]);
  function getBootstrappedBlockType(state, name) {
    return state.bootstrappedBlockTypes[name];
  }
  function getUnprocessedBlockTypes(state) {
    return state.unprocessedBlockTypes;
  }
  function getAllBlockBindingsSources(state) {
    return state.blockBindingsSources;
  }
  function getBlockBindingsSource(state, sourceName) {
    return state.blockBindingsSources[sourceName];
  }

  // node_modules/@wordpress/blocks/build-module/store/actions.js
  var actions_exports3 = {};
  __export(actions_exports3, {
    __experimentalReapplyBlockFilters: () => __experimentalReapplyBlockFilters,
    addBlockCollection: () => addBlockCollection,
    addBlockStyles: () => addBlockStyles,
    addBlockTypes: () => addBlockTypes,
    addBlockVariations: () => addBlockVariations,
    reapplyBlockTypeFilters: () => reapplyBlockTypeFilters,
    removeBlockCollection: () => removeBlockCollection,
    removeBlockStyles: () => removeBlockStyles,
    removeBlockTypes: () => removeBlockTypes,
    removeBlockVariations: () => removeBlockVariations,
    setCategories: () => setCategories,
    setDefaultBlockName: () => setDefaultBlockName,
    setFreeformFallbackBlockName: () => setFreeformFallbackBlockName,
    setGroupingBlockName: () => setGroupingBlockName,
    setUnregisteredFallbackBlockName: () => setUnregisteredFallbackBlockName,
    updateCategory: () => updateCategory
  });

  // node_modules/@wordpress/blocks/build-module/store/process-block-type.js
  var import_react_is = __toESM(require_react_is());
  var error = (...args) => window?.console?.error?.(...args);
  var warn = (...args) => window?.console?.warn?.(...args);
  var LEGACY_CATEGORY_MAPPING = {
    common: "text",
    formatting: "text",
    layout: "design"
  };
  function mergeBlockVariations(bootstrappedVariations = [], clientVariations = []) {
    const result = [...bootstrappedVariations];
    clientVariations.forEach((clientVariation) => {
      const index2 = result.findIndex((bootstrappedVariation) => bootstrappedVariation.name === clientVariation.name);
      if (index2 !== -1) {
        result[index2] = {
          ...result[index2],
          ...clientVariation
        };
      } else {
        result.push(clientVariation);
      }
    });
    return result;
  }
  var processBlockType = (name, blockSettings) => ({
    select: select2
  }) => {
    const bootstrappedBlockType = select2.getBootstrappedBlockType(name);
    const blockType = {
      name,
      icon: BLOCK_ICON_DEFAULT,
      keywords: [],
      attributes: {},
      providesContext: {},
      usesContext: [],
      selectors: {},
      supports: {},
      styles: [],
      blockHooks: {},
      save: () => null,
      ...bootstrappedBlockType,
      ...blockSettings,
      variations: mergeBlockVariations(bootstrappedBlockType?.variations, blockSettings?.variations)
    };
    const settings2 = applyFilters("blocks.registerBlockType", blockType, name, null);
    if (settings2.description && typeof settings2.description !== "string") {
      deprecated("Declaring non-string block descriptions", {
        since: "6.2"
      });
    }
    if (settings2.deprecated) {
      settings2.deprecated = settings2.deprecated.map((deprecation) => Object.fromEntries(Object.entries(
        // Only keep valid deprecation keys.
        applyFilters(
          "blocks.registerBlockType",
          // Merge deprecation keys with pre-filter settings
          // so that filters that depend on specific keys being
          // present don't fail.
          {
            // Omit deprecation keys here so that deprecations
            // can opt out of specific keys like "supports".
            ...omit(blockType, DEPRECATED_ENTRY_KEYS),
            ...deprecation
          },
          blockType.name,
          deprecation
        )
      ).filter(([key]) => DEPRECATED_ENTRY_KEYS.includes(key))));
    }
    if (!isPlainObject2(settings2)) {
      error("Block settings must be a valid object.");
      return;
    }
    if (typeof settings2.save !== "function") {
      error('The "save" property must be a valid function.');
      return;
    }
    if ("edit" in settings2 && !(0, import_react_is.isValidElementType)(settings2.edit)) {
      error('The "edit" property must be a valid component.');
      return;
    }
    if (LEGACY_CATEGORY_MAPPING.hasOwnProperty(settings2.category)) {
      settings2.category = LEGACY_CATEGORY_MAPPING[settings2.category];
    }
    if ("category" in settings2 && !select2.getCategories().some(({
      slug
    }) => slug === settings2.category)) {
      warn('The block "' + name + '" is registered with an invalid category "' + settings2.category + '".');
      delete settings2.category;
    }
    if (!("title" in settings2) || settings2.title === "") {
      error('The block "' + name + '" must have a title.');
      return;
    }
    if (typeof settings2.title !== "string") {
      error("Block titles must be strings.");
      return;
    }
    settings2.icon = normalizeIconObject(settings2.icon);
    if (!isValidIcon(settings2.icon.src)) {
      error("The icon passed is invalid. The icon should be a string, an element, a function, or an object following the specifications documented in https://developer.wordpress.org/block-editor/developers/block-api/block-registration/#icon-optional");
      return;
    }
    return settings2;
  };

  // node_modules/@wordpress/blocks/build-module/store/actions.js
  function addBlockTypes(blockTypes2) {
    return {
      type: "ADD_BLOCK_TYPES",
      blockTypes: Array.isArray(blockTypes2) ? blockTypes2 : [blockTypes2]
    };
  }
  function reapplyBlockTypeFilters() {
    return ({
      dispatch: dispatch2,
      select: select2
    }) => {
      const processedBlockTypes = [];
      for (const [name, settings2] of Object.entries(select2.getUnprocessedBlockTypes())) {
        const result = dispatch2(processBlockType(name, settings2));
        if (result) {
          processedBlockTypes.push(result);
        }
      }
      if (!processedBlockTypes.length) {
        return;
      }
      dispatch2.addBlockTypes(processedBlockTypes);
    };
  }
  function __experimentalReapplyBlockFilters() {
    deprecated('wp.data.dispatch( "core/blocks" ).__experimentalReapplyBlockFilters', {
      since: "6.4",
      alternative: "reapplyBlockFilters"
    });
    return reapplyBlockTypeFilters();
  }
  function removeBlockTypes(names) {
    return {
      type: "REMOVE_BLOCK_TYPES",
      names: Array.isArray(names) ? names : [names]
    };
  }
  function addBlockStyles(blockNames, styles) {
    return {
      type: "ADD_BLOCK_STYLES",
      styles: Array.isArray(styles) ? styles : [styles],
      blockNames: Array.isArray(blockNames) ? blockNames : [blockNames]
    };
  }
  function removeBlockStyles(blockName, styleNames) {
    return {
      type: "REMOVE_BLOCK_STYLES",
      styleNames: Array.isArray(styleNames) ? styleNames : [styleNames],
      blockName
    };
  }
  function addBlockVariations(blockName, variations) {
    return {
      type: "ADD_BLOCK_VARIATIONS",
      variations: Array.isArray(variations) ? variations : [variations],
      blockName
    };
  }
  function removeBlockVariations(blockName, variationNames) {
    return {
      type: "REMOVE_BLOCK_VARIATIONS",
      variationNames: Array.isArray(variationNames) ? variationNames : [variationNames],
      blockName
    };
  }
  function setDefaultBlockName(name) {
    return {
      type: "SET_DEFAULT_BLOCK_NAME",
      name
    };
  }
  function setFreeformFallbackBlockName(name) {
    return {
      type: "SET_FREEFORM_FALLBACK_BLOCK_NAME",
      name
    };
  }
  function setUnregisteredFallbackBlockName(name) {
    return {
      type: "SET_UNREGISTERED_FALLBACK_BLOCK_NAME",
      name
    };
  }
  function setGroupingBlockName(name) {
    return {
      type: "SET_GROUPING_BLOCK_NAME",
      name
    };
  }
  function setCategories(categories2) {
    return {
      type: "SET_CATEGORIES",
      categories: categories2
    };
  }
  function updateCategory(slug, category) {
    return {
      type: "UPDATE_CATEGORY",
      slug,
      category
    };
  }
  function addBlockCollection(namespace, title, icon) {
    return {
      type: "ADD_BLOCK_COLLECTION",
      namespace,
      title,
      icon
    };
  }
  function removeBlockCollection(namespace) {
    return {
      type: "REMOVE_BLOCK_COLLECTION",
      namespace
    };
  }

  // node_modules/@wordpress/blocks/build-module/store/private-actions.js
  var private_actions_exports = {};
  __export(private_actions_exports, {
    addBootstrappedBlockType: () => addBootstrappedBlockType,
    addUnprocessedBlockType: () => addUnprocessedBlockType,
    registerBlockBindingsSource: () => registerBlockBindingsSource
  });
  function addBootstrappedBlockType(name, blockType) {
    return {
      type: "ADD_BOOTSTRAPPED_BLOCK_TYPE",
      name,
      blockType
    };
  }
  function addUnprocessedBlockType(name, blockType) {
    return ({
      dispatch: dispatch2
    }) => {
      dispatch2({
        type: "ADD_UNPROCESSED_BLOCK_TYPE",
        name,
        blockType
      });
      const processedBlockType = dispatch2(processBlockType(name, blockType));
      if (!processedBlockType) {
        return;
      }
      dispatch2.addBlockTypes(processedBlockType);
    };
  }
  function registerBlockBindingsSource(source) {
    return {
      type: "REGISTER_BLOCK_BINDINGS_SOURCE",
      sourceName: source.name,
      sourceLabel: source.label,
      getValue: source.getValue,
      setValue: source.setValue,
      setValues: source.setValues,
      getPlaceholder: source.getPlaceholder,
      canUserEditValue: source.canUserEditValue
    };
  }

  // node_modules/@wordpress/blocks/build-module/store/constants.js
  var STORE_NAME2 = "core/blocks";

  // node_modules/@wordpress/blocks/build-module/store/index.js
  var store2 = createReduxStore(STORE_NAME2, {
    reducer: reducer_default3,
    selectors: selectors_exports3,
    actions: actions_exports3
  });
  register(store2);
  unlock3(store2).registerPrivateSelectors(private_selectors_exports);
  unlock3(store2).registerPrivateActions(private_actions_exports);

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (let i3 = 0; i3 < 256; ++i3) {
    byteToHex.push((i3 + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset5 = 0) {
    return byteToHex[arr[offset5 + 0]] + byteToHex[arr[offset5 + 1]] + byteToHex[arr[offset5 + 2]] + byteToHex[arr[offset5 + 3]] + "-" + byteToHex[arr[offset5 + 4]] + byteToHex[arr[offset5 + 5]] + "-" + byteToHex[arr[offset5 + 6]] + byteToHex[arr[offset5 + 7]] + "-" + byteToHex[arr[offset5 + 8]] + byteToHex[arr[offset5 + 9]] + "-" + byteToHex[arr[offset5 + 10]] + byteToHex[arr[offset5 + 11]] + byteToHex[arr[offset5 + 12]] + byteToHex[arr[offset5 + 13]] + byteToHex[arr[offset5 + 14]] + byteToHex[arr[offset5 + 15]];
  }

  // node_modules/uuid/dist/esm-browser/native.js
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset5) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset5 = offset5 || 0;
      for (let i3 = 0; i3 < 16; ++i3) {
        buf[offset5 + i3] = rnds[i3];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var v4_default = v4;

  // node_modules/@wordpress/blocks/build-module/api/factory.js
  function createBlock(name, attributes = {}, innerBlocks = []) {
    const sanitizedAttributes = __experimentalSanitizeBlockAttributes(name, attributes);
    const clientId = v4_default();
    return {
      clientId,
      name,
      isValid: true,
      attributes: sanitizedAttributes,
      innerBlocks
    };
  }
  function createBlocksFromInnerBlocksTemplate(innerBlocksOrTemplate = []) {
    return innerBlocksOrTemplate.map((innerBlock) => {
      const innerBlockTemplate = Array.isArray(innerBlock) ? innerBlock : [innerBlock.name, innerBlock.attributes, innerBlock.innerBlocks];
      const [name, attributes, innerBlocks = []] = innerBlockTemplate;
      return createBlock(name, attributes, createBlocksFromInnerBlocksTemplate(innerBlocks));
    });
  }
  function __experimentalCloneSanitizedBlock(block3, mergeAttributes = {}, newInnerBlocks) {
    const clientId = v4_default();
    const sanitizedAttributes = __experimentalSanitizeBlockAttributes(block3.name, {
      ...block3.attributes,
      ...mergeAttributes
    });
    return {
      ...block3,
      clientId,
      attributes: sanitizedAttributes,
      innerBlocks: newInnerBlocks || block3.innerBlocks.map((innerBlock) => __experimentalCloneSanitizedBlock(innerBlock))
    };
  }
  function cloneBlock(block3, mergeAttributes = {}, newInnerBlocks) {
    const clientId = v4_default();
    return {
      ...block3,
      clientId,
      attributes: {
        ...block3.attributes,
        ...mergeAttributes
      },
      innerBlocks: newInnerBlocks || block3.innerBlocks.map((innerBlock) => cloneBlock(innerBlock))
    };
  }
  var isPossibleTransformForSource = (transform, direction, blocks2) => {
    if (!blocks2.length) {
      return false;
    }
    const isMultiBlock = blocks2.length > 1;
    const firstBlockName = blocks2[0].name;
    const isValidForMultiBlocks = isWildcardBlockTransform(transform) || !isMultiBlock || transform.isMultiBlock;
    if (!isValidForMultiBlocks) {
      return false;
    }
    if (!isWildcardBlockTransform(transform) && !blocks2.every((block3) => block3.name === firstBlockName)) {
      return false;
    }
    const isBlockType = transform.type === "block";
    if (!isBlockType) {
      return false;
    }
    const sourceBlock = blocks2[0];
    const hasMatchingName = direction !== "from" || transform.blocks.indexOf(sourceBlock.name) !== -1 || isWildcardBlockTransform(transform);
    if (!hasMatchingName) {
      return false;
    }
    if (!isMultiBlock && direction === "from" && isContainerGroupBlock(sourceBlock.name) && isContainerGroupBlock(transform.blockName)) {
      return false;
    }
    if (!maybeCheckTransformIsMatch(transform, blocks2)) {
      return false;
    }
    return true;
  };
  var getBlockTypesForPossibleFromTransforms = (blocks2) => {
    if (!blocks2.length) {
      return [];
    }
    const allBlockTypes = getBlockTypes();
    const blockTypesWithPossibleFromTransforms = allBlockTypes.filter((blockType) => {
      const fromTransforms = getBlockTransforms("from", blockType.name);
      return !!findTransform(fromTransforms, (transform) => {
        return isPossibleTransformForSource(transform, "from", blocks2);
      });
    });
    return blockTypesWithPossibleFromTransforms;
  };
  var getBlockTypesForPossibleToTransforms = (blocks2) => {
    if (!blocks2.length) {
      return [];
    }
    const sourceBlock = blocks2[0];
    const blockType = getBlockType(sourceBlock.name);
    const transformsTo = blockType ? getBlockTransforms("to", blockType.name) : [];
    const possibleTransforms = transformsTo.filter((transform) => {
      return transform && isPossibleTransformForSource(transform, "to", blocks2);
    });
    const blockNames = possibleTransforms.map((transformation) => transformation.blocks).flat();
    return blockNames.map(getBlockType);
  };
  var isWildcardBlockTransform = (t4) => t4 && t4.type === "block" && Array.isArray(t4.blocks) && t4.blocks.includes("*");
  var isContainerGroupBlock = (name) => name === getGroupingBlockName();
  function getPossibleBlockTransformations(blocks2) {
    if (!blocks2.length) {
      return [];
    }
    const blockTypesForFromTransforms = getBlockTypesForPossibleFromTransforms(blocks2);
    const blockTypesForToTransforms = getBlockTypesForPossibleToTransforms(blocks2);
    return [.../* @__PURE__ */ new Set([...blockTypesForFromTransforms, ...blockTypesForToTransforms])];
  }
  function findTransform(transforms, predicate) {
    const hooks = createHooks_default();
    for (let i3 = 0; i3 < transforms.length; i3++) {
      const candidate = transforms[i3];
      if (predicate(candidate)) {
        hooks.addFilter("transform", "transform/" + i3.toString(), (result) => result ? result : candidate, candidate.priority);
      }
    }
    return hooks.applyFilters("transform", null);
  }
  function getBlockTransforms(direction, blockTypeOrName) {
    if (blockTypeOrName === void 0) {
      return getBlockTypes().map(({
        name
      }) => getBlockTransforms(direction, name)).flat();
    }
    const blockType = normalizeBlockType(blockTypeOrName);
    const {
      name: blockName,
      transforms
    } = blockType || {};
    if (!transforms || !Array.isArray(transforms[direction])) {
      return [];
    }
    const usingMobileTransformations = transforms.supportedMobileTransforms && Array.isArray(transforms.supportedMobileTransforms);
    const filteredTransforms = usingMobileTransformations ? transforms[direction].filter((t4) => {
      if (t4.type === "raw") {
        return true;
      }
      if (!t4.blocks || !t4.blocks.length) {
        return false;
      }
      if (isWildcardBlockTransform(t4)) {
        return true;
      }
      return t4.blocks.every((transformBlockName) => transforms.supportedMobileTransforms.includes(transformBlockName));
    }) : transforms[direction];
    return filteredTransforms.map((transform) => ({
      ...transform,
      blockName,
      usingMobileTransformations
    }));
  }
  function maybeCheckTransformIsMatch(transform, blocks2) {
    if (typeof transform.isMatch !== "function") {
      return true;
    }
    const sourceBlock = blocks2[0];
    const attributes = transform.isMultiBlock ? blocks2.map((block4) => block4.attributes) : sourceBlock.attributes;
    const block3 = transform.isMultiBlock ? blocks2 : sourceBlock;
    return transform.isMatch(attributes, block3);
  }
  function switchToBlockType(blocks2, name) {
    const blocksArray = Array.isArray(blocks2) ? blocks2 : [blocks2];
    const isMultiBlock = blocksArray.length > 1;
    const firstBlock = blocksArray[0];
    const sourceName = firstBlock.name;
    const transformationsFrom = getBlockTransforms("from", name);
    const transformationsTo = getBlockTransforms("to", sourceName);
    const transformation = findTransform(transformationsTo, (t4) => t4.type === "block" && (isWildcardBlockTransform(t4) || t4.blocks.indexOf(name) !== -1) && (!isMultiBlock || t4.isMultiBlock) && maybeCheckTransformIsMatch(t4, blocksArray)) || findTransform(transformationsFrom, (t4) => t4.type === "block" && (isWildcardBlockTransform(t4) || t4.blocks.indexOf(sourceName) !== -1) && (!isMultiBlock || t4.isMultiBlock) && maybeCheckTransformIsMatch(t4, blocksArray));
    if (!transformation) {
      return null;
    }
    let transformationResults;
    if (transformation.isMultiBlock) {
      if ("__experimentalConvert" in transformation) {
        transformationResults = transformation.__experimentalConvert(blocksArray);
      } else {
        transformationResults = transformation.transform(blocksArray.map((currentBlock) => currentBlock.attributes), blocksArray.map((currentBlock) => currentBlock.innerBlocks));
      }
    } else if ("__experimentalConvert" in transformation) {
      transformationResults = transformation.__experimentalConvert(firstBlock);
    } else {
      transformationResults = transformation.transform(firstBlock.attributes, firstBlock.innerBlocks);
    }
    if (transformationResults === null || typeof transformationResults !== "object") {
      return null;
    }
    transformationResults = Array.isArray(transformationResults) ? transformationResults : [transformationResults];
    if (transformationResults.some((result) => !getBlockType(result.name))) {
      return null;
    }
    const hasSwitchedBlock = transformationResults.some((result) => result.name === name);
    if (!hasSwitchedBlock) {
      return null;
    }
    const ret = transformationResults.map((result, index2, results) => {
      return applyFilters("blocks.switchToBlockType.transformedBlock", result, blocks2, index2, results);
    });
    return ret;
  }

  // node_modules/@wordpress/block-serialization-default-parser/build-module/index.js
  var document2;
  var offset;
  var output;
  var stack;
  var tokenizer = /<!--\s+(\/)?wp:([a-z][a-z0-9_-]*\/)?([a-z][a-z0-9_-]*)\s+({(?:(?=([^}]+|}+(?=})|(?!}\s+\/?-->)[^])*)\5|[^]*?)}\s+)?(\/)?-->/g;
  function Block(blockName, attrs2, innerBlocks, innerHTML, innerContent) {
    return {
      blockName,
      attrs: attrs2,
      innerBlocks,
      innerHTML,
      innerContent
    };
  }
  function Freeform(innerHTML) {
    return Block(null, {}, [], innerHTML, [innerHTML]);
  }
  function Frame(block3, tokenStart, tokenLength, prevOffset, leadingHtmlStart) {
    return {
      block: block3,
      tokenStart,
      tokenLength,
      prevOffset: prevOffset || tokenStart + tokenLength,
      leadingHtmlStart
    };
  }
  var parse = (doc) => {
    document2 = doc;
    offset = 0;
    output = [];
    stack = [];
    tokenizer.lastIndex = 0;
    do {
    } while (proceed());
    return output;
  };
  function proceed() {
    const stackDepth = stack.length;
    const next3 = nextToken();
    const [tokenType, blockName, attrs2, startOffset, tokenLength] = next3;
    const leadingHtmlStart = startOffset > offset ? offset : null;
    switch (tokenType) {
      case "no-more-tokens":
        if (0 === stackDepth) {
          addFreeform();
          return false;
        }
        if (1 === stackDepth) {
          addBlockFromStack();
          return false;
        }
        while (0 < stack.length) {
          addBlockFromStack();
        }
        return false;
      case "void-block":
        if (0 === stackDepth) {
          if (null !== leadingHtmlStart) {
            output.push(Freeform(document2.substr(leadingHtmlStart, startOffset - leadingHtmlStart)));
          }
          output.push(Block(blockName, attrs2, [], "", []));
          offset = startOffset + tokenLength;
          return true;
        }
        addInnerBlock(Block(blockName, attrs2, [], "", []), startOffset, tokenLength);
        offset = startOffset + tokenLength;
        return true;
      case "block-opener":
        stack.push(Frame(Block(blockName, attrs2, [], "", []), startOffset, tokenLength, startOffset + tokenLength, leadingHtmlStart));
        offset = startOffset + tokenLength;
        return true;
      case "block-closer":
        if (0 === stackDepth) {
          addFreeform();
          return false;
        }
        if (1 === stackDepth) {
          addBlockFromStack(startOffset);
          offset = startOffset + tokenLength;
          return true;
        }
        const stackTop = (
          /** @type {ParsedFrame} */
          stack.pop()
        );
        const html2 = document2.substr(stackTop.prevOffset, startOffset - stackTop.prevOffset);
        stackTop.block.innerHTML += html2;
        stackTop.block.innerContent.push(html2);
        stackTop.prevOffset = startOffset + tokenLength;
        addInnerBlock(stackTop.block, stackTop.tokenStart, stackTop.tokenLength, startOffset + tokenLength);
        offset = startOffset + tokenLength;
        return true;
      default:
        addFreeform();
        return false;
    }
  }
  function parseJSON(input) {
    try {
      return JSON.parse(input);
    } catch (e3) {
      return null;
    }
  }
  function nextToken() {
    const matches2 = tokenizer.exec(document2);
    if (null === matches2) {
      return ["no-more-tokens", "", null, 0, 0];
    }
    const startedAt = matches2.index;
    const [match2, closerMatch, namespaceMatch, nameMatch, attrsMatch, , voidMatch] = matches2;
    const length2 = match2.length;
    const isCloser = !!closerMatch;
    const isVoid = !!voidMatch;
    const namespace = namespaceMatch || "core/";
    const name = namespace + nameMatch;
    const hasAttrs = !!attrsMatch;
    const attrs2 = hasAttrs ? parseJSON(attrsMatch) : {};
    if (isCloser && (isVoid || hasAttrs)) {
    }
    if (isVoid) {
      return ["void-block", name, attrs2, startedAt, length2];
    }
    if (isCloser) {
      return ["block-closer", name, null, startedAt, length2];
    }
    return ["block-opener", name, attrs2, startedAt, length2];
  }
  function addFreeform(rawLength) {
    const length2 = rawLength ? rawLength : document2.length - offset;
    if (0 === length2) {
      return;
    }
    output.push(Freeform(document2.substr(offset, length2)));
  }
  function addInnerBlock(block3, tokenStart, tokenLength, lastOffset) {
    const parent = stack[stack.length - 1];
    parent.block.innerBlocks.push(block3);
    const html2 = document2.substr(parent.prevOffset, tokenStart - parent.prevOffset);
    if (html2) {
      parent.block.innerHTML += html2;
      parent.block.innerContent.push(html2);
    }
    parent.block.innerContent.push(null);
    parent.prevOffset = lastOffset ? lastOffset : tokenStart + tokenLength;
  }
  function addBlockFromStack(endOffset) {
    const {
      block: block3,
      leadingHtmlStart,
      prevOffset,
      tokenStart
    } = (
      /** @type {ParsedFrame} */
      stack.pop()
    );
    const html2 = endOffset ? document2.substr(prevOffset, endOffset - prevOffset) : document2.substr(prevOffset);
    if (html2) {
      block3.innerHTML += html2;
      block3.innerContent.push(html2);
    }
    if (null !== leadingHtmlStart) {
      output.push(Freeform(document2.substr(leadingHtmlStart, tokenStart - leadingHtmlStart)));
    }
    output.push(block3);
  }

  // node_modules/@wordpress/autop/build-module/index.js
  var htmlSplitRegex = (() => {
    const comments = "!(?:-(?!->)[^\\-]*)*(?:-->)?";
    const cdata = "!\\[CDATA\\[[^\\]]*(?:](?!]>)[^\\]]*)*?(?:]]>)?";
    const escaped = "(?=!--|!\\[CDATA\\[)((?=!-)" + // If yes, which type?
    comments + "|" + cdata + ")";
    const regex = "(<(" + // Conditional expression follows.
    escaped + // Find end of escaped element.
    "|[^>]*>?))";
    return new RegExp(regex);
  })();
  function htmlSplit(input) {
    const parts = [];
    let workingInput = input;
    let match2;
    while (match2 = workingInput.match(htmlSplitRegex)) {
      const index2 = match2.index;
      parts.push(workingInput.slice(0, index2));
      parts.push(match2[0]);
      workingInput = workingInput.slice(index2 + match2[0].length);
    }
    if (workingInput.length) {
      parts.push(workingInput);
    }
    return parts;
  }
  function replaceInHtmlTags(haystack, replacePairs) {
    const textArr = htmlSplit(haystack);
    let changed = false;
    const needles = Object.keys(replacePairs);
    for (let i3 = 1; i3 < textArr.length; i3 += 2) {
      for (let j2 = 0; j2 < needles.length; j2++) {
        const needle = needles[j2];
        if (-1 !== textArr[i3].indexOf(needle)) {
          textArr[i3] = textArr[i3].replace(new RegExp(needle, "g"), replacePairs[needle]);
          changed = true;
          break;
        }
      }
    }
    if (changed) {
      haystack = textArr.join("");
    }
    return haystack;
  }
  function autop(text2, br = true) {
    const preTags = [];
    if (text2.trim() === "") {
      return "";
    }
    text2 = text2 + "\n";
    if (text2.indexOf("<pre") !== -1) {
      const textParts = text2.split("</pre>");
      const lastText = textParts.pop();
      text2 = "";
      for (let i3 = 0; i3 < textParts.length; i3++) {
        const textPart = textParts[i3];
        const start2 = textPart.indexOf("<pre");
        if (start2 === -1) {
          text2 += textPart;
          continue;
        }
        const name = "<pre wp-pre-tag-" + i3 + "></pre>";
        preTags.push([name, textPart.substr(start2) + "</pre>"]);
        text2 += textPart.substr(0, start2) + name;
      }
      text2 += lastText;
    }
    text2 = text2.replace(/<br\s*\/?>\s*<br\s*\/?>/g, "\n\n");
    const allBlocks = "(?:table|thead|tfoot|caption|col|colgroup|tbody|tr|td|th|div|dl|dd|dt|ul|ol|li|pre|form|map|area|blockquote|address|math|style|p|h[1-6]|hr|fieldset|legend|section|article|aside|hgroup|header|footer|nav|figure|figcaption|details|menu|summary)";
    text2 = text2.replace(new RegExp("(<" + allBlocks + "[\\s/>])", "g"), "\n\n$1");
    text2 = text2.replace(new RegExp("(</" + allBlocks + ">)", "g"), "$1\n\n");
    text2 = text2.replace(/\r\n|\r/g, "\n");
    text2 = replaceInHtmlTags(text2, {
      "\n": " <!-- wpnl --> "
    });
    if (text2.indexOf("<option") !== -1) {
      text2 = text2.replace(/\s*<option/g, "<option");
      text2 = text2.replace(/<\/option>\s*/g, "</option>");
    }
    if (text2.indexOf("</object>") !== -1) {
      text2 = text2.replace(/(<object[^>]*>)\s*/g, "$1");
      text2 = text2.replace(/\s*<\/object>/g, "</object>");
      text2 = text2.replace(/\s*(<\/?(?:param|embed)[^>]*>)\s*/g, "$1");
    }
    if (text2.indexOf("<source") !== -1 || text2.indexOf("<track") !== -1) {
      text2 = text2.replace(/([<\[](?:audio|video)[^>\]]*[>\]])\s*/g, "$1");
      text2 = text2.replace(/\s*([<\[]\/(?:audio|video)[>\]])/g, "$1");
      text2 = text2.replace(/\s*(<(?:source|track)[^>]*>)\s*/g, "$1");
    }
    if (text2.indexOf("<figcaption") !== -1) {
      text2 = text2.replace(/\s*(<figcaption[^>]*>)/, "$1");
      text2 = text2.replace(/<\/figcaption>\s*/, "</figcaption>");
    }
    text2 = text2.replace(/\n\n+/g, "\n\n");
    const texts = text2.split(/\n\s*\n/).filter(Boolean);
    text2 = "";
    texts.forEach((textPiece) => {
      text2 += "<p>" + textPiece.replace(/^\n*|\n*$/g, "") + "</p>\n";
    });
    text2 = text2.replace(/<p>\s*<\/p>/g, "");
    text2 = text2.replace(/<p>([^<]+)<\/(div|address|form)>/g, "<p>$1</p></$2>");
    text2 = text2.replace(new RegExp("<p>\\s*(</?" + allBlocks + "[^>]*>)\\s*</p>", "g"), "$1");
    text2 = text2.replace(/<p>(<li.+?)<\/p>/g, "$1");
    text2 = text2.replace(/<p><blockquote([^>]*)>/gi, "<blockquote$1><p>");
    text2 = text2.replace(/<\/blockquote><\/p>/g, "</p></blockquote>");
    text2 = text2.replace(new RegExp("<p>\\s*(</?" + allBlocks + "[^>]*>)", "g"), "$1");
    text2 = text2.replace(new RegExp("(</?" + allBlocks + "[^>]*>)\\s*</p>", "g"), "$1");
    if (br) {
      text2 = text2.replace(/<(script|style).*?<\/\\1>/g, (match2) => match2[0].replace(/\n/g, "<WPPreserveNewline />"));
      text2 = text2.replace(/<br>|<br\/>/g, "<br />");
      text2 = text2.replace(/(<br \/>)?\s*\n/g, (a2, b2) => b2 ? a2 : "<br />\n");
      text2 = text2.replace(/<WPPreserveNewline \/>/g, "\n");
    }
    text2 = text2.replace(new RegExp("(</?" + allBlocks + "[^>]*>)\\s*<br />", "g"), "$1");
    text2 = text2.replace(/<br \/>(\s*<\/?(?:p|li|div|dl|dd|dt|th|pre|td|ul|ol)[^>]*>)/g, "$1");
    text2 = text2.replace(/\n<\/p>$/g, "</p>");
    preTags.forEach((preTag) => {
      const [name, original] = preTag;
      text2 = text2.replace(name, original);
    });
    if (-1 !== text2.indexOf("<!-- wpnl -->")) {
      text2 = text2.replace(/\s?<!-- wpnl -->\s?/g, "\n");
    }
    return text2;
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/serialize-raw-block.js
  function serializeRawBlock(rawBlock, options = {}) {
    const {
      isCommentDelimited = true
    } = options;
    const {
      blockName,
      attrs: attrs2 = {},
      innerBlocks = [],
      innerContent = []
    } = rawBlock;
    let childIndex = 0;
    const content = innerContent.map((item) => (
      // `null` denotes a nested block, otherwise we have an HTML fragment.
      item !== null ? item : serializeRawBlock(innerBlocks[childIndex++], options)
    )).join("\n").replace(/\n+/g, "\n").trim();
    return isCommentDelimited ? getCommentDelimitedContent(blockName, attrs2, content) : content;
  }

  // node_modules/@wordpress/blocks/build-module/api/serializer.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var blockPropsProvider = {};
  var innerBlocksPropsProvider = {};
  function getBlockProps(props = {}) {
    const {
      blockType,
      attributes
    } = blockPropsProvider;
    return getBlockProps.skipFilters ? props : applyFilters("blocks.getSaveContent.extraProps", {
      ...props
    }, blockType, attributes);
  }
  function getSaveElement(blockTypeOrName, attributes, innerBlocks = []) {
    const blockType = normalizeBlockType(blockTypeOrName);
    if (!blockType?.save) {
      return null;
    }
    let {
      save
    } = blockType;
    if (save.prototype instanceof import_react.Component) {
      const instance = new save({
        attributes
      });
      save = instance.render.bind(instance);
    }
    blockPropsProvider.blockType = blockType;
    blockPropsProvider.attributes = attributes;
    innerBlocksPropsProvider.innerBlocks = innerBlocks;
    let element = save({
      attributes,
      innerBlocks
    });
    if (element !== null && typeof element === "object" && hasFilter("blocks.getSaveContent.extraProps") && !(blockType.apiVersion > 1)) {
      const props = applyFilters("blocks.getSaveContent.extraProps", {
        ...element.props
      }, blockType, attributes);
      if (!isShallowEqual(props, element.props)) {
        element = (0, import_react.cloneElement)(element, props);
      }
    }
    return applyFilters("blocks.getSaveElement", element, blockType, attributes);
  }
  function getSaveContent(blockTypeOrName, attributes, innerBlocks) {
    const blockType = normalizeBlockType(blockTypeOrName);
    return serialize_default(getSaveElement(blockType, attributes, innerBlocks));
  }
  function serializeAttributes(attributes) {
    return JSON.stringify(attributes).replace(/--/g, "\\u002d\\u002d").replace(/</g, "\\u003c").replace(/>/g, "\\u003e").replace(/&/g, "\\u0026").replace(/\\"/g, "\\u0022");
  }
  function getBlockInnerHTML(block3) {
    let saveContent = block3.originalContent;
    if (block3.isValid || block3.innerBlocks.length) {
      try {
        saveContent = getSaveContent(block3.name, block3.attributes, block3.innerBlocks);
      } catch (error2) {
      }
    }
    return saveContent;
  }
  function getCommentDelimitedContent(rawBlockName, attributes, content) {
    const serializedAttributes = attributes && Object.entries(attributes).length ? serializeAttributes(attributes) + " " : "";
    const blockName = rawBlockName?.startsWith("core/") ? rawBlockName.slice(5) : rawBlockName;
    if (!content) {
      return `<!-- wp:${blockName} ${serializedAttributes}/-->`;
    }
    return `<!-- wp:${blockName} ${serializedAttributes}-->
` + content + `
<!-- /wp:${blockName} -->`;
  }

  // node_modules/simple-html-tokenizer/dist/es6/index.js
  var HEXCHARCODE = /^#[xX]([A-Fa-f0-9]+)$/;
  var CHARCODE = /^#([0-9]+)$/;
  var NAMED = /^([A-Za-z0-9]+)$/;
  var EntityParser = (
    /** @class */
    function() {
      function EntityParser2(named) {
        this.named = named;
      }
      EntityParser2.prototype.parse = function(entity) {
        if (!entity) {
          return;
        }
        var matches2 = entity.match(HEXCHARCODE);
        if (matches2) {
          return String.fromCharCode(parseInt(matches2[1], 16));
        }
        matches2 = entity.match(CHARCODE);
        if (matches2) {
          return String.fromCharCode(parseInt(matches2[1], 10));
        }
        matches2 = entity.match(NAMED);
        if (matches2) {
          return this.named[matches2[1]];
        }
      };
      return EntityParser2;
    }()
  );
  var WSP = /[\t\n\f ]/;
  var ALPHA = /[A-Za-z]/;
  var CRLF = /\r\n?/g;
  function isSpace(char2) {
    return WSP.test(char2);
  }
  function isAlpha(char2) {
    return ALPHA.test(char2);
  }
  function preprocessInput(input) {
    return input.replace(CRLF, "\n");
  }
  var EventedTokenizer = (
    /** @class */
    function() {
      function EventedTokenizer2(delegate, entityParser, mode) {
        if (mode === void 0) {
          mode = "precompile";
        }
        this.delegate = delegate;
        this.entityParser = entityParser;
        this.mode = mode;
        this.state = "beforeData";
        this.line = -1;
        this.column = -1;
        this.input = "";
        this.index = -1;
        this.tagNameBuffer = "";
        this.states = {
          beforeData: function() {
            var char2 = this.peek();
            if (char2 === "<" && !this.isIgnoredEndTag()) {
              this.transitionTo(
                "tagOpen"
                /* tagOpen */
              );
              this.markTagStart();
              this.consume();
            } else {
              if (this.mode === "precompile" && char2 === "\n") {
                var tag = this.tagNameBuffer.toLowerCase();
                if (tag === "pre" || tag === "textarea") {
                  this.consume();
                }
              }
              this.transitionTo(
                "data"
                /* data */
              );
              this.delegate.beginData();
            }
          },
          data: function() {
            var char2 = this.peek();
            var tag = this.tagNameBuffer;
            if (char2 === "<" && !this.isIgnoredEndTag()) {
              this.delegate.finishData();
              this.transitionTo(
                "tagOpen"
                /* tagOpen */
              );
              this.markTagStart();
              this.consume();
            } else if (char2 === "&" && tag !== "script" && tag !== "style") {
              this.consume();
              this.delegate.appendToData(this.consumeCharRef() || "&");
            } else {
              this.consume();
              this.delegate.appendToData(char2);
            }
          },
          tagOpen: function() {
            var char2 = this.consume();
            if (char2 === "!") {
              this.transitionTo(
                "markupDeclarationOpen"
                /* markupDeclarationOpen */
              );
            } else if (char2 === "/") {
              this.transitionTo(
                "endTagOpen"
                /* endTagOpen */
              );
            } else if (char2 === "@" || char2 === ":" || isAlpha(char2)) {
              this.transitionTo(
                "tagName"
                /* tagName */
              );
              this.tagNameBuffer = "";
              this.delegate.beginStartTag();
              this.appendToTagName(char2);
            }
          },
          markupDeclarationOpen: function() {
            var char2 = this.consume();
            if (char2 === "-" && this.peek() === "-") {
              this.consume();
              this.transitionTo(
                "commentStart"
                /* commentStart */
              );
              this.delegate.beginComment();
            } else {
              var maybeDoctype = char2.toUpperCase() + this.input.substring(this.index, this.index + 6).toUpperCase();
              if (maybeDoctype === "DOCTYPE") {
                this.consume();
                this.consume();
                this.consume();
                this.consume();
                this.consume();
                this.consume();
                this.transitionTo(
                  "doctype"
                  /* doctype */
                );
                if (this.delegate.beginDoctype)
                  this.delegate.beginDoctype();
              }
            }
          },
          doctype: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              this.transitionTo(
                "beforeDoctypeName"
                /* beforeDoctypeName */
              );
            }
          },
          beforeDoctypeName: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              return;
            } else {
              this.transitionTo(
                "doctypeName"
                /* doctypeName */
              );
              if (this.delegate.appendToDoctypeName)
                this.delegate.appendToDoctypeName(char2.toLowerCase());
            }
          },
          doctypeName: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              this.transitionTo(
                "afterDoctypeName"
                /* afterDoctypeName */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              if (this.delegate.appendToDoctypeName)
                this.delegate.appendToDoctypeName(char2.toLowerCase());
            }
          },
          afterDoctypeName: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              return;
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              var nextSixChars = char2.toUpperCase() + this.input.substring(this.index, this.index + 5).toUpperCase();
              var isPublic = nextSixChars.toUpperCase() === "PUBLIC";
              var isSystem = nextSixChars.toUpperCase() === "SYSTEM";
              if (isPublic || isSystem) {
                this.consume();
                this.consume();
                this.consume();
                this.consume();
                this.consume();
                this.consume();
              }
              if (isPublic) {
                this.transitionTo(
                  "afterDoctypePublicKeyword"
                  /* afterDoctypePublicKeyword */
                );
              } else if (isSystem) {
                this.transitionTo(
                  "afterDoctypeSystemKeyword"
                  /* afterDoctypeSystemKeyword */
                );
              }
            }
          },
          afterDoctypePublicKeyword: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.transitionTo(
                "beforeDoctypePublicIdentifier"
                /* beforeDoctypePublicIdentifier */
              );
              this.consume();
            } else if (char2 === '"') {
              this.transitionTo(
                "doctypePublicIdentifierDoubleQuoted"
                /* doctypePublicIdentifierDoubleQuoted */
              );
              this.consume();
            } else if (char2 === "'") {
              this.transitionTo(
                "doctypePublicIdentifierSingleQuoted"
                /* doctypePublicIdentifierSingleQuoted */
              );
              this.consume();
            } else if (char2 === ">") {
              this.consume();
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            }
          },
          doctypePublicIdentifierDoubleQuoted: function() {
            var char2 = this.consume();
            if (char2 === '"') {
              this.transitionTo(
                "afterDoctypePublicIdentifier"
                /* afterDoctypePublicIdentifier */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              if (this.delegate.appendToDoctypePublicIdentifier)
                this.delegate.appendToDoctypePublicIdentifier(char2);
            }
          },
          doctypePublicIdentifierSingleQuoted: function() {
            var char2 = this.consume();
            if (char2 === "'") {
              this.transitionTo(
                "afterDoctypePublicIdentifier"
                /* afterDoctypePublicIdentifier */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              if (this.delegate.appendToDoctypePublicIdentifier)
                this.delegate.appendToDoctypePublicIdentifier(char2);
            }
          },
          afterDoctypePublicIdentifier: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              this.transitionTo(
                "betweenDoctypePublicAndSystemIdentifiers"
                /* betweenDoctypePublicAndSystemIdentifiers */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else if (char2 === '"') {
              this.transitionTo(
                "doctypeSystemIdentifierDoubleQuoted"
                /* doctypeSystemIdentifierDoubleQuoted */
              );
            } else if (char2 === "'") {
              this.transitionTo(
                "doctypeSystemIdentifierSingleQuoted"
                /* doctypeSystemIdentifierSingleQuoted */
              );
            }
          },
          betweenDoctypePublicAndSystemIdentifiers: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              return;
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else if (char2 === '"') {
              this.transitionTo(
                "doctypeSystemIdentifierDoubleQuoted"
                /* doctypeSystemIdentifierDoubleQuoted */
              );
            } else if (char2 === "'") {
              this.transitionTo(
                "doctypeSystemIdentifierSingleQuoted"
                /* doctypeSystemIdentifierSingleQuoted */
              );
            }
          },
          doctypeSystemIdentifierDoubleQuoted: function() {
            var char2 = this.consume();
            if (char2 === '"') {
              this.transitionTo(
                "afterDoctypeSystemIdentifier"
                /* afterDoctypeSystemIdentifier */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              if (this.delegate.appendToDoctypeSystemIdentifier)
                this.delegate.appendToDoctypeSystemIdentifier(char2);
            }
          },
          doctypeSystemIdentifierSingleQuoted: function() {
            var char2 = this.consume();
            if (char2 === "'") {
              this.transitionTo(
                "afterDoctypeSystemIdentifier"
                /* afterDoctypeSystemIdentifier */
              );
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              if (this.delegate.appendToDoctypeSystemIdentifier)
                this.delegate.appendToDoctypeSystemIdentifier(char2);
            }
          },
          afterDoctypeSystemIdentifier: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              return;
            } else if (char2 === ">") {
              if (this.delegate.endDoctype)
                this.delegate.endDoctype();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            }
          },
          commentStart: function() {
            var char2 = this.consume();
            if (char2 === "-") {
              this.transitionTo(
                "commentStartDash"
                /* commentStartDash */
              );
            } else if (char2 === ">") {
              this.delegate.finishComment();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.delegate.appendToCommentData(char2);
              this.transitionTo(
                "comment"
                /* comment */
              );
            }
          },
          commentStartDash: function() {
            var char2 = this.consume();
            if (char2 === "-") {
              this.transitionTo(
                "commentEnd"
                /* commentEnd */
              );
            } else if (char2 === ">") {
              this.delegate.finishComment();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.delegate.appendToCommentData("-");
              this.transitionTo(
                "comment"
                /* comment */
              );
            }
          },
          comment: function() {
            var char2 = this.consume();
            if (char2 === "-") {
              this.transitionTo(
                "commentEndDash"
                /* commentEndDash */
              );
            } else {
              this.delegate.appendToCommentData(char2);
            }
          },
          commentEndDash: function() {
            var char2 = this.consume();
            if (char2 === "-") {
              this.transitionTo(
                "commentEnd"
                /* commentEnd */
              );
            } else {
              this.delegate.appendToCommentData("-" + char2);
              this.transitionTo(
                "comment"
                /* comment */
              );
            }
          },
          commentEnd: function() {
            var char2 = this.consume();
            if (char2 === ">") {
              this.delegate.finishComment();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.delegate.appendToCommentData("--" + char2);
              this.transitionTo(
                "comment"
                /* comment */
              );
            }
          },
          tagName: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
            } else if (char2 === "/") {
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
            } else if (char2 === ">") {
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.appendToTagName(char2);
            }
          },
          endTagName: function() {
            var char2 = this.consume();
            if (isSpace(char2)) {
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
              this.tagNameBuffer = "";
            } else if (char2 === "/") {
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
              this.tagNameBuffer = "";
            } else if (char2 === ">") {
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
              this.tagNameBuffer = "";
            } else {
              this.appendToTagName(char2);
            }
          },
          beforeAttributeName: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.consume();
              return;
            } else if (char2 === "/") {
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
              this.consume();
            } else if (char2 === ">") {
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else if (char2 === "=") {
              this.delegate.reportSyntaxError("attribute name cannot start with equals sign");
              this.transitionTo(
                "attributeName"
                /* attributeName */
              );
              this.delegate.beginAttribute();
              this.consume();
              this.delegate.appendToAttributeName(char2);
            } else {
              this.transitionTo(
                "attributeName"
                /* attributeName */
              );
              this.delegate.beginAttribute();
            }
          },
          attributeName: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.transitionTo(
                "afterAttributeName"
                /* afterAttributeName */
              );
              this.consume();
            } else if (char2 === "/") {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.consume();
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
            } else if (char2 === "=") {
              this.transitionTo(
                "beforeAttributeValue"
                /* beforeAttributeValue */
              );
              this.consume();
            } else if (char2 === ">") {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else if (char2 === '"' || char2 === "'" || char2 === "<") {
              this.delegate.reportSyntaxError(char2 + " is not a valid character within attribute names");
              this.consume();
              this.delegate.appendToAttributeName(char2);
            } else {
              this.consume();
              this.delegate.appendToAttributeName(char2);
            }
          },
          afterAttributeName: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.consume();
              return;
            } else if (char2 === "/") {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.consume();
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
            } else if (char2 === "=") {
              this.consume();
              this.transitionTo(
                "beforeAttributeValue"
                /* beforeAttributeValue */
              );
            } else if (char2 === ">") {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.transitionTo(
                "attributeName"
                /* attributeName */
              );
              this.delegate.beginAttribute();
              this.consume();
              this.delegate.appendToAttributeName(char2);
            }
          },
          beforeAttributeValue: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.consume();
            } else if (char2 === '"') {
              this.transitionTo(
                "attributeValueDoubleQuoted"
                /* attributeValueDoubleQuoted */
              );
              this.delegate.beginAttributeValue(true);
              this.consume();
            } else if (char2 === "'") {
              this.transitionTo(
                "attributeValueSingleQuoted"
                /* attributeValueSingleQuoted */
              );
              this.delegate.beginAttributeValue(true);
              this.consume();
            } else if (char2 === ">") {
              this.delegate.beginAttributeValue(false);
              this.delegate.finishAttributeValue();
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.transitionTo(
                "attributeValueUnquoted"
                /* attributeValueUnquoted */
              );
              this.delegate.beginAttributeValue(false);
              this.consume();
              this.delegate.appendToAttributeValue(char2);
            }
          },
          attributeValueDoubleQuoted: function() {
            var char2 = this.consume();
            if (char2 === '"') {
              this.delegate.finishAttributeValue();
              this.transitionTo(
                "afterAttributeValueQuoted"
                /* afterAttributeValueQuoted */
              );
            } else if (char2 === "&") {
              this.delegate.appendToAttributeValue(this.consumeCharRef() || "&");
            } else {
              this.delegate.appendToAttributeValue(char2);
            }
          },
          attributeValueSingleQuoted: function() {
            var char2 = this.consume();
            if (char2 === "'") {
              this.delegate.finishAttributeValue();
              this.transitionTo(
                "afterAttributeValueQuoted"
                /* afterAttributeValueQuoted */
              );
            } else if (char2 === "&") {
              this.delegate.appendToAttributeValue(this.consumeCharRef() || "&");
            } else {
              this.delegate.appendToAttributeValue(char2);
            }
          },
          attributeValueUnquoted: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.delegate.finishAttributeValue();
              this.consume();
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
            } else if (char2 === "/") {
              this.delegate.finishAttributeValue();
              this.consume();
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
            } else if (char2 === "&") {
              this.consume();
              this.delegate.appendToAttributeValue(this.consumeCharRef() || "&");
            } else if (char2 === ">") {
              this.delegate.finishAttributeValue();
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.consume();
              this.delegate.appendToAttributeValue(char2);
            }
          },
          afterAttributeValueQuoted: function() {
            var char2 = this.peek();
            if (isSpace(char2)) {
              this.consume();
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
            } else if (char2 === "/") {
              this.consume();
              this.transitionTo(
                "selfClosingStartTag"
                /* selfClosingStartTag */
              );
            } else if (char2 === ">") {
              this.consume();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
            }
          },
          selfClosingStartTag: function() {
            var char2 = this.peek();
            if (char2 === ">") {
              this.consume();
              this.delegate.markTagAsSelfClosing();
              this.delegate.finishTag();
              this.transitionTo(
                "beforeData"
                /* beforeData */
              );
            } else {
              this.transitionTo(
                "beforeAttributeName"
                /* beforeAttributeName */
              );
            }
          },
          endTagOpen: function() {
            var char2 = this.consume();
            if (char2 === "@" || char2 === ":" || isAlpha(char2)) {
              this.transitionTo(
                "endTagName"
                /* endTagName */
              );
              this.tagNameBuffer = "";
              this.delegate.beginEndTag();
              this.appendToTagName(char2);
            }
          }
        };
        this.reset();
      }
      EventedTokenizer2.prototype.reset = function() {
        this.transitionTo(
          "beforeData"
          /* beforeData */
        );
        this.input = "";
        this.tagNameBuffer = "";
        this.index = 0;
        this.line = 1;
        this.column = 0;
        this.delegate.reset();
      };
      EventedTokenizer2.prototype.transitionTo = function(state) {
        this.state = state;
      };
      EventedTokenizer2.prototype.tokenize = function(input) {
        this.reset();
        this.tokenizePart(input);
        this.tokenizeEOF();
      };
      EventedTokenizer2.prototype.tokenizePart = function(input) {
        this.input += preprocessInput(input);
        while (this.index < this.input.length) {
          var handler = this.states[this.state];
          if (handler !== void 0) {
            handler.call(this);
          } else {
            throw new Error("unhandled state " + this.state);
          }
        }
      };
      EventedTokenizer2.prototype.tokenizeEOF = function() {
        this.flushData();
      };
      EventedTokenizer2.prototype.flushData = function() {
        if (this.state === "data") {
          this.delegate.finishData();
          this.transitionTo(
            "beforeData"
            /* beforeData */
          );
        }
      };
      EventedTokenizer2.prototype.peek = function() {
        return this.input.charAt(this.index);
      };
      EventedTokenizer2.prototype.consume = function() {
        var char2 = this.peek();
        this.index++;
        if (char2 === "\n") {
          this.line++;
          this.column = 0;
        } else {
          this.column++;
        }
        return char2;
      };
      EventedTokenizer2.prototype.consumeCharRef = function() {
        var endIndex = this.input.indexOf(";", this.index);
        if (endIndex === -1) {
          return;
        }
        var entity = this.input.slice(this.index, endIndex);
        var chars2 = this.entityParser.parse(entity);
        if (chars2) {
          var count = entity.length;
          while (count) {
            this.consume();
            count--;
          }
          this.consume();
          return chars2;
        }
      };
      EventedTokenizer2.prototype.markTagStart = function() {
        this.delegate.tagOpen();
      };
      EventedTokenizer2.prototype.appendToTagName = function(char2) {
        this.tagNameBuffer += char2;
        this.delegate.appendToTagName(char2);
      };
      EventedTokenizer2.prototype.isIgnoredEndTag = function() {
        var tag = this.tagNameBuffer;
        return tag === "title" && this.input.substring(this.index, this.index + 8) !== "</title>" || tag === "style" && this.input.substring(this.index, this.index + 8) !== "</style>" || tag === "script" && this.input.substring(this.index, this.index + 9) !== "<\/script>";
      };
      return EventedTokenizer2;
    }()
  );
  var Tokenizer = (
    /** @class */
    function() {
      function Tokenizer2(entityParser, options) {
        if (options === void 0) {
          options = {};
        }
        this.options = options;
        this.token = null;
        this.startLine = 1;
        this.startColumn = 0;
        this.tokens = [];
        this.tokenizer = new EventedTokenizer(this, entityParser, options.mode);
        this._currentAttribute = void 0;
      }
      Tokenizer2.prototype.tokenize = function(input) {
        this.tokens = [];
        this.tokenizer.tokenize(input);
        return this.tokens;
      };
      Tokenizer2.prototype.tokenizePart = function(input) {
        this.tokens = [];
        this.tokenizer.tokenizePart(input);
        return this.tokens;
      };
      Tokenizer2.prototype.tokenizeEOF = function() {
        this.tokens = [];
        this.tokenizer.tokenizeEOF();
        return this.tokens[0];
      };
      Tokenizer2.prototype.reset = function() {
        this.token = null;
        this.startLine = 1;
        this.startColumn = 0;
      };
      Tokenizer2.prototype.current = function() {
        var token2 = this.token;
        if (token2 === null) {
          throw new Error("token was unexpectedly null");
        }
        if (arguments.length === 0) {
          return token2;
        }
        for (var i3 = 0; i3 < arguments.length; i3++) {
          if (token2.type === arguments[i3]) {
            return token2;
          }
        }
        throw new Error("token type was unexpectedly " + token2.type);
      };
      Tokenizer2.prototype.push = function(token2) {
        this.token = token2;
        this.tokens.push(token2);
      };
      Tokenizer2.prototype.currentAttribute = function() {
        return this._currentAttribute;
      };
      Tokenizer2.prototype.addLocInfo = function() {
        if (this.options.loc) {
          this.current().loc = {
            start: {
              line: this.startLine,
              column: this.startColumn
            },
            end: {
              line: this.tokenizer.line,
              column: this.tokenizer.column
            }
          };
        }
        this.startLine = this.tokenizer.line;
        this.startColumn = this.tokenizer.column;
      };
      Tokenizer2.prototype.beginDoctype = function() {
        this.push({
          type: "Doctype",
          name: ""
        });
      };
      Tokenizer2.prototype.appendToDoctypeName = function(char2) {
        this.current(
          "Doctype"
          /* Doctype */
        ).name += char2;
      };
      Tokenizer2.prototype.appendToDoctypePublicIdentifier = function(char2) {
        var doctype = this.current(
          "Doctype"
          /* Doctype */
        );
        if (doctype.publicIdentifier === void 0) {
          doctype.publicIdentifier = char2;
        } else {
          doctype.publicIdentifier += char2;
        }
      };
      Tokenizer2.prototype.appendToDoctypeSystemIdentifier = function(char2) {
        var doctype = this.current(
          "Doctype"
          /* Doctype */
        );
        if (doctype.systemIdentifier === void 0) {
          doctype.systemIdentifier = char2;
        } else {
          doctype.systemIdentifier += char2;
        }
      };
      Tokenizer2.prototype.endDoctype = function() {
        this.addLocInfo();
      };
      Tokenizer2.prototype.beginData = function() {
        this.push({
          type: "Chars",
          chars: ""
        });
      };
      Tokenizer2.prototype.appendToData = function(char2) {
        this.current(
          "Chars"
          /* Chars */
        ).chars += char2;
      };
      Tokenizer2.prototype.finishData = function() {
        this.addLocInfo();
      };
      Tokenizer2.prototype.beginComment = function() {
        this.push({
          type: "Comment",
          chars: ""
        });
      };
      Tokenizer2.prototype.appendToCommentData = function(char2) {
        this.current(
          "Comment"
          /* Comment */
        ).chars += char2;
      };
      Tokenizer2.prototype.finishComment = function() {
        this.addLocInfo();
      };
      Tokenizer2.prototype.tagOpen = function() {
      };
      Tokenizer2.prototype.beginStartTag = function() {
        this.push({
          type: "StartTag",
          tagName: "",
          attributes: [],
          selfClosing: false
        });
      };
      Tokenizer2.prototype.beginEndTag = function() {
        this.push({
          type: "EndTag",
          tagName: ""
        });
      };
      Tokenizer2.prototype.finishTag = function() {
        this.addLocInfo();
      };
      Tokenizer2.prototype.markTagAsSelfClosing = function() {
        this.current(
          "StartTag"
          /* StartTag */
        ).selfClosing = true;
      };
      Tokenizer2.prototype.appendToTagName = function(char2) {
        this.current(
          "StartTag",
          "EndTag"
          /* EndTag */
        ).tagName += char2;
      };
      Tokenizer2.prototype.beginAttribute = function() {
        this._currentAttribute = ["", "", false];
      };
      Tokenizer2.prototype.appendToAttributeName = function(char2) {
        this.currentAttribute()[0] += char2;
      };
      Tokenizer2.prototype.beginAttributeValue = function(isQuoted) {
        this.currentAttribute()[2] = isQuoted;
      };
      Tokenizer2.prototype.appendToAttributeValue = function(char2) {
        this.currentAttribute()[1] += char2;
      };
      Tokenizer2.prototype.finishAttributeValue = function() {
        this.current(
          "StartTag"
          /* StartTag */
        ).attributes.push(this._currentAttribute);
      };
      Tokenizer2.prototype.reportSyntaxError = function(message) {
        this.current().syntaxError = message;
      };
      return Tokenizer2;
    }()
  );

  // node_modules/@wordpress/blocks/build-module/api/validation/index.js
  var import_es6 = __toESM(require_es6());

  // node_modules/@wordpress/html-entities/build-module/index.js
  var _decodeTextArea;
  function decodeEntities(html2) {
    if ("string" !== typeof html2 || -1 === html2.indexOf("&")) {
      return html2;
    }
    if (void 0 === _decodeTextArea) {
      if (document.implementation && document.implementation.createHTMLDocument) {
        _decodeTextArea = document.implementation.createHTMLDocument("").createElement("textarea");
      } else {
        _decodeTextArea = document.createElement("textarea");
      }
    }
    _decodeTextArea.innerHTML = html2;
    const decoded = _decodeTextArea.textContent;
    _decodeTextArea.innerHTML = "";
    return (
      /** @type {string} */
      decoded
    );
  }

  // node_modules/@wordpress/blocks/build-module/api/validation/logger.js
  function createLogger() {
    function createLogHandler(logger) {
      let log2 = (message, ...args) => logger("Block validation: " + message, ...args);
      if (false) {
        log2 = (...args) => logger(null.format(...args));
      }
      return log2;
    }
    return {
      // eslint-disable-next-line no-console
      error: createLogHandler(console.error),
      // eslint-disable-next-line no-console
      warning: createLogHandler(console.warn),
      getItems() {
        return [];
      }
    };
  }
  function createQueuedLogger() {
    const queue = [];
    const logger = createLogger();
    return {
      error(...args) {
        queue.push({
          log: logger.error,
          args
        });
      },
      warning(...args) {
        queue.push({
          log: logger.warning,
          args
        });
      },
      getItems() {
        return queue;
      }
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/validation/index.js
  var identity = (x2) => x2;
  var REGEXP_WHITESPACE = /[\t\n\r\v\f ]+/g;
  var REGEXP_ONLY_WHITESPACE = /^[\t\n\r\v\f ]*$/;
  var REGEXP_STYLE_URL_TYPE = /^url\s*\(['"\s]*(.*?)['"\s]*\)$/;
  var BOOLEAN_ATTRIBUTES2 = ["allowfullscreen", "allowpaymentrequest", "allowusermedia", "async", "autofocus", "autoplay", "checked", "controls", "default", "defer", "disabled", "download", "formnovalidate", "hidden", "ismap", "itemscope", "loop", "multiple", "muted", "nomodule", "novalidate", "open", "playsinline", "readonly", "required", "reversed", "selected", "typemustmatch"];
  var ENUMERATED_ATTRIBUTES2 = ["autocapitalize", "autocomplete", "charset", "contenteditable", "crossorigin", "decoding", "dir", "draggable", "enctype", "formenctype", "formmethod", "http-equiv", "inputmode", "kind", "method", "preload", "scope", "shape", "spellcheck", "translate", "type", "wrap"];
  var MEANINGFUL_ATTRIBUTES = [...BOOLEAN_ATTRIBUTES2, ...ENUMERATED_ATTRIBUTES2];
  var TEXT_NORMALIZATIONS = [identity, getTextWithCollapsedWhitespace];
  var REGEXP_NAMED_CHARACTER_REFERENCE = /^[\da-z]+$/i;
  var REGEXP_DECIMAL_CHARACTER_REFERENCE = /^#\d+$/;
  var REGEXP_HEXADECIMAL_CHARACTER_REFERENCE = /^#x[\da-f]+$/i;
  function isValidCharacterReference(text2) {
    return REGEXP_NAMED_CHARACTER_REFERENCE.test(text2) || REGEXP_DECIMAL_CHARACTER_REFERENCE.test(text2) || REGEXP_HEXADECIMAL_CHARACTER_REFERENCE.test(text2);
  }
  var DecodeEntityParser = class {
    /**
     * Returns a substitute string for an entity string sequence between `&`
     * and `;`, or undefined if no substitution should occur.
     *
     * @param {string} entity Entity fragment discovered in HTML.
     *
     * @return {string | undefined} Entity substitute value.
     */
    parse(entity) {
      if (isValidCharacterReference(entity)) {
        return decodeEntities("&" + entity + ";");
      }
    }
  };
  function getTextPiecesSplitOnWhitespace(text2) {
    return text2.trim().split(REGEXP_WHITESPACE);
  }
  function getTextWithCollapsedWhitespace(text2) {
    return getTextPiecesSplitOnWhitespace(text2).join(" ");
  }
  function getMeaningfulAttributePairs(token2) {
    return token2.attributes.filter((pair) => {
      const [key, value] = pair;
      return value || key.indexOf("data-") === 0 || MEANINGFUL_ATTRIBUTES.includes(key);
    });
  }
  function isEquivalentTextTokens(actual, expected, logger = createLogger()) {
    let actualChars = actual.chars;
    let expectedChars = expected.chars;
    for (let i3 = 0; i3 < TEXT_NORMALIZATIONS.length; i3++) {
      const normalize2 = TEXT_NORMALIZATIONS[i3];
      actualChars = normalize2(actualChars);
      expectedChars = normalize2(expectedChars);
      if (actualChars === expectedChars) {
        return true;
      }
    }
    logger.warning("Expected text `%s`, saw `%s`.", expected.chars, actual.chars);
    return false;
  }
  function getNormalizedLength(value) {
    if (0 === parseFloat(value)) {
      return "0";
    }
    if (value.indexOf(".") === 0) {
      return "0" + value;
    }
    return value;
  }
  function getNormalizedStyleValue(value) {
    const textPieces = getTextPiecesSplitOnWhitespace(value);
    const normalizedPieces = textPieces.map(getNormalizedLength);
    const result = normalizedPieces.join(" ");
    return result.replace(REGEXP_STYLE_URL_TYPE, "url($1)");
  }
  function getStyleProperties(text2) {
    const pairs = text2.replace(/;?\s*$/, "").split(";").map((style) => {
      const [key, ...valueParts] = style.split(":");
      const value = valueParts.join(":");
      return [key.trim(), getNormalizedStyleValue(value.trim())];
    });
    return Object.fromEntries(pairs);
  }
  var isEqualAttributesOfName = {
    class: (actual, expected) => {
      const [actualPieces, expectedPieces] = [actual, expected].map(getTextPiecesSplitOnWhitespace);
      const actualDiff = actualPieces.filter((c6) => !expectedPieces.includes(c6));
      const expectedDiff = expectedPieces.filter((c6) => !actualPieces.includes(c6));
      return actualDiff.length === 0 && expectedDiff.length === 0;
    },
    style: (actual, expected) => {
      return (0, import_es6.default)(...[actual, expected].map(getStyleProperties));
    },
    // For each boolean attribute, mere presence of attribute in both is enough
    // to assume equivalence.
    ...Object.fromEntries(BOOLEAN_ATTRIBUTES2.map((attribute) => [attribute, () => true]))
  };
  function isEqualTagAttributePairs(actual, expected, logger = createLogger()) {
    if (actual.length !== expected.length) {
      logger.warning("Expected attributes %o, instead saw %o.", expected, actual);
      return false;
    }
    const expectedAttributes = {};
    for (let i3 = 0; i3 < expected.length; i3++) {
      expectedAttributes[expected[i3][0].toLowerCase()] = expected[i3][1];
    }
    for (let i3 = 0; i3 < actual.length; i3++) {
      const [name, actualValue] = actual[i3];
      const nameLower = name.toLowerCase();
      if (!expectedAttributes.hasOwnProperty(nameLower)) {
        logger.warning("Encountered unexpected attribute `%s`.", name);
        return false;
      }
      const expectedValue = expectedAttributes[nameLower];
      const isEqualAttributes = isEqualAttributesOfName[nameLower];
      if (isEqualAttributes) {
        if (!isEqualAttributes(actualValue, expectedValue)) {
          logger.warning("Expected attribute `%s` of value `%s`, saw `%s`.", name, expectedValue, actualValue);
          return false;
        }
      } else if (actualValue !== expectedValue) {
        logger.warning("Expected attribute `%s` of value `%s`, saw `%s`.", name, expectedValue, actualValue);
        return false;
      }
    }
    return true;
  }
  var isEqualTokensOfType = {
    StartTag: (actual, expected, logger = createLogger()) => {
      if (actual.tagName !== expected.tagName && // Optimization: Use short-circuit evaluation to defer case-
      // insensitive check on the assumption that the majority case will
      // have exactly equal tag names.
      actual.tagName.toLowerCase() !== expected.tagName.toLowerCase()) {
        logger.warning("Expected tag name `%s`, instead saw `%s`.", expected.tagName, actual.tagName);
        return false;
      }
      return isEqualTagAttributePairs(...[actual, expected].map(getMeaningfulAttributePairs), logger);
    },
    Chars: isEquivalentTextTokens,
    Comment: isEquivalentTextTokens
  };
  function getNextNonWhitespaceToken(tokens) {
    let token2;
    while (token2 = tokens.shift()) {
      if (token2.type !== "Chars") {
        return token2;
      }
      if (!REGEXP_ONLY_WHITESPACE.test(token2.chars)) {
        return token2;
      }
    }
  }
  function getHTMLTokens(html2, logger = createLogger()) {
    try {
      return new Tokenizer(new DecodeEntityParser()).tokenize(html2);
    } catch (e3) {
      logger.warning("Malformed HTML detected: %s", html2);
    }
    return null;
  }
  function isClosedByToken(currentToken, nextToken2) {
    if (!currentToken.selfClosing) {
      return false;
    }
    if (nextToken2 && nextToken2.tagName === currentToken.tagName && nextToken2.type === "EndTag") {
      return true;
    }
    return false;
  }
  function isEquivalentHTML(actual, expected, logger = createLogger()) {
    if (actual === expected) {
      return true;
    }
    const [actualTokens, expectedTokens] = [actual, expected].map((html2) => getHTMLTokens(html2, logger));
    if (!actualTokens || !expectedTokens) {
      return false;
    }
    let actualToken, expectedToken;
    while (actualToken = getNextNonWhitespaceToken(actualTokens)) {
      expectedToken = getNextNonWhitespaceToken(expectedTokens);
      if (!expectedToken) {
        logger.warning("Expected end of content, instead saw %o.", actualToken);
        return false;
      }
      if (actualToken.type !== expectedToken.type) {
        logger.warning("Expected token of type `%s` (%o), instead saw `%s` (%o).", expectedToken.type, expectedToken, actualToken.type, actualToken);
        return false;
      }
      const isEqualTokens = isEqualTokensOfType[actualToken.type];
      if (isEqualTokens && !isEqualTokens(actualToken, expectedToken, logger)) {
        return false;
      }
      if (isClosedByToken(actualToken, expectedTokens[0])) {
        getNextNonWhitespaceToken(expectedTokens);
      } else if (isClosedByToken(expectedToken, actualTokens[0])) {
        getNextNonWhitespaceToken(actualTokens);
      }
    }
    if (expectedToken = getNextNonWhitespaceToken(expectedTokens)) {
      logger.warning("Expected %o, instead saw end of content.", expectedToken);
      return false;
    }
    return true;
  }
  function validateBlock(block3, blockTypeOrName = block3.name) {
    const isFallbackBlock = block3.name === getFreeformContentHandlerName() || block3.name === getUnregisteredTypeHandlerName();
    if (isFallbackBlock) {
      return [true, []];
    }
    const logger = createQueuedLogger();
    const blockType = normalizeBlockType(blockTypeOrName);
    let generatedBlockContent;
    try {
      generatedBlockContent = getSaveContent(blockType, block3.attributes);
    } catch (error2) {
      logger.error("Block validation failed because an error occurred while generating block content:\n\n%s", error2.toString());
      return [false, logger.getItems()];
    }
    const isValid = isEquivalentHTML(block3.originalContent, generatedBlockContent, logger);
    if (!isValid) {
      logger.error("Block validation failed for `%s` (%o).\n\nContent generated by `save` function:\n\n%s\n\nContent retrieved from post body:\n\n%s", blockType.name, blockType, generatedBlockContent, block3.originalContent);
    }
    return [isValid, logger.getItems()];
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/convert-legacy-block.js
  function convertLegacyBlockNameAndAttributes(name, attributes) {
    const newAttributes = {
      ...attributes
    };
    if ("core/cover-image" === name) {
      name = "core/cover";
    }
    if ("core/text" === name || "core/cover-text" === name) {
      name = "core/paragraph";
    }
    if (name && name.indexOf("core/social-link-") === 0) {
      newAttributes.service = name.substring(17);
      name = "core/social-link";
    }
    if (name && name.indexOf("core-embed/") === 0) {
      const providerSlug = name.substring(11);
      const deprecated2 = {
        speaker: "speaker-deck",
        polldaddy: "crowdsignal"
      };
      newAttributes.providerNameSlug = providerSlug in deprecated2 ? deprecated2[providerSlug] : providerSlug;
      if (!["amazon-kindle", "wordpress"].includes(providerSlug)) {
        newAttributes.responsive = true;
      }
      name = "core/embed";
    }
    if (name === "core/post-comment-author") {
      name = "core/comment-author-name";
    }
    if (name === "core/post-comment-content") {
      name = "core/comment-content";
    }
    if (name === "core/post-comment-date") {
      name = "core/comment-date";
    }
    if (name === "core/comments-query-loop") {
      name = "core/comments";
      const {
        className = ""
      } = newAttributes;
      if (!className.includes("wp-block-comments-query-loop")) {
        newAttributes.className = ["wp-block-comments-query-loop", className].join(" ");
      }
    }
    if (name === "core/post-comments") {
      name = "core/comments";
      newAttributes.legacy = true;
    }
    if (globalThis.IS_GUTENBERG_PLUGIN) {
      if (newAttributes.metadata?.bindings && (name === "core/paragraph" || name === "core/heading" || name === "core/image" || name === "core/button") && newAttributes.metadata.bindings.__default?.source !== "core/pattern-overrides") {
        const bindings = ["content", "url", "title", "id", "alt", "text", "linkTarget"];
        let hasPatternOverrides = false;
        bindings.forEach((binding) => {
          if (newAttributes.metadata.bindings[binding]?.source === "core/pattern-overrides") {
            hasPatternOverrides = true;
            newAttributes.metadata = {
              ...newAttributes.metadata,
              bindings: {
                ...newAttributes.metadata.bindings
              }
            };
            delete newAttributes.metadata.bindings[binding];
          }
        });
        if (hasPatternOverrides) {
          newAttributes.metadata.bindings.__default = {
            source: "core/pattern-overrides"
          };
        }
      }
    }
    return [name, newAttributes];
  }

  // node_modules/hpq/es/get-path.js
  function getPath(object, path) {
    var segments = path.split(".");
    var segment;
    while (segment = segments.shift()) {
      if (!(segment in object)) {
        return;
      }
      object = object[segment];
    }
    return object;
  }

  // node_modules/hpq/es/index.js
  var getDocument = /* @__PURE__ */ function() {
    var doc;
    return function() {
      if (!doc) {
        doc = document.implementation.createHTMLDocument("");
      }
      return doc;
    };
  }();
  function parse2(source, matchers) {
    if (!matchers) {
      return;
    }
    if ("string" === typeof source) {
      var doc = getDocument();
      doc.body.innerHTML = source;
      source = doc.body;
    }
    if (typeof matchers === "function") {
      return matchers(source);
    }
    if (Object !== matchers.constructor) {
      return;
    }
    return Object.keys(matchers).reduce(function(memo4, key) {
      var inner = matchers[key];
      memo4[key] = parse2(source, inner);
      return memo4;
    }, {});
  }
  function prop(arg1, arg2) {
    var name;
    var selector2;
    if (1 === arguments.length) {
      name = arg1;
      selector2 = void 0;
    } else {
      name = arg2;
      selector2 = arg1;
    }
    return function(node2) {
      var match2 = node2;
      if (selector2) {
        match2 = node2.querySelector(selector2);
      }
      if (match2) {
        return getPath(match2, name);
      }
    };
  }
  function attr(arg1, arg2) {
    var name;
    var selector2;
    if (1 === arguments.length) {
      name = arg1;
      selector2 = void 0;
    } else {
      name = arg2;
      selector2 = arg1;
    }
    return function(node2) {
      var attributes = prop(selector2, "attributes")(node2);
      if (attributes && Object.prototype.hasOwnProperty.call(attributes, name)) {
        return attributes[name].value;
      }
    };
  }
  function text(selector2) {
    return prop(selector2, "textContent");
  }
  function query(selector2, matchers) {
    return function(node2) {
      var matches2 = node2.querySelectorAll(selector2);
      return [].map.call(matches2, function(match2) {
        return parse2(match2, matchers);
      });
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/children.js
  function getSerializeCapableElement(children) {
    return children;
  }
  function getChildrenArray(children) {
    deprecated("wp.blocks.children.getChildrenArray", {
      since: "6.1",
      version: "6.3",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    return children;
  }
  function concat(...blockNodes) {
    deprecated("wp.blocks.children.concat", {
      since: "6.1",
      version: "6.3",
      alternative: "wp.richText.concat",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    const result = [];
    for (let i3 = 0; i3 < blockNodes.length; i3++) {
      const blockNode = Array.isArray(blockNodes[i3]) ? blockNodes[i3] : [blockNodes[i3]];
      for (let j2 = 0; j2 < blockNode.length; j2++) {
        const child = blockNode[j2];
        const canConcatToPreviousString = typeof child === "string" && typeof result[result.length - 1] === "string";
        if (canConcatToPreviousString) {
          result[result.length - 1] += child;
        } else {
          result.push(child);
        }
      }
    }
    return result;
  }
  function fromDOM2(domNodes) {
    deprecated("wp.blocks.children.fromDOM", {
      since: "6.1",
      version: "6.3",
      alternative: "wp.richText.create",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    const result = [];
    for (let i3 = 0; i3 < domNodes.length; i3++) {
      try {
        result.push(fromDOM(domNodes[i3]));
      } catch (error2) {
      }
    }
    return result;
  }
  function toHTML(children) {
    deprecated("wp.blocks.children.toHTML", {
      since: "6.1",
      version: "6.3",
      alternative: "wp.richText.toHTMLString",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    const element = getSerializeCapableElement(children);
    return serialize_default(element);
  }
  function matcher(selector2) {
    deprecated("wp.blocks.children.matcher", {
      since: "6.1",
      version: "6.3",
      alternative: "html source",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    return (domNode) => {
      let match2 = domNode;
      if (selector2) {
        match2 = domNode.querySelector(selector2);
      }
      if (match2) {
        return fromDOM2(match2.childNodes);
      }
      return [];
    };
  }
  var children_default = {
    concat,
    getChildrenArray,
    fromDOM: fromDOM2,
    toHTML,
    matcher
  };

  // node_modules/@wordpress/blocks/build-module/api/node.js
  function getNamedNodeMapAsObject(nodeMap) {
    const result = {};
    for (let i3 = 0; i3 < nodeMap.length; i3++) {
      const {
        name,
        value
      } = nodeMap[i3];
      result[name] = value;
    }
    return result;
  }
  function fromDOM(domNode) {
    deprecated("wp.blocks.node.fromDOM", {
      since: "6.1",
      version: "6.3",
      alternative: "wp.richText.create",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    if (domNode.nodeType === domNode.TEXT_NODE) {
      return domNode.nodeValue;
    }
    if (domNode.nodeType !== domNode.ELEMENT_NODE) {
      throw new TypeError("A block node can only be created from a node of type text or element.");
    }
    return {
      type: domNode.nodeName.toLowerCase(),
      props: {
        ...getNamedNodeMapAsObject(domNode.attributes),
        children: fromDOM2(domNode.childNodes)
      }
    };
  }
  function matcher2(selector2) {
    deprecated("wp.blocks.node.matcher", {
      since: "6.1",
      version: "6.3",
      alternative: "html source",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
    });
    return (domNode) => {
      let match2 = domNode;
      if (selector2) {
        match2 = domNode.querySelector(selector2);
      }
      try {
        return fromDOM(match2);
      } catch (error2) {
        return null;
      }
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/matchers.js
  function html(selector2, multilineTag) {
    return (domNode) => {
      let match2 = domNode;
      if (selector2) {
        match2 = domNode.querySelector(selector2);
      }
      if (!match2) {
        return "";
      }
      if (multilineTag) {
        let value = "";
        const length2 = match2.children.length;
        for (let index2 = 0; index2 < length2; index2++) {
          const child = match2.children[index2];
          if (child.nodeName.toLowerCase() !== multilineTag) {
            continue;
          }
          value += child.outerHTML;
        }
        return value;
      }
      return match2.innerHTML;
    };
  }
  var richText = (selector2, preserveWhiteSpace) => (el) => {
    const target = selector2 ? el.querySelector(selector2) : el;
    return target ? RichTextData.fromHTMLElement(target, {
      preserveWhiteSpace
    }) : RichTextData.empty();
  };

  // node_modules/@wordpress/blocks/build-module/api/parser/get-block-attributes.js
  var toBooleanAttributeMatcher = (matcher3) => (value) => matcher3(value) !== void 0;
  function isOfType(value, type) {
    switch (type) {
      case "rich-text":
        return value instanceof RichTextData;
      case "string":
        return typeof value === "string";
      case "boolean":
        return typeof value === "boolean";
      case "object":
        return !!value && value.constructor === Object;
      case "null":
        return value === null;
      case "array":
        return Array.isArray(value);
      case "integer":
      case "number":
        return typeof value === "number";
    }
    return true;
  }
  function isOfTypes(value, types) {
    return types.some((type) => isOfType(value, type));
  }
  function getBlockAttribute(attributeKey, attributeSchema, innerDOM, commentAttributes, innerHTML) {
    let value;
    switch (attributeSchema.source) {
      // An undefined source means that it's an attribute serialized to the
      // block's "comment".
      case void 0:
        value = commentAttributes ? commentAttributes[attributeKey] : void 0;
        break;
      // raw source means that it's the original raw block content.
      case "raw":
        value = innerHTML;
        break;
      case "attribute":
      case "property":
      case "html":
      case "text":
      case "rich-text":
      case "children":
      case "node":
      case "query":
      case "tag":
        value = parseWithAttributeSchema(innerDOM, attributeSchema);
        break;
    }
    if (!isValidByType(value, attributeSchema.type) || !isValidByEnum(value, attributeSchema.enum)) {
      value = void 0;
    }
    if (value === void 0) {
      value = getDefault(attributeSchema);
    }
    return value;
  }
  function isValidByType(value, type) {
    return type === void 0 || isOfTypes(value, Array.isArray(type) ? type : [type]);
  }
  function isValidByEnum(value, enumSet) {
    return !Array.isArray(enumSet) || enumSet.includes(value);
  }
  var matcherFromSource = memize((sourceConfig) => {
    switch (sourceConfig.source) {
      case "attribute": {
        let matcher3 = attr(sourceConfig.selector, sourceConfig.attribute);
        if (sourceConfig.type === "boolean") {
          matcher3 = toBooleanAttributeMatcher(matcher3);
        }
        return matcher3;
      }
      case "html":
        return html(sourceConfig.selector, sourceConfig.multiline);
      case "text":
        return text(sourceConfig.selector);
      case "rich-text":
        return richText(sourceConfig.selector, sourceConfig.__unstablePreserveWhiteSpace);
      case "children":
        return matcher(sourceConfig.selector);
      case "node":
        return matcher2(sourceConfig.selector);
      case "query":
        const subMatchers = Object.fromEntries(Object.entries(sourceConfig.query).map(([key, subSourceConfig]) => [key, matcherFromSource(subSourceConfig)]));
        return query(sourceConfig.selector, subMatchers);
      case "tag": {
        const matcher3 = prop(sourceConfig.selector, "nodeName");
        return (domNode) => matcher3(domNode)?.toLowerCase();
      }
      default:
        console.error(`Unknown source type "${sourceConfig.source}"`);
    }
  });
  function parseHtml(innerHTML) {
    return parse2(innerHTML, (h2) => h2);
  }
  function parseWithAttributeSchema(innerHTML, attributeSchema) {
    return matcherFromSource(attributeSchema)(parseHtml(innerHTML));
  }
  function getBlockAttributes(blockTypeOrName, innerHTML, attributes = {}) {
    var _blockType$attributes;
    const doc = parseHtml(innerHTML);
    const blockType = normalizeBlockType(blockTypeOrName);
    const blockAttributes = Object.fromEntries(Object.entries((_blockType$attributes = blockType.attributes) !== null && _blockType$attributes !== void 0 ? _blockType$attributes : {}).map(([key, schema]) => [key, getBlockAttribute(key, schema, doc, attributes, innerHTML)]));
    return applyFilters("blocks.getBlockAttributes", blockAttributes, blockType, innerHTML, attributes);
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/fix-custom-classname.js
  var CLASS_ATTR_SCHEMA = {
    type: "string",
    source: "attribute",
    selector: "[data-custom-class-name] > *",
    attribute: "class"
  };
  function getHTMLRootElementClasses(innerHTML) {
    const parsed = parseWithAttributeSchema(`<div data-custom-class-name>${innerHTML}</div>`, CLASS_ATTR_SCHEMA);
    return parsed ? parsed.trim().split(/\s+/) : [];
  }
  function fixCustomClassname(blockAttributes, blockType, innerHTML) {
    if (hasBlockSupport(blockType, "customClassName", true)) {
      const {
        className: omittedClassName,
        ...attributesSansClassName
      } = blockAttributes;
      const serialized = getSaveContent(blockType, attributesSansClassName);
      const defaultClasses = getHTMLRootElementClasses(serialized);
      const actualClasses = getHTMLRootElementClasses(innerHTML);
      const customClasses = actualClasses.filter((className) => !defaultClasses.includes(className));
      if (customClasses.length) {
        blockAttributes.className = customClasses.join(" ");
      } else if (serialized) {
        delete blockAttributes.className;
      }
    }
    return blockAttributes;
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/apply-built-in-validation-fixes.js
  function applyBuiltInValidationFixes(block3, blockType) {
    const updatedBlockAttributes = fixCustomClassname(block3.attributes, blockType, block3.originalContent);
    return {
      ...block3,
      attributes: updatedBlockAttributes
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/apply-block-deprecated-versions.js
  function stubFalse() {
    return false;
  }
  function applyBlockDeprecatedVersions(block3, rawBlock, blockType) {
    const parsedAttributes = rawBlock.attrs;
    const {
      deprecated: deprecatedDefinitions
    } = blockType;
    if (!deprecatedDefinitions || !deprecatedDefinitions.length) {
      return block3;
    }
    for (let i3 = 0; i3 < deprecatedDefinitions.length; i3++) {
      const {
        isEligible = stubFalse
      } = deprecatedDefinitions[i3];
      if (block3.isValid && !isEligible(parsedAttributes, block3.innerBlocks, {
        blockNode: rawBlock,
        block: block3
      })) {
        continue;
      }
      const deprecatedBlockType = Object.assign(omit(blockType, DEPRECATED_ENTRY_KEYS), deprecatedDefinitions[i3]);
      let migratedBlock = {
        ...block3,
        attributes: getBlockAttributes(deprecatedBlockType, block3.originalContent, parsedAttributes)
      };
      let [isValid] = validateBlock(migratedBlock, deprecatedBlockType);
      if (!isValid) {
        migratedBlock = applyBuiltInValidationFixes(migratedBlock, deprecatedBlockType);
        [isValid] = validateBlock(migratedBlock, deprecatedBlockType);
      }
      if (!isValid) {
        continue;
      }
      let migratedInnerBlocks = migratedBlock.innerBlocks;
      let migratedAttributes = migratedBlock.attributes;
      const {
        migrate
      } = deprecatedBlockType;
      if (migrate) {
        let migrated = migrate(migratedAttributes, block3.innerBlocks);
        if (!Array.isArray(migrated)) {
          migrated = [migrated];
        }
        [migratedAttributes = parsedAttributes, migratedInnerBlocks = block3.innerBlocks] = migrated;
      }
      block3 = {
        ...block3,
        attributes: migratedAttributes,
        innerBlocks: migratedInnerBlocks,
        isValid: true,
        validationIssues: []
      };
    }
    return block3;
  }

  // node_modules/@wordpress/blocks/build-module/api/parser/index.js
  function convertLegacyBlocks(rawBlock) {
    const [correctName, correctedAttributes] = convertLegacyBlockNameAndAttributes(rawBlock.blockName, rawBlock.attrs);
    return {
      ...rawBlock,
      blockName: correctName,
      attrs: correctedAttributes
    };
  }
  function normalizeRawBlock(rawBlock, options) {
    const fallbackBlockName = getFreeformContentHandlerName();
    const rawBlockName = rawBlock.blockName || getFreeformContentHandlerName();
    const rawAttributes = rawBlock.attrs || {};
    const rawInnerBlocks = rawBlock.innerBlocks || [];
    let rawInnerHTML = rawBlock.innerHTML.trim();
    if (rawBlockName === fallbackBlockName && rawBlockName === "core/freeform" && !options?.__unstableSkipAutop) {
      rawInnerHTML = autop(rawInnerHTML).trim();
    }
    return {
      ...rawBlock,
      blockName: rawBlockName,
      attrs: rawAttributes,
      innerHTML: rawInnerHTML,
      innerBlocks: rawInnerBlocks
    };
  }
  function createMissingBlockType(rawBlock) {
    const unregisteredFallbackBlock = getUnregisteredTypeHandlerName() || getFreeformContentHandlerName();
    const originalUndelimitedContent = serializeRawBlock(rawBlock, {
      isCommentDelimited: false
    });
    const originalContent = serializeRawBlock(rawBlock, {
      isCommentDelimited: true
    });
    return {
      blockName: unregisteredFallbackBlock,
      attrs: {
        originalName: rawBlock.blockName,
        originalContent,
        originalUndelimitedContent
      },
      innerHTML: rawBlock.blockName ? originalContent : rawBlock.innerHTML,
      innerBlocks: rawBlock.innerBlocks,
      innerContent: rawBlock.innerContent
    };
  }
  function applyBlockValidation(unvalidatedBlock, blockType) {
    const [isValid] = validateBlock(unvalidatedBlock, blockType);
    if (isValid) {
      return {
        ...unvalidatedBlock,
        isValid,
        validationIssues: []
      };
    }
    const fixedBlock = applyBuiltInValidationFixes(unvalidatedBlock, blockType);
    const [isFixedValid, validationIssues] = validateBlock(unvalidatedBlock, blockType);
    return {
      ...fixedBlock,
      isValid: isFixedValid,
      validationIssues
    };
  }
  function parseRawBlock(rawBlock, options) {
    let normalizedBlock = normalizeRawBlock(rawBlock, options);
    normalizedBlock = convertLegacyBlocks(normalizedBlock);
    let blockType = getBlockType(normalizedBlock.blockName);
    if (!blockType) {
      normalizedBlock = createMissingBlockType(normalizedBlock);
      blockType = getBlockType(normalizedBlock.blockName);
    }
    const isFallbackBlock = normalizedBlock.blockName === getFreeformContentHandlerName() || normalizedBlock.blockName === getUnregisteredTypeHandlerName();
    if (!blockType || !normalizedBlock.innerHTML && isFallbackBlock) {
      return;
    }
    const parsedInnerBlocks = normalizedBlock.innerBlocks.map((innerBlock) => parseRawBlock(innerBlock, options)).filter((innerBlock) => !!innerBlock);
    const parsedBlock = createBlock(normalizedBlock.blockName, getBlockAttributes(blockType, normalizedBlock.innerHTML, normalizedBlock.attrs), parsedInnerBlocks);
    parsedBlock.originalContent = normalizedBlock.innerHTML;
    const validatedBlock = applyBlockValidation(parsedBlock, blockType);
    const {
      validationIssues
    } = validatedBlock;
    const updatedBlock = applyBlockDeprecatedVersions(validatedBlock, normalizedBlock, blockType);
    if (!updatedBlock.isValid) {
      updatedBlock.__unstableBlockSource = rawBlock;
    }
    if (!validatedBlock.isValid && updatedBlock.isValid && !options?.__unstableSkipMigrationLogs) {
      console.groupCollapsed("Updated Block: %s", blockType.name);
      console.info("Block successfully updated for `%s` (%o).\n\nNew content generated by `save` function:\n\n%s\n\nContent retrieved from post body:\n\n%s", blockType.name, blockType, getSaveContent(blockType, updatedBlock.attributes), updatedBlock.originalContent);
      console.groupEnd();
    } else if (!validatedBlock.isValid && !updatedBlock.isValid) {
      validationIssues.forEach(({
        log: log2,
        args
      }) => log2(...args));
    }
    return updatedBlock;
  }
  function parse3(content, options) {
    return parse(content).reduce((accumulator, rawBlock) => {
      const block3 = parseRawBlock(rawBlock, options);
      if (block3) {
        accumulator.push(block3);
      }
      return accumulator;
    }, []);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/get-raw-transforms.js
  function getRawTransforms() {
    return getBlockTransforms("from").filter(({
      type
    }) => type === "raw").map((transform) => {
      return transform.isMatch ? transform : {
        ...transform,
        isMatch: (node2) => transform.selector && node2.matches(transform.selector)
      };
    });
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/html-to-blocks.js
  function htmlToBlocks(html2, handler) {
    const doc = document.implementation.createHTMLDocument("");
    doc.body.innerHTML = html2;
    return Array.from(doc.body.children).flatMap((node2) => {
      const rawTransform = findTransform(getRawTransforms(), ({
        isMatch
      }) => isMatch(node2));
      if (!rawTransform) {
        if (platform_default.isNative) {
          return parse3(`<!-- wp:html -->${node2.outerHTML}<!-- /wp:html -->`);
        }
        return createBlock(
          // Should not be hardcoded.
          "core/html",
          getBlockAttributes("core/html", node2.outerHTML)
        );
      }
      const {
        transform,
        blockName
      } = rawTransform;
      if (transform) {
        const block3 = transform(node2, handler);
        if (node2.hasAttribute("class")) {
          block3.attributes.className = node2.getAttribute("class");
        }
        return block3;
      }
      return createBlock(blockName, getBlockAttributes(blockName, node2.outerHTML));
    });
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/normalise-blocks.js
  function normaliseBlocks(HTML, options = {}) {
    const decuDoc = document.implementation.createHTMLDocument("");
    const accuDoc = document.implementation.createHTMLDocument("");
    const decu = decuDoc.body;
    const accu = accuDoc.body;
    decu.innerHTML = HTML;
    while (decu.firstChild) {
      const node2 = decu.firstChild;
      if (node2.nodeType === node2.TEXT_NODE) {
        if (isEmpty(node2)) {
          decu.removeChild(node2);
        } else {
          if (!accu.lastChild || accu.lastChild.nodeName !== "P") {
            accu.appendChild(accuDoc.createElement("P"));
          }
          accu.lastChild.appendChild(node2);
        }
      } else if (node2.nodeType === node2.ELEMENT_NODE) {
        if (node2.nodeName === "BR") {
          if (node2.nextSibling && node2.nextSibling.nodeName === "BR") {
            accu.appendChild(accuDoc.createElement("P"));
            decu.removeChild(node2.nextSibling);
          }
          if (accu.lastChild && accu.lastChild.nodeName === "P" && accu.lastChild.hasChildNodes()) {
            accu.lastChild.appendChild(node2);
          } else {
            decu.removeChild(node2);
          }
        } else if (node2.nodeName === "P") {
          if (isEmpty(node2) && !options.raw) {
            decu.removeChild(node2);
          } else {
            accu.appendChild(node2);
          }
        } else if (isPhrasingContent(node2)) {
          if (!accu.lastChild || accu.lastChild.nodeName !== "P") {
            accu.appendChild(accuDoc.createElement("P"));
          }
          accu.lastChild.appendChild(node2);
        } else {
          accu.appendChild(node2);
        }
      } else {
        decu.removeChild(node2);
      }
    }
    return accu.innerHTML;
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/special-comment-converter.js
  function specialCommentConverter(node2, doc) {
    if (node2.nodeType !== node2.COMMENT_NODE) {
      return;
    }
    if (node2.nodeValue !== "nextpage" && node2.nodeValue.indexOf("more") !== 0) {
      return;
    }
    const block3 = createBlock2(node2, doc);
    if (!node2.parentNode || node2.parentNode.nodeName !== "P") {
      replace2(node2, block3);
    } else {
      const childNodes = Array.from(node2.parentNode.childNodes);
      const nodeIndex = childNodes.indexOf(node2);
      const wrapperNode = node2.parentNode.parentNode || doc.body;
      const paragraphBuilder = (acc, child) => {
        if (!acc) {
          acc = doc.createElement("p");
        }
        acc.appendChild(child);
        return acc;
      };
      [childNodes.slice(0, nodeIndex).reduce(paragraphBuilder, null), block3, childNodes.slice(nodeIndex + 1).reduce(paragraphBuilder, null)].forEach((element) => element && wrapperNode.insertBefore(element, node2.parentNode));
      remove(node2.parentNode);
    }
  }
  function createBlock2(commentNode, doc) {
    if (commentNode.nodeValue === "nextpage") {
      return createNextpage(doc);
    }
    const customText = commentNode.nodeValue.slice(4).trim();
    let sibling = commentNode;
    let noTeaser = false;
    while (sibling = sibling.nextSibling) {
      if (sibling.nodeType === sibling.COMMENT_NODE && sibling.nodeValue === "noteaser") {
        noTeaser = true;
        remove(sibling);
        break;
      }
    }
    return createMore(customText, noTeaser, doc);
  }
  function createMore(customText, noTeaser, doc) {
    const node2 = doc.createElement("wp-block");
    node2.dataset.block = "core/more";
    if (customText) {
      node2.dataset.customText = customText;
    }
    if (noTeaser) {
      node2.dataset.noTeaser = "";
    }
    return node2;
  }
  function createNextpage(doc) {
    const node2 = doc.createElement("wp-block");
    node2.dataset.block = "core/nextpage";
    return node2;
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/list-reducer.js
  function isList(node2) {
    return node2.nodeName === "OL" || node2.nodeName === "UL";
  }
  function shallowTextContent(element) {
    return Array.from(element.childNodes).map(({
      nodeValue = ""
    }) => nodeValue).join("");
  }
  function listReducer(node2) {
    if (!isList(node2)) {
      return;
    }
    const list = node2;
    const prevElement = node2.previousElementSibling;
    if (prevElement && prevElement.nodeName === node2.nodeName && list.children.length === 1) {
      while (list.firstChild) {
        prevElement.appendChild(list.firstChild);
      }
      list.parentNode.removeChild(list);
    }
    const parentElement = node2.parentNode;
    if (parentElement && parentElement.nodeName === "LI" && parentElement.children.length === 1 && !/\S/.test(shallowTextContent(parentElement))) {
      const parentListItem = parentElement;
      const prevListItem = parentListItem.previousElementSibling;
      const parentList = parentListItem.parentNode;
      if (prevListItem) {
        prevListItem.appendChild(list);
        parentList.removeChild(parentListItem);
      } else {
        parentList.parentNode.insertBefore(list, parentList);
        parentList.parentNode.removeChild(parentList);
      }
    }
    if (parentElement && isList(parentElement)) {
      const prevListItem = node2.previousElementSibling;
      if (prevListItem) {
        prevListItem.appendChild(node2);
      } else {
        unwrap(node2);
      }
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/blockquote-normaliser.js
  function blockquoteNormaliser(options) {
    return (node2) => {
      if (node2.nodeName !== "BLOCKQUOTE") {
        return;
      }
      node2.innerHTML = normaliseBlocks(node2.innerHTML, options);
    };
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/figure-content-reducer.js
  function isFigureContent(node2, schema) {
    var _schema$figure$childr;
    const tag = node2.nodeName.toLowerCase();
    if (tag === "figcaption" || isTextContent(node2)) {
      return false;
    }
    return tag in ((_schema$figure$childr = schema?.figure?.children) !== null && _schema$figure$childr !== void 0 ? _schema$figure$childr : {});
  }
  function canHaveAnchor(node2, schema) {
    var _schema$figure$childr2;
    const tag = node2.nodeName.toLowerCase();
    return tag in ((_schema$figure$childr2 = schema?.figure?.children?.a?.children) !== null && _schema$figure$childr2 !== void 0 ? _schema$figure$childr2 : {});
  }
  function wrapFigureContent(element, beforeElement = element) {
    const figure = element.ownerDocument.createElement("figure");
    beforeElement.parentNode.insertBefore(figure, beforeElement);
    figure.appendChild(element);
  }
  function figureContentReducer(node2, doc, schema) {
    if (!isFigureContent(node2, schema)) {
      return;
    }
    let nodeToInsert = node2;
    const parentNode = node2.parentNode;
    if (canHaveAnchor(node2, schema) && parentNode.nodeName === "A" && parentNode.childNodes.length === 1) {
      nodeToInsert = node2.parentNode;
    }
    const wrapper = nodeToInsert.closest("p,div");
    if (wrapper) {
      if (!node2.classList) {
        wrapFigureContent(nodeToInsert, wrapper);
      } else if (node2.classList.contains("alignright") || node2.classList.contains("alignleft") || node2.classList.contains("aligncenter") || !wrapper.textContent.trim()) {
        wrapFigureContent(nodeToInsert, wrapper);
      }
    } else if (nodeToInsert.parentNode.nodeName === "BODY") {
      wrapFigureContent(nodeToInsert);
    }
  }

  // node_modules/@wordpress/shortcode/build-module/index.js
  function next(tag, text2, index2 = 0) {
    const re = regexp(tag);
    re.lastIndex = index2;
    const match2 = re.exec(text2);
    if (!match2) {
      return;
    }
    if ("[" === match2[1] && "]" === match2[7]) {
      return next(tag, text2, re.lastIndex);
    }
    const result = {
      index: match2.index,
      content: match2[0],
      shortcode: fromMatch(match2)
    };
    if (match2[1]) {
      result.content = result.content.slice(1);
      result.index++;
    }
    if (match2[7]) {
      result.content = result.content.slice(0, -1);
    }
    return result;
  }
  function replace3(tag, text2, callback) {
    return text2.replace(regexp(tag), function(match2, left, $3, attrs2, slash, content, closing, right) {
      if (left === "[" && right === "]") {
        return match2;
      }
      const result = callback(fromMatch(arguments));
      return result || result === "" ? left + result + right : match2;
    });
  }
  function string(options) {
    return new shortcode(options).string();
  }
  function regexp(tag) {
    return new RegExp("\\[(\\[?)(" + tag + ")(?![\\w-])([^\\]\\/]*(?:\\/(?!\\])[^\\]\\/]*)*?)(?:(\\/)\\]|\\](?:([^\\[]*(?:\\[(?!\\/\\2\\])[^\\[]*)*)(\\[\\/\\2\\]))?)(\\]?)", "g");
  }
  var attrs = memize((text2) => {
    const named = {};
    const numeric = [];
    const pattern = /([\w-]+)\s*=\s*"([^"]*)"(?:\s|$)|([\w-]+)\s*=\s*'([^']*)'(?:\s|$)|([\w-]+)\s*=\s*([^\s'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|'([^']*)'(?:\s|$)|(\S+)(?:\s|$)/g;
    text2 = text2.replace(/[\u00a0\u200b]/g, " ");
    let match2;
    while (match2 = pattern.exec(text2)) {
      if (match2[1]) {
        named[match2[1].toLowerCase()] = match2[2];
      } else if (match2[3]) {
        named[match2[3].toLowerCase()] = match2[4];
      } else if (match2[5]) {
        named[match2[5].toLowerCase()] = match2[6];
      } else if (match2[7]) {
        numeric.push(match2[7]);
      } else if (match2[8]) {
        numeric.push(match2[8]);
      } else if (match2[9]) {
        numeric.push(match2[9]);
      }
    }
    return {
      named,
      numeric
    };
  });
  function fromMatch(match2) {
    let type;
    if (match2[4]) {
      type = "self-closing";
    } else if (match2[6]) {
      type = "closed";
    } else {
      type = "single";
    }
    return new shortcode({
      tag: match2[2],
      attrs: match2[3],
      type,
      content: match2[5]
    });
  }
  var shortcode = Object.assign(function(options) {
    const {
      tag,
      attrs: attributes,
      type,
      content
    } = options || {};
    Object.assign(this, {
      tag,
      type,
      content
    });
    this.attrs = {
      named: {},
      numeric: []
    };
    if (!attributes) {
      return;
    }
    const attributeTypes = ["named", "numeric"];
    if (typeof attributes === "string") {
      this.attrs = attrs(attributes);
    } else if (attributes.length === attributeTypes.length && attributeTypes.every((t4, key) => t4 === attributes[key])) {
      this.attrs = attributes;
    } else {
      Object.entries(attributes).forEach(([key, value]) => {
        this.set(key, value);
      });
    }
  }, {
    next,
    replace: replace3,
    string,
    regexp,
    attrs,
    fromMatch
  });
  Object.assign(shortcode.prototype, {
    /**
     * Get a shortcode attribute.
     *
     * Automatically detects whether `attr` is named or numeric and routes it
     * accordingly.
     *
     * @param {(number|string)} attr Attribute key.
     *
     * @return {string} Attribute value.
     */
    get(attr2) {
      return this.attrs[typeof attr2 === "number" ? "numeric" : "named"][attr2];
    },
    /**
     * Set a shortcode attribute.
     *
     * Automatically detects whether `attr` is named or numeric and routes it
     * accordingly.
     *
     * @param {(number|string)} attr  Attribute key.
     * @param {string}          value Attribute value.
     *
     * @return {InstanceType< import('./types').shortcode >} Shortcode instance.
     */
    set(attr2, value) {
      this.attrs[typeof attr2 === "number" ? "numeric" : "named"][attr2] = value;
      return this;
    },
    /**
     * Transform the shortcode into a string.
     *
     * @return {string} String representation of the shortcode.
     */
    string() {
      let text2 = "[" + this.tag;
      this.attrs.numeric.forEach((value) => {
        if (/\s/.test(value)) {
          text2 += ' "' + value + '"';
        } else {
          text2 += " " + value;
        }
      });
      Object.entries(this.attrs.named).forEach(([name, value]) => {
        text2 += " " + name + '="' + value + '"';
      });
      if ("single" === this.type) {
        return text2 + "]";
      } else if ("self-closing" === this.type) {
        return text2 + " /]";
      }
      text2 += "]";
      if (this.content) {
        text2 += this.content;
      }
      return text2 + "[/" + this.tag + "]";
    }
  });

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/shortcode-converter.js
  var castArray = (maybeArray) => Array.isArray(maybeArray) ? maybeArray : [maybeArray];
  var beforeLineRegexp = /(\n|<p>)\s*$/;
  var afterLineRegexp = /^\s*(\n|<\/p>)/;
  function segmentHTMLToShortcodeBlock(HTML, lastIndex = 0, excludedBlockNames = []) {
    const transformsFrom = getBlockTransforms("from");
    const transformation = findTransform(transformsFrom, (transform) => excludedBlockNames.indexOf(transform.blockName) === -1 && transform.type === "shortcode" && castArray(transform.tag).some((tag) => regexp(tag).test(HTML)));
    if (!transformation) {
      return [HTML];
    }
    const transformTags = castArray(transformation.tag);
    const transformTag = transformTags.find((tag) => regexp(tag).test(HTML));
    let match2;
    const previousIndex = lastIndex;
    if (match2 = next(transformTag, HTML, lastIndex)) {
      lastIndex = match2.index + match2.content.length;
      const beforeHTML = HTML.substr(0, match2.index);
      const afterHTML = HTML.substr(lastIndex);
      if (!match2.shortcode.content?.includes("<") && !(beforeLineRegexp.test(beforeHTML) && afterLineRegexp.test(afterHTML))) {
        return segmentHTMLToShortcodeBlock(HTML, lastIndex);
      }
      if (transformation.isMatch && !transformation.isMatch(match2.shortcode.attrs)) {
        return segmentHTMLToShortcodeBlock(HTML, previousIndex, [...excludedBlockNames, transformation.blockName]);
      }
      let blocks2 = [];
      if (typeof transformation.transform === "function") {
        blocks2 = [].concat(transformation.transform(match2.shortcode.attrs, match2));
        blocks2 = blocks2.map((block3) => {
          block3.originalContent = match2.shortcode.content;
          return applyBuiltInValidationFixes(block3, getBlockType(block3.name));
        });
      } else {
        const attributes = Object.fromEntries(Object.entries(transformation.attributes).filter(([, schema]) => schema.shortcode).map(([key, schema]) => [key, schema.shortcode(match2.shortcode.attrs, match2)]));
        const blockType = getBlockType(transformation.blockName);
        if (!blockType) {
          return [HTML];
        }
        const transformationBlockType = {
          ...blockType,
          attributes: transformation.attributes
        };
        let block3 = createBlock(transformation.blockName, getBlockAttributes(transformationBlockType, match2.shortcode.content, attributes));
        block3.originalContent = match2.shortcode.content;
        block3 = applyBuiltInValidationFixes(block3, transformationBlockType);
        blocks2 = [block3];
      }
      return [...segmentHTMLToShortcodeBlock(beforeHTML.replace(beforeLineRegexp, "")), ...blocks2, ...segmentHTMLToShortcodeBlock(afterHTML.replace(afterLineRegexp, ""))];
    }
    return [HTML];
  }
  var shortcode_converter_default = segmentHTMLToShortcodeBlock;

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/utils.js
  function getBlockContentSchemaFromTransforms(transforms, context2) {
    const phrasingContentSchema2 = getPhrasingContentSchema(context2);
    const schemaArgs = {
      phrasingContentSchema: phrasingContentSchema2,
      isPaste: context2 === "paste"
    };
    const schemas = transforms.map(({
      isMatch,
      blockName,
      schema
    }) => {
      const hasAnchorSupport = hasBlockSupport(blockName, "anchor");
      schema = typeof schema === "function" ? schema(schemaArgs) : schema;
      if (!hasAnchorSupport && !isMatch) {
        return schema;
      }
      if (!schema) {
        return {};
      }
      return Object.fromEntries(Object.entries(schema).map(([key, value]) => {
        let attributes = value.attributes || [];
        if (hasAnchorSupport) {
          attributes = [...attributes, "id"];
        }
        return [key, {
          ...value,
          attributes,
          isMatch: isMatch ? isMatch : void 0
        }];
      }));
    });
    function mergeTagNameSchemaProperties(objValue, srcValue, key) {
      switch (key) {
        case "children": {
          if (objValue === "*" || srcValue === "*") {
            return "*";
          }
          return {
            ...objValue,
            ...srcValue
          };
        }
        case "attributes":
        case "require": {
          return [...objValue || [], ...srcValue || []];
        }
        case "isMatch": {
          if (!objValue || !srcValue) {
            return void 0;
          }
          return (...args) => {
            return objValue(...args) || srcValue(...args);
          };
        }
      }
    }
    function mergeTagNameSchemas(a2, b2) {
      for (const key in b2) {
        a2[key] = a2[key] ? mergeTagNameSchemaProperties(a2[key], b2[key], key) : {
          ...b2[key]
        };
      }
      return a2;
    }
    function mergeSchemas(a2, b2) {
      for (const key in b2) {
        a2[key] = a2[key] ? mergeTagNameSchemas(a2[key], b2[key]) : {
          ...b2[key]
        };
      }
      return a2;
    }
    return schemas.reduce(mergeSchemas, {});
  }
  function getBlockContentSchema(context2) {
    return getBlockContentSchemaFromTransforms(getRawTransforms(), context2);
  }
  function isPlain(HTML) {
    return !/<(?!br[ />])/i.test(HTML);
  }
  function deepFilterNodeList(nodeList, filters2, doc, schema) {
    Array.from(nodeList).forEach((node2) => {
      deepFilterNodeList(node2.childNodes, filters2, doc, schema);
      filters2.forEach((item) => {
        if (!doc.contains(node2)) {
          return;
        }
        item(node2, doc, schema);
      });
    });
  }
  function deepFilterHTML(HTML, filters2 = [], schema) {
    const doc = document.implementation.createHTMLDocument("");
    doc.body.innerHTML = HTML;
    deepFilterNodeList(doc.body.childNodes, filters2, doc, schema);
    return doc.body.innerHTML;
  }
  function getSibling(node2, which) {
    const sibling = node2[`${which}Sibling`];
    if (sibling && isPhrasingContent(sibling)) {
      return sibling;
    }
    const {
      parentNode
    } = node2;
    if (!parentNode || !isPhrasingContent(parentNode)) {
      return;
    }
    return getSibling(parentNode, which);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/comment-remover.js
  function commentRemover(node2) {
    if (node2.nodeType === node2.COMMENT_NODE) {
      remove(node2);
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/is-inline-content.js
  function isInline(node2, contextTag) {
    if (isTextContent(node2)) {
      return true;
    }
    if (!contextTag) {
      return false;
    }
    const tag = node2.nodeName.toLowerCase();
    const inlineAllowedTagGroups = [["ul", "li", "ol"], ["h1", "h2", "h3", "h4", "h5", "h6"]];
    return inlineAllowedTagGroups.some((tagGroup) => [tag, contextTag].filter((t4) => !tagGroup.includes(t4)).length === 0);
  }
  function deepCheck(nodes, contextTag) {
    return nodes.every((node2) => isInline(node2, contextTag) && deepCheck(Array.from(node2.children), contextTag));
  }
  function isDoubleBR(node2) {
    return node2.nodeName === "BR" && node2.previousSibling && node2.previousSibling.nodeName === "BR";
  }
  function isInlineContent(HTML, contextTag) {
    const doc = document.implementation.createHTMLDocument("");
    doc.body.innerHTML = HTML;
    const nodes = Array.from(doc.body.children);
    return !nodes.some(isDoubleBR) && deepCheck(nodes, contextTag);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/phrasing-content-reducer.js
  function phrasingContentReducer(node2, doc) {
    if (node2.nodeName === "SPAN" && node2.style) {
      const {
        fontWeight,
        fontStyle,
        textDecorationLine,
        textDecoration,
        verticalAlign
      } = node2.style;
      if (fontWeight === "bold" || fontWeight === "700") {
        wrap(doc.createElement("strong"), node2);
      }
      if (fontStyle === "italic") {
        wrap(doc.createElement("em"), node2);
      }
      if (textDecorationLine === "line-through" || textDecoration.includes("line-through")) {
        wrap(doc.createElement("s"), node2);
      }
      if (verticalAlign === "super") {
        wrap(doc.createElement("sup"), node2);
      } else if (verticalAlign === "sub") {
        wrap(doc.createElement("sub"), node2);
      }
    } else if (node2.nodeName === "B") {
      node2 = replaceTag(node2, "strong");
    } else if (node2.nodeName === "I") {
      node2 = replaceTag(node2, "em");
    } else if (node2.nodeName === "A") {
      if (node2.target && node2.target.toLowerCase() === "_blank") {
        node2.rel = "noreferrer noopener";
      } else {
        node2.removeAttribute("target");
        node2.removeAttribute("rel");
      }
      if (node2.name && !node2.id) {
        node2.id = node2.name;
      }
      if (node2.id && !node2.ownerDocument.querySelector(`[href="#${node2.id}"]`)) {
        node2.removeAttribute("id");
      }
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/head-remover.js
  function headRemover(node2) {
    if (node2.nodeName !== "SCRIPT" && node2.nodeName !== "NOSCRIPT" && node2.nodeName !== "TEMPLATE" && node2.nodeName !== "STYLE") {
      return;
    }
    node2.parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/ms-list-ignore.js
  function msListIgnore(node2) {
    if (node2.nodeType !== node2.ELEMENT_NODE) {
      return;
    }
    const style = node2.getAttribute("style");
    if (!style || !style.includes("mso-list")) {
      return;
    }
    const rules = style.split(";").reduce((acc, rule) => {
      const [key, value] = rule.split(":");
      if (key && value) {
        acc[key.trim().toLowerCase()] = value.trim().toLowerCase();
      }
      return acc;
    }, {});
    if (rules["mso-list"] === "ignore") {
      node2.remove();
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/ms-list-converter.js
  function isList2(node2) {
    return node2.nodeName === "OL" || node2.nodeName === "UL";
  }
  function msListConverter(node2, doc) {
    if (node2.nodeName !== "P") {
      return;
    }
    const style = node2.getAttribute("style");
    if (!style || !style.includes("mso-list")) {
      return;
    }
    const prevNode = node2.previousElementSibling;
    if (!prevNode || !isList2(prevNode)) {
      const type = node2.textContent.trim().slice(0, 1);
      const isNumeric = /[1iIaA]/.test(type);
      const newListNode = doc.createElement(isNumeric ? "ol" : "ul");
      if (isNumeric) {
        newListNode.setAttribute("type", type);
      }
      node2.parentNode.insertBefore(newListNode, node2);
    }
    const listNode = node2.previousElementSibling;
    const listType = listNode.nodeName;
    const listItem = doc.createElement("li");
    let receivingNode = listNode;
    listItem.innerHTML = deepFilterHTML(node2.innerHTML, [msListIgnore]);
    const matches2 = /mso-list\s*:[^;]+level([0-9]+)/i.exec(style);
    let level = matches2 ? parseInt(matches2[1], 10) - 1 || 0 : 0;
    while (level--) {
      receivingNode = receivingNode.lastChild || receivingNode;
      if (isList2(receivingNode)) {
        receivingNode = receivingNode.lastChild || receivingNode;
      }
    }
    if (!isList2(receivingNode)) {
      receivingNode = receivingNode.appendChild(doc.createElement(listType));
    }
    receivingNode.appendChild(listItem);
    node2.parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/blob/build-module/index.js
  var cache = {};
  function createBlobURL(file) {
    const url = window.URL.createObjectURL(file);
    cache[url] = file;
    return url;
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/image-corrector.js
  function imageCorrector(node2) {
    if (node2.nodeName !== "IMG") {
      return;
    }
    if (node2.src.indexOf("file:") === 0) {
      node2.src = "";
    }
    if (node2.src.indexOf("data:") === 0) {
      const [properties, data] = node2.src.split(",");
      const [type] = properties.slice(5).split(";");
      if (!data || !type) {
        node2.src = "";
        return;
      }
      let decoded;
      try {
        decoded = atob(data);
      } catch (e3) {
        node2.src = "";
        return;
      }
      const uint8Array = new Uint8Array(decoded.length);
      for (let i3 = 0; i3 < uint8Array.length; i3++) {
        uint8Array[i3] = decoded.charCodeAt(i3);
      }
      const name = type.replace("/", ".");
      const file = new window.File([uint8Array], name, {
        type
      });
      node2.src = createBlobURL(file);
    }
    if (node2.height === 1 || node2.width === 1) {
      node2.parentNode.removeChild(node2);
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/div-normaliser.js
  function divNormaliser(node2) {
    if (node2.nodeName !== "DIV") {
      return;
    }
    node2.innerHTML = normaliseBlocks(node2.innerHTML);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/markdown-converter.js
  var import_showdown = __toESM(require_showdown());
  var converter = new import_showdown.default.Converter({
    noHeaderId: true,
    tables: true,
    literalMidWordUnderscores: true,
    omitExtraWLInCodeBlocks: true,
    simpleLineBreaks: true,
    strikethrough: true
  });
  function slackMarkdownVariantCorrector(text2) {
    return text2.replace(/((?:^|\n)```)([^\n`]+)(```(?:$|\n))/, (match2, p1, p2, p3) => `${p1}
${p2}
${p3}`);
  }
  function bulletsToAsterisks(text2) {
    return text2.replace(/(^|\n)•( +)/g, "$1*$2");
  }
  function markdownConverter(text2) {
    return converter.makeHtml(slackMarkdownVariantCorrector(bulletsToAsterisks(text2)));
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/iframe-remover.js
  function iframeRemover(node2) {
    if (node2.nodeName === "IFRAME") {
      const text2 = node2.ownerDocument.createTextNode(node2.src);
      node2.parentNode.replaceChild(text2, node2);
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/google-docs-uid-remover.js
  function googleDocsUIdRemover(node2) {
    if (!node2.id || node2.id.indexOf("docs-internal-guid-") !== 0) {
      return;
    }
    if (node2.tagName === "B") {
      unwrap(node2);
    } else {
      node2.removeAttribute("id");
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/html-formatting-remover.js
  function isFormattingSpace(character2) {
    return character2 === " " || character2 === "\r" || character2 === "\n" || character2 === "	";
  }
  function htmlFormattingRemover(node2) {
    if (node2.nodeType !== node2.TEXT_NODE) {
      return;
    }
    let parent = node2;
    while (parent = parent.parentNode) {
      if (parent.nodeType === parent.ELEMENT_NODE && parent.nodeName === "PRE") {
        return;
      }
    }
    let newData = node2.data.replace(/[ \r\n\t]+/g, " ");
    if (newData[0] === " ") {
      const previousSibling = getSibling(node2, "previous");
      if (!previousSibling || previousSibling.nodeName === "BR" || previousSibling.textContent.slice(-1) === " ") {
        newData = newData.slice(1);
      }
    }
    if (newData[newData.length - 1] === " ") {
      const nextSibling = getSibling(node2, "next");
      if (!nextSibling || nextSibling.nodeName === "BR" || nextSibling.nodeType === nextSibling.TEXT_NODE && isFormattingSpace(nextSibling.textContent[0])) {
        newData = newData.slice(0, -1);
      }
    }
    if (!newData) {
      node2.parentNode.removeChild(node2);
    } else {
      node2.data = newData;
    }
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/br-remover.js
  function brRemover(node2) {
    if (node2.nodeName !== "BR") {
      return;
    }
    if (getSibling(node2, "next")) {
      return;
    }
    node2.parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/empty-paragraph-remover.js
  function emptyParagraphRemover(node2) {
    if (node2.nodeName !== "P") {
      return;
    }
    if (node2.hasChildNodes()) {
      return;
    }
    node2.parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/slack-paragraph-corrector.js
  function slackParagraphCorrector(node2) {
    if (node2.nodeName !== "SPAN") {
      return;
    }
    if (node2.getAttribute("data-stringify-type") !== "paragraph-break") {
      return;
    }
    const {
      parentNode
    } = node2;
    parentNode.insertBefore(node2.ownerDocument.createElement("br"), node2);
    parentNode.insertBefore(node2.ownerDocument.createElement("br"), node2);
    parentNode.removeChild(node2);
  }

  // node_modules/@wordpress/blocks/build-module/api/raw-handling/paste-handler.js
  var log = (...args) => window?.console?.log?.(...args);
  function filterInlineHTML(HTML) {
    HTML = deepFilterHTML(HTML, [headRemover, googleDocsUIdRemover, msListIgnore, phrasingContentReducer, commentRemover]);
    HTML = removeInvalidHTML(HTML, getPhrasingContentSchema("paste"), {
      inline: true
    });
    HTML = deepFilterHTML(HTML, [htmlFormattingRemover, brRemover]);
    log("Processed inline HTML:\n\n", HTML);
    return HTML;
  }
  function pasteHandler({
    HTML = "",
    plainText = "",
    mode = "AUTO",
    tagName
  }) {
    HTML = HTML.replace(/<meta[^>]+>/g, "");
    HTML = HTML.replace(/^\s*<html[^>]*>\s*<body[^>]*>(?:\s*<!--\s*StartFragment\s*-->)?/i, "");
    HTML = HTML.replace(/(?:<!--\s*EndFragment\s*-->\s*)?<\/body>\s*<\/html>\s*$/i, "");
    if (mode !== "INLINE") {
      const content = HTML ? HTML : plainText;
      if (content.indexOf("<!-- wp:") !== -1) {
        return parse3(content);
      }
    }
    if (String.prototype.normalize) {
      HTML = HTML.normalize();
    }
    HTML = deepFilterHTML(HTML, [slackParagraphCorrector]);
    const isPlainText = plainText && (!HTML || isPlain(HTML));
    if (isPlainText) {
      HTML = plainText;
      if (!/^\s+$/.test(plainText)) {
        HTML = markdownConverter(HTML);
      }
    }
    const pieces = shortcode_converter_default(HTML);
    const hasShortcodes = pieces.length > 1;
    if (isPlainText && !hasShortcodes) {
      if (mode === "AUTO" && plainText.indexOf("\n") === -1 && plainText.indexOf("<p>") !== 0 && HTML.indexOf("<p>") === 0) {
        mode = "INLINE";
      }
    }
    if (mode === "INLINE") {
      return filterInlineHTML(HTML);
    }
    if (mode === "AUTO" && !hasShortcodes && isInlineContent(HTML, tagName)) {
      return filterInlineHTML(HTML);
    }
    const phrasingContentSchema2 = getPhrasingContentSchema("paste");
    const blockContentSchema = getBlockContentSchema("paste");
    const blocks2 = pieces.map((piece) => {
      if (typeof piece !== "string") {
        return piece;
      }
      const filters2 = [googleDocsUIdRemover, msListConverter, headRemover, listReducer, imageCorrector, phrasingContentReducer, specialCommentConverter, commentRemover, iframeRemover, figureContentReducer, blockquoteNormaliser(), divNormaliser];
      const schema = {
        ...blockContentSchema,
        // Keep top-level phrasing content, normalised by `normaliseBlocks`.
        ...phrasingContentSchema2
      };
      piece = deepFilterHTML(piece, filters2, blockContentSchema);
      piece = removeInvalidHTML(piece, schema);
      piece = normaliseBlocks(piece);
      piece = deepFilterHTML(piece, [htmlFormattingRemover, brRemover, emptyParagraphRemover], blockContentSchema);
      log("Processed HTML piece:\n\n", piece);
      return htmlToBlocks(piece, pasteHandler);
    }).flat().filter(Boolean);
    if (mode === "AUTO" && blocks2.length === 1 && hasBlockSupport(blocks2[0].name, "__unstablePasteTextInline", false)) {
      const trimRegex = /^[\n]+|[\n]+$/g;
      const trimmedPlainText = plainText.replace(trimRegex, "");
      if (trimmedPlainText !== "" && trimmedPlainText.indexOf("\n") === -1) {
        return removeInvalidHTML(getBlockInnerHTML(blocks2[0]), phrasingContentSchema2).replace(trimRegex, "");
      }
    }
    return blocks2;
  }

  // node_modules/@wordpress/blocks/build-module/api/templates.js
  function doBlocksMatchTemplate(blocks2 = [], template2 = []) {
    return blocks2.length === template2.length && template2.every(([name, , innerBlocksTemplate], index2) => {
      const block3 = blocks2[index2];
      return name === block3.name && doBlocksMatchTemplate(block3.innerBlocks, innerBlocksTemplate);
    });
  }
  var isHTMLAttribute = (attributeDefinition) => attributeDefinition?.source === "html";
  var isQueryAttribute = (attributeDefinition) => attributeDefinition?.source === "query";
  function normalizeAttributes(schema, values) {
    if (!values) {
      return {};
    }
    return Object.fromEntries(Object.entries(values).map(([key, value]) => [key, normalizeAttribute(schema[key], value)]));
  }
  function normalizeAttribute(definition, value) {
    if (isHTMLAttribute(definition) && Array.isArray(value)) {
      return serialize_default(value);
    }
    if (isQueryAttribute(definition) && value) {
      return value.map((subValues) => {
        return normalizeAttributes(definition.query, subValues);
      });
    }
    return value;
  }
  function synchronizeBlocksWithTemplate(blocks2 = [], template2) {
    if (!template2) {
      return blocks2;
    }
    return template2.map(([name, attributes, innerBlocksTemplate], index2) => {
      var _blockType$attributes;
      const block3 = blocks2[index2];
      if (block3 && block3.name === name) {
        const innerBlocks = synchronizeBlocksWithTemplate(block3.innerBlocks, innerBlocksTemplate);
        return {
          ...block3,
          innerBlocks
        };
      }
      const blockType = getBlockType(name);
      const normalizedAttributes = normalizeAttributes((_blockType$attributes = blockType?.attributes) !== null && _blockType$attributes !== void 0 ? _blockType$attributes : {}, attributes);
      let [blockName, blockAttributes] = convertLegacyBlockNameAndAttributes(name, normalizedAttributes);
      if (void 0 === getBlockType(blockName)) {
        blockAttributes = {
          originalName: name,
          originalContent: "",
          originalUndelimitedContent: ""
        };
        blockName = "core/missing";
      }
      return createBlock(blockName, blockAttributes, synchronizeBlocksWithTemplate([], innerBlocksTemplate));
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-edit/context.js
  var mayDisplayControlsKey = Symbol("mayDisplayControls");
  var mayDisplayParentControlsKey = Symbol("mayDisplayParentControls");
  var blockEditingModeKey = Symbol("blockEditingMode");
  var blockBindingsKey = Symbol("blockBindings");
  var isPreviewModeKey = Symbol("isPreviewMode");
  var DEFAULT_BLOCK_EDIT_CONTEXT = {
    name: "",
    isSelected: false
  };
  var Context3 = (0, import_react.createContext)(DEFAULT_BLOCK_EDIT_CONTEXT);
  var {
    Provider: Provider4
  } = Context3;
  function useBlockEditContext() {
    return (0, import_react.useContext)(Context3);
  }

  // node_modules/clsx/dist/clsx.mjs
  function r2(e3) {
    var t4, f2, n3 = "";
    if ("string" == typeof e3 || "number" == typeof e3) n3 += e3;
    else if ("object" == typeof e3) if (Array.isArray(e3)) {
      var o3 = e3.length;
      for (t4 = 0; t4 < o3; t4++) e3[t4] && (f2 = r2(e3[t4])) && (n3 && (n3 += " "), n3 += f2);
    } else for (f2 in e3) e3[f2] && (n3 && (n3 += " "), n3 += f2);
    return n3;
  }
  function clsx() {
    for (var e3, t4, f2 = 0, n3 = "", o3 = arguments.length; f2 < o3; f2++) (e3 = arguments[f2]) && (t4 = r2(e3)) && (n3 && (n3 += " "), n3 += t4);
    return n3;
  }
  var clsx_default = clsx;

  // node_modules/@wordpress/primitives/build-module/svg/index.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var Circle = (props) => (0, import_react.createElement)("circle", props);
  var Path = (props) => (0, import_react.createElement)("path", props);
  var SVG = (0, import_react.forwardRef)(
    /**
     * @param {SVGProps}                                    props isPressed indicates whether the SVG should appear as pressed.
     *                                                            Other props will be passed through to svg component.
     * @param {import('react').ForwardedRef<SVGSVGElement>} ref   The forwarded ref to the SVG element.
     *
     * @return {JSX.Element} Stop component
     */
    ({
      className,
      isPressed,
      ...props
    }, ref) => {
      const appliedProps = {
        ...props,
        className: clsx_default(className, {
          "is-pressed": isPressed
        }) || void 0,
        "aria-hidden": true,
        focusable: false
      };
      return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("svg", {
        ...appliedProps,
        ref
      });
    }
  );
  SVG.displayName = "SVG";

  // node_modules/@ariakit/react-core/esm/__chunks/4R3V3JGP.js
  var __defProp2 = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __hasOwnProp2 = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a2, b2) => {
    for (var prop2 in b2 || (b2 = {}))
      if (__hasOwnProp2.call(b2, prop2))
        __defNormalProp(a2, prop2, b2[prop2]);
    if (__getOwnPropSymbols)
      for (var prop2 of __getOwnPropSymbols(b2)) {
        if (__propIsEnum.call(b2, prop2))
          __defNormalProp(a2, prop2, b2[prop2]);
      }
    return a2;
  };
  var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop2 in source)
      if (__hasOwnProp2.call(source, prop2) && exclude.indexOf(prop2) < 0)
        target[prop2] = source[prop2];
    if (source != null && __getOwnPropSymbols)
      for (var prop2 of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop2) < 0 && __propIsEnum.call(source, prop2))
          target[prop2] = source[prop2];
      }
    return target;
  };

  // node_modules/@ariakit/react-core/esm/__chunks/XM66DUTO.js
  var import_react5 = __toESM(require_react(), 1);

  // node_modules/@ariakit/core/esm/__chunks/4R3V3JGP.js
  var __defProp3 = Object.defineProperty;
  var __defProps2 = Object.defineProperties;
  var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
  var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
  var __hasOwnProp3 = Object.prototype.hasOwnProperty;
  var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
  var __defNormalProp2 = (obj, key, value) => key in obj ? __defProp3(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues2 = (a2, b2) => {
    for (var prop2 in b2 || (b2 = {}))
      if (__hasOwnProp3.call(b2, prop2))
        __defNormalProp2(a2, prop2, b2[prop2]);
    if (__getOwnPropSymbols2)
      for (var prop2 of __getOwnPropSymbols2(b2)) {
        if (__propIsEnum2.call(b2, prop2))
          __defNormalProp2(a2, prop2, b2[prop2]);
      }
    return a2;
  };
  var __spreadProps2 = (a2, b2) => __defProps2(a2, __getOwnPropDescs2(b2));
  var __objRest2 = (source, exclude) => {
    var target = {};
    for (var prop2 in source)
      if (__hasOwnProp3.call(source, prop2) && exclude.indexOf(prop2) < 0)
        target[prop2] = source[prop2];
    if (source != null && __getOwnPropSymbols2)
      for (var prop2 of __getOwnPropSymbols2(source)) {
        if (exclude.indexOf(prop2) < 0 && __propIsEnum2.call(source, prop2))
          target[prop2] = source[prop2];
      }
    return target;
  };

  // node_modules/@ariakit/core/esm/__chunks/Y3OOHFCN.js
  function noop2(..._) {
  }
  function shallowEqual(a2, b2) {
    if (a2 === b2)
      return true;
    if (!a2)
      return false;
    if (!b2)
      return false;
    if (typeof a2 !== "object")
      return false;
    if (typeof b2 !== "object")
      return false;
    const aKeys = Object.keys(a2);
    const bKeys = Object.keys(b2);
    const { length: length2 } = aKeys;
    if (bKeys.length !== length2)
      return false;
    for (const key of aKeys) {
      if (a2[key] !== b2[key]) {
        return false;
      }
    }
    return true;
  }
  function applyState(argument, currentValue) {
    if (isUpdater(argument)) {
      const value = isLazyValue(currentValue) ? currentValue() : currentValue;
      return argument(value);
    }
    return argument;
  }
  function isUpdater(argument) {
    return typeof argument === "function";
  }
  function isLazyValue(value) {
    return typeof value === "function";
  }
  function hasOwnProperty(object, prop2) {
    if (typeof Object.hasOwn === "function") {
      return Object.hasOwn(object, prop2);
    }
    return Object.prototype.hasOwnProperty.call(object, prop2);
  }
  function chain(...fns) {
    return (...args) => {
      for (const fn of fns) {
        if (typeof fn === "function") {
          fn(...args);
        }
      }
    };
  }
  function normalizeString(str) {
    return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
  }
  function omit2(object, keys) {
    const result = __spreadValues2({}, object);
    for (const key of keys) {
      if (hasOwnProperty(result, key)) {
        delete result[key];
      }
    }
    return result;
  }
  function pick(object, paths) {
    const result = {};
    for (const key of paths) {
      if (hasOwnProperty(object, key)) {
        result[key] = object[key];
      }
    }
    return result;
  }
  function identity2(value) {
    return value;
  }
  function invariant(condition, message) {
    if (condition)
      return;
    if (typeof message !== "string")
      throw new Error("Invariant failed");
    throw new Error(message);
  }
  function getKeys(obj) {
    return Object.keys(obj);
  }
  function isFalsyBooleanCallback(booleanOrCallback, ...args) {
    const result = typeof booleanOrCallback === "function" ? booleanOrCallback(...args) : booleanOrCallback;
    if (result == null)
      return false;
    return !result;
  }
  function disabledFromProps(props) {
    return props.disabled || props["aria-disabled"] === true || props["aria-disabled"] === "true";
  }
  function defaultValue(...values) {
    for (const value of values) {
      if (value !== void 0)
        return value;
    }
    return void 0;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/XM66DUTO.js
  function setRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
  }
  function isValidElementWithRef(element) {
    if (!element)
      return false;
    if (!(0, import_react5.isValidElement)(element))
      return false;
    if (!("ref" in element))
      return false;
    return true;
  }
  function getRefProperty(element) {
    if (!isValidElementWithRef(element))
      return null;
    return element.ref;
  }
  function mergeProps(base, overrides) {
    const props = __spreadValues({}, base);
    for (const key in overrides) {
      if (!hasOwnProperty(overrides, key))
        continue;
      if (key === "className") {
        const prop2 = "className";
        props[prop2] = base[prop2] ? `${base[prop2]} ${overrides[prop2]}` : overrides[prop2];
        continue;
      }
      if (key === "style") {
        const prop2 = "style";
        props[prop2] = base[prop2] ? __spreadValues(__spreadValues({}, base[prop2]), overrides[prop2]) : overrides[prop2];
        continue;
      }
      const overrideValue = overrides[key];
      if (typeof overrideValue === "function" && key.startsWith("on")) {
        const baseValue = base[key];
        if (typeof baseValue === "function") {
          props[key] = (...args) => {
            overrideValue(...args);
            baseValue(...args);
          };
          continue;
        }
      }
      props[key] = overrideValue;
    }
    return props;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/6O5OEQGF.js
  var import_react6 = __toESM(require_react(), 1);
  var React2 = __toESM(require_react(), 1);

  // node_modules/@ariakit/core/esm/__chunks/DLOEKDPY.js
  var canUseDOM = checkIsBrowser();
  function checkIsBrowser() {
    var _a;
    return typeof window !== "undefined" && !!((_a = window.document) == null ? void 0 : _a.createElement);
  }
  function getDocument2(node2) {
    return node2 ? node2.ownerDocument || node2 : document;
  }
  function getWindow(node2) {
    return getDocument2(node2).defaultView || window;
  }
  function getActiveElement(node2, activeDescendant = false) {
    const { activeElement } = getDocument2(node2);
    if (!(activeElement == null ? void 0 : activeElement.nodeName)) {
      return null;
    }
    if (isFrame(activeElement) && activeElement.contentDocument) {
      return getActiveElement(
        activeElement.contentDocument.body,
        activeDescendant
      );
    }
    if (activeDescendant) {
      const id3 = activeElement.getAttribute("aria-activedescendant");
      if (id3) {
        const element = getDocument2(activeElement).getElementById(id3);
        if (element) {
          return element;
        }
      }
    }
    return activeElement;
  }
  function contains(parent, child) {
    return parent === child || parent.contains(child);
  }
  function isFrame(element) {
    return element.tagName === "IFRAME";
  }
  function isButton(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName === "button")
      return true;
    if (tagName === "input" && element.type) {
      return buttonInputTypes.indexOf(element.type) !== -1;
    }
    return false;
  }
  var buttonInputTypes = [
    "button",
    "color",
    "file",
    "image",
    "reset",
    "submit"
  ];
  function matches(element, selectors) {
    if ("matches" in element) {
      return element.matches(selectors);
    }
    if ("msMatchesSelector" in element) {
      return element.msMatchesSelector(selectors);
    }
    return element.webkitMatchesSelector(selectors);
  }
  function isVisible2(element) {
    const htmlElement = element;
    return htmlElement.offsetWidth > 0 || htmlElement.offsetHeight > 0 || element.getClientRects().length > 0;
  }
  function closest(element, selectors) {
    if ("closest" in element)
      return element.closest(selectors);
    do {
      if (matches(element, selectors))
        return element;
      element = element.parentElement || element.parentNode;
    } while (element !== null && element.nodeType === 1);
    return null;
  }
  function isTextField2(element) {
    try {
      const isTextInput = element instanceof HTMLInputElement && element.selectionStart !== null;
      const isTextArea = element.tagName === "TEXTAREA";
      return isTextInput || isTextArea || false;
    } catch (error2) {
      return false;
    }
  }
  function getPopupRole(element, fallback) {
    const allowedPopupRoles = ["dialog", "menu", "listbox", "tree", "grid"];
    const role = element == null ? void 0 : element.getAttribute("role");
    if (role && allowedPopupRoles.indexOf(role) !== -1) {
      return role;
    }
    return fallback;
  }
  function getPopupItemRole(element, fallback) {
    var _a;
    const itemRoleByPopupRole = {
      menu: "menuitem",
      listbox: "option",
      tree: "treeitem",
      grid: "gridcell"
    };
    const popupRole = getPopupRole(element);
    if (!popupRole)
      return fallback;
    const key = popupRole;
    return (_a = itemRoleByPopupRole[key]) != null ? _a : fallback;
  }
  function getScrollingElement(element) {
    if (!element)
      return null;
    if (element.clientHeight && element.scrollHeight > element.clientHeight) {
      const { overflowY } = getComputedStyle(element);
      const isScrollable = overflowY !== "visible" && overflowY !== "hidden";
      if (isScrollable)
        return element;
    } else if (element.clientWidth && element.scrollWidth > element.clientWidth) {
      const { overflowX } = getComputedStyle(element);
      const isScrollable = overflowX !== "visible" && overflowX !== "hidden";
      if (isScrollable)
        return element;
    }
    return getScrollingElement(element.parentElement) || document.scrollingElement || document.body;
  }

  // node_modules/@ariakit/core/esm/__chunks/MHPO2BXA.js
  function isTouchDevice() {
    return canUseDOM && !!navigator.maxTouchPoints;
  }
  function isApple() {
    if (!canUseDOM)
      return false;
    return /mac|iphone|ipad|ipod/i.test(navigator.platform);
  }
  function isSafari() {
    return canUseDOM && isApple() && /apple/i.test(navigator.vendor);
  }
  function isFirefox() {
    return canUseDOM && /firefox\//i.test(navigator.userAgent);
  }
  function isMac() {
    return canUseDOM && navigator.platform.startsWith("Mac") && !isTouchDevice();
  }

  // node_modules/@ariakit/core/esm/utils/events.js
  function isPortalEvent(event) {
    return Boolean(
      event.currentTarget && !contains(event.currentTarget, event.target)
    );
  }
  function isSelfTarget(event) {
    return event.target === event.currentTarget;
  }
  function isOpeningInNewTab(event) {
    const element = event.currentTarget;
    if (!element)
      return false;
    const isAppleDevice = isApple();
    if (isAppleDevice && !event.metaKey)
      return false;
    if (!isAppleDevice && !event.ctrlKey)
      return false;
    const tagName = element.tagName.toLowerCase();
    if (tagName === "a")
      return true;
    if (tagName === "button" && element.type === "submit")
      return true;
    if (tagName === "input" && element.type === "submit")
      return true;
    return false;
  }
  function isDownloading(event) {
    const element = event.currentTarget;
    if (!element)
      return false;
    const tagName = element.tagName.toLowerCase();
    if (!event.altKey)
      return false;
    if (tagName === "a")
      return true;
    if (tagName === "button" && element.type === "submit")
      return true;
    if (tagName === "input" && element.type === "submit")
      return true;
    return false;
  }
  function fireEvent(element, type, eventInit) {
    const event = new Event(type, eventInit);
    return element.dispatchEvent(event);
  }
  function fireBlurEvent(element, eventInit) {
    const event = new FocusEvent("blur", eventInit);
    const defaultAllowed = element.dispatchEvent(event);
    const bubbleInit = __spreadProps2(__spreadValues2({}, eventInit), { bubbles: true });
    element.dispatchEvent(new FocusEvent("focusout", bubbleInit));
    return defaultAllowed;
  }
  function fireKeyboardEvent(element, type, eventInit) {
    const event = new KeyboardEvent(type, eventInit);
    return element.dispatchEvent(event);
  }
  function fireClickEvent(element, eventInit) {
    const event = new MouseEvent("click", eventInit);
    return element.dispatchEvent(event);
  }
  function isFocusEventOutside(event, container) {
    const containerElement = container || event.currentTarget;
    const relatedTarget = event.relatedTarget;
    return !relatedTarget || !contains(containerElement, relatedTarget);
  }
  function queueBeforeEvent(element, type, callback) {
    const raf2 = requestAnimationFrame(() => {
      element.removeEventListener(type, callImmediately, true);
      callback();
    });
    const callImmediately = () => {
      cancelAnimationFrame(raf2);
      callback();
    };
    element.addEventListener(type, callImmediately, {
      once: true,
      capture: true
    });
    return raf2;
  }
  function addGlobalEventListener(type, listener2, options, scope = window) {
    const children = [];
    try {
      scope.document.addEventListener(type, listener2, options);
      for (const frame2 of Array.from(scope.frames)) {
        children.push(addGlobalEventListener(type, listener2, options, frame2));
      }
    } catch (e3) {
    }
    const removeEventListener = () => {
      try {
        scope.document.removeEventListener(type, listener2, options);
      } catch (e3) {
      }
      children.forEach((remove5) => remove5());
    };
    return removeEventListener;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/6O5OEQGF.js
  var _React = __spreadValues({}, React2);
  var useReactId = _React.useId;
  var useReactDeferredValue = _React.useDeferredValue;
  var useReactInsertionEffect = _React.useInsertionEffect;
  var useSafeLayoutEffect = canUseDOM ? import_react6.useLayoutEffect : import_react6.useEffect;
  function useInitialValue(value) {
    const [initialValue2] = (0, import_react6.useState)(value);
    return initialValue2;
  }
  function useLiveRef(value) {
    const ref = (0, import_react6.useRef)(value);
    useSafeLayoutEffect(() => {
      ref.current = value;
    });
    return ref;
  }
  function useEvent(callback) {
    const ref = (0, import_react6.useRef)(() => {
      throw new Error("Cannot call an event handler while rendering.");
    });
    if (useReactInsertionEffect) {
      useReactInsertionEffect(() => {
        ref.current = callback;
      });
    } else {
      ref.current = callback;
    }
    return (0, import_react6.useCallback)((...args) => {
      var _a;
      return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);
    }, []);
  }
  function useMergeRefs2(...refs) {
    return (0, import_react6.useMemo)(() => {
      if (!refs.some(Boolean))
        return;
      return (value) => {
        refs.forEach((ref) => setRef(ref, value));
      };
    }, refs);
  }
  function useId2(defaultId) {
    if (useReactId) {
      const reactId = useReactId();
      if (defaultId)
        return defaultId;
      return reactId;
    }
    const [id3, setId] = (0, import_react6.useState)(defaultId);
    useSafeLayoutEffect(() => {
      if (defaultId || id3)
        return;
      const random = Math.random().toString(36).substr(2, 6);
      setId(`id-${random}`);
    }, [defaultId, id3]);
    return defaultId || id3;
  }
  function useTagName(refOrElement, type) {
    const stringOrUndefined = (type2) => {
      if (typeof type2 !== "string")
        return;
      return type2;
    };
    const [tagName, setTagName] = (0, import_react6.useState)(() => stringOrUndefined(type));
    useSafeLayoutEffect(() => {
      const element = refOrElement && "current" in refOrElement ? refOrElement.current : refOrElement;
      setTagName((element == null ? void 0 : element.tagName.toLowerCase()) || stringOrUndefined(type));
    }, [refOrElement, type]);
    return tagName;
  }
  function useUpdateEffect(effect, deps) {
    const mounted = (0, import_react6.useRef)(false);
    (0, import_react6.useEffect)(() => {
      if (mounted.current) {
        return effect();
      }
      mounted.current = true;
    }, deps);
    (0, import_react6.useEffect)(
      () => () => {
        mounted.current = false;
      },
      []
    );
  }
  var SET_NEXT_STATE = Symbol("setNextState");
  function useForceUpdate() {
    return (0, import_react6.useReducer)(() => [], []);
  }
  function useBooleanEvent(booleanOrCallback) {
    return useEvent(
      typeof booleanOrCallback === "function" ? booleanOrCallback : () => booleanOrCallback
    );
  }
  function useWrapElement(props, callback, deps = []) {
    const wrapElement = (0, import_react6.useCallback)(
      (element) => {
        if (props.wrapElement) {
          element = props.wrapElement(element);
        }
        return callback(element);
      },
      [...deps, props.wrapElement]
    );
    return __spreadProps(__spreadValues({}, props), { wrapElement });
  }
  function usePortalRef(portalProp = false, portalRefProp) {
    const [portalNode, setPortalNode] = (0, import_react6.useState)(null);
    const portalRef = useMergeRefs2(setPortalNode, portalRefProp);
    const domReady2 = !portalProp || portalNode;
    return { portalRef, portalNode, domReady: domReady2 };
  }
  function useMetadataProps(props, key, value) {
    const parent = props.onLoadedMetadataCapture;
    const onLoadedMetadataCapture = (0, import_react6.useMemo)(() => {
      return Object.assign(() => {
      }, __spreadProps(__spreadValues({}, parent), { [key]: value }));
    }, [parent, key, value]);
    return [parent == null ? void 0 : parent[key], { onLoadedMetadataCapture }];
  }
  function useIsMouseMoving() {
    (0, import_react6.useEffect)(() => {
      addGlobalEventListener("mousemove", setMouseMoving, true);
      addGlobalEventListener("mousedown", resetMouseMoving, true);
      addGlobalEventListener("mouseup", resetMouseMoving, true);
      addGlobalEventListener("keydown", resetMouseMoving, true);
      addGlobalEventListener("scroll", resetMouseMoving, true);
    }, []);
    const isMouseMoving = useEvent(() => mouseMoving);
    return isMouseMoving;
  }
  var mouseMoving = false;
  var previousScreenX = 0;
  var previousScreenY = 0;
  function hasMouseMovement(event) {
    const movementX = event.movementX || event.screenX - previousScreenX;
    const movementY = event.movementY || event.screenY - previousScreenY;
    previousScreenX = event.screenX;
    previousScreenY = event.screenY;
    return movementX || movementY || false;
  }
  function setMouseMoving(event) {
    if (!hasMouseMovement(event))
      return;
    mouseMoving = true;
  }
  function resetMouseMoving() {
    mouseMoving = false;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/EKQEJRUF.js
  var React3 = __toESM(require_react(), 1);

  // node_modules/@ariakit/core/esm/__chunks/EAHJFCU4.js
  function getInternal(store6, key) {
    const internals = store6.__unstableInternals;
    invariant(internals, "Invalid store");
    return internals[key];
  }
  function createStore2(initialState, ...stores) {
    let state = initialState;
    let prevStateBatch = state;
    let lastUpdate = Symbol();
    let destroy = noop2;
    const instances = /* @__PURE__ */ new Set();
    const updatedKeys = /* @__PURE__ */ new Set();
    const setups = /* @__PURE__ */ new Set();
    const listeners = /* @__PURE__ */ new Set();
    const batchListeners = /* @__PURE__ */ new Set();
    const disposables = /* @__PURE__ */ new WeakMap();
    const listenerKeys = /* @__PURE__ */ new WeakMap();
    const storeSetup = (callback) => {
      setups.add(callback);
      return () => setups.delete(callback);
    };
    const storeInit = () => {
      const initialized = instances.size;
      const instance = Symbol();
      instances.add(instance);
      const maybeDestroy = () => {
        instances.delete(instance);
        if (instances.size)
          return;
        destroy();
      };
      if (initialized)
        return maybeDestroy;
      const desyncs = getKeys(state).map(
        (key) => chain(
          ...stores.map((store6) => {
            var _a;
            const storeState = (_a = store6 == null ? void 0 : store6.getState) == null ? void 0 : _a.call(store6);
            if (!storeState)
              return;
            if (!hasOwnProperty(storeState, key))
              return;
            return sync(store6, [key], (state2) => {
              setState(
                key,
                state2[key],
                // @ts-expect-error - Not public API. This is just to prevent
                // infinite loops.
                true
              );
            });
          })
        )
      );
      const teardowns = [];
      setups.forEach((setup22) => teardowns.push(setup22()));
      const cleanups2 = stores.map(init);
      destroy = chain(...desyncs, ...teardowns, ...cleanups2);
      return maybeDestroy;
    };
    const sub = (keys, listener2, set = listeners) => {
      set.add(listener2);
      listenerKeys.set(listener2, keys);
      return () => {
        var _a;
        (_a = disposables.get(listener2)) == null ? void 0 : _a();
        disposables.delete(listener2);
        listenerKeys.delete(listener2);
        set.delete(listener2);
      };
    };
    const storeSubscribe = (keys, listener2) => sub(keys, listener2);
    const storeSync = (keys, listener2) => {
      disposables.set(listener2, listener2(state, state));
      return sub(keys, listener2);
    };
    const storeBatch = (keys, listener2) => {
      disposables.set(listener2, listener2(state, prevStateBatch));
      return sub(keys, listener2, batchListeners);
    };
    const storePick = (keys) => createStore2(pick(state, keys), finalStore);
    const storeOmit = (keys) => createStore2(omit2(state, keys), finalStore);
    const getState2 = () => state;
    const setState = (key, value, fromStores = false) => {
      if (!hasOwnProperty(state, key))
        return;
      const nextValue = applyState(value, state[key]);
      if (nextValue === state[key])
        return;
      if (!fromStores) {
        stores.forEach((store6) => {
          var _a;
          (_a = store6 == null ? void 0 : store6.setState) == null ? void 0 : _a.call(store6, key, nextValue);
        });
      }
      const prevState = state;
      state = __spreadProps2(__spreadValues2({}, state), { [key]: nextValue });
      const thisUpdate = Symbol();
      lastUpdate = thisUpdate;
      updatedKeys.add(key);
      const run = (listener2, prev2, uKeys) => {
        var _a;
        const keys = listenerKeys.get(listener2);
        const updated = (k2) => uKeys ? uKeys.has(k2) : k2 === key;
        if (!keys || keys.some(updated)) {
          (_a = disposables.get(listener2)) == null ? void 0 : _a();
          disposables.set(listener2, listener2(state, prev2));
        }
      };
      listeners.forEach((listener2) => {
        run(listener2, prevState);
      });
      queueMicrotask(() => {
        if (lastUpdate !== thisUpdate)
          return;
        const snapshot = state;
        batchListeners.forEach((listener2) => {
          run(listener2, prevStateBatch, updatedKeys);
        });
        prevStateBatch = snapshot;
        updatedKeys.clear();
      });
    };
    const finalStore = {
      getState: getState2,
      setState,
      __unstableInternals: {
        setup: storeSetup,
        init: storeInit,
        subscribe: storeSubscribe,
        sync: storeSync,
        batch: storeBatch,
        pick: storePick,
        omit: storeOmit
      }
    };
    return finalStore;
  }
  function setup2(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "setup")(...args);
  }
  function init(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "init")(...args);
  }
  function subscribe3(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "subscribe")(...args);
  }
  function sync(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "sync")(...args);
  }
  function batch(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "batch")(...args);
  }
  function omit22(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "omit")(...args);
  }
  function pick2(store6, ...args) {
    if (!store6)
      return;
    return getInternal(store6, "pick")(...args);
  }
  function mergeStore(...stores) {
    const initialState = stores.reduce((state, store22) => {
      var _a;
      const nextState = (_a = store22 == null ? void 0 : store22.getState) == null ? void 0 : _a.call(store22);
      if (!nextState)
        return state;
      return __spreadValues2(__spreadValues2({}, state), nextState);
    }, {});
    const store6 = createStore2(initialState, ...stores);
    return store6;
  }
  function throwOnConflictingProps(props, store6) {
    if (false)
      return;
    if (!store6)
      return;
    const defaultKeys = Object.entries(props).filter(([key, value]) => key.startsWith("default") && value !== void 0).map(([key]) => {
      var _a;
      const stateKey = key.replace("default", "");
      return `${((_a = stateKey[0]) == null ? void 0 : _a.toLowerCase()) || ""}${stateKey.slice(1)}`;
    });
    if (!defaultKeys.length)
      return;
    const storeState = store6.getState();
    const conflictingProps = defaultKeys.filter(
      (key) => hasOwnProperty(storeState, key)
    );
    if (!conflictingProps.length)
      return;
    throw new Error(
      `Passing a store prop in conjunction with a default state is not supported.

const store = useSelectStore();
<SelectProvider store={store} defaultValue="Apple" />
                ^             ^

Instead, pass the default state to the topmost store:

const store = useSelectStore({ defaultValue: "Apple" });
<SelectProvider store={store} />

See https://github.com/ariakit/ariakit/pull/2745 for more details.

If there's a particular need for this, please submit a feature request at https://github.com/ariakit/ariakit
`
    );
  }

  // node_modules/@ariakit/react-core/esm/__chunks/EKQEJRUF.js
  var import_shim = __toESM(require_shim(), 1);
  var { useSyncExternalStore: useSyncExternalStore2 } = import_shim.default;
  var noopSubscribe = () => () => {
  };
  function useStoreState(store6, keyOrSelector = identity2) {
    const storeSubscribe = React3.useCallback(
      (callback) => {
        if (!store6)
          return noopSubscribe();
        return subscribe3(store6, null, callback);
      },
      [store6]
    );
    const getSnapshot = () => {
      const key = typeof keyOrSelector === "string" ? keyOrSelector : null;
      const selector2 = typeof keyOrSelector === "function" ? keyOrSelector : null;
      const state = store6 == null ? void 0 : store6.getState();
      if (selector2)
        return selector2(state);
      if (!state)
        return;
      if (!key)
        return;
      if (!hasOwnProperty(state, key))
        return;
      return state[key];
    };
    return useSyncExternalStore2(storeSubscribe, getSnapshot, getSnapshot);
  }
  function useStoreProps(store6, props, key, setKey) {
    const value = hasOwnProperty(props, key) ? props[key] : void 0;
    const setValue = setKey ? props[setKey] : void 0;
    const propsRef = useLiveRef({ value, setValue });
    useSafeLayoutEffect(() => {
      return sync(store6, [key], (state, prev2) => {
        const { value: value2, setValue: setValue2 } = propsRef.current;
        if (!setValue2)
          return;
        if (state[key] === prev2[key])
          return;
        if (state[key] === value2)
          return;
        setValue2(state[key]);
      });
    }, [store6, key]);
    useSafeLayoutEffect(() => {
      if (value === void 0)
        return;
      store6.setState(key, value);
      return batch(store6, [key], () => {
        if (value === void 0)
          return;
        store6.setState(key, value);
      });
    });
  }
  function useStore(createStore3, props) {
    const [store6, setStore] = React3.useState(() => createStore3(props));
    useSafeLayoutEffect(() => init(store6), [store6]);
    const useState27 = React3.useCallback(
      (keyOrSelector) => useStoreState(store6, keyOrSelector),
      [store6]
    );
    const memoizedStore = React3.useMemo(
      () => __spreadProps(__spreadValues({}, store6), { useState: useState27 }),
      [store6, useState27]
    );
    const updateStore = useEvent(() => {
      setStore((store22) => createStore3(__spreadValues(__spreadValues({}, props), store22.getState())));
    });
    return [memoizedStore, updateStore];
  }

  // node_modules/@ariakit/core/esm/__chunks/22K762VQ.js
  function isElementPreceding(a2, b2) {
    return Boolean(
      b2.compareDocumentPosition(a2) & Node.DOCUMENT_POSITION_PRECEDING
    );
  }
  function sortBasedOnDOMPosition(items) {
    const pairs = items.map((item, index2) => [index2, item]);
    let isOrderDifferent = false;
    pairs.sort(([indexA, a2], [indexB, b2]) => {
      const elementA = a2.element;
      const elementB = b2.element;
      if (elementA === elementB)
        return 0;
      if (!elementA || !elementB)
        return 0;
      if (isElementPreceding(elementA, elementB)) {
        if (indexA > indexB) {
          isOrderDifferent = true;
        }
        return -1;
      }
      if (indexA < indexB) {
        isOrderDifferent = true;
      }
      return 1;
    });
    if (isOrderDifferent) {
      return pairs.map(([_, item]) => item);
    }
    return items;
  }
  function getCommonParent(items) {
    var _a;
    const firstItem = items.find((item) => !!item.element);
    const lastItem = [...items].reverse().find((item) => !!item.element);
    let parentElement = (_a = firstItem == null ? void 0 : firstItem.element) == null ? void 0 : _a.parentElement;
    while (parentElement && (lastItem == null ? void 0 : lastItem.element)) {
      const parent = parentElement;
      if (lastItem && parent.contains(lastItem.element)) {
        return parentElement;
      }
      parentElement = parentElement.parentElement;
    }
    return getDocument2(parentElement).body;
  }
  function getPrivateStore(store6) {
    return store6 == null ? void 0 : store6.__unstablePrivateStore;
  }
  function createCollectionStore(props = {}) {
    var _a;
    throwOnConflictingProps(props, props.store);
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const items = defaultValue(
      props.items,
      syncState == null ? void 0 : syncState.items,
      props.defaultItems,
      []
    );
    const itemsMap = new Map(items.map((item) => [item.id, item]));
    const initialState = {
      items,
      renderedItems: defaultValue(syncState == null ? void 0 : syncState.renderedItems, [])
    };
    const syncPrivateStore = getPrivateStore(props.store);
    const privateStore = createStore2(
      { items, renderedItems: initialState.renderedItems },
      syncPrivateStore
    );
    const collection = createStore2(initialState, props.store);
    const sortItems = (renderedItems) => {
      const sortedItems = sortBasedOnDOMPosition(renderedItems);
      privateStore.setState("renderedItems", sortedItems);
      collection.setState("renderedItems", sortedItems);
    };
    setup2(collection, () => init(privateStore));
    setup2(privateStore, () => {
      return batch(privateStore, ["items"], (state) => {
        collection.setState("items", state.items);
      });
    });
    setup2(privateStore, () => {
      return batch(privateStore, ["renderedItems"], (state) => {
        let firstRun = true;
        let raf2 = requestAnimationFrame(() => {
          const { renderedItems } = collection.getState();
          if (state.renderedItems === renderedItems)
            return;
          sortItems(state.renderedItems);
        });
        if (typeof IntersectionObserver !== "function") {
          return () => cancelAnimationFrame(raf2);
        }
        const ioCallback = () => {
          if (firstRun) {
            firstRun = false;
            return;
          }
          cancelAnimationFrame(raf2);
          raf2 = requestAnimationFrame(() => sortItems(state.renderedItems));
        };
        const root = getCommonParent(state.renderedItems);
        const observer = new IntersectionObserver(ioCallback, { root });
        for (const item of state.renderedItems) {
          if (!item.element)
            continue;
          observer.observe(item.element);
        }
        return () => {
          cancelAnimationFrame(raf2);
          observer.disconnect();
        };
      });
    });
    const mergeItem = (item, setItems, canDeleteFromMap = false) => {
      let prevItem;
      setItems((items2) => {
        const index2 = items2.findIndex(({ id: id3 }) => id3 === item.id);
        const nextItems = items2.slice();
        if (index2 !== -1) {
          prevItem = items2[index2];
          const nextItem = __spreadValues2(__spreadValues2({}, prevItem), item);
          nextItems[index2] = nextItem;
          itemsMap.set(item.id, nextItem);
        } else {
          nextItems.push(item);
          itemsMap.set(item.id, item);
        }
        return nextItems;
      });
      const unmergeItem = () => {
        setItems((items2) => {
          if (!prevItem) {
            if (canDeleteFromMap) {
              itemsMap.delete(item.id);
            }
            return items2.filter(({ id: id3 }) => id3 !== item.id);
          }
          const index2 = items2.findIndex(({ id: id3 }) => id3 === item.id);
          if (index2 === -1)
            return items2;
          const nextItems = items2.slice();
          nextItems[index2] = prevItem;
          itemsMap.set(item.id, prevItem);
          return nextItems;
        });
      };
      return unmergeItem;
    };
    const registerItem = (item) => mergeItem(
      item,
      (getItems) => privateStore.setState("items", getItems),
      true
    );
    return __spreadProps2(__spreadValues2({}, collection), {
      registerItem,
      renderItem: (item) => chain(
        registerItem(item),
        mergeItem(
          item,
          (getItems) => privateStore.setState("renderedItems", getItems)
        )
      ),
      item: (id3) => {
        if (!id3)
          return null;
        let item = itemsMap.get(id3);
        if (!item) {
          const { items: items2 } = collection.getState();
          item = items2.find((item2) => item2.id === id3);
          if (item) {
            itemsMap.set(id3, item);
          }
        }
        return item || null;
      },
      // @ts-expect-error Internal
      __unstablePrivateStore: privateStore
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/Y6GYTNQ2.js
  function useCollectionStoreProps(store6, update3, props) {
    useUpdateEffect(update3, [props.store]);
    useStoreProps(store6, props, "items", "setItems");
    return store6;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/3ORBWXWF.js
  var React4 = __toESM(require_react(), 1);
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  function isRenderProp(children) {
    return typeof children === "function";
  }
  function createComponent(render2) {
    const Role2 = (props, ref) => render2(__spreadValues({ ref }, props));
    return React4.forwardRef(Role2);
  }
  function createMemoComponent(render2) {
    const Role2 = createComponent(render2);
    return React4.memo(Role2);
  }
  function createElement3(Type, props) {
    const _a = props, { as: As, wrapElement, render: render2 } = _a, rest = __objRest(_a, ["as", "wrapElement", "render"]);
    let element;
    const mergedRef = useMergeRefs2(props.ref, getRefProperty(render2));
    if (true) {
      React4.useEffect(() => {
        if (!As)
          return;
        console.warn(
          "The `as` prop is deprecated. Use the `render` prop instead.",
          "See https://ariakit.org/guide/composition"
        );
      }, [As]);
    }
    if (As && typeof As !== "string") {
      element = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(As, __spreadProps(__spreadValues({}, rest), { render: render2 }));
    } else if (React4.isValidElement(render2)) {
      const renderProps = __spreadProps(__spreadValues({}, render2.props), { ref: mergedRef });
      element = React4.cloneElement(render2, mergeProps(rest, renderProps));
    } else if (render2) {
      element = render2(rest);
    } else if (isRenderProp(props.children)) {
      if (true) {
        React4.useEffect(() => {
          console.warn(
            "The `children` prop as a function is deprecated. Use the `render` prop instead.",
            "See https://ariakit.org/guide/composition"
          );
        }, []);
      }
      const _b = rest, { children } = _b, otherProps = __objRest(_b, ["children"]);
      element = props.children(otherProps);
    } else if (As) {
      element = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(As, __spreadValues({}, rest));
    } else {
      element = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Type, __spreadValues({}, rest));
    }
    if (wrapElement) {
      return wrapElement(element);
    }
    return element;
  }
  function createHook(useProps) {
    const useRole3 = (props = {}) => {
      const htmlProps = useProps(props);
      const copy2 = {};
      for (const prop2 in htmlProps) {
        if (hasOwnProperty(htmlProps, prop2) && htmlProps[prop2] !== void 0) {
          copy2[prop2] = htmlProps[prop2];
        }
      }
      return copy2;
    };
    return useRole3;
  }
  function createStoreContext(providers = [], scopedProviders = []) {
    const context2 = React4.createContext(void 0);
    const scopedContext = React4.createContext(void 0);
    const useContext23 = () => React4.useContext(context2);
    const useScopedContext = (onlyScoped = false) => {
      const scoped = React4.useContext(scopedContext);
      const store6 = useContext23();
      if (onlyScoped)
        return scoped;
      return scoped || store6;
    };
    const useProviderContext = () => {
      const scoped = React4.useContext(scopedContext);
      const store6 = useContext23();
      if (scoped && scoped === store6)
        return;
      return store6;
    };
    const ContextProvider = (props) => {
      return providers.reduceRight(
        (children, Provider7) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Provider7, __spreadProps(__spreadValues({}, props), { children })),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(context2.Provider, __spreadValues({}, props))
      );
    };
    const ScopedContextProvider = (props) => {
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ContextProvider, __spreadProps(__spreadValues({}, props), { children: scopedProviders.reduceRight(
        (children, Provider7) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Provider7, __spreadProps(__spreadValues({}, props), { children })),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(scopedContext.Provider, __spreadValues({}, props))
      ) }));
    };
    return {
      context: context2,
      scopedContext,
      useContext: useContext23,
      useScopedContext,
      useProviderContext,
      ContextProvider,
      ScopedContextProvider
    };
  }

  // node_modules/@ariakit/react-core/esm/__chunks/4UUKJZ4V.js
  var ctx = createStoreContext();
  var useCollectionContext = ctx.useContext;
  var useCollectionScopedContext = ctx.useScopedContext;
  var useCollectionProviderContext = ctx.useProviderContext;
  var CollectionContextProvider = ctx.ContextProvider;
  var CollectionScopedContextProvider = ctx.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/UH3I23HL.js
  var import_react7 = __toESM(require_react(), 1);
  var useCollectionItem = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        shouldRegisterItem = true,
        getItem = identity2,
        element
      } = _b, props = __objRest(_b, [
        "store",
        "shouldRegisterItem",
        "getItem",
        // @ts-expect-error This prop may come from a collection renderer.
        "element"
      ]);
      const context2 = useCollectionContext();
      store6 = store6 || context2;
      const id3 = useId2(props.id);
      const ref = (0, import_react7.useRef)(element);
      (0, import_react7.useEffect)(() => {
        const element2 = ref.current;
        if (!id3)
          return;
        if (!element2)
          return;
        if (!shouldRegisterItem)
          return;
        const item = getItem({ id: id3, element: element2 });
        return store6 == null ? void 0 : store6.renderItem(item);
      }, [id3, shouldRegisterItem, getItem, store6]);
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(ref, props.ref)
      });
      return props;
    }
  );
  var CollectionItem = createComponent(
    (props) => {
      const htmlProps = useCollectionItem(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    CollectionItem.displayName = "CollectionItem";
  }

  // node_modules/@ariakit/core/esm/checkbox/checkbox-store.js
  function createCheckboxStore(props = {}) {
    var _a;
    throwOnConflictingProps(props, props.store);
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const initialState = {
      value: defaultValue(
        props.value,
        syncState == null ? void 0 : syncState.value,
        props.defaultValue,
        false
      )
    };
    const checkbox = createStore2(initialState, props.store);
    return __spreadProps2(__spreadValues2({}, checkbox), {
      setValue: (value) => checkbox.setState("value", value)
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/JIZ5C2JK.js
  function useCheckboxStoreProps(store6, update3, props) {
    useUpdateEffect(update3, [props.store]);
    useStoreProps(store6, props, "value", "setValue");
    return store6;
  }
  function useCheckboxStore(props = {}) {
    const [store6, update3] = useStore(createCheckboxStore, props);
    return useCheckboxStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/VPR2WHQV.js
  var ctx2 = createStoreContext();
  var useCheckboxContext = ctx2.useContext;
  var useCheckboxScopedContext = ctx2.useScopedContext;
  var useCheckboxProviderContext = ctx2.useProviderContext;
  var CheckboxContextProvider = ctx2.ContextProvider;
  var CheckboxScopedContextProvider = ctx2.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/6XBVQI3K.js
  var import_react8 = __toESM(require_react(), 1);
  var CheckboxCheckedContext = (0, import_react8.createContext)(false);

  // node_modules/@ariakit/react-core/esm/__chunks/SHA3WOPI.js
  var import_react9 = __toESM(require_react(), 1);
  var FocusableContext = (0, import_react9.createContext)(true);

  // node_modules/@ariakit/react-core/esm/__chunks/KK7H3W2B.js
  var import_react10 = __toESM(require_react(), 1);

  // node_modules/@ariakit/core/esm/utils/focus.js
  var selector = "input:not([type='hidden']):not([disabled]), select:not([disabled]), textarea:not([disabled]), a[href], button:not([disabled]), [tabindex], iframe, object, embed, area[href], audio[controls], video[controls], [contenteditable]:not([contenteditable='false'])";
  function hasNegativeTabIndex(element) {
    const tabIndex = parseInt(element.getAttribute("tabindex") || "0", 10);
    return tabIndex < 0;
  }
  function isFocusable(element) {
    if (!matches(element, selector))
      return false;
    if (!isVisible2(element))
      return false;
    if (closest(element, "[inert]"))
      return false;
    return true;
  }
  function isTabbable(element) {
    if (!isFocusable(element))
      return false;
    if (hasNegativeTabIndex(element))
      return false;
    if (!("form" in element))
      return true;
    if (!element.form)
      return true;
    if (element.checked)
      return true;
    if (element.type !== "radio")
      return true;
    const radioGroup = element.form.elements.namedItem(element.name);
    if (!radioGroup)
      return true;
    if (!("length" in radioGroup))
      return true;
    const activeElement = getActiveElement(element);
    if (!activeElement)
      return true;
    if (activeElement === element)
      return true;
    if (!("form" in activeElement))
      return true;
    if (activeElement.form !== element.form)
      return true;
    if (activeElement.name !== element.name)
      return true;
    return false;
  }
  function getAllFocusableIn(container, includeContainer) {
    const elements2 = Array.from(
      container.querySelectorAll(selector)
    );
    if (includeContainer) {
      elements2.unshift(container);
    }
    const focusableElements2 = elements2.filter(isFocusable);
    focusableElements2.forEach((element, i3) => {
      if (isFrame(element) && element.contentDocument) {
        const frameBody = element.contentDocument.body;
        focusableElements2.splice(i3, 1, ...getAllFocusableIn(frameBody));
      }
    });
    return focusableElements2;
  }
  function getAllTabbableIn(container, includeContainer, fallbackToFocusable) {
    const elements2 = Array.from(
      container.querySelectorAll(selector)
    );
    const tabbableElements = elements2.filter(isTabbable);
    if (includeContainer && isTabbable(container)) {
      tabbableElements.unshift(container);
    }
    tabbableElements.forEach((element, i3) => {
      if (isFrame(element) && element.contentDocument) {
        const frameBody = element.contentDocument.body;
        const allFrameTabbable = getAllTabbableIn(
          frameBody,
          false,
          fallbackToFocusable
        );
        tabbableElements.splice(i3, 1, ...allFrameTabbable);
      }
    });
    if (!tabbableElements.length && fallbackToFocusable) {
      return elements2;
    }
    return tabbableElements;
  }
  function getFirstTabbableIn(container, includeContainer, fallbackToFocusable) {
    const [first] = getAllTabbableIn(
      container,
      includeContainer,
      fallbackToFocusable
    );
    return first || null;
  }
  function getNextTabbableIn(container, includeContainer, fallbackToFirst, fallbackToFocusable) {
    const activeElement = getActiveElement(container);
    const allFocusable = getAllFocusableIn(container, includeContainer);
    const activeIndex = allFocusable.indexOf(activeElement);
    const nextFocusableElements = allFocusable.slice(activeIndex + 1);
    return nextFocusableElements.find(isTabbable) || (fallbackToFirst ? allFocusable.find(isTabbable) : null) || (fallbackToFocusable ? nextFocusableElements[0] : null) || null;
  }
  function getNextTabbable(fallbackToFirst, fallbackToFocusable) {
    return getNextTabbableIn(
      document.body,
      false,
      fallbackToFirst,
      fallbackToFocusable
    );
  }
  function getPreviousTabbableIn(container, includeContainer, fallbackToLast, fallbackToFocusable) {
    const activeElement = getActiveElement(container);
    const allFocusable = getAllFocusableIn(container, includeContainer).reverse();
    const activeIndex = allFocusable.indexOf(activeElement);
    const previousFocusableElements = allFocusable.slice(activeIndex + 1);
    return previousFocusableElements.find(isTabbable) || (fallbackToLast ? allFocusable.find(isTabbable) : null) || (fallbackToFocusable ? previousFocusableElements[0] : null) || null;
  }
  function getPreviousTabbable(fallbackToFirst, fallbackToFocusable) {
    return getPreviousTabbableIn(
      document.body,
      false,
      fallbackToFirst,
      fallbackToFocusable
    );
  }
  function hasFocus(element) {
    const activeElement = getActiveElement(element);
    if (!activeElement)
      return false;
    if (activeElement === element)
      return true;
    const activeDescendant = activeElement.getAttribute("aria-activedescendant");
    if (!activeDescendant)
      return false;
    return activeDescendant === element.id;
  }
  function hasFocusWithin(element) {
    const activeElement = getActiveElement(element);
    if (!activeElement)
      return false;
    if (contains(element, activeElement))
      return true;
    const activeDescendant = activeElement.getAttribute("aria-activedescendant");
    if (!activeDescendant)
      return false;
    if (!("id" in element))
      return false;
    if (activeDescendant === element.id)
      return true;
    return !!element.querySelector(`#${CSS.escape(activeDescendant)}`);
  }
  function focusIfNeeded(element) {
    if (!hasFocusWithin(element) && isFocusable(element)) {
      element.focus();
    }
  }
  function disableFocus(element) {
    var _a;
    const currentTabindex = (_a = element.getAttribute("tabindex")) != null ? _a : "";
    element.setAttribute("data-tabindex", currentTabindex);
    element.setAttribute("tabindex", "-1");
  }
  function disableFocusIn(container, includeContainer) {
    const tabbableElements = getAllTabbableIn(container, includeContainer);
    tabbableElements.forEach(disableFocus);
  }
  function restoreFocusIn(container) {
    const elements2 = container.querySelectorAll("[data-tabindex]");
    const restoreTabIndex = (element) => {
      const tabindex = element.getAttribute("data-tabindex");
      element.removeAttribute("data-tabindex");
      if (tabindex) {
        element.setAttribute("tabindex", tabindex);
      } else {
        element.removeAttribute("tabindex");
      }
    };
    if (container.hasAttribute("data-tabindex")) {
      restoreTabIndex(container);
    }
    elements2.forEach(restoreTabIndex);
  }
  function focusIntoView(element, options) {
    if (!("scrollIntoView" in element)) {
      element.focus();
    } else {
      element.focus({ preventScroll: true });
      element.scrollIntoView(__spreadValues2({ block: "nearest", inline: "nearest" }, options));
    }
  }

  // node_modules/@ariakit/react-core/esm/__chunks/KK7H3W2B.js
  var isSafariBrowser = isSafari();
  var alwaysFocusVisibleInputTypes = [
    "text",
    "search",
    "url",
    "tel",
    "email",
    "password",
    "number",
    "date",
    "month",
    "week",
    "time",
    "datetime",
    "datetime-local"
  ];
  function isAlwaysFocusVisible(element) {
    const { tagName, readOnly, type } = element;
    if (tagName === "TEXTAREA" && !readOnly)
      return true;
    if (tagName === "SELECT" && !readOnly)
      return true;
    if (tagName === "INPUT" && !readOnly) {
      return alwaysFocusVisibleInputTypes.includes(type);
    }
    if (element.isContentEditable)
      return true;
    return false;
  }
  function isAlwaysFocusVisibleDelayed(element) {
    const role = element.getAttribute("role");
    if (role !== "combobox")
      return false;
    return !!element.dataset.name;
  }
  function getLabels(element) {
    if ("labels" in element) {
      return element.labels;
    }
    return null;
  }
  function isNativeCheckboxOrRadio(element) {
    const tagName = element.tagName.toLowerCase();
    if (tagName === "input" && element.type) {
      return element.type === "radio" || element.type === "checkbox";
    }
    return false;
  }
  function isNativeTabbable(tagName) {
    if (!tagName)
      return true;
    return tagName === "button" || tagName === "input" || tagName === "select" || tagName === "textarea" || tagName === "a";
  }
  function supportsDisabledAttribute(tagName) {
    if (!tagName)
      return true;
    return tagName === "button" || tagName === "input" || tagName === "select" || tagName === "textarea";
  }
  function getTabIndex2(focusable, trulyDisabled, nativeTabbable, supportsDisabled, tabIndexProp) {
    if (!focusable) {
      return tabIndexProp;
    }
    if (trulyDisabled) {
      if (nativeTabbable && !supportsDisabled) {
        return -1;
      }
      return;
    }
    if (nativeTabbable) {
      return tabIndexProp;
    }
    return tabIndexProp || 0;
  }
  function useDisableEvent(onEvent, disabled) {
    return useEvent((event) => {
      onEvent == null ? void 0 : onEvent(event);
      if (event.defaultPrevented)
        return;
      if (disabled) {
        event.stopPropagation();
        event.preventDefault();
      }
    });
  }
  var isKeyboardModality = true;
  function onGlobalMouseDown(event) {
    const target = event.target;
    if (target && "hasAttribute" in target) {
      if (!target.hasAttribute("data-focus-visible")) {
        isKeyboardModality = false;
      }
    }
  }
  function onGlobalKeyDown(event) {
    if (event.metaKey)
      return;
    if (event.ctrlKey)
      return;
    if (event.altKey)
      return;
    isKeyboardModality = true;
  }
  var useFocusable = createHook(
    (_a) => {
      var _b = _a, {
        focusable = true,
        accessibleWhenDisabled,
        autoFocus,
        onFocusVisible
      } = _b, props = __objRest(_b, [
        "focusable",
        "accessibleWhenDisabled",
        "autoFocus",
        "onFocusVisible"
      ]);
      const ref = (0, import_react10.useRef)(null);
      (0, import_react10.useEffect)(() => {
        if (!focusable)
          return;
        addGlobalEventListener("mousedown", onGlobalMouseDown, true);
        addGlobalEventListener("keydown", onGlobalKeyDown, true);
      }, [focusable]);
      if (isSafariBrowser) {
        (0, import_react10.useEffect)(() => {
          if (!focusable)
            return;
          const element = ref.current;
          if (!element)
            return;
          if (!isNativeCheckboxOrRadio(element))
            return;
          const labels = getLabels(element);
          if (!labels)
            return;
          const onMouseUp = () => queueMicrotask(() => element.focus());
          labels.forEach((label) => label.addEventListener("mouseup", onMouseUp));
          return () => {
            labels.forEach(
              (label) => label.removeEventListener("mouseup", onMouseUp)
            );
          };
        }, [focusable]);
      }
      const disabled = focusable && disabledFromProps(props);
      const trulyDisabled = !!disabled && !accessibleWhenDisabled;
      const [focusVisible, setFocusVisible] = (0, import_react10.useState)(false);
      (0, import_react10.useEffect)(() => {
        if (!focusable)
          return;
        if (trulyDisabled && focusVisible) {
          setFocusVisible(false);
        }
      }, [focusable, trulyDisabled, focusVisible]);
      (0, import_react10.useEffect)(() => {
        if (!focusable)
          return;
        if (!focusVisible)
          return;
        const element = ref.current;
        if (!element)
          return;
        if (typeof IntersectionObserver === "undefined")
          return;
        const observer = new IntersectionObserver(() => {
          if (!isFocusable(element)) {
            setFocusVisible(false);
          }
        });
        observer.observe(element);
        return () => observer.disconnect();
      }, [focusable, focusVisible]);
      const onKeyPressCapture = useDisableEvent(
        props.onKeyPressCapture,
        disabled
      );
      const onMouseDownCapture = useDisableEvent(
        props.onMouseDownCapture,
        disabled
      );
      const onClickCapture = useDisableEvent(props.onClickCapture, disabled);
      const onMouseDownProp = props.onMouseDown;
      const onMouseDown = useEvent((event) => {
        onMouseDownProp == null ? void 0 : onMouseDownProp(event);
        if (event.defaultPrevented)
          return;
        if (!focusable)
          return;
        const element = event.currentTarget;
        if (!isSafariBrowser)
          return;
        if (isPortalEvent(event))
          return;
        if (!isButton(element) && !isNativeCheckboxOrRadio(element))
          return;
        let receivedFocus = false;
        const onFocus = () => {
          receivedFocus = true;
        };
        const options = { capture: true, once: true };
        element.addEventListener("focusin", onFocus, options);
        queueBeforeEvent(element, "mouseup", () => {
          element.removeEventListener("focusin", onFocus, true);
          if (receivedFocus)
            return;
          focusIfNeeded(element);
        });
      });
      const handleFocusVisible = (event, currentTarget) => {
        if (currentTarget) {
          event.currentTarget = currentTarget;
        }
        if (!focusable)
          return;
        const element = event.currentTarget;
        if (!element)
          return;
        if (!hasFocus(element))
          return;
        onFocusVisible == null ? void 0 : onFocusVisible(event);
        if (event.defaultPrevented)
          return;
        setFocusVisible(true);
      };
      const onKeyDownCaptureProp = props.onKeyDownCapture;
      const onKeyDownCapture = useEvent(
        (event) => {
          onKeyDownCaptureProp == null ? void 0 : onKeyDownCaptureProp(event);
          if (event.defaultPrevented)
            return;
          if (!focusable)
            return;
          if (focusVisible)
            return;
          if (event.metaKey)
            return;
          if (event.altKey)
            return;
          if (event.ctrlKey)
            return;
          if (!isSelfTarget(event))
            return;
          const element = event.currentTarget;
          queueMicrotask(() => handleFocusVisible(event, element));
        }
      );
      const onFocusCaptureProp = props.onFocusCapture;
      const onFocusCapture = useEvent((event) => {
        onFocusCaptureProp == null ? void 0 : onFocusCaptureProp(event);
        if (event.defaultPrevented)
          return;
        if (!focusable)
          return;
        if (!isSelfTarget(event)) {
          setFocusVisible(false);
          return;
        }
        const element = event.currentTarget;
        const applyFocusVisible = () => handleFocusVisible(event, element);
        if (isKeyboardModality || isAlwaysFocusVisible(event.target)) {
          queueMicrotask(applyFocusVisible);
        } else if (isAlwaysFocusVisibleDelayed(event.target)) {
          queueBeforeEvent(event.target, "focusout", applyFocusVisible);
        } else {
          setFocusVisible(false);
        }
      });
      const onBlurProp = props.onBlur;
      const onBlur = useEvent((event) => {
        onBlurProp == null ? void 0 : onBlurProp(event);
        if (!focusable)
          return;
        if (!isFocusEventOutside(event))
          return;
        setFocusVisible(false);
      });
      const autoFocusOnShow = (0, import_react10.useContext)(FocusableContext);
      const autoFocusRef = useEvent((element) => {
        if (!focusable)
          return;
        if (!autoFocus)
          return;
        if (!element)
          return;
        if (!autoFocusOnShow)
          return;
        queueMicrotask(() => {
          if (hasFocus(element))
            return;
          if (!isFocusable(element))
            return;
          element.focus();
        });
      });
      const tagName = useTagName(ref, props.as);
      const nativeTabbable = focusable && isNativeTabbable(tagName);
      const supportsDisabled = focusable && supportsDisabledAttribute(tagName);
      const style = trulyDisabled ? __spreadValues({ pointerEvents: "none" }, props.style) : props.style;
      props = __spreadProps(__spreadValues({
        "data-focus-visible": focusable && focusVisible ? "" : void 0,
        "data-autofocus": autoFocus ? true : void 0,
        "aria-disabled": disabled ? true : void 0
      }, props), {
        ref: useMergeRefs2(ref, autoFocusRef, props.ref),
        style,
        tabIndex: getTabIndex2(
          focusable,
          trulyDisabled,
          nativeTabbable,
          supportsDisabled,
          props.tabIndex
        ),
        disabled: supportsDisabled && trulyDisabled ? true : void 0,
        // TODO: Test Focusable contentEditable.
        contentEditable: disabled ? void 0 : props.contentEditable,
        onKeyPressCapture,
        onClickCapture,
        onMouseDownCapture,
        onMouseDown,
        onKeyDownCapture,
        onFocusCapture,
        onBlur
      });
      return props;
    }
  );
  var Focusable = createComponent((props) => {
    props = useFocusable(props);
    return createElement3("div", props);
  });
  if (true) {
    Focusable.displayName = "Focusable";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/NWCBQ4CV.js
  var import_react11 = __toESM(require_react(), 1);
  function isNativeClick(event) {
    if (!event.isTrusted)
      return false;
    const element = event.currentTarget;
    if (event.key === "Enter") {
      return isButton(element) || element.tagName === "SUMMARY" || element.tagName === "A";
    }
    if (event.key === " ") {
      return isButton(element) || element.tagName === "SUMMARY" || element.tagName === "INPUT" || element.tagName === "SELECT";
    }
    return false;
  }
  var symbol = Symbol("command");
  var useCommand = createHook(
    (_a) => {
      var _b = _a, { clickOnEnter = true, clickOnSpace = true } = _b, props = __objRest(_b, ["clickOnEnter", "clickOnSpace"]);
      const ref = (0, import_react11.useRef)(null);
      const tagName = useTagName(ref, props.as);
      const type = props.type;
      const [isNativeButton, setIsNativeButton] = (0, import_react11.useState)(
        () => !!tagName && isButton({ tagName, type })
      );
      (0, import_react11.useEffect)(() => {
        if (!ref.current)
          return;
        setIsNativeButton(isButton(ref.current));
      }, []);
      const [active, setActive] = (0, import_react11.useState)(false);
      const activeRef = (0, import_react11.useRef)(false);
      const disabled = disabledFromProps(props);
      const [isDuplicate, metadataProps] = useMetadataProps(props, symbol, true);
      const onKeyDownProp = props.onKeyDown;
      const onKeyDown = useEvent((event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        const element = event.currentTarget;
        if (event.defaultPrevented)
          return;
        if (isDuplicate)
          return;
        if (disabled)
          return;
        if (!isSelfTarget(event))
          return;
        if (isTextField2(element))
          return;
        if (element.isContentEditable)
          return;
        const isEnter = clickOnEnter && event.key === "Enter";
        const isSpace2 = clickOnSpace && event.key === " ";
        const shouldPreventEnter = event.key === "Enter" && !clickOnEnter;
        const shouldPreventSpace = event.key === " " && !clickOnSpace;
        if (shouldPreventEnter || shouldPreventSpace) {
          event.preventDefault();
          return;
        }
        if (isEnter || isSpace2) {
          const nativeClick = isNativeClick(event);
          if (isEnter) {
            if (!nativeClick) {
              event.preventDefault();
              const _a2 = event, { view: view2 } = _a2, eventInit = __objRest(_a2, ["view"]);
              const click = () => fireClickEvent(element, eventInit);
              if (isFirefox()) {
                queueBeforeEvent(element, "keyup", click);
              } else {
                queueMicrotask(click);
              }
            }
          } else if (isSpace2) {
            activeRef.current = true;
            if (!nativeClick) {
              event.preventDefault();
              setActive(true);
            }
          }
        }
      });
      const onKeyUpProp = props.onKeyUp;
      const onKeyUp = useEvent((event) => {
        onKeyUpProp == null ? void 0 : onKeyUpProp(event);
        if (event.defaultPrevented)
          return;
        if (isDuplicate)
          return;
        if (disabled)
          return;
        if (event.metaKey)
          return;
        const isSpace2 = clickOnSpace && event.key === " ";
        if (activeRef.current && isSpace2) {
          activeRef.current = false;
          if (!isNativeClick(event)) {
            event.preventDefault();
            setActive(false);
            const element = event.currentTarget;
            const _a2 = event, { view: view2 } = _a2, eventInit = __objRest(_a2, ["view"]);
            queueMicrotask(() => fireClickEvent(element, eventInit));
          }
        }
      });
      props = __spreadProps(__spreadValues(__spreadValues({
        "data-active": active ? "" : void 0,
        type: isNativeButton ? "button" : void 0
      }, metadataProps), props), {
        ref: useMergeRefs2(ref, props.ref),
        onKeyDown,
        onKeyUp
      });
      props = useFocusable(props);
      return props;
    }
  );
  var Command = createComponent((props) => {
    props = useCommand(props);
    return createElement3("button", props);
  });
  if (true) {
    Command.displayName = "Command";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/3AHQ6JCP.js
  var import_react12 = __toESM(require_react(), 1);
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  function setMixed(element, mixed) {
    if (mixed) {
      element.indeterminate = true;
    } else if (element.indeterminate) {
      element.indeterminate = false;
    }
  }
  function isNativeCheckbox(tagName, type) {
    return tagName === "input" && (!type || type === "checkbox");
  }
  function getPrimitiveValue(value) {
    if (Array.isArray(value)) {
      return value.toString();
    }
    return value;
  }
  var useCheckbox = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        name,
        value: valueProp,
        checked: checkedProp,
        defaultChecked
      } = _b, props = __objRest(_b, [
        "store",
        "name",
        "value",
        "checked",
        "defaultChecked"
      ]);
      const context2 = useCheckboxContext();
      store6 = store6 || context2;
      const [_checked, setChecked] = (0, import_react12.useState)(defaultChecked != null ? defaultChecked : false);
      const checked = useStoreState(store6, (state) => {
        if (checkedProp !== void 0)
          return checkedProp;
        if ((state == null ? void 0 : state.value) === void 0)
          return _checked;
        if (valueProp != null) {
          if (Array.isArray(state.value)) {
            const primitiveValue = getPrimitiveValue(valueProp);
            return state.value.includes(primitiveValue);
          }
          return state.value === valueProp;
        }
        if (Array.isArray(state.value))
          return false;
        if (typeof state.value === "boolean")
          return state.value;
        return false;
      });
      const ref = (0, import_react12.useRef)(null);
      const tagName = useTagName(ref, props.as || "input");
      const nativeCheckbox = isNativeCheckbox(tagName, props.type);
      const mixed = checked ? checked === "mixed" : void 0;
      const isChecked = checked === "mixed" ? false : checked;
      const disabled = disabledFromProps(props);
      const [propertyUpdated, schedulePropertyUpdate] = useForceUpdate();
      (0, import_react12.useEffect)(() => {
        const element = ref.current;
        if (!element)
          return;
        setMixed(element, mixed);
        if (nativeCheckbox)
          return;
        element.checked = isChecked;
        if (name !== void 0) {
          element.name = name;
        }
        if (valueProp !== void 0) {
          element.value = `${valueProp}`;
        }
      }, [propertyUpdated, mixed, nativeCheckbox, isChecked, name, valueProp]);
      const onChangeProp = props.onChange;
      const onChange = useEvent((event) => {
        if (disabled) {
          event.stopPropagation();
          event.preventDefault();
          return;
        }
        setMixed(event.currentTarget, mixed);
        if (!nativeCheckbox) {
          event.currentTarget.checked = !event.currentTarget.checked;
          schedulePropertyUpdate();
        }
        onChangeProp == null ? void 0 : onChangeProp(event);
        if (event.defaultPrevented)
          return;
        const elementChecked = event.currentTarget.checked;
        setChecked(elementChecked);
        store6 == null ? void 0 : store6.setValue((prevValue) => {
          if (valueProp == null)
            return elementChecked;
          const primitiveValue = getPrimitiveValue(valueProp);
          if (!Array.isArray(prevValue)) {
            return prevValue === primitiveValue ? false : primitiveValue;
          }
          if (elementChecked) {
            if (prevValue.includes(primitiveValue)) {
              return prevValue;
            }
            return [...prevValue, primitiveValue];
          }
          return prevValue.filter((v2) => v2 !== primitiveValue);
        });
      });
      const onClickProp = props.onClick;
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        if (nativeCheckbox)
          return;
        onChange(event);
      });
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(CheckboxCheckedContext.Provider, { value: isChecked, children: element }),
        [isChecked]
      );
      props = __spreadProps(__spreadValues({
        role: !nativeCheckbox ? "checkbox" : void 0,
        type: nativeCheckbox ? "checkbox" : void 0,
        "aria-checked": checked
      }, props), {
        ref: useMergeRefs2(ref, props.ref),
        onChange,
        onClick
      });
      props = useCommand(__spreadValues({ clickOnEnter: !nativeCheckbox }, props));
      return __spreadValues({
        name: nativeCheckbox ? name : void 0,
        value: nativeCheckbox ? valueProp : void 0,
        checked: isChecked
      }, props);
    }
  );
  var Checkbox = createComponent((props) => {
    const htmlProps = useCheckbox(props);
    return createElement3("input", htmlProps);
  });
  if (true) {
    Checkbox.displayName = "Checkbox";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/MW2F7SEA.js
  var import_react13 = __toESM(require_react(), 1);
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  var checkmark = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    "svg",
    {
      display: "block",
      fill: "none",
      stroke: "currentColor",
      strokeLinecap: "round",
      strokeLinejoin: "round",
      strokeWidth: "1.5pt",
      viewBox: "0 0 16 16",
      height: "1em",
      width: "1em",
      children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("polyline", { points: "4,8 7,12 12,4" })
    }
  );
  function getChildren(props) {
    if (props.checked) {
      return props.children || checkmark;
    }
    if (typeof props.children === "function") {
      return props.children;
    }
    return null;
  }
  var useCheckboxCheck = createHook(
    (_a) => {
      var _b = _a, { store: store6, checked } = _b, props = __objRest(_b, ["store", "checked"]);
      const context2 = (0, import_react13.useContext)(CheckboxCheckedContext);
      checked = checked != null ? checked : context2;
      const children = getChildren({ checked, children: props.children });
      props = __spreadProps(__spreadValues({
        "aria-hidden": true
      }, props), {
        children,
        style: __spreadValues({
          width: "1em",
          height: "1em",
          pointerEvents: "none"
        }, props.style)
      });
      return props;
    }
  );
  var CheckboxCheck = createComponent((props) => {
    const htmlProps = useCheckboxCheck(props);
    return createElement3("span", htmlProps);
  });
  if (true) {
    CheckboxCheck.displayName = "CheckboxCheck";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/VDNZBO4W.js
  var import_react14 = __toESM(require_react(), 1);
  var useButton = createHook((props) => {
    const ref = (0, import_react14.useRef)(null);
    const tagName = useTagName(ref, props.as || "button");
    const [isNativeButton, setIsNativeButton] = (0, import_react14.useState)(
      () => !!tagName && isButton({ tagName, type: props.type })
    );
    (0, import_react14.useEffect)(() => {
      if (!ref.current)
        return;
      setIsNativeButton(isButton(ref.current));
    }, []);
    props = __spreadProps(__spreadValues({
      role: !isNativeButton && tagName !== "a" ? "button" : void 0
    }, props), {
      ref: useMergeRefs2(ref, props.ref)
    });
    props = useCommand(props);
    return props;
  });
  var Button = createComponent((props) => {
    const htmlProps = useButton(props);
    return createElement3("button", htmlProps);
  });
  if (true) {
    Button.displayName = "Button";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/3X3MDQGM.js
  var import_react15 = __toESM(require_react(), 1);
  var GroupLabelContext = (0, import_react15.createContext)(void 0);

  // node_modules/@ariakit/react-core/esm/__chunks/R2QZ3KXH.js
  var import_react16 = __toESM(require_react(), 1);
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var useGroup = createHook((props) => {
    const [labelId, setLabelId] = (0, import_react16.useState)();
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(GroupLabelContext.Provider, { value: setLabelId, children: element }),
      []
    );
    props = __spreadValues({
      role: "group",
      "aria-labelledby": labelId
    }, props);
    return props;
  });
  var Group = createComponent((props) => {
    const htmlProps = useGroup(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    Group.displayName = "Group";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/IB7YUKH5.js
  var import_react17 = __toESM(require_react(), 1);
  var ctx3 = createStoreContext(
    [CollectionContextProvider],
    [CollectionScopedContextProvider]
  );
  var useCompositeContext = ctx3.useContext;
  var useCompositeScopedContext = ctx3.useScopedContext;
  var useCompositeProviderContext = ctx3.useProviderContext;
  var CompositeContextProvider = ctx3.ContextProvider;
  var CompositeScopedContextProvider = ctx3.ScopedContextProvider;
  var CompositeItemContext = (0, import_react17.createContext)(
    void 0
  );
  var CompositeRowContext = (0, import_react17.createContext)(
    void 0
  );

  // node_modules/@ariakit/react-core/esm/__chunks/XEV62JUQ.js
  var ctx4 = createStoreContext(
    [CompositeContextProvider],
    [CompositeScopedContextProvider]
  );
  var useRadioContext = ctx4.useContext;
  var useRadioScopedContext = ctx4.useScopedContext;
  var useRadioProviderContext = ctx4.useProviderContext;
  var RadioContextProvider = ctx4.ContextProvider;
  var RadioScopedContextProvider = ctx4.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/3IEDWLST.js
  var NULL_ITEM = { id: null };
  function flipItems(items, activeId, shouldInsertNullItem = false) {
    const index2 = items.findIndex((item) => item.id === activeId);
    return [
      ...items.slice(index2 + 1),
      ...shouldInsertNullItem ? [NULL_ITEM] : [],
      ...items.slice(0, index2)
    ];
  }
  function findFirstEnabledItem(items, excludeId) {
    return items.find((item) => {
      if (excludeId) {
        return !item.disabled && item.id !== excludeId;
      }
      return !item.disabled;
    });
  }
  function getEnabledItem(store6, id3) {
    if (!id3)
      return null;
    return store6.item(id3) || null;
  }
  function groupItemsByRows(items) {
    const rows = [];
    for (const item of items) {
      const row = rows.find((currentRow) => {
        var _a;
        return ((_a = currentRow[0]) == null ? void 0 : _a.rowId) === item.rowId;
      });
      if (row) {
        row.push(item);
      } else {
        rows.push([item]);
      }
    }
    return rows;
  }
  var FOCUS_SILENTLY = Symbol("FOCUS_SILENTLY");
  function focusSilently(element) {
    element[FOCUS_SILENTLY] = true;
    element.focus({ preventScroll: true });
  }
  function silentlyFocused(element) {
    const isSilentlyFocused = element[FOCUS_SILENTLY];
    delete element[FOCUS_SILENTLY];
    return isSilentlyFocused;
  }
  function isItem(store6, element, exclude) {
    if (!element)
      return false;
    if (element === exclude)
      return false;
    const item = store6.item(element.id);
    if (!item)
      return false;
    if (exclude && item.element === exclude)
      return false;
    return true;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/QZLXIDNP.js
  var import_react18 = __toESM(require_react(), 1);
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  function isEditableElement(element) {
    if (element.isContentEditable)
      return true;
    if (isTextField2(element))
      return true;
    return element.tagName === "INPUT" && !isButton(element);
  }
  function getNextPageOffset(scrollingElement, pageUp = false) {
    const height = scrollingElement.clientHeight;
    const { top } = scrollingElement.getBoundingClientRect();
    const pageSize = Math.max(height * 0.875, height - 40) * 1.5;
    const pageOffset = pageUp ? height - pageSize + top : pageSize + top;
    if (scrollingElement.tagName === "HTML") {
      return pageOffset + scrollingElement.scrollTop;
    }
    return pageOffset;
  }
  function getItemOffset(itemElement, pageUp = false) {
    const { top } = itemElement.getBoundingClientRect();
    if (pageUp) {
      return top + itemElement.clientHeight;
    }
    return top;
  }
  function findNextPageItemId(element, store6, next3, pageUp = false) {
    var _a;
    if (!store6)
      return;
    if (!next3)
      return;
    const { renderedItems } = store6.getState();
    const scrollingElement = getScrollingElement(element);
    if (!scrollingElement)
      return;
    const nextPageOffset = getNextPageOffset(scrollingElement, pageUp);
    let id3;
    let prevDifference;
    for (let i3 = 0; i3 < renderedItems.length; i3 += 1) {
      const previousId = id3;
      id3 = next3(i3);
      if (!id3)
        break;
      if (id3 === previousId)
        continue;
      const itemElement = (_a = getEnabledItem(store6, id3)) == null ? void 0 : _a.element;
      if (!itemElement)
        continue;
      const itemOffset = getItemOffset(itemElement, pageUp);
      const difference = itemOffset - nextPageOffset;
      const absDifference = Math.abs(difference);
      if (pageUp && difference <= 0 || !pageUp && difference >= 0) {
        if (prevDifference !== void 0 && prevDifference < absDifference) {
          id3 = previousId;
        }
        break;
      }
      prevDifference = absDifference;
    }
    return id3;
  }
  function targetIsAnotherItem(event, store6) {
    if (isSelfTarget(event))
      return false;
    return isItem(store6, event.target);
  }
  function useRole(ref, props) {
    const roleProp = props.role;
    const [role, setRole] = (0, import_react18.useState)(roleProp);
    useSafeLayoutEffect(() => {
      const element = ref.current;
      if (!element)
        return;
      setRole(element.getAttribute("role") || roleProp);
    }, [roleProp]);
    return role;
  }
  function requiresAriaSelected(role) {
    return role === "option" || role === "treeitem";
  }
  function supportsAriaSelected(role) {
    if (role === "option")
      return true;
    if (role === "tab")
      return true;
    if (role === "treeitem")
      return true;
    if (role === "gridcell")
      return true;
    if (role === "row")
      return true;
    if (role === "columnheader")
      return true;
    if (role === "rowheader")
      return true;
    return false;
  }
  var useCompositeItem = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        rowId: rowIdProp,
        preventScrollOnKeyDown = false,
        moveOnKeyPress = true,
        tabbable = false,
        getItem: getItemProp,
        "aria-setsize": ariaSetSizeProp,
        "aria-posinset": ariaPosInSetProp
      } = _b, props = __objRest(_b, [
        "store",
        "rowId",
        "preventScrollOnKeyDown",
        "moveOnKeyPress",
        "tabbable",
        "getItem",
        "aria-setsize",
        "aria-posinset"
      ]);
      const context2 = useCompositeContext();
      store6 = store6 || context2;
      const id3 = useId2(props.id);
      const ref = (0, import_react18.useRef)(null);
      const row = (0, import_react18.useContext)(CompositeRowContext);
      const rowId = useStoreState(store6, (state) => {
        if (rowIdProp)
          return rowIdProp;
        if (!state)
          return;
        if (!(row == null ? void 0 : row.baseElement))
          return;
        if (row.baseElement !== state.baseElement)
          return;
        return row.id;
      });
      const disabled = disabledFromProps(props);
      const trulyDisabled = disabled && !props.accessibleWhenDisabled;
      const getItem = (0, import_react18.useCallback)(
        (item) => {
          const nextItem = __spreadProps(__spreadValues({}, item), {
            id: id3 || item.id,
            rowId,
            disabled: !!trulyDisabled
          });
          if (getItemProp) {
            return getItemProp(nextItem);
          }
          return nextItem;
        },
        [id3, rowId, trulyDisabled, getItemProp]
      );
      const onFocusProp = props.onFocus;
      const hasFocusedComposite = (0, import_react18.useRef)(false);
      const onFocus = useEvent((event) => {
        onFocusProp == null ? void 0 : onFocusProp(event);
        if (event.defaultPrevented)
          return;
        if (isPortalEvent(event))
          return;
        if (!id3)
          return;
        if (!store6)
          return;
        const { activeId, virtualFocus: virtualFocus2, baseElement: baseElement2 } = store6.getState();
        if (targetIsAnotherItem(event, store6))
          return;
        if (activeId !== id3) {
          store6.setActiveId(id3);
        }
        if (!virtualFocus2)
          return;
        if (!isSelfTarget(event))
          return;
        if (isEditableElement(event.currentTarget))
          return;
        if (!(baseElement2 == null ? void 0 : baseElement2.isConnected))
          return;
        hasFocusedComposite.current = true;
        const fromComposite = event.relatedTarget === baseElement2 || isItem(store6, event.relatedTarget);
        if (fromComposite) {
          focusSilently(baseElement2);
        } else {
          baseElement2.focus();
        }
      });
      const onBlurCaptureProp = props.onBlurCapture;
      const onBlurCapture = useEvent((event) => {
        onBlurCaptureProp == null ? void 0 : onBlurCaptureProp(event);
        if (event.defaultPrevented)
          return;
        const state = store6 == null ? void 0 : store6.getState();
        if ((state == null ? void 0 : state.virtualFocus) && hasFocusedComposite.current) {
          hasFocusedComposite.current = false;
          event.preventDefault();
          event.stopPropagation();
        }
      });
      const onKeyDownProp = props.onKeyDown;
      const preventScrollOnKeyDownProp = useBooleanEvent(preventScrollOnKeyDown);
      const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
      const onKeyDown = useEvent((event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (event.defaultPrevented)
          return;
        if (!isSelfTarget(event))
          return;
        if (!store6)
          return;
        const { currentTarget } = event;
        const state = store6.getState();
        const item = store6.item(id3);
        const isGrid2 = !!(item == null ? void 0 : item.rowId);
        const isVertical = state.orientation !== "horizontal";
        const isHorizontal = state.orientation !== "vertical";
        const canHomeEnd = () => {
          if (isGrid2)
            return true;
          if (isHorizontal)
            return true;
          if (!state.baseElement)
            return true;
          if (!isTextField2(state.baseElement))
            return true;
          return false;
        };
        const keyMap = {
          ArrowUp: (isGrid2 || isVertical) && store6.up,
          ArrowRight: (isGrid2 || isHorizontal) && store6.next,
          ArrowDown: (isGrid2 || isVertical) && store6.down,
          ArrowLeft: (isGrid2 || isHorizontal) && store6.previous,
          Home: () => {
            if (!canHomeEnd())
              return;
            if (!isGrid2 || event.ctrlKey) {
              return store6 == null ? void 0 : store6.first();
            }
            return store6 == null ? void 0 : store6.previous(-1);
          },
          End: () => {
            if (!canHomeEnd())
              return;
            if (!isGrid2 || event.ctrlKey) {
              return store6 == null ? void 0 : store6.last();
            }
            return store6 == null ? void 0 : store6.next(-1);
          },
          PageUp: () => {
            return findNextPageItemId(currentTarget, store6, store6 == null ? void 0 : store6.up, true);
          },
          PageDown: () => {
            return findNextPageItemId(currentTarget, store6, store6 == null ? void 0 : store6.down);
          }
        };
        const action = keyMap[event.key];
        if (action) {
          const nextId3 = action();
          if (preventScrollOnKeyDownProp(event) || nextId3 !== void 0) {
            if (!moveOnKeyPressProp(event))
              return;
            event.preventDefault();
            store6.move(nextId3);
          }
        }
      });
      const baseElement = useStoreState(
        store6,
        (state) => (state == null ? void 0 : state.baseElement) || void 0
      );
      const providerValue = (0, import_react18.useMemo)(
        () => ({ id: id3, baseElement }),
        [id3, baseElement]
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CompositeItemContext.Provider, { value: providerValue, children: element }),
        [providerValue]
      );
      const isActiveItem = useStoreState(
        store6,
        (state) => !!state && state.activeId === id3
      );
      const virtualFocus = useStoreState(store6, "virtualFocus");
      const role = useRole(ref, props);
      let ariaSelected;
      if (isActiveItem) {
        if (requiresAriaSelected(role)) {
          ariaSelected = true;
        } else if (virtualFocus && supportsAriaSelected(role)) {
          ariaSelected = true;
        }
      }
      const ariaSetSize = useStoreState(store6, (state) => {
        if (ariaSetSizeProp != null)
          return ariaSetSizeProp;
        if (!state)
          return;
        if (!(row == null ? void 0 : row.ariaSetSize))
          return;
        if (row.baseElement !== state.baseElement)
          return;
        return row.ariaSetSize;
      });
      const ariaPosInSet = useStoreState(store6, (state) => {
        if (ariaPosInSetProp != null)
          return ariaPosInSetProp;
        if (!state)
          return;
        if (!(row == null ? void 0 : row.ariaPosInSet))
          return;
        if (row.baseElement !== state.baseElement)
          return;
        const itemsInRow = state.renderedItems.filter(
          (item) => item.rowId === rowId
        );
        return row.ariaPosInSet + itemsInRow.findIndex((item) => item.id === id3);
      });
      const isTabbable2 = useStoreState(store6, (state) => {
        if (!(state == null ? void 0 : state.renderedItems.length))
          return true;
        if (state.virtualFocus)
          return false;
        if (tabbable)
          return true;
        return state.activeId === id3;
      });
      props = __spreadProps(__spreadValues({
        id: id3,
        "aria-selected": ariaSelected,
        "data-active-item": isActiveItem ? "" : void 0
      }, props), {
        ref: useMergeRefs2(ref, props.ref),
        tabIndex: isTabbable2 ? props.tabIndex : -1,
        onFocus,
        onBlurCapture,
        onKeyDown
      });
      props = useCommand(props);
      props = useCollectionItem(__spreadProps(__spreadValues({
        store: store6
      }, props), {
        getItem,
        shouldRegisterItem: !!id3 ? props.shouldRegisterItem : false
      }));
      return __spreadProps(__spreadValues({}, props), {
        "aria-setsize": ariaSetSize,
        "aria-posinset": ariaPosInSet
      });
    }
  );
  var CompositeItem = createMemoComponent(
    (props) => {
      const htmlProps = useCompositeItem(props);
      return createElement3("button", htmlProps);
    }
  );
  if (true) {
    CompositeItem.displayName = "CompositeItem";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/JL6IRDFK.js
  var import_react19 = __toESM(require_react(), 1);
  function getIsChecked(value, storeValue) {
    if (storeValue === void 0)
      return;
    if (value != null && storeValue != null) {
      return storeValue === value;
    }
    return !!storeValue;
  }
  function isNativeRadio(tagName, type) {
    return tagName === "input" && (!type || type === "radio");
  }
  var useRadio = createHook(
    (_a) => {
      var _b = _a, { store: store6, name, value, checked } = _b, props = __objRest(_b, ["store", "name", "value", "checked"]);
      const context2 = useRadioContext();
      store6 = store6 || context2;
      const id3 = useId2(props.id);
      const ref = (0, import_react19.useRef)(null);
      const isChecked = useStoreState(
        store6,
        (state) => checked != null ? checked : getIsChecked(value, state == null ? void 0 : state.value)
      );
      (0, import_react19.useEffect)(() => {
        if (!id3)
          return;
        if (!isChecked)
          return;
        const isActiveItem = (store6 == null ? void 0 : store6.getState().activeId) === id3;
        if (isActiveItem)
          return;
        store6 == null ? void 0 : store6.setActiveId(id3);
      }, [store6, isChecked, id3]);
      const onChangeProp = props.onChange;
      const tagName = useTagName(ref, props.as || "input");
      const nativeRadio = isNativeRadio(tagName, props.type);
      const disabled = disabledFromProps(props);
      const [propertyUpdated, schedulePropertyUpdate] = useForceUpdate();
      (0, import_react19.useEffect)(() => {
        const element = ref.current;
        if (!element)
          return;
        if (nativeRadio)
          return;
        if (isChecked !== void 0) {
          element.checked = isChecked;
        }
        if (name !== void 0) {
          element.name = name;
        }
        if (value !== void 0) {
          element.value = `${value}`;
        }
      }, [propertyUpdated, nativeRadio, isChecked, name, value]);
      const onChange = useEvent((event) => {
        if (disabled) {
          event.preventDefault();
          event.stopPropagation();
          return;
        }
        if (!nativeRadio) {
          event.currentTarget.checked = true;
          schedulePropertyUpdate();
        }
        onChangeProp == null ? void 0 : onChangeProp(event);
        if (event.defaultPrevented)
          return;
        store6 == null ? void 0 : store6.setValue(value);
      });
      const onClickProp = props.onClick;
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        if (nativeRadio)
          return;
        onChange(event);
      });
      const onFocusProp = props.onFocus;
      const onFocus = useEvent((event) => {
        onFocusProp == null ? void 0 : onFocusProp(event);
        if (event.defaultPrevented)
          return;
        if (!nativeRadio)
          return;
        if (!store6)
          return;
        const { moves, activeId } = store6.getState();
        if (!moves)
          return;
        if (id3 && activeId !== id3)
          return;
        onChange(event);
      });
      props = __spreadProps(__spreadValues({
        id: id3,
        role: !nativeRadio ? "radio" : void 0,
        type: nativeRadio ? "radio" : void 0,
        "aria-checked": isChecked
      }, props), {
        ref: useMergeRefs2(ref, props.ref),
        onChange,
        onClick,
        onFocus
      });
      props = useCompositeItem(__spreadValues({ store: store6, clickOnEnter: !nativeRadio }, props));
      return __spreadValues({
        name: nativeRadio ? name : void 0,
        value: nativeRadio ? value : void 0,
        checked: isChecked
      }, props);
    }
  );
  var Radio = createMemoComponent((props) => {
    const htmlProps = useRadio(props);
    return createElement3("input", htmlProps);
  });
  if (true) {
    Radio.displayName = "Radio";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/BG6HZDS7.js
  var useVisuallyHidden = createHook((props) => {
    props = __spreadProps(__spreadValues({}, props), {
      style: __spreadValues({
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: "-1px",
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      }, props.style)
    });
    return props;
  });
  var VisuallyHidden = createComponent(
    (props) => {
      const htmlProps = useVisuallyHidden(props);
      return createElement3("span", htmlProps);
    }
  );
  if (true) {
    VisuallyHidden.displayName = "VisuallyHidden";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/CHKJ74UC.js
  var useFocusTrap = createHook((props) => {
    props = __spreadProps(__spreadValues({
      "data-focus-trap": "",
      tabIndex: 0,
      "aria-hidden": true
    }, props), {
      style: __spreadValues({
        // Prevents unintended scroll jumps.
        position: "fixed",
        top: 0,
        left: 0
      }, props.style)
    });
    props = useVisuallyHidden(props);
    return props;
  });
  var FocusTrap = createComponent((props) => {
    const htmlProps = useFocusTrap(props);
    return createElement3("span", htmlProps);
  });
  if (true) {
    FocusTrap.displayName = "FocusTrap";
  }

  // node_modules/@ariakit/core/esm/__chunks/Z5IGYIPT.js
  function createDisclosureStore(props = {}) {
    const store6 = mergeStore(
      props.store,
      omit22(props.disclosure, ["contentElement", "disclosureElement"])
    );
    throwOnConflictingProps(props, store6);
    const syncState = store6 == null ? void 0 : store6.getState();
    const open = defaultValue(
      props.open,
      syncState == null ? void 0 : syncState.open,
      props.defaultOpen,
      false
    );
    const animated2 = defaultValue(props.animated, syncState == null ? void 0 : syncState.animated, false);
    const initialState = {
      open,
      animated: animated2,
      animating: !!animated2 && open,
      mounted: open,
      contentElement: defaultValue(syncState == null ? void 0 : syncState.contentElement, null),
      disclosureElement: defaultValue(syncState == null ? void 0 : syncState.disclosureElement, null)
    };
    const disclosure = createStore2(initialState, store6);
    setup2(
      disclosure,
      () => sync(disclosure, ["animated", "animating"], (state) => {
        if (state.animated)
          return;
        disclosure.setState("animating", false);
      })
    );
    setup2(
      disclosure,
      () => subscribe3(disclosure, ["open"], () => {
        if (!disclosure.getState().animated)
          return;
        disclosure.setState("animating", true);
      })
    );
    setup2(
      disclosure,
      () => sync(disclosure, ["open", "animating"], (state) => {
        disclosure.setState("mounted", state.open || state.animating);
      })
    );
    return __spreadProps2(__spreadValues2({}, disclosure), {
      setOpen: (value) => disclosure.setState("open", value),
      show: () => disclosure.setState("open", true),
      hide: () => disclosure.setState("open", false),
      toggle: () => disclosure.setState("open", (open2) => !open2),
      stopAnimation: () => disclosure.setState("animating", false),
      setContentElement: (value) => disclosure.setState("contentElement", value),
      setDisclosureElement: (value) => disclosure.setState("disclosureElement", value)
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/SFCBA2JZ.js
  function useDisclosureStoreProps(store6, update3, props) {
    useUpdateEffect(update3, [props.store, props.disclosure]);
    useStoreProps(store6, props, "open", "setOpen");
    useStoreProps(store6, props, "mounted", "setMounted");
    useStoreProps(store6, props, "animated");
    return store6;
  }
  function useDisclosureStore(props = {}) {
    const [store6, update3] = useStore(createDisclosureStore, props);
    return useDisclosureStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/OAYFXAQ2.js
  var ctx5 = createStoreContext();
  var useDisclosureContext = ctx5.useContext;
  var useDisclosureScopedContext = ctx5.useScopedContext;
  var useDisclosureProviderContext = ctx5.useProviderContext;
  var DisclosureContextProvider = ctx5.ContextProvider;
  var DisclosureScopedContextProvider = ctx5.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/BHEJ6NUH.js
  var import_react20 = __toESM(require_react(), 1);
  var symbol2 = Symbol("disclosure");
  var useDisclosure = createHook(
    (_a) => {
      var _b = _a, { store: store6, toggleOnClick = true } = _b, props = __objRest(_b, ["store", "toggleOnClick"]);
      const context2 = useDisclosureProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Disclosure must receive a `store` prop or be wrapped in a DisclosureProvider component."
      );
      const ref = (0, import_react20.useRef)(null);
      const [expanded, setExpanded] = (0, import_react20.useState)(false);
      const disclosureElement = store6.useState("disclosureElement");
      const open = store6.useState("open");
      (0, import_react20.useEffect)(() => {
        let isCurrentDisclosure = disclosureElement === ref.current;
        if (!(disclosureElement == null ? void 0 : disclosureElement.isConnected)) {
          store6 == null ? void 0 : store6.setDisclosureElement(ref.current);
          isCurrentDisclosure = true;
        }
        setExpanded(open && isCurrentDisclosure);
      }, [disclosureElement, store6, open]);
      const onClickProp = props.onClick;
      const toggleOnClickProp = useBooleanEvent(toggleOnClick);
      const [isDuplicate, metadataProps] = useMetadataProps(props, symbol2, true);
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        if (isDuplicate)
          return;
        if (!toggleOnClickProp(event))
          return;
        store6 == null ? void 0 : store6.setDisclosureElement(event.currentTarget);
        store6 == null ? void 0 : store6.toggle();
      });
      const contentElement = store6.useState("contentElement");
      props = __spreadProps(__spreadValues(__spreadValues({
        "aria-expanded": expanded,
        "aria-controls": contentElement == null ? void 0 : contentElement.id
      }, metadataProps), props), {
        ref: useMergeRefs2(ref, props.ref),
        onClick
      });
      props = useButton(props);
      return props;
    }
  );
  var Disclosure = createComponent((props) => {
    const htmlProps = useDisclosure(props);
    return createElement3("button", htmlProps);
  });
  if (true) {
    Disclosure.displayName = "Disclosure";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/G6BJYYBK.js
  var import_react21 = __toESM(require_react(), 1);
  var ctx6 = createStoreContext(
    [DisclosureContextProvider],
    [DisclosureScopedContextProvider]
  );
  var useDialogContext = ctx6.useContext;
  var useDialogScopedContext = ctx6.useScopedContext;
  var useDialogProviderContext = ctx6.useProviderContext;
  var DialogContextProvider = ctx6.ContextProvider;
  var DialogScopedContextProvider = ctx6.ScopedContextProvider;
  var DialogHeadingContext = (0, import_react21.createContext)(void 0);
  var DialogDescriptionContext = (0, import_react21.createContext)(void 0);

  // node_modules/@ariakit/react-core/esm/__chunks/CLE7NTOY.js
  var import_react22 = __toESM(require_react(), 1);
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  function afterTimeout(timeoutMs, cb) {
    const timeoutId = setTimeout(cb, timeoutMs);
    return () => clearTimeout(timeoutId);
  }
  function afterPaint2(cb) {
    let raf2 = requestAnimationFrame(() => {
      raf2 = requestAnimationFrame(cb);
    });
    return () => cancelAnimationFrame(raf2);
  }
  function parseCSSTime(...times) {
    return times.join(", ").split(", ").reduce((longestTime, currentTimeString) => {
      const currentTime = parseFloat(currentTimeString || "0s") * 1e3;
      if (currentTime > longestTime)
        return currentTime;
      return longestTime;
    }, 0);
  }
  function isHidden(mounted, hidden, alwaysVisible) {
    return !alwaysVisible && hidden !== false && (!mounted || !!hidden);
  }
  var useDisclosureContent = createHook(
    (_a) => {
      var _b = _a, { store: store6, alwaysVisible } = _b, props = __objRest(_b, ["store", "alwaysVisible"]);
      const context2 = useDisclosureProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "DisclosureContent must receive a `store` prop or be wrapped in a DisclosureProvider component."
      );
      const id3 = useId2(props.id);
      const [transition, setTransition] = (0, import_react22.useState)(null);
      const open = store6.useState("open");
      const mounted = store6.useState("mounted");
      const animated2 = store6.useState("animated");
      const contentElement = store6.useState("contentElement");
      useSafeLayoutEffect(() => {
        if (!animated2)
          return;
        if (!(contentElement == null ? void 0 : contentElement.isConnected)) {
          setTransition(null);
          return;
        }
        return afterPaint2(() => {
          setTransition(open ? "enter" : "leave");
        });
      }, [animated2, contentElement, open]);
      useSafeLayoutEffect(() => {
        if (!store6)
          return;
        if (!animated2)
          return;
        if (!contentElement)
          return;
        if (!transition)
          return;
        if (transition === "enter" && !open)
          return;
        if (transition === "leave" && open)
          return;
        if (typeof animated2 === "number") {
          const timeoutMs2 = animated2;
          return afterTimeout(timeoutMs2, store6.stopAnimation);
        }
        const {
          transitionDuration,
          animationDuration,
          transitionDelay,
          animationDelay
        } = getComputedStyle(contentElement);
        const delay2 = parseCSSTime(transitionDelay, animationDelay);
        const duration = parseCSSTime(transitionDuration, animationDuration);
        const timeoutMs = delay2 + duration;
        if (!timeoutMs)
          return;
        return afterTimeout(timeoutMs, store6.stopAnimation);
      }, [store6, animated2, contentElement, open, transition]);
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DialogScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      const hidden = isHidden(mounted, props.hidden, alwaysVisible);
      const style = hidden ? __spreadProps(__spreadValues({}, props.style), { display: "none" }) : props.style;
      props = __spreadProps(__spreadValues({
        id: id3,
        "data-enter": transition === "enter" ? "" : void 0,
        "data-leave": transition === "leave" ? "" : void 0,
        hidden
      }, props), {
        ref: useMergeRefs2(id3 ? store6.setContentElement : null, props.ref),
        style
      });
      return props;
    }
  );
  var DisclosureContentImpl = createComponent(
    (props) => {
      const htmlProps = useDisclosureContent(props);
      return createElement3("div", htmlProps);
    }
  );
  var DisclosureContent = createComponent(
    (_a) => {
      var _b = _a, { unmountOnHide } = _b, props = __objRest(_b, ["unmountOnHide"]);
      const context2 = useDisclosureProviderContext();
      const store6 = props.store || context2;
      const mounted = useStoreState(
        store6,
        (state) => !unmountOnHide || (state == null ? void 0 : state.mounted)
      );
      if (mounted === false)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(DisclosureContentImpl, __spreadValues({}, props));
    }
  );
  if (true) {
    DisclosureContent.displayName = "DisclosureContent";
  }

  // node_modules/@ariakit/core/esm/__chunks/SX2XFD6A.js
  function createDialogStore(props = {}) {
    return createDisclosureStore(props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/ZSELSBRM.js
  function useDialogStoreProps(store6, update3, props) {
    return useDisclosureStoreProps(store6, update3, props);
  }
  function useDialogStore(props = {}) {
    const [store6, update3] = useStore(createDialogStore, props);
    return useDialogStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/MKDDWKFK.js
  function isBackdrop(element, ...ids) {
    if (!element)
      return false;
    const backdrop = element.getAttribute("data-backdrop");
    if (backdrop == null)
      return false;
    if (backdrop === "")
      return true;
    if (backdrop === "true")
      return true;
    if (!ids.length)
      return true;
    return ids.some((id3) => backdrop === id3);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/X6WIMZJE.js
  var cleanups = /* @__PURE__ */ new WeakMap();
  function orchestrate(element, key, setup3) {
    if (!cleanups.has(element)) {
      cleanups.set(element, /* @__PURE__ */ new Map());
    }
    const elementCleanups = cleanups.get(element);
    const prevCleanup = elementCleanups.get(key);
    if (!prevCleanup) {
      elementCleanups.set(key, setup3());
      return () => {
        var _a;
        (_a = elementCleanups.get(key)) == null ? void 0 : _a();
        elementCleanups.delete(key);
      };
    }
    const cleanup = setup3();
    const nextCleanup = () => {
      cleanup();
      prevCleanup();
      elementCleanups.delete(key);
    };
    elementCleanups.set(key, nextCleanup);
    return () => {
      const isCurrent = elementCleanups.get(key) === nextCleanup;
      if (!isCurrent)
        return;
      cleanup();
      elementCleanups.set(key, prevCleanup);
    };
  }
  function setAttribute(element, attr2, value) {
    const setup3 = () => {
      const previousValue = element.getAttribute(attr2);
      element.setAttribute(attr2, value);
      return () => {
        if (previousValue == null) {
          element.removeAttribute(attr2);
        } else {
          element.setAttribute(attr2, previousValue);
        }
      };
    };
    return orchestrate(element, attr2, setup3);
  }
  function setProperty(element, property, value) {
    const setup3 = () => {
      const exists = property in element;
      const previousValue = element[property];
      element[property] = value;
      return () => {
        if (!exists) {
          delete element[property];
        } else {
          element[property] = previousValue;
        }
      };
    };
    return orchestrate(element, property, setup3);
  }
  function assignStyle(element, style) {
    if (!element)
      return () => {
      };
    const setup3 = () => {
      const prevStyle = element.style.cssText;
      Object.assign(element.style, style);
      return () => {
        element.style.cssText = prevStyle;
      };
    };
    return orchestrate(element, "style", setup3);
  }
  function setCSSProperty(element, property, value) {
    if (!element)
      return () => {
      };
    const setup3 = () => {
      const previousValue = element.style.getPropertyValue(property);
      element.style.setProperty(property, value);
      return () => {
        if (previousValue) {
          element.style.setProperty(property, previousValue);
        } else {
          element.style.removeProperty(property);
        }
      };
    };
    return orchestrate(element, property, setup3);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/72E5EPFF.js
  var ignoreTags = ["SCRIPT", "STYLE"];
  function getSnapshotPropertyName(id3) {
    return `__ariakit-dialog-snapshot-${id3}`;
  }
  function inSnapshot(id3, element) {
    const doc = getDocument2(element);
    const propertyName = getSnapshotPropertyName(id3);
    if (!doc.body[propertyName])
      return true;
    do {
      if (element === doc.body)
        return false;
      if (!!element[propertyName])
        return true;
      if (!element.parentElement)
        return false;
      element = element.parentElement;
    } while (true);
  }
  function isValidElement4(id3, element, ignoredElements) {
    if (ignoreTags.includes(element.tagName))
      return false;
    if (!inSnapshot(id3, element))
      return false;
    return !ignoredElements.some(
      (enabledElement) => enabledElement && contains(element, enabledElement)
    );
  }
  function walkTreeOutside(id3, elements2, callback, ancestorCallback) {
    for (let element of elements2) {
      if (!(element == null ? void 0 : element.isConnected))
        continue;
      const hasAncestorAlready = elements2.some((maybeAncestor) => {
        if (!maybeAncestor)
          return false;
        if (maybeAncestor === element)
          return false;
        return maybeAncestor.contains(element);
      });
      const doc = getDocument2(element);
      const originalElement = element;
      while (element.parentElement && element !== doc.body) {
        ancestorCallback == null ? void 0 : ancestorCallback(element.parentElement, originalElement);
        if (!hasAncestorAlready) {
          for (const child of element.parentElement.children) {
            if (isValidElement4(id3, child, elements2)) {
              callback(child, originalElement);
            }
          }
        }
        element = element.parentElement;
      }
    }
  }
  function createWalkTreeSnapshot(id3, elements2) {
    const { body } = getDocument2(elements2[0]);
    const cleanups2 = [];
    const markElement2 = (element) => {
      cleanups2.push(setProperty(element, getSnapshotPropertyName(id3), true));
    };
    walkTreeOutside(id3, elements2, markElement2);
    return chain(
      setProperty(body, getSnapshotPropertyName(id3), true),
      () => cleanups2.forEach((fn) => fn())
    );
  }

  // node_modules/@ariakit/react-core/esm/__chunks/TL67WVI6.js
  function getPropertyName(id3 = "", ancestor = false) {
    return `__ariakit-dialog-${ancestor ? "ancestor" : "outside"}${id3 ? `-${id3}` : ""}`;
  }
  function markElement(element, id3 = "") {
    return chain(
      setProperty(element, getPropertyName(), true),
      setProperty(element, getPropertyName(id3), true)
    );
  }
  function markAncestor(element, id3 = "") {
    return chain(
      setProperty(element, getPropertyName("", true), true),
      setProperty(element, getPropertyName(id3, true), true)
    );
  }
  function isElementMarked(element, id3) {
    const ancestorProperty = getPropertyName(id3, true);
    if (element[ancestorProperty])
      return true;
    const elementProperty = getPropertyName(id3);
    do {
      if (element[elementProperty])
        return true;
      if (!element.parentElement)
        return false;
      element = element.parentElement;
    } while (true);
  }
  function markTreeOutside(id3, elements2) {
    const cleanups2 = [];
    const ids = elements2.map((el) => el == null ? void 0 : el.id);
    walkTreeOutside(
      id3,
      elements2,
      (element) => {
        if (isBackdrop(element, ...ids))
          return;
        cleanups2.unshift(markElement(element, id3));
      },
      (ancestor, element) => {
        const isAnotherDialogAncestor = element.hasAttribute("data-dialog") && element.id !== id3;
        if (isAnotherDialogAncestor)
          return;
        cleanups2.unshift(markAncestor(ancestor, id3));
      }
    );
    const restoreAccessibilityTree = () => {
      cleanups2.forEach((fn) => fn());
    };
    return restoreAccessibilityTree;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/FSFPRQFR.js
  var elements = [
    "a",
    "button",
    "details",
    "dialog",
    "div",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "section",
    "select",
    "span",
    "textarea",
    "ul",
    "svg"
  ];
  var useRole2 = createHook((props) => {
    return props;
  });
  var Role = createComponent((props) => {
    return createElement3("div", props);
  });
  if (true) {
    Role.displayName = "Role";
  }
  Object.assign(
    Role,
    elements.reduce((acc, element) => {
      acc[element] = createComponent((props) => {
        return createElement3(element, props);
      });
      return acc;
    }, {})
  );

  // node_modules/@ariakit/react-core/esm/__chunks/LWHPHW7Q.js
  var import_react23 = __toESM(require_react(), 1);
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  function DialogBackdrop({
    store: store6,
    backdrop,
    backdropProps,
    alwaysVisible,
    hidden
  }) {
    const ref = (0, import_react23.useRef)(null);
    const disclosure = useDisclosureStore({ disclosure: store6 });
    const contentElement = store6.useState("contentElement");
    useSafeLayoutEffect(() => {
      const backdrop2 = ref.current;
      const dialog = contentElement;
      if (!backdrop2)
        return;
      if (!dialog)
        return;
      backdrop2.style.zIndex = getComputedStyle(dialog).zIndex;
    }, [contentElement]);
    useSafeLayoutEffect(() => {
      const id3 = contentElement == null ? void 0 : contentElement.id;
      if (!id3)
        return;
      const backdrop2 = ref.current;
      if (!backdrop2)
        return;
      return markAncestor(backdrop2, id3);
    }, [contentElement]);
    if (hidden != null) {
      backdropProps = __spreadProps(__spreadValues({}, backdropProps), { hidden });
    }
    const props = useDisclosureContent(__spreadProps(__spreadValues({
      store: disclosure,
      role: "presentation",
      "data-backdrop": (contentElement == null ? void 0 : contentElement.id) || "",
      alwaysVisible
    }, backdropProps), {
      ref: useMergeRefs2(backdropProps == null ? void 0 : backdropProps.ref, ref),
      style: __spreadValues({
        position: "fixed",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }, backdropProps == null ? void 0 : backdropProps.style)
    }));
    if (!backdrop)
      return null;
    if ((0, import_react23.isValidElement)(backdrop)) {
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Role, __spreadProps(__spreadValues({}, props), { render: backdrop }));
    }
    const Component4 = typeof backdrop !== "boolean" ? backdrop : "div";
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Role, __spreadProps(__spreadValues({}, props), { render: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Component4, {}) }));
  }

  // node_modules/@ariakit/react-core/esm/__chunks/BULCTPRV.js
  function hideElementFromAccessibilityTree(element) {
    return setAttribute(element, "aria-hidden", "true");
  }

  // node_modules/@ariakit/react-core/esm/__chunks/677M2CI3.js
  function supportsInert() {
    return "inert" in HTMLElement.prototype;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/TQYOGOE2.js
  function disableTree(element, ignoredElements) {
    if (!("style" in element))
      return noop2;
    if (supportsInert()) {
      return setProperty(element, "inert", true);
    }
    const tabbableElements = getAllTabbableIn(element, true);
    const enableElements = tabbableElements.map((element2) => {
      if (ignoredElements == null ? void 0 : ignoredElements.some((el) => el && contains(el, element2)))
        return noop2;
      return setAttribute(element2, "tabindex", "-1");
    });
    return chain(
      ...enableElements,
      hideElementFromAccessibilityTree(element),
      assignStyle(element, {
        pointerEvents: "none",
        userSelect: "none",
        cursor: "default"
      })
    );
  }
  function disableTreeOutside(id3, elements2) {
    const cleanups2 = [];
    const ids = elements2.map((el) => el == null ? void 0 : el.id);
    walkTreeOutside(id3, elements2, (element) => {
      if (isBackdrop(element, ...ids))
        return;
      cleanups2.unshift(disableTree(element, elements2));
    });
    const restoreTreeOutside = () => {
      cleanups2.forEach((fn) => fn());
    };
    return restoreTreeOutside;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/CS347UVZ.js
  var import_react24 = __toESM(require_react(), 1);
  var import_react_dom2 = __toESM(require_react_dom(), 1);
  function useRootDialog({
    attribute,
    contentId,
    contentElement,
    enabled
  }) {
    const [updated, retry] = useForceUpdate();
    const isRootDialog = (0, import_react24.useCallback)(() => {
      if (!enabled)
        return false;
      if (!contentElement)
        return false;
      const { body } = getDocument2(contentElement);
      const id3 = body.getAttribute(attribute);
      return !id3 || id3 === contentId;
    }, [updated, enabled, contentElement, attribute, contentId]);
    (0, import_react24.useEffect)(() => {
      if (!enabled)
        return;
      if (!contentId)
        return;
      if (!contentElement)
        return;
      const { body } = getDocument2(contentElement);
      if (isRootDialog()) {
        body.setAttribute(attribute, contentId);
        return () => body.removeAttribute(attribute);
      }
      const observer = new MutationObserver(() => (0, import_react_dom2.flushSync)(retry));
      observer.observe(body, { attributeFilter: [attribute] });
      return () => observer.disconnect();
    }, [updated, enabled, contentId, contentElement, isRootDialog, attribute]);
    return isRootDialog;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/6BJGLK2C.js
  var import_react25 = __toESM(require_react(), 1);
  function getPaddingProperty(documentElement) {
    const documentLeft = documentElement.getBoundingClientRect().left;
    const scrollbarX = Math.round(documentLeft) + documentElement.scrollLeft;
    return scrollbarX ? "paddingLeft" : "paddingRight";
  }
  function usePreventBodyScroll(contentElement, contentId, enabled) {
    const isRootDialog = useRootDialog({
      attribute: "data-dialog-prevent-body-scroll",
      contentElement,
      contentId,
      enabled
    });
    (0, import_react25.useEffect)(() => {
      if (!isRootDialog())
        return;
      if (!contentElement)
        return;
      const doc = getDocument2(contentElement);
      const win = getWindow(contentElement);
      const { documentElement, body } = doc;
      const cssScrollbarWidth = documentElement.style.getPropertyValue("--scrollbar-width");
      const scrollbarWidth = cssScrollbarWidth ? parseInt(cssScrollbarWidth) : win.innerWidth - documentElement.clientWidth;
      const setScrollbarWidthProperty = () => setCSSProperty(
        documentElement,
        "--scrollbar-width",
        `${scrollbarWidth}px`
      );
      const paddingProperty = getPaddingProperty(documentElement);
      const setStyle = () => assignStyle(body, {
        overflow: "hidden",
        [paddingProperty]: `${scrollbarWidth}px`
      });
      const setIOSStyle = () => {
        var _a, _b;
        const { scrollX, scrollY, visualViewport } = win;
        const offsetLeft = (_a = visualViewport == null ? void 0 : visualViewport.offsetLeft) != null ? _a : 0;
        const offsetTop = (_b = visualViewport == null ? void 0 : visualViewport.offsetTop) != null ? _b : 0;
        const restoreStyle = assignStyle(body, {
          position: "fixed",
          overflow: "hidden",
          top: `${-(scrollY - Math.floor(offsetTop))}px`,
          left: `${-(scrollX - Math.floor(offsetLeft))}px`,
          right: "0",
          [paddingProperty]: `${scrollbarWidth}px`
        });
        return () => {
          restoreStyle();
          if (true) {
            win.scrollTo(scrollX, scrollY);
          }
        };
      };
      const isIOS = isApple() && !isMac();
      return chain(
        setScrollbarWidthProperty(),
        isIOS ? setIOSStyle() : setStyle()
      );
    }, [isRootDialog, contentElement]);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/IUB2BTEK.js
  var import_react26 = __toESM(require_react(), 1);
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var NestedDialogsContext = (0, import_react26.createContext)({});
  function useNestedDialogs(store6) {
    const context2 = (0, import_react26.useContext)(NestedDialogsContext);
    const [dialogs, setDialogs] = (0, import_react26.useState)([]);
    const add = (0, import_react26.useCallback)(
      (dialog) => {
        var _a;
        setDialogs((dialogs2) => [...dialogs2, dialog]);
        return chain((_a = context2.add) == null ? void 0 : _a.call(context2, dialog), () => {
          setDialogs((dialogs2) => dialogs2.filter((d2) => d2 !== dialog));
        });
      },
      [context2]
    );
    useSafeLayoutEffect(() => {
      return sync(store6, ["open", "contentElement"], (state) => {
        var _a;
        if (!state.open)
          return;
        if (!state.contentElement)
          return;
        return (_a = context2.add) == null ? void 0 : _a.call(context2, store6);
      });
    }, [store6, context2]);
    const providerValue = (0, import_react26.useMemo)(() => ({ store: store6, add }), [store6, add]);
    const wrapElement = (0, import_react26.useCallback)(
      (element) => /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(NestedDialogsContext.Provider, { value: providerValue, children: element }),
      [providerValue]
    );
    return { wrapElement, nestedDialogs: dialogs };
  }

  // node_modules/@ariakit/react-core/esm/__chunks/OOBDFMJL.js
  var import_react27 = __toESM(require_react(), 1);
  function usePreviousMouseDownRef(enabled) {
    const previousMouseDownRef = (0, import_react27.useRef)();
    (0, import_react27.useEffect)(() => {
      if (!enabled) {
        previousMouseDownRef.current = null;
        return;
      }
      const onMouseDown = (event) => {
        previousMouseDownRef.current = event.target;
      };
      return addGlobalEventListener("mousedown", onMouseDown, true);
    }, [enabled]);
    return previousMouseDownRef;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/XHJGS6Z5.js
  var import_react28 = __toESM(require_react(), 1);
  function isInDocument(target) {
    if (target.tagName === "HTML")
      return true;
    return contains(getDocument2(target).body, target);
  }
  function isDisclosure(disclosure, target) {
    if (!disclosure)
      return false;
    if (contains(disclosure, target))
      return true;
    const activeId = target.getAttribute("aria-activedescendant");
    if (activeId) {
      const activeElement = getDocument2(disclosure).getElementById(activeId);
      if (activeElement) {
        return contains(disclosure, activeElement);
      }
    }
    return false;
  }
  function isMouseEventOnDialog(event, dialog) {
    if (!("clientY" in event))
      return false;
    const rect = dialog.getBoundingClientRect();
    if (rect.width === 0 || rect.height === 0)
      return false;
    return rect.top <= event.clientY && event.clientY <= rect.top + rect.height && rect.left <= event.clientX && event.clientX <= rect.left + rect.width;
  }
  function useEventOutside({
    store: store6,
    type,
    listener: listener2,
    capture,
    domReady: domReady2
  }) {
    const callListener = useEvent(listener2);
    const open = store6.useState("open");
    const focusedRef = (0, import_react28.useRef)(false);
    useSafeLayoutEffect(() => {
      if (!open)
        return;
      if (!domReady2)
        return;
      const { contentElement } = store6.getState();
      if (!contentElement)
        return;
      const onFocus = () => {
        focusedRef.current = true;
      };
      contentElement.addEventListener("focusin", onFocus, true);
      return () => contentElement.removeEventListener("focusin", onFocus, true);
    }, [store6, open, domReady2]);
    (0, import_react28.useEffect)(() => {
      if (!open)
        return;
      const onEvent = (event) => {
        const { contentElement, disclosureElement } = store6.getState();
        const target = event.target;
        if (!contentElement)
          return;
        if (!target)
          return;
        if (!isInDocument(target))
          return;
        if (contains(contentElement, target))
          return;
        if (isDisclosure(disclosureElement, target))
          return;
        if (target.hasAttribute("data-focus-trap"))
          return;
        if (isMouseEventOnDialog(event, contentElement))
          return;
        const focused = focusedRef.current;
        if (focused && !isElementMarked(target, contentElement.id))
          return;
        callListener(event);
      };
      return addGlobalEventListener(type, onEvent, capture);
    }, [open, capture]);
  }
  function shouldHideOnInteractOutside(hideOnInteractOutside, event) {
    if (typeof hideOnInteractOutside === "function") {
      return hideOnInteractOutside(event);
    }
    return !!hideOnInteractOutside;
  }
  function useHideOnInteractOutside(store6, hideOnInteractOutside, domReady2) {
    const open = store6.useState("open");
    const previousMouseDownRef = usePreviousMouseDownRef(open);
    const props = { store: store6, domReady: domReady2, capture: true };
    useEventOutside(__spreadProps(__spreadValues({}, props), {
      type: "click",
      listener: (event) => {
        const { contentElement } = store6.getState();
        const previousMouseDown = previousMouseDownRef.current;
        if (!previousMouseDown)
          return;
        if (!isVisible2(previousMouseDown))
          return;
        if (!isElementMarked(previousMouseDown, contentElement == null ? void 0 : contentElement.id))
          return;
        if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
          return;
        store6.hide();
      }
    }));
    useEventOutside(__spreadProps(__spreadValues({}, props), {
      type: "focusin",
      listener: (event) => {
        const { contentElement } = store6.getState();
        if (!contentElement)
          return;
        if (event.target === getDocument2(contentElement))
          return;
        if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
          return;
        store6.hide();
      }
    }));
    useEventOutside(__spreadProps(__spreadValues({}, props), {
      type: "contextmenu",
      listener: (event) => {
        if (!shouldHideOnInteractOutside(hideOnInteractOutside, event))
          return;
        store6.hide();
      }
    }));
  }

  // node_modules/@ariakit/react-core/esm/__chunks/6GXEOXGT.js
  function prependHiddenDismiss(container, onClick) {
    const document3 = getDocument2(container);
    const button = document3.createElement("button");
    button.type = "button";
    button.tabIndex = -1;
    button.textContent = "Dismiss popup";
    Object.assign(button.style, {
      border: "0px",
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: "0px",
      position: "absolute",
      whiteSpace: "nowrap",
      width: "1px"
    });
    button.addEventListener("click", onClick);
    container.prepend(button);
    const removeHiddenDismiss = () => {
      button.removeEventListener("click", onClick);
      button.remove();
    };
    return removeHiddenDismiss;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/HPP6CWMY.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var useFocusableContainer = createHook(
    (_a) => {
      var _b = _a, { autoFocusOnShow = true } = _b, props = __objRest(_b, ["autoFocusOnShow"]);
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(FocusableContext.Provider, { value: autoFocusOnShow, children: element }),
        [autoFocusOnShow]
      );
      return props;
    }
  );
  var FocusableContainer = createComponent(
    (props) => {
      const htmlProps = useFocusableContainer(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    FocusableContainer.displayName = "FocusableContainer";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/XPF5GU3Q.js
  var import_react29 = __toESM(require_react(), 1);
  var HeadingContext = (0, import_react29.createContext)(0);

  // node_modules/@ariakit/react-core/esm/__chunks/UYRJLDVS.js
  var import_react30 = __toESM(require_react(), 1);
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  function HeadingLevel({ level, children }) {
    const contextLevel = (0, import_react30.useContext)(HeadingContext);
    const nextLevel = Math.max(
      Math.min(level || contextLevel + 1, 6),
      1
    );
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(HeadingContext.Provider, { value: nextLevel, children });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7452U3HH.js
  var import_react31 = __toESM(require_react(), 1);
  var PortalContext = (0, import_react31.createContext)(null);

  // node_modules/@ariakit/react-core/esm/__chunks/JPXNJYSO.js
  var import_react32 = __toESM(require_react(), 1);
  var import_react_dom3 = __toESM(require_react_dom(), 1);
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  function getRootElement(element) {
    return getDocument2(element).body;
  }
  function getPortalElement(element, portalElement) {
    if (!portalElement) {
      return getDocument2(element).createElement("div");
    }
    if (typeof portalElement === "function") {
      return portalElement(element);
    }
    return portalElement;
  }
  function getRandomId(prefix3 = "id") {
    return `${prefix3 ? `${prefix3}-` : ""}${Math.random().toString(36).substr(2, 6)}`;
  }
  function queueFocus(element) {
    queueMicrotask(() => {
      element == null ? void 0 : element.focus();
    });
  }
  var usePortal = createHook(
    (_a) => {
      var _b = _a, {
        preserveTabOrder,
        preserveTabOrderAnchor,
        portalElement,
        portalRef,
        portal = true
      } = _b, props = __objRest(_b, [
        "preserveTabOrder",
        "preserveTabOrderAnchor",
        "portalElement",
        "portalRef",
        "portal"
      ]);
      const ref = (0, import_react32.useRef)(null);
      const refProp = useMergeRefs2(ref, props.ref);
      const context2 = (0, import_react32.useContext)(PortalContext);
      const [portalNode, setPortalNode] = (0, import_react32.useState)(null);
      const [anchorPortalNode, setAnchorPortalNode] = (0, import_react32.useState)(null);
      const outerBeforeRef = (0, import_react32.useRef)(null);
      const innerBeforeRef = (0, import_react32.useRef)(null);
      const innerAfterRef = (0, import_react32.useRef)(null);
      const outerAfterRef = (0, import_react32.useRef)(null);
      useSafeLayoutEffect(() => {
        const element = ref.current;
        if (!element || !portal) {
          setPortalNode(null);
          return;
        }
        const portalEl = getPortalElement(element, portalElement);
        if (!portalEl) {
          setPortalNode(null);
          return;
        }
        const isPortalInDocument = portalEl.isConnected;
        if (!isPortalInDocument) {
          const rootElement = context2 || getRootElement(element);
          rootElement.appendChild(portalEl);
        }
        if (!portalEl.id) {
          portalEl.id = element.id ? `portal/${element.id}` : getRandomId();
        }
        setPortalNode(portalEl);
        setRef(portalRef, portalEl);
        if (isPortalInDocument)
          return;
        return () => {
          portalEl.remove();
          setRef(portalRef, null);
        };
      }, [portal, portalElement, context2, portalRef]);
      useSafeLayoutEffect(() => {
        if (!preserveTabOrder)
          return;
        if (!preserveTabOrderAnchor)
          return;
        const doc = getDocument2(preserveTabOrderAnchor);
        const element = doc.createElement("span");
        element.style.position = "fixed";
        preserveTabOrderAnchor.insertAdjacentElement("afterend", element);
        setAnchorPortalNode(element);
        return () => {
          element.remove();
          setAnchorPortalNode(null);
        };
      }, [preserveTabOrder, preserveTabOrderAnchor]);
      (0, import_react32.useEffect)(() => {
        if (!portalNode)
          return;
        if (!preserveTabOrder)
          return;
        let raf2 = 0;
        const onFocus = (event) => {
          if (!isFocusEventOutside(event))
            return;
          const focusing = event.type === "focusin";
          cancelAnimationFrame(raf2);
          if (focusing) {
            return restoreFocusIn(portalNode);
          }
          raf2 = requestAnimationFrame(() => {
            disableFocusIn(portalNode, true);
          });
        };
        portalNode.addEventListener("focusin", onFocus, true);
        portalNode.addEventListener("focusout", onFocus, true);
        return () => {
          cancelAnimationFrame(raf2);
          portalNode.removeEventListener("focusin", onFocus, true);
          portalNode.removeEventListener("focusout", onFocus, true);
        };
      }, [portalNode, preserveTabOrder]);
      props = useWrapElement(
        props,
        (element) => {
          element = // While the portal node is not in the DOM, we need to pass the
          // current context to the portal context, otherwise it's going to
          // reset to the body element on nested portals.
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(PortalContext.Provider, { value: portalNode || context2, children: element });
          if (!portal)
            return element;
          if (!portalNode) {
            return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              "span",
              {
                ref: refProp,
                id: props.id,
                style: { position: "fixed" },
                hidden: true
              }
            );
          }
          element = /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
            preserveTabOrder && portalNode && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              FocusTrap,
              {
                ref: innerBeforeRef,
                className: "__focus-trap-inner-before",
                onFocus: (event) => {
                  if (isFocusEventOutside(event, portalNode)) {
                    queueFocus(getNextTabbable());
                  } else {
                    queueFocus(outerBeforeRef.current);
                  }
                }
              }
            ),
            element,
            preserveTabOrder && portalNode && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              FocusTrap,
              {
                ref: innerAfterRef,
                className: "__focus-trap-inner-after",
                onFocus: (event) => {
                  if (isFocusEventOutside(event, portalNode)) {
                    queueFocus(getPreviousTabbable());
                  } else {
                    queueFocus(outerAfterRef.current);
                  }
                }
              }
            )
          ] });
          if (portalNode) {
            element = (0, import_react_dom3.createPortal)(element, portalNode);
          }
          let preserveTabOrderElement = /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
            preserveTabOrder && portalNode && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              FocusTrap,
              {
                ref: outerBeforeRef,
                className: "__focus-trap-outer-before",
                onFocus: (event) => {
                  const fromOuter = event.relatedTarget === outerAfterRef.current;
                  if (!fromOuter && isFocusEventOutside(event, portalNode)) {
                    queueFocus(innerBeforeRef.current);
                  } else {
                    queueFocus(getPreviousTabbable());
                  }
                }
              }
            ),
            preserveTabOrder && // We're using position: fixed here so that the browser doesn't
            // add margin to the element when setting gap on a parent element.
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("span", { "aria-owns": portalNode == null ? void 0 : portalNode.id, style: { position: "fixed" } }),
            preserveTabOrder && portalNode && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
              FocusTrap,
              {
                ref: outerAfterRef,
                className: "__focus-trap-outer-after",
                onFocus: (event) => {
                  if (isFocusEventOutside(event, portalNode)) {
                    queueFocus(innerAfterRef.current);
                  } else {
                    const nextTabbable = getNextTabbable();
                    if (nextTabbable === innerBeforeRef.current) {
                      requestAnimationFrame(() => {
                        var _a2;
                        return (_a2 = getNextTabbable()) == null ? void 0 : _a2.focus();
                      });
                      return;
                    }
                    queueFocus(nextTabbable);
                  }
                }
              }
            )
          ] });
          if (anchorPortalNode && preserveTabOrder) {
            preserveTabOrderElement = (0, import_react_dom3.createPortal)(
              preserveTabOrderElement,
              anchorPortalNode
            );
          }
          return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(import_jsx_runtime13.Fragment, { children: [
            preserveTabOrderElement,
            element
          ] });
        },
        [
          portalNode,
          context2,
          portal,
          props.id,
          preserveTabOrder,
          anchorPortalNode
        ]
      );
      props = __spreadProps(__spreadValues({}, props), {
        ref: refProp
      });
      return props;
    }
  );
  var Portal = createComponent((props) => {
    const htmlProps = usePortal(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    Portal.displayName = "Portal";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/NERBASET.js
  var import_react33 = __toESM(require_react(), 1);
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var isSafariBrowser2 = isSafari();
  function isAlreadyFocusingAnotherElement(dialog) {
    const activeElement = getActiveElement();
    if (!activeElement)
      return false;
    if (dialog && contains(dialog, activeElement))
      return false;
    if (isFocusable(activeElement))
      return true;
    return false;
  }
  function getElementFromProp(prop2, focusable = false) {
    if (!prop2)
      return null;
    const element = "current" in prop2 ? prop2.current : prop2;
    if (!element)
      return null;
    if (focusable)
      return isFocusable(element) ? element : null;
    return element;
  }
  var useDialog2 = createHook(
    (_a) => {
      var _b = _a, {
        store: storeProp,
        open: openProp,
        onClose,
        focusable = true,
        modal = true,
        portal = !!modal,
        backdrop = !!modal,
        backdropProps,
        hideOnEscape = true,
        hideOnInteractOutside = true,
        getPersistentElements,
        preventBodyScroll = !!modal,
        autoFocusOnShow = true,
        autoFocusOnHide = true,
        initialFocus,
        finalFocus,
        unmountOnHide
      } = _b, props = __objRest(_b, [
        "store",
        "open",
        "onClose",
        "focusable",
        "modal",
        "portal",
        "backdrop",
        "backdropProps",
        "hideOnEscape",
        "hideOnInteractOutside",
        "getPersistentElements",
        "preventBodyScroll",
        "autoFocusOnShow",
        "autoFocusOnHide",
        "initialFocus",
        "finalFocus",
        "unmountOnHide"
      ]);
      const context2 = useDialogProviderContext();
      const ref = (0, import_react33.useRef)(null);
      const store6 = useDialogStore({
        store: storeProp || context2,
        open: openProp,
        setOpen(open2) {
          if (open2)
            return;
          const dialog = ref.current;
          if (!dialog)
            return;
          const event = new Event("close", { bubbles: false, cancelable: true });
          if (onClose) {
            dialog.addEventListener("close", onClose, { once: true });
          }
          dialog.dispatchEvent(event);
          if (!event.defaultPrevented)
            return;
          store6.setOpen(true);
        }
      });
      const { portalRef, domReady: domReady2 } = usePortalRef(portal, props.portalRef);
      const preserveTabOrderProp = props.preserveTabOrder;
      const preserveTabOrder = store6.useState(
        (state) => preserveTabOrderProp && !modal && state.mounted
      );
      const id3 = useId2(props.id);
      const open = store6.useState("open");
      const mounted = store6.useState("mounted");
      const contentElement = store6.useState("contentElement");
      const hidden = isHidden(mounted, props.hidden, props.alwaysVisible);
      usePreventBodyScroll(contentElement, id3, preventBodyScroll && !hidden);
      useHideOnInteractOutside(store6, hideOnInteractOutside, domReady2);
      const { wrapElement, nestedDialogs } = useNestedDialogs(store6);
      props = useWrapElement(props, wrapElement, [wrapElement]);
      if (true) {
        (0, import_react33.useEffect)(() => {
          if (!backdropProps)
            return;
          console.warn(
            "The `backdropProps` prop is deprecated. Use the `backdrop` prop instead.",
            "See https://ariakit.org/reference/dialog#backdrop"
          );
        }, [backdropProps]);
      }
      useSafeLayoutEffect(() => {
        if (!open)
          return;
        const dialog = ref.current;
        const activeElement = getActiveElement(dialog, true);
        if (!activeElement)
          return;
        if (activeElement.tagName === "BODY")
          return;
        if (dialog && contains(dialog, activeElement))
          return;
        store6.setDisclosureElement(activeElement);
      }, [store6, open]);
      if (isSafariBrowser2) {
        (0, import_react33.useEffect)(() => {
          if (!mounted)
            return;
          const { disclosureElement } = store6.getState();
          if (!disclosureElement)
            return;
          if (!isButton(disclosureElement))
            return;
          const onMouseDown = () => {
            let receivedFocus = false;
            const onFocus = () => {
              receivedFocus = true;
            };
            const options = { capture: true, once: true };
            disclosureElement.addEventListener("focusin", onFocus, options);
            queueBeforeEvent(disclosureElement, "mouseup", () => {
              disclosureElement.removeEventListener("focusin", onFocus, true);
              if (receivedFocus)
                return;
              focusIfNeeded(disclosureElement);
            });
          };
          disclosureElement.addEventListener("mousedown", onMouseDown);
          return () => {
            disclosureElement.removeEventListener("mousedown", onMouseDown);
          };
        }, [store6, mounted]);
      }
      (0, import_react33.useEffect)(() => {
        if (!modal)
          return;
        if (!mounted)
          return;
        if (!domReady2)
          return;
        const dialog = ref.current;
        if (!dialog)
          return;
        const existingDismiss = dialog.querySelector("[data-dialog-dismiss]");
        if (existingDismiss)
          return;
        return prependHiddenDismiss(dialog, store6.hide);
      }, [store6, modal, mounted, domReady2]);
      useSafeLayoutEffect(() => {
        if (open)
          return;
        if (!mounted)
          return;
        if (!domReady2)
          return;
        const dialog = ref.current;
        if (!dialog)
          return;
        return disableTree(dialog);
      }, [open, mounted, domReady2]);
      const canTakeTreeSnapshot = open && domReady2;
      useSafeLayoutEffect(() => {
        if (!id3)
          return;
        if (!canTakeTreeSnapshot)
          return;
        const dialog = ref.current;
        return createWalkTreeSnapshot(id3, [dialog]);
      }, [id3, canTakeTreeSnapshot]);
      const getPersistentElementsProp = useEvent(getPersistentElements);
      useSafeLayoutEffect(() => {
        if (!id3)
          return;
        if (!canTakeTreeSnapshot)
          return;
        const { disclosureElement } = store6.getState();
        const dialog = ref.current;
        const persistentElements = getPersistentElementsProp() || [];
        const allElements = [
          dialog,
          ...persistentElements,
          ...nestedDialogs.map((dialog2) => dialog2.getState().contentElement)
        ];
        if (modal) {
          return chain(
            markTreeOutside(id3, allElements),
            disableTreeOutside(id3, allElements)
          );
        }
        return markTreeOutside(id3, [disclosureElement, ...allElements]);
      }, [
        id3,
        store6,
        canTakeTreeSnapshot,
        getPersistentElementsProp,
        nestedDialogs,
        modal
      ]);
      const mayAutoFocusOnShow = !!autoFocusOnShow;
      const autoFocusOnShowProp = useBooleanEvent(autoFocusOnShow);
      const [autoFocusEnabled, setAutoFocusEnabled] = (0, import_react33.useState)(false);
      (0, import_react33.useEffect)(() => {
        if (!open)
          return;
        if (!mayAutoFocusOnShow)
          return;
        if (!domReady2)
          return;
        if (!(contentElement == null ? void 0 : contentElement.isConnected))
          return;
        const element = getElementFromProp(initialFocus, true) || // If no initial focus is specified, we try to focus the first element
        // with the autofocus attribute. If it's an Ariakit component, the
        // Focusable component will consume the autoFocus prop and add the
        // data-autofocus attribute to the element instead.
        contentElement.querySelector(
          "[data-autofocus=true],[autofocus]"
        ) || // We have to fallback to the first focusable element otherwise portaled
        // dialogs with preserveTabOrder set to true will not receive focus
        // properly because the elements aren't tabbable until the dialog
        // receives focus.
        getFirstTabbableIn(contentElement, true, portal && preserveTabOrder) || // Finally, we fallback to the dialog element itself.
        contentElement;
        const isElementFocusable = isFocusable(element);
        if (!autoFocusOnShowProp(isElementFocusable ? element : null))
          return;
        setAutoFocusEnabled(true);
        queueMicrotask(() => {
          element.focus();
          if (!isSafariBrowser2)
            return;
          element.scrollIntoView({ block: "nearest", inline: "nearest" });
        });
      }, [
        open,
        mayAutoFocusOnShow,
        domReady2,
        contentElement,
        initialFocus,
        portal,
        preserveTabOrder,
        autoFocusOnShowProp
      ]);
      const mayAutoFocusOnHide = !!autoFocusOnHide;
      const autoFocusOnHideProp = useBooleanEvent(autoFocusOnHide);
      const [hasOpened, setHasOpened] = (0, import_react33.useState)(false);
      (0, import_react33.useEffect)(() => {
        if (!open)
          return;
        setHasOpened(true);
        return () => setHasOpened(false);
      }, [open]);
      const focusOnHide = (0, import_react33.useCallback)(
        (dialog, retry = true) => {
          const { disclosureElement } = store6.getState();
          if (isAlreadyFocusingAnotherElement(dialog))
            return;
          let element = getElementFromProp(finalFocus) || disclosureElement;
          if (element == null ? void 0 : element.id) {
            const doc = getDocument2(element);
            const selector2 = `[aria-activedescendant="${element.id}"]`;
            const composite = doc.querySelector(selector2);
            if (composite) {
              element = composite;
            }
          }
          if (element && !isFocusable(element)) {
            const maybeParentDialog = closest(element, "[data-dialog]");
            if (maybeParentDialog && maybeParentDialog.id) {
              const doc = getDocument2(maybeParentDialog);
              const selector2 = `[aria-controls~="${maybeParentDialog.id}"]`;
              const control = doc.querySelector(selector2);
              if (control) {
                element = control;
              }
            }
          }
          const isElementFocusable = element && isFocusable(element);
          if (!isElementFocusable && retry) {
            requestAnimationFrame(() => focusOnHide(dialog, false));
            return;
          }
          if (!autoFocusOnHideProp(isElementFocusable ? element : null))
            return;
          if (!isElementFocusable)
            return;
          element == null ? void 0 : element.focus();
        },
        [store6, finalFocus, autoFocusOnHideProp]
      );
      useSafeLayoutEffect(() => {
        if (open)
          return;
        if (!hasOpened)
          return;
        if (!mayAutoFocusOnHide)
          return;
        const dialog = ref.current;
        focusOnHide(dialog);
      }, [open, hasOpened, domReady2, mayAutoFocusOnHide, focusOnHide]);
      (0, import_react33.useEffect)(() => {
        if (!hasOpened)
          return;
        if (!mayAutoFocusOnHide)
          return;
        const dialog = ref.current;
        return () => focusOnHide(dialog);
      }, [hasOpened, mayAutoFocusOnHide, focusOnHide]);
      const hideOnEscapeProp = useBooleanEvent(hideOnEscape);
      (0, import_react33.useEffect)(() => {
        if (!domReady2)
          return;
        if (!mounted)
          return;
        const onKeyDown = (event) => {
          if (event.key !== "Escape")
            return;
          if (event.defaultPrevented)
            return;
          const dialog = ref.current;
          if (!dialog)
            return;
          if (isElementMarked(dialog))
            return;
          const target = event.target;
          if (!target)
            return;
          const { disclosureElement } = store6.getState();
          const isValidTarget = () => {
            if (target.tagName === "BODY")
              return true;
            if (contains(dialog, target))
              return true;
            if (!disclosureElement)
              return true;
            if (contains(disclosureElement, target))
              return true;
            return false;
          };
          if (!isValidTarget())
            return;
          if (!hideOnEscapeProp(event))
            return;
          store6.hide();
        };
        return addGlobalEventListener("keydown", onKeyDown, true);
      }, [store6, domReady2, mounted, hideOnEscapeProp]);
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(HeadingLevel, { level: modal ? 1 : void 0, children: element }),
        [modal]
      );
      const hiddenProp = props.hidden;
      const alwaysVisible = props.alwaysVisible;
      props = useWrapElement(
        props,
        (element) => {
          if (!backdrop)
            return element;
          return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(import_jsx_runtime14.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
              DialogBackdrop,
              {
                store: store6,
                backdrop,
                backdropProps,
                hidden: hiddenProp,
                alwaysVisible
              }
            ),
            element
          ] });
        },
        [store6, backdrop, backdropProps, hiddenProp, alwaysVisible]
      );
      const [headingId, setHeadingId] = (0, import_react33.useState)();
      const [descriptionId, setDescriptionId] = (0, import_react33.useState)();
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DialogScopedContextProvider, { value: store6, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DialogHeadingContext.Provider, { value: setHeadingId, children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(DialogDescriptionContext.Provider, { value: setDescriptionId, children: element }) }) }),
        [store6]
      );
      props = __spreadProps(__spreadValues({
        id: id3,
        "data-dialog": "",
        role: "dialog",
        tabIndex: focusable ? -1 : void 0,
        "aria-labelledby": headingId,
        "aria-describedby": descriptionId
      }, props), {
        ref: useMergeRefs2(ref, props.ref)
      });
      props = useFocusableContainer(__spreadProps(__spreadValues({}, props), {
        autoFocusOnShow: autoFocusEnabled
      }));
      props = useDisclosureContent(__spreadValues({ store: store6 }, props));
      props = useFocusable(__spreadProps(__spreadValues({}, props), { focusable }));
      props = usePortal(__spreadProps(__spreadValues({ portal }, props), { portalRef, preserveTabOrder }));
      return props;
    }
  );
  function createDialogComponent(Component4, useProviderContext = useDialogProviderContext) {
    return createComponent((props) => {
      const context2 = useProviderContext();
      const store6 = props.store || context2;
      const mounted = useStoreState(
        store6,
        (state) => !props.unmountOnHide || (state == null ? void 0 : state.mounted) || !!props.open
      );
      if (!mounted)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(Component4, __spreadValues({}, props));
    });
  }
  var Dialog = createDialogComponent(
    createComponent((props) => {
      const htmlProps = useDialog2(props);
      return createElement3("div", htmlProps);
    }),
    useDialogProviderContext
  );
  if (true) {
    Dialog.displayName = "Dialog";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/H3TG2CZP.js
  var useDialogDisclosure = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = useDialogProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "DialogDisclosure must receive a `store` prop or be wrapped in a DialogProvider component."
      );
      const contentElement = store6.useState("contentElement");
      props = __spreadValues({
        "aria-haspopup": getPopupRole(contentElement, "dialog")
      }, props);
      props = useDisclosure(__spreadValues({ store: store6 }, props));
      return props;
    }
  );
  var DialogDisclosure = createComponent(
    (props) => {
      const htmlProps = useDialogDisclosure(props);
      return createElement3("button", htmlProps);
    }
  );
  if (true) {
    DialogDisclosure.displayName = "DialogDisclosure";
  }

  // node_modules/@ariakit/core/esm/__chunks/7PRQYBBV.js
  function flatten2DArray(array) {
    const flattened = [];
    for (const row of array) {
      flattened.push(...row);
    }
    return flattened;
  }
  function reverseArray(array) {
    return array.slice().reverse();
  }

  // node_modules/@ariakit/core/esm/__chunks/IERTEJ3A.js
  var NULL_ITEM2 = { id: null };
  function findFirstEnabledItem2(items, excludeId) {
    return items.find((item) => {
      if (excludeId) {
        return !item.disabled && item.id !== excludeId;
      }
      return !item.disabled;
    });
  }
  function getEnabledItems(items, excludeId) {
    return items.filter((item) => {
      if (excludeId) {
        return !item.disabled && item.id !== excludeId;
      }
      return !item.disabled;
    });
  }
  function getOppositeOrientation(orientation) {
    if (orientation === "vertical")
      return "horizontal";
    if (orientation === "horizontal")
      return "vertical";
    return;
  }
  function getItemsInRow(items, rowId) {
    return items.filter((item) => item.rowId === rowId);
  }
  function flipItems2(items, activeId, shouldInsertNullItem = false) {
    const index2 = items.findIndex((item) => item.id === activeId);
    return [
      ...items.slice(index2 + 1),
      ...shouldInsertNullItem ? [NULL_ITEM2] : [],
      ...items.slice(0, index2)
    ];
  }
  function groupItemsByRows2(items) {
    const rows = [];
    for (const item of items) {
      const row = rows.find((currentRow) => {
        var _a;
        return ((_a = currentRow[0]) == null ? void 0 : _a.rowId) === item.rowId;
      });
      if (row) {
        row.push(item);
      } else {
        rows.push([item]);
      }
    }
    return rows;
  }
  function getMaxRowLength(array) {
    let maxLength = 0;
    for (const { length: length2 } of array) {
      if (length2 > maxLength) {
        maxLength = length2;
      }
    }
    return maxLength;
  }
  function createEmptyItem(rowId) {
    return {
      id: "__EMPTY_ITEM__",
      disabled: true,
      rowId
    };
  }
  function normalizeRows(rows, activeId, focusShift) {
    const maxLength = getMaxRowLength(rows);
    for (const row of rows) {
      for (let i3 = 0; i3 < maxLength; i3 += 1) {
        const item = row[i3];
        if (!item || focusShift && item.disabled) {
          const isFirst = i3 === 0;
          const previousItem = isFirst && focusShift ? findFirstEnabledItem2(row) : row[i3 - 1];
          row[i3] = previousItem && activeId !== previousItem.id && focusShift ? previousItem : createEmptyItem(previousItem == null ? void 0 : previousItem.rowId);
        }
      }
    }
    return rows;
  }
  function verticalizeItems(items) {
    const rows = groupItemsByRows2(items);
    const maxLength = getMaxRowLength(rows);
    const verticalized = [];
    for (let i3 = 0; i3 < maxLength; i3 += 1) {
      for (const row of rows) {
        const item = row[i3];
        if (item) {
          verticalized.push(__spreadProps2(__spreadValues2({}, item), {
            // If there's no rowId, it means that it's not a grid composite, but
            // a single row instead. So, instead of verticalizing it, that is,
            // assigning a different rowId based on the column index, we keep it
            // undefined so they will be part of the same row. This is useful
            // when using up/down on one-dimensional composites.
            rowId: item.rowId ? `${i3}` : void 0
          }));
        }
      }
    }
    return verticalized;
  }
  function createCompositeStore(props = {}) {
    var _a;
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const collection = createCollectionStore(props);
    const activeId = defaultValue(
      props.activeId,
      syncState == null ? void 0 : syncState.activeId,
      props.defaultActiveId
    );
    const initialState = __spreadProps2(__spreadValues2({}, collection.getState()), {
      activeId,
      baseElement: defaultValue(syncState == null ? void 0 : syncState.baseElement, null),
      includesBaseElement: defaultValue(
        props.includesBaseElement,
        syncState == null ? void 0 : syncState.includesBaseElement,
        activeId === null
      ),
      moves: defaultValue(syncState == null ? void 0 : syncState.moves, 0),
      orientation: defaultValue(
        props.orientation,
        syncState == null ? void 0 : syncState.orientation,
        "both"
      ),
      rtl: defaultValue(props.rtl, syncState == null ? void 0 : syncState.rtl, false),
      virtualFocus: defaultValue(
        props.virtualFocus,
        syncState == null ? void 0 : syncState.virtualFocus,
        false
      ),
      focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, false),
      focusWrap: defaultValue(props.focusWrap, syncState == null ? void 0 : syncState.focusWrap, false),
      focusShift: defaultValue(props.focusShift, syncState == null ? void 0 : syncState.focusShift, false)
    });
    const composite = createStore2(initialState, collection, props.store);
    setup2(
      composite,
      () => sync(composite, ["renderedItems", "activeId"], (state) => {
        composite.setState("activeId", (activeId2) => {
          var _a2;
          if (activeId2 !== void 0)
            return activeId2;
          return (_a2 = findFirstEnabledItem2(state.renderedItems)) == null ? void 0 : _a2.id;
        });
      })
    );
    const getNextId = (items, orientation, hasNullItem, skip) => {
      var _a2, _b;
      const { activeId: activeId2, rtl: rtl2, focusLoop, focusWrap, includesBaseElement } = composite.getState();
      const isHorizontal = orientation !== "vertical";
      const isRTL4 = rtl2 && isHorizontal;
      const allItems = isRTL4 ? reverseArray(items) : items;
      if (activeId2 == null) {
        return (_a2 = findFirstEnabledItem2(allItems)) == null ? void 0 : _a2.id;
      }
      const activeItem = allItems.find((item) => item.id === activeId2);
      if (!activeItem) {
        return (_b = findFirstEnabledItem2(allItems)) == null ? void 0 : _b.id;
      }
      const isGrid2 = !!activeItem.rowId;
      const activeIndex = allItems.indexOf(activeItem);
      const nextItems = allItems.slice(activeIndex + 1);
      const nextItemsInRow = getItemsInRow(nextItems, activeItem.rowId);
      if (skip !== void 0) {
        const nextEnabledItemsInRow = getEnabledItems(nextItemsInRow, activeId2);
        const nextItem2 = nextEnabledItemsInRow.slice(skip)[0] || // If we can't find an item, just return the last one.
        nextEnabledItemsInRow[nextEnabledItemsInRow.length - 1];
        return nextItem2 == null ? void 0 : nextItem2.id;
      }
      const oppositeOrientation = getOppositeOrientation(
        // If it's a grid and orientation is not set, it's a next/previous call,
        // which is inherently horizontal. up/down will call next with orientation
        // set to vertical by default (see below on up/down methods).
        isGrid2 ? orientation || "horizontal" : orientation
      );
      const canLoop = focusLoop && focusLoop !== oppositeOrientation;
      const canWrap = isGrid2 && focusWrap && focusWrap !== oppositeOrientation;
      hasNullItem = hasNullItem || !isGrid2 && canLoop && includesBaseElement;
      if (canLoop) {
        const loopItems = canWrap && !hasNullItem ? allItems : getItemsInRow(allItems, activeItem.rowId);
        const sortedItems = flipItems2(loopItems, activeId2, hasNullItem);
        const nextItem2 = findFirstEnabledItem2(sortedItems, activeId2);
        return nextItem2 == null ? void 0 : nextItem2.id;
      }
      if (canWrap) {
        const nextItem2 = findFirstEnabledItem2(
          // We can use nextItems, which contains all the next items, including
          // items from other rows, to wrap between rows. However, if there is a
          // null item (the composite container), we'll only use the next items in
          // the row. So moving next from the last item will focus on the
          // composite container. On grid composites, horizontal navigation never
          // focuses on the composite container, only vertical.
          hasNullItem ? nextItemsInRow : nextItems,
          activeId2
        );
        const nextId3 = hasNullItem ? (nextItem2 == null ? void 0 : nextItem2.id) || null : nextItem2 == null ? void 0 : nextItem2.id;
        return nextId3;
      }
      const nextItem = findFirstEnabledItem2(nextItemsInRow, activeId2);
      if (!nextItem && hasNullItem) {
        return null;
      }
      return nextItem == null ? void 0 : nextItem.id;
    };
    return __spreadProps2(__spreadValues2(__spreadValues2({}, collection), composite), {
      setBaseElement: (element) => composite.setState("baseElement", element),
      setActiveId: (id3) => composite.setState("activeId", id3),
      move: (id3) => {
        if (id3 === void 0)
          return;
        composite.setState("activeId", id3);
        composite.setState("moves", (moves) => moves + 1);
      },
      first: () => {
        var _a2;
        return (_a2 = findFirstEnabledItem2(composite.getState().renderedItems)) == null ? void 0 : _a2.id;
      },
      last: () => {
        var _a2;
        return (_a2 = findFirstEnabledItem2(reverseArray(composite.getState().renderedItems))) == null ? void 0 : _a2.id;
      },
      next: (skip) => {
        const { renderedItems, orientation } = composite.getState();
        return getNextId(renderedItems, orientation, false, skip);
      },
      previous: (skip) => {
        var _a2;
        const { renderedItems, orientation, includesBaseElement } = composite.getState();
        const isGrid2 = !!((_a2 = findFirstEnabledItem2(renderedItems)) == null ? void 0 : _a2.rowId);
        const hasNullItem = !isGrid2 && includesBaseElement;
        return getNextId(
          reverseArray(renderedItems),
          orientation,
          hasNullItem,
          skip
        );
      },
      down: (skip) => {
        const {
          activeId: activeId2,
          renderedItems,
          focusShift,
          focusLoop,
          includesBaseElement
        } = composite.getState();
        const shouldShift = focusShift && !skip;
        const verticalItems = verticalizeItems(
          flatten2DArray(
            normalizeRows(groupItemsByRows2(renderedItems), activeId2, shouldShift)
          )
        );
        const canLoop = focusLoop && focusLoop !== "horizontal";
        const hasNullItem = canLoop && includesBaseElement;
        return getNextId(verticalItems, "vertical", hasNullItem, skip);
      },
      up: (skip) => {
        const { activeId: activeId2, renderedItems, focusShift, includesBaseElement } = composite.getState();
        const shouldShift = focusShift && !skip;
        const verticalItems = verticalizeItems(
          reverseArray(
            flatten2DArray(
              normalizeRows(
                groupItemsByRows2(renderedItems),
                activeId2,
                shouldShift
              )
            )
          )
        );
        const hasNullItem = includesBaseElement;
        return getNextId(verticalItems, "vertical", hasNullItem, skip);
      }
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7GBW5FLS.js
  function useCompositeStoreProps(store6, update3, props) {
    store6 = useCollectionStoreProps(store6, update3, props);
    useStoreProps(store6, props, "activeId", "setActiveId");
    useStoreProps(store6, props, "includesBaseElement");
    useStoreProps(store6, props, "virtualFocus");
    useStoreProps(store6, props, "orientation");
    useStoreProps(store6, props, "rtl");
    useStoreProps(store6, props, "focusLoop");
    useStoreProps(store6, props, "focusWrap");
    useStoreProps(store6, props, "focusShift");
    return store6;
  }
  function useCompositeStore(props = {}) {
    const [store6, update3] = useStore(createCompositeStore, props);
    return useCompositeStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7QTPYGNZ.js
  var import_react34 = __toESM(require_react(), 1);
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  function isGrid(items) {
    return items.some((item) => !!item.rowId);
  }
  function isPrintableKey(event) {
    const target = event.target;
    if (target && !isTextField2(target))
      return false;
    return event.key.length === 1 && !event.ctrlKey && !event.metaKey;
  }
  function isModifierKey(event) {
    return event.key === "Shift" || event.key === "Control" || event.key === "Alt" || event.key === "Meta";
  }
  function useKeyboardEventProxy(store6, onKeyboardEvent, previousElementRef) {
    return useEvent((event) => {
      var _a;
      onKeyboardEvent == null ? void 0 : onKeyboardEvent(event);
      if (event.defaultPrevented)
        return;
      if (event.isPropagationStopped())
        return;
      if (!isSelfTarget(event))
        return;
      if (isModifierKey(event))
        return;
      if (isPrintableKey(event))
        return;
      const state = store6.getState();
      const activeElement = (_a = getEnabledItem(store6, state.activeId)) == null ? void 0 : _a.element;
      if (!activeElement)
        return;
      const _b = event, { view: view2 } = _b, eventInit = __objRest(_b, ["view"]);
      const previousElement = previousElementRef == null ? void 0 : previousElementRef.current;
      if (activeElement !== previousElement) {
        activeElement.focus();
      }
      if (!fireKeyboardEvent(activeElement, event.type, eventInit)) {
        event.preventDefault();
      }
      if (event.currentTarget.contains(activeElement)) {
        event.stopPropagation();
      }
    });
  }
  function findFirstEnabledItemInTheLastRow(items) {
    return findFirstEnabledItem(
      flatten2DArray(reverseArray(groupItemsByRows(items)))
    );
  }
  function useScheduleFocus(store6) {
    const [scheduled, setScheduled] = (0, import_react34.useState)(false);
    const schedule2 = (0, import_react34.useCallback)(() => setScheduled(true), []);
    const activeItem = store6.useState(
      (state) => getEnabledItem(store6, state.activeId)
    );
    (0, import_react34.useEffect)(() => {
      const activeElement = activeItem == null ? void 0 : activeItem.element;
      if (!scheduled)
        return;
      if (!activeElement)
        return;
      setScheduled(false);
      activeElement.focus({ preventScroll: true });
    }, [activeItem, scheduled]);
    return schedule2;
  }
  var useComposite = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        composite = true,
        focusOnMove = composite,
        moveOnKeyPress = true
      } = _b, props = __objRest(_b, [
        "store",
        "composite",
        "focusOnMove",
        "moveOnKeyPress"
      ]);
      const context2 = useCompositeProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Composite must receive a `store` prop or be wrapped in a CompositeProvider component."
      );
      const previousElementRef = (0, import_react34.useRef)(null);
      const scheduleFocus = useScheduleFocus(store6);
      const moves = store6.useState("moves");
      (0, import_react34.useEffect)(() => {
        var _a2;
        if (!store6)
          return;
        if (!moves)
          return;
        if (!composite)
          return;
        if (!focusOnMove)
          return;
        const { activeId: activeId2 } = store6.getState();
        const itemElement = (_a2 = getEnabledItem(store6, activeId2)) == null ? void 0 : _a2.element;
        if (!itemElement)
          return;
        focusIntoView(itemElement);
      }, [store6, moves, composite, focusOnMove]);
      useSafeLayoutEffect(() => {
        if (!store6)
          return;
        if (!moves)
          return;
        if (!composite)
          return;
        const { baseElement, activeId: activeId2 } = store6.getState();
        const isSelfAcive = activeId2 === null;
        if (!isSelfAcive)
          return;
        if (!baseElement)
          return;
        const previousElement = previousElementRef.current;
        previousElementRef.current = null;
        if (previousElement) {
          fireBlurEvent(previousElement, { relatedTarget: baseElement });
        }
        if (!hasFocus(baseElement)) {
          baseElement.focus();
        }
      }, [store6, moves, composite]);
      const activeId = store6.useState("activeId");
      const virtualFocus = store6.useState("virtualFocus");
      useSafeLayoutEffect(() => {
        var _a2;
        if (!store6)
          return;
        if (!composite)
          return;
        if (!virtualFocus)
          return;
        const previousElement = previousElementRef.current;
        previousElementRef.current = null;
        if (!previousElement)
          return;
        const activeElement = (_a2 = getEnabledItem(store6, activeId)) == null ? void 0 : _a2.element;
        const relatedTarget = activeElement || getActiveElement(previousElement);
        if (relatedTarget === previousElement)
          return;
        fireBlurEvent(previousElement, { relatedTarget });
      }, [store6, activeId, virtualFocus, composite]);
      const onKeyDownCapture = useKeyboardEventProxy(
        store6,
        props.onKeyDownCapture,
        previousElementRef
      );
      const onKeyUpCapture = useKeyboardEventProxy(
        store6,
        props.onKeyUpCapture,
        previousElementRef
      );
      const onFocusCaptureProp = props.onFocusCapture;
      const onFocusCapture = useEvent((event) => {
        onFocusCaptureProp == null ? void 0 : onFocusCaptureProp(event);
        if (event.defaultPrevented)
          return;
        if (!store6)
          return;
        const { virtualFocus: virtualFocus2 } = store6.getState();
        if (!virtualFocus2)
          return;
        const previousActiveElement = event.relatedTarget;
        const isSilentlyFocused = silentlyFocused(event.currentTarget);
        if (isSelfTarget(event) && isSilentlyFocused) {
          event.stopPropagation();
          previousElementRef.current = previousActiveElement;
        }
      });
      const onFocusProp = props.onFocus;
      const onFocus = useEvent((event) => {
        onFocusProp == null ? void 0 : onFocusProp(event);
        if (event.defaultPrevented)
          return;
        if (!composite)
          return;
        if (!store6)
          return;
        const { relatedTarget } = event;
        const { virtualFocus: virtualFocus2 } = store6.getState();
        if (virtualFocus2) {
          if (isSelfTarget(event) && !isItem(store6, relatedTarget)) {
            queueMicrotask(scheduleFocus);
          }
        } else if (isSelfTarget(event)) {
          store6.setActiveId(null);
        }
      });
      const onBlurCaptureProp = props.onBlurCapture;
      const onBlurCapture = useEvent((event) => {
        var _a2;
        onBlurCaptureProp == null ? void 0 : onBlurCaptureProp(event);
        if (event.defaultPrevented)
          return;
        if (!store6)
          return;
        const { virtualFocus: virtualFocus2, activeId: activeId2 } = store6.getState();
        if (!virtualFocus2)
          return;
        const activeElement = (_a2 = getEnabledItem(store6, activeId2)) == null ? void 0 : _a2.element;
        const nextActiveElement = event.relatedTarget;
        const nextActiveElementIsItem = isItem(store6, nextActiveElement);
        const previousElement = previousElementRef.current;
        previousElementRef.current = null;
        if (isSelfTarget(event) && nextActiveElementIsItem) {
          if (nextActiveElement === activeElement) {
            if (previousElement && previousElement !== nextActiveElement) {
              fireBlurEvent(previousElement, event);
            }
          } else if (activeElement) {
            fireBlurEvent(activeElement, event);
          } else if (previousElement) {
            fireBlurEvent(previousElement, event);
          }
          event.stopPropagation();
        } else {
          const targetIsItem = isItem(store6, event.target);
          if (!targetIsItem && activeElement) {
            fireBlurEvent(activeElement, event);
          }
        }
      });
      const onKeyDownProp = props.onKeyDown;
      const moveOnKeyPressProp = useBooleanEvent(moveOnKeyPress);
      const onKeyDown = useEvent((event) => {
        var _a2;
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (event.defaultPrevented)
          return;
        if (!store6)
          return;
        if (!isSelfTarget(event))
          return;
        const { orientation, items, renderedItems, activeId: activeId2 } = store6.getState();
        const activeItem = getEnabledItem(store6, activeId2);
        if ((_a2 = activeItem == null ? void 0 : activeItem.element) == null ? void 0 : _a2.isConnected)
          return;
        const isVertical = orientation !== "horizontal";
        const isHorizontal = orientation !== "vertical";
        const grid = isGrid(renderedItems);
        const isHorizontalKey = event.key === "ArrowLeft" || event.key === "ArrowRight" || event.key === "Home" || event.key === "End";
        if (isHorizontalKey && isTextField2(event.currentTarget))
          return;
        const up = () => {
          if (grid) {
            const item = items && findFirstEnabledItemInTheLastRow(items);
            return item == null ? void 0 : item.id;
          }
          return store6 == null ? void 0 : store6.last();
        };
        const keyMap = {
          ArrowUp: (grid || isVertical) && up,
          ArrowRight: (grid || isHorizontal) && store6.first,
          ArrowDown: (grid || isVertical) && store6.first,
          ArrowLeft: (grid || isHorizontal) && store6.last,
          Home: store6.first,
          End: store6.last,
          PageUp: store6.first,
          PageDown: store6.last
        };
        const action = keyMap[event.key];
        if (action) {
          const id3 = action();
          if (id3 !== void 0) {
            if (!moveOnKeyPressProp(event))
              return;
            event.preventDefault();
            store6.move(id3);
          }
        }
      });
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(CompositeContextProvider, { value: store6, children: element }),
        [store6]
      );
      const activeDescendant = store6.useState((state) => {
        var _a2;
        if (!store6)
          return;
        if (!composite)
          return;
        if (!state.virtualFocus)
          return;
        return (_a2 = getEnabledItem(store6, state.activeId)) == null ? void 0 : _a2.id;
      });
      props = __spreadProps(__spreadValues({
        "aria-activedescendant": activeDescendant
      }, props), {
        ref: useMergeRefs2(composite ? store6.setBaseElement : null, props.ref),
        onKeyDownCapture,
        onKeyUpCapture,
        onFocusCapture,
        onFocus,
        onBlurCapture,
        onKeyDown
      });
      const focusable = store6.useState(
        (state) => composite && (state.virtualFocus || state.activeId === null)
      );
      props = useFocusable(__spreadValues({ focusable }, props));
      return props;
    }
  );
  var Composite = createComponent((props) => {
    const htmlProps = useComposite(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    Composite.displayName = "Composite";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/636A7WVS.js
  var useCompositeGroup = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      props = useGroup(props);
      return props;
    }
  );
  var CompositeGroup = createComponent(
    (props) => {
      const htmlProps = useCompositeGroup(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    CompositeGroup.displayName = "CompositeGroup";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/G6ONQ5EH.js
  var import_react35 = __toESM(require_react(), 1);
  function getMouseDestination(event) {
    const relatedTarget = event.relatedTarget;
    if ((relatedTarget == null ? void 0 : relatedTarget.nodeType) === Node.ELEMENT_NODE) {
      return relatedTarget;
    }
    return null;
  }
  function hoveringInside(event) {
    const nextElement = getMouseDestination(event);
    if (!nextElement)
      return false;
    return contains(event.currentTarget, nextElement);
  }
  var symbol3 = Symbol("composite-hover");
  function movingToAnotherItem(event) {
    let dest = getMouseDestination(event);
    if (!dest)
      return false;
    do {
      if (hasOwnProperty(dest, symbol3) && dest[symbol3])
        return true;
      dest = dest.parentElement;
    } while (dest);
    return false;
  }
  var useCompositeHover = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        focusOnHover = true,
        blurOnHoverEnd = !!focusOnHover
      } = _b, props = __objRest(_b, [
        "store",
        "focusOnHover",
        "blurOnHoverEnd"
      ]);
      const context2 = useCompositeContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "CompositeHover must be wrapped in a Composite component."
      );
      const isMouseMoving = useIsMouseMoving();
      const onMouseMoveProp = props.onMouseMove;
      const focusOnHoverProp = useBooleanEvent(focusOnHover);
      const onMouseMove = useEvent((event) => {
        onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
        if (event.defaultPrevented)
          return;
        if (!isMouseMoving())
          return;
        if (!focusOnHoverProp(event))
          return;
        if (!hasFocusWithin(event.currentTarget)) {
          const baseElement = store6 == null ? void 0 : store6.getState().baseElement;
          if (baseElement && !hasFocus(baseElement)) {
            baseElement.focus();
          }
        }
        store6 == null ? void 0 : store6.setActiveId(event.currentTarget.id);
      });
      const onMouseLeaveProp = props.onMouseLeave;
      const blurOnHoverEndProp = useBooleanEvent(blurOnHoverEnd);
      const onMouseLeave = useEvent((event) => {
        var _a2;
        onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
        if (event.defaultPrevented)
          return;
        if (!isMouseMoving())
          return;
        if (hoveringInside(event))
          return;
        if (movingToAnotherItem(event))
          return;
        if (!focusOnHoverProp(event))
          return;
        if (!blurOnHoverEndProp(event))
          return;
        store6 == null ? void 0 : store6.setActiveId(null);
        (_a2 = store6 == null ? void 0 : store6.getState().baseElement) == null ? void 0 : _a2.focus();
      });
      const ref = (0, import_react35.useCallback)((element) => {
        if (!element)
          return;
        element[symbol3] = true;
      }, []);
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(ref, props.ref),
        onMouseMove,
        onMouseLeave
      });
      return props;
    }
  );
  var CompositeHover = createMemoComponent(
    (props) => {
      const htmlProps = useCompositeHover(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    CompositeHover.displayName = "CompositeHover";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/BNUFNEVY.js
  var import_react36 = __toESM(require_react(), 1);
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var useCompositeRow = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        "aria-setsize": ariaSetSize,
        "aria-posinset": ariaPosInSet
      } = _b, props = __objRest(_b, [
        "store",
        "aria-setsize",
        "aria-posinset"
      ]);
      const context2 = useCompositeContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "CompositeRow must be wrapped in a Composite component."
      );
      const id3 = useId2(props.id);
      const baseElement = store6.useState(
        (state) => state.baseElement || void 0
      );
      const providerValue = (0, import_react36.useMemo)(
        () => ({ id: id3, baseElement, ariaSetSize, ariaPosInSet }),
        [id3, baseElement, ariaSetSize, ariaPosInSet]
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(CompositeRowContext.Provider, { value: providerValue, children: element }),
        [providerValue]
      );
      props = __spreadValues({ id: id3 }, props);
      return props;
    }
  );
  var CompositeRow = createComponent((props) => {
    const htmlProps = useCompositeRow(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    CompositeRow.displayName = "CompositeRow";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/YZEJGRDQ.js
  var useSeparator = createHook(
    (_a) => {
      var _b = _a, { orientation = "horizontal" } = _b, props = __objRest(_b, ["orientation"]);
      props = __spreadValues({
        role: "separator",
        "aria-orientation": orientation
      }, props);
      return props;
    }
  );
  var Separator = createComponent((props) => {
    const htmlProps = useSeparator(props);
    return createElement3("hr", htmlProps);
  });
  if (true) {
    Separator.displayName = "Separator";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/ENRQQ6LK.js
  var useCompositeSeparator = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = useCompositeContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "CompositeSeparator must be wrapped in a Composite component."
      );
      const orientation = store6.useState(
        (state) => state.orientation === "horizontal" ? "vertical" : "horizontal"
      );
      props = useSeparator(__spreadProps(__spreadValues({}, props), { orientation }));
      return props;
    }
  );
  var CompositeSeparator = createComponent(
    (props) => {
      const htmlProps = useCompositeSeparator(props);
      return createElement3("hr", htmlProps);
    }
  );
  if (true) {
    CompositeSeparator.displayName = "CompositeSeparator";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/346FK57L.js
  var import_react37 = __toESM(require_react(), 1);
  var chars = "";
  function clearChars() {
    chars = "";
  }
  function isValidTypeaheadEvent(event) {
    const target = event.target;
    if (target && isTextField2(target))
      return false;
    if (event.key === " " && chars.length)
      return true;
    return event.key.length === 1 && !event.ctrlKey && !event.altKey && !event.metaKey && /^[\p{Letter}\p{Number}]$/u.test(event.key);
  }
  function isSelfTargetOrItem(event, items) {
    if (isSelfTarget(event))
      return true;
    const target = event.target;
    if (!target)
      return false;
    const isItem2 = items.some((item) => item.element === target);
    return isItem2;
  }
  function getEnabledItems2(items) {
    return items.filter((item) => !item.disabled);
  }
  function itemTextStartsWith(item, text2) {
    var _a;
    const itemText = ((_a = item.element) == null ? void 0 : _a.textContent) || item.children;
    if (!itemText)
      return false;
    return normalizeString(itemText).trim().toLowerCase().startsWith(text2.toLowerCase());
  }
  function getSameInitialItems(items, char2, activeId) {
    if (!activeId)
      return items;
    const activeItem = items.find((item) => item.id === activeId);
    if (!activeItem)
      return items;
    if (!itemTextStartsWith(activeItem, char2))
      return items;
    if (chars !== char2 && itemTextStartsWith(activeItem, chars))
      return items;
    chars = char2;
    return flipItems(
      items.filter((item) => itemTextStartsWith(item, chars)),
      activeId
    ).filter((item) => item.id !== activeId);
  }
  var useCompositeTypeahead = createHook(
    (_a) => {
      var _b = _a, { store: store6, typeahead = true } = _b, props = __objRest(_b, ["store", "typeahead"]);
      const context2 = useCompositeContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "CompositeTypeahead must be a Composite component"
      );
      const onKeyDownCaptureProp = props.onKeyDownCapture;
      const cleanupTimeoutRef = (0, import_react37.useRef)(0);
      const onKeyDownCapture = useEvent(
        (event) => {
          onKeyDownCaptureProp == null ? void 0 : onKeyDownCaptureProp(event);
          if (event.defaultPrevented)
            return;
          if (!typeahead)
            return;
          if (!store6)
            return;
          const { items, activeId } = store6.getState();
          if (!isValidTypeaheadEvent(event))
            return clearChars();
          let enabledItems = getEnabledItems2(items);
          if (!isSelfTargetOrItem(event, enabledItems))
            return clearChars();
          event.preventDefault();
          window.clearTimeout(cleanupTimeoutRef.current);
          cleanupTimeoutRef.current = window.setTimeout(() => {
            chars = "";
          }, 500);
          const char2 = event.key.toLowerCase();
          chars += char2;
          enabledItems = getSameInitialItems(enabledItems, char2, activeId);
          const item = enabledItems.find(
            (item2) => itemTextStartsWith(item2, chars)
          );
          if (item) {
            store6.move(item.id);
          } else {
            clearChars();
          }
        }
      );
      props = __spreadProps(__spreadValues({}, props), {
        onKeyDownCapture
      });
      return props;
    }
  );
  var CompositeTypeahead = createComponent(
    (props) => {
      const htmlProps = useCompositeTypeahead(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    CompositeTypeahead.displayName = "CompositeTypeahead";
  }

  // node_modules/@ariakit/core/esm/__chunks/AF6IUUFN.js
  function createPopoverStore(_a = {}) {
    var _b = _a, {
      popover: otherPopover
    } = _b, props = __objRest2(_b, [
      "popover"
    ]);
    const store6 = mergeStore(
      props.store,
      omit22(otherPopover, [
        "arrowElement",
        "anchorElement",
        "contentElement",
        "popoverElement",
        "disclosureElement"
      ])
    );
    throwOnConflictingProps(props, store6);
    const syncState = store6 == null ? void 0 : store6.getState();
    const dialog = createDialogStore(__spreadProps2(__spreadValues2({}, props), { store: store6 }));
    const placement = defaultValue(
      props.placement,
      syncState == null ? void 0 : syncState.placement,
      "bottom"
    );
    const initialState = __spreadProps2(__spreadValues2({}, dialog.getState()), {
      placement,
      currentPlacement: placement,
      anchorElement: defaultValue(syncState == null ? void 0 : syncState.anchorElement, null),
      popoverElement: defaultValue(syncState == null ? void 0 : syncState.popoverElement, null),
      arrowElement: defaultValue(syncState == null ? void 0 : syncState.arrowElement, null),
      rendered: Symbol("rendered")
    });
    const popover = createStore2(initialState, dialog, store6);
    return __spreadProps2(__spreadValues2(__spreadValues2({}, dialog), popover), {
      setAnchorElement: (element) => popover.setState("anchorElement", element),
      setPopoverElement: (element) => popover.setState("popoverElement", element),
      setArrowElement: (element) => popover.setState("arrowElement", element),
      render: () => popover.setState("rendered", Symbol("rendered"))
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/MG4P3223.js
  function usePopoverStoreProps(store6, update3, props) {
    useUpdateEffect(update3, [props.popover]);
    store6 = useDialogStoreProps(store6, update3, props);
    useStoreProps(store6, props, "placement");
    return store6;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7H5KSHHF.js
  var ctx7 = createStoreContext(
    [DialogContextProvider],
    [DialogScopedContextProvider]
  );
  var usePopoverContext = ctx7.useContext;
  var usePopoverScopedContext = ctx7.useScopedContext;
  var usePopoverProviderContext = ctx7.useProviderContext;
  var PopoverContextProvider = ctx7.ContextProvider;
  var PopoverScopedContextProvider = ctx7.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/W76OTZCC.js
  var import_react38 = __toESM(require_react(), 1);
  var ctx8 = createStoreContext(
    [PopoverContextProvider, CompositeContextProvider],
    [PopoverScopedContextProvider, CompositeScopedContextProvider]
  );
  var useComboboxContext = ctx8.useContext;
  var useComboboxScopedContext = ctx8.useScopedContext;
  var useComboboxProviderContext = ctx8.useProviderContext;
  var ComboboxContextProvider = ctx8.ContextProvider;
  var ComboboxScopedContextProvider = ctx8.ScopedContextProvider;
  var ComboboxItemValueContext = (0, import_react38.createContext)(
    void 0
  );
  var ComboboxItemCheckedContext = (0, import_react38.createContext)(false);

  // node_modules/@ariakit/react-core/esm/__chunks/JCH6MLL2.js
  var usePopoverAnchor = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = usePopoverProviderContext();
      store6 = store6 || context2;
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(store6 == null ? void 0 : store6.setAnchorElement, props.ref)
      });
      return props;
    }
  );
  var PopoverAnchor = createComponent((props) => {
    const htmlProps = usePopoverAnchor(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    PopoverAnchor.displayName = "PopoverAnchor";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/IRX7SFUJ.js
  var import_react39 = __toESM(require_react(), 1);

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var min = Math.min;
  var max = Math.max;
  var round = Math.round;
  var floor = Math.floor;
  var createCoords = (v2) => ({
    x: v2,
    y: v2
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp(start2, value, end) {
    return max(start2, min(value, end));
  }
  function evaluate2(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl2) {
    if (rtl2 === void 0) {
      rtl2 = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length2 = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl2 ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length2] > rects.floating[length2]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl2) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl2) return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl2) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl2);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect(rect) {
    const {
      x: x2,
      y: y2,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y2,
      left: x2,
      right: x2 + width,
      bottom: y2 + height,
      x: x2,
      y: y2
    };
  }

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref4, placement, rtl2) {
    let {
      reference,
      floating
    } = _ref4;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl2 && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl2 && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config2) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2
    } = config2;
    const validMiddleware = middleware2.filter(Boolean);
    const rtl2 = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x: x2,
      y: y2
    } = computeCoordsFromPlacement(rects, placement, rtl2);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i3 = 0; i3 < validMiddleware.length; i3++) {
      const {
        name,
        fn
      } = validMiddleware[i3];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x: x2,
        y: y2,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x2 = nextX != null ? nextX : x2;
      y2 = nextY != null ? nextY : y2;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x: x2,
            y: y2
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl2));
        }
        i3 = -1;
      }
    }
    return {
      x: x2,
      y: y2,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x: x2,
      y: y2,
      platform: platform2,
      rects,
      elements: elements2,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate2(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements2[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements2.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x: x2,
      y: y2,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements2.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements: elements2,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var arrow = (options) => ({
    name: "arrow",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y2,
        placement,
        rects,
        platform: platform2,
        elements: elements2,
        middlewareData
      } = state;
      const {
        element,
        padding = 0
      } = evaluate2(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x: x2,
        y: y2
      };
      const axis = getAlignmentAxis(placement);
      const length2 = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements2.floating[clientProp] || rects.floating[length2];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length2] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
      const offset5 = clamp(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset5 && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: {
          [axis]: offset5,
          centerOffset: center - offset5 - alignmentOffset,
          ...shouldAddOffset && {
            alignmentOffset
          }
        },
        reset: shouldAddOffset
      };
    }
  });
  var flip = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements: elements2
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate2(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl2 = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl2));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl2);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            var _overflowsData$;
            const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
            const hasInitialMainAxisOverflow = ((_overflowsData$ = overflowsData[0]) == null ? void 0 : _overflowsData$.overflows[0]) > 0;
            if (!ignoreCrossAxisOverflow || hasInitialMainAxisOverflow) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d2.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements: elements2
    } = state;
    const rtl2 = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl2 && isVertical ? -1 : 1;
    const rawValue = evaluate2(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset2 = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x: x2,
          y: y2,
          placement,
          middlewareData
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x2 + diffCoords.x,
          y: y2 + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };
  var shift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state) {
        const {
          x: x2,
          y: y2,
          placement
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: (_ref4) => {
              let {
                x: x3,
                y: y3
              } = _ref4;
              return {
                x: x3,
                y: y3
              };
            }
          },
          ...detectOverflowOptions
        } = evaluate2(options, state);
        const coords = {
          x: x2,
          y: y2
        };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn({
          ...state,
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        });
        return {
          ...limitedCoords,
          data: {
            x: limitedCoords.x - x2,
            y: limitedCoords.y - y2,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        };
      }
    };
  };
  var limitShift = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state) {
        const {
          x: x2,
          y: y2,
          placement,
          rects,
          middlewareData
        } = state;
        const {
          offset: offset5 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate2(options, state);
        const coords = {
          x: x2,
          y: y2
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate2(offset5, state);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : {
          mainAxis: 0,
          crossAxis: 0,
          ...rawOffset
        };
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  };
  var size = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements: elements2
        } = state;
        const {
          apply: apply2 = () => {
          },
          ...detectOverflowOptions
        } = evaluate2(options, state);
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements2.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow.left, 0);
          const xMax = max(overflow.right, 0);
          const yMin = max(overflow.top, 0);
          const yMax = max(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
          }
        }
        await apply2({
          ...state,
          availableWidth,
          availableHeight
        });
        const nextDimensions = await platform2.getDimensions(elements2.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  };

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node2) {
    if (isNode(node2)) {
      return (node2.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow2(node2) {
    var _node$ownerDocument;
    return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node2) {
    var _ref4;
    return (_ref4 = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref4.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow2(value).Node;
  }
  function isElement2(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow2(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle3(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  function isTopLayer(element) {
    return [":popover-open", ":modal"].some((selector2) => {
      try {
        return element.matches(selector2);
      } catch (e3) {
        return false;
      }
    });
  }
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css4 = isElement2(elementOrCss) ? getComputedStyle3(elementOrCss) : elementOrCss;
    return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css4[value] ? css4[value] !== "none" : false) || (css4.containerType ? css4.containerType !== "normal" : false) || !webkit && (css4.backdropFilter ? css4.backdropFilter !== "none" : false) || !webkit && (css4.filter ? css4.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css4.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css4.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node2) {
    return ["html", "body", "#document"].includes(getNodeName(node2));
  }
  function getComputedStyle3(element) {
    return getWindow2(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement2(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node2) {
    if (getNodeName(node2) === "html") {
      return node2;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node2.assignedSlot || // DOM Element detected.
      node2.parentNode || // ShadowRoot detected.
      isShadowRoot(node2) && node2.host || // Fallback.
      getDocumentElement(node2)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node2) {
    const parentNode = getParentNode(node2);
    if (isLastTraversableNode(parentNode)) {
      return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node2, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node2);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow2(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css4 = getComputedStyle3(element);
    let width = parseFloat(css4.width) || 0;
    let height = parseFloat(css4.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement2(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $: $2
    } = getCssDimensions(domElement);
    let x2 = ($2 ? round(rect.width) : rect.width) / width;
    let y2 = ($2 ? round(rect.height) : rect.height) / height;
    if (!x2 || !Number.isFinite(x2)) {
      x2 = 1;
    }
    if (!y2 || !Number.isFinite(y2)) {
      y2 = 1;
    }
    return {
      x: x2,
      y: y2
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow2(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale2 = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement2(offsetParent)) {
          scale2 = getScale(offsetParent);
        }
      } else {
        scale2 = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x2 = (clientRect.left + visualOffsets.x) / scale2.x;
    let y2 = (clientRect.top + visualOffsets.y) / scale2.y;
    let width = clientRect.width / scale2.x;
    let height = clientRect.height / scale2.y;
    if (domElement) {
      const win = getWindow2(domElement);
      const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow2(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css4 = getComputedStyle3(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css4.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css4.paddingTop)) * iframeScale.y;
        x2 *= iframeScale.x;
        y2 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x2 += left;
        y2 += top;
        currentWin = getWindow2(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x: x2,
      y: y2
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y2 = htmlRect.top + scroll.scrollTop;
    return {
      x: x2,
      y: y2
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref4) {
    let {
      elements: elements2,
      rect,
      offsetParent,
      strategy
    } = _ref4;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements2 ? isTopLayer(elements2.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale2 = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale2 = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale2.x,
      height: rect.height * scale2.y,
      x: rect.x * scale2.x - scroll.scrollLeft * scale2.x + offsets.x + htmlOffset.x,
      y: rect.y * scale2.y - scroll.scrollTop * scale2.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html2 = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html2.scrollWidth, html2.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html2.scrollHeight, html2.clientHeight, body.scrollHeight, body.clientHeight);
    let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle3(body).direction === "rtl") {
      x2 += max(html2.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow2(element);
    const html2 = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html2.clientWidth;
    let height = html2.clientHeight;
    let x2 = 0;
    let y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x2 = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale2 = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale2.x;
    const height = element.clientHeight * scale2.y;
    const x2 = left * scale2.x;
    const y2 = top * scale2.y;
    return {
      width,
      height,
      x: x2,
      y: y2
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement2(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle3(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache3) {
    const cachedResult = cache3.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle3(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle3(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache3.set(element, result);
    return result;
  }
  function getClippingRect(_ref4) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref4;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    function setLeftRTLScrollbarOffset() {
      offsets.x = getWindowScrollBarX(documentElement);
    }
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        setLeftRTLScrollbarOffset();
      }
    }
    if (isFixed && !isOffsetParentAnElement && documentElement) {
      setLeftRTLScrollbarOffset();
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x: x2,
      y: y2,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle3(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle3(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow2(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement2(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL3(element) {
    return getComputedStyle3(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement: isElement2,
    isRTL: isRTL3
  };
  function rectsAreEqual(a2, b2) {
    return a2.x === b2.x && a2.y === b2.y && a2.width === b2.width && a2.height === b2.height;
  }
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const elementRectForRootMargin = element.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = elementRectForRootMargin;
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
          refresh();
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (_e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update3, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update3, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update3);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update3) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref4) => {
        let [firstEntry] = _ref4;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update3();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop2();
    }
    function frameLoop2() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
        update3();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop2);
    }
    update3();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update3);
        ancestorResize && ancestor.removeEventListener("resize", update3);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var offset3 = offset2;
  var shift2 = shift;
  var flip2 = flip;
  var size2 = size;
  var arrow2 = arrow;
  var limitShift2 = limitShift;
  var computePosition2 = (reference, floating, options) => {
    const cache3 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache3
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // node_modules/@ariakit/react-core/esm/__chunks/IRX7SFUJ.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  function createDOMRect(x2 = 0, y2 = 0, width = 0, height = 0) {
    if (typeof DOMRect === "function") {
      return new DOMRect(x2, y2, width, height);
    }
    const rect = {
      x: x2,
      y: y2,
      width,
      height,
      top: y2,
      right: x2 + width,
      bottom: y2 + height,
      left: x2
    };
    return __spreadProps(__spreadValues({}, rect), { toJSON: () => rect });
  }
  function getDOMRect(anchorRect) {
    if (!anchorRect)
      return createDOMRect();
    const { x: x2, y: y2, width, height } = anchorRect;
    return createDOMRect(x2, y2, width, height);
  }
  function getAnchorElement(anchorElement, getAnchorRect) {
    const contextElement = anchorElement || void 0;
    return {
      contextElement,
      getBoundingClientRect: () => {
        const anchor = anchorElement;
        const anchorRect = getAnchorRect == null ? void 0 : getAnchorRect(anchor);
        if (anchorRect || !anchor) {
          return getDOMRect(anchorRect);
        }
        return anchor.getBoundingClientRect();
      }
    };
  }
  function isValidPlacement(flip22) {
    return /^(?:top|bottom|left|right)(?:-(?:start|end))?$/.test(flip22);
  }
  function roundByDPR(value) {
    const dpr = window.devicePixelRatio || 1;
    return Math.round(value * dpr) / dpr;
  }
  function getOffsetMiddleware(arrowElement, props) {
    return offset3(({ placement }) => {
      var _a;
      const arrowOffset = ((arrowElement == null ? void 0 : arrowElement.clientHeight) || 0) / 2;
      const finalGutter = typeof props.gutter === "number" ? props.gutter + arrowOffset : (_a = props.gutter) != null ? _a : arrowOffset;
      const hasAlignment = !!placement.split("-")[1];
      return {
        crossAxis: !hasAlignment ? props.shift : void 0,
        mainAxis: finalGutter,
        alignmentAxis: props.shift
      };
    });
  }
  function getFlipMiddleware(props) {
    if (props.flip === false)
      return;
    const fallbackPlacements = typeof props.flip === "string" ? props.flip.split(" ") : void 0;
    invariant(
      !fallbackPlacements || fallbackPlacements.every(isValidPlacement),
      "`flip` expects a spaced-delimited list of placements"
    );
    return flip2({
      padding: props.overflowPadding,
      fallbackPlacements
    });
  }
  function getShiftMiddleware(props) {
    if (!props.slide && !props.overlap)
      return;
    return shift2({
      mainAxis: props.slide,
      crossAxis: props.overlap,
      padding: props.overflowPadding,
      limiter: limitShift2()
    });
  }
  function getSizeMiddleware(props) {
    return size2({
      padding: props.overflowPadding,
      apply({ elements: elements2, availableWidth, availableHeight, rects }) {
        const wrapper = elements2.floating;
        const referenceWidth = Math.round(rects.reference.width);
        availableWidth = Math.floor(availableWidth);
        availableHeight = Math.floor(availableHeight);
        wrapper.style.setProperty(
          "--popover-anchor-width",
          `${referenceWidth}px`
        );
        wrapper.style.setProperty(
          "--popover-available-width",
          `${availableWidth}px`
        );
        wrapper.style.setProperty(
          "--popover-available-height",
          `${availableHeight}px`
        );
        if (props.sameWidth) {
          wrapper.style.width = `${referenceWidth}px`;
        }
        if (props.fitViewport) {
          wrapper.style.maxWidth = `${availableWidth}px`;
          wrapper.style.maxHeight = `${availableHeight}px`;
        }
      }
    });
  }
  function getArrowMiddleware(arrowElement, props) {
    if (!arrowElement)
      return;
    return arrow2({
      element: arrowElement,
      padding: props.arrowPadding
    });
  }
  var usePopover = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        modal = false,
        portal = !!modal,
        preserveTabOrder = true,
        autoFocusOnShow = true,
        wrapperProps,
        fixed = false,
        flip: flip22 = true,
        shift: shift22 = 0,
        slide = true,
        overlap = false,
        sameWidth = false,
        fitViewport = false,
        gutter,
        arrowPadding = 4,
        overflowPadding = 8,
        getAnchorRect,
        updatePosition
      } = _b, props = __objRest(_b, [
        "store",
        "modal",
        "portal",
        "preserveTabOrder",
        "autoFocusOnShow",
        "wrapperProps",
        "fixed",
        "flip",
        "shift",
        "slide",
        "overlap",
        "sameWidth",
        "fitViewport",
        "gutter",
        "arrowPadding",
        "overflowPadding",
        "getAnchorRect",
        "updatePosition"
      ]);
      const context2 = usePopoverProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Popover must receive a `store` prop or be wrapped in a PopoverProvider component."
      );
      const arrowElement = store6.useState("arrowElement");
      const anchorElement = store6.useState("anchorElement");
      const disclosureElement = store6.useState("disclosureElement");
      const popoverElement = store6.useState("popoverElement");
      const contentElement = store6.useState("contentElement");
      const placement = store6.useState("placement");
      const mounted = store6.useState("mounted");
      const rendered = store6.useState("rendered");
      const [positioned, setPositioned] = (0, import_react39.useState)(false);
      const { portalRef, domReady: domReady2 } = usePortalRef(portal, props.portalRef);
      const getAnchorRectProp = useEvent(getAnchorRect);
      const updatePositionProp = useEvent(updatePosition);
      const hasCustomUpdatePosition = !!updatePosition;
      useSafeLayoutEffect(() => {
        if (!(popoverElement == null ? void 0 : popoverElement.isConnected))
          return;
        popoverElement.style.setProperty(
          "--popover-overflow-padding",
          `${overflowPadding}px`
        );
        const anchor = getAnchorElement(anchorElement, getAnchorRectProp);
        const updatePosition2 = async () => {
          if (!mounted)
            return;
          const middleware2 = [
            getOffsetMiddleware(arrowElement, { gutter, shift: shift22 }),
            getFlipMiddleware({ flip: flip22, overflowPadding }),
            getShiftMiddleware({ slide, shift: shift22, overlap, overflowPadding }),
            getArrowMiddleware(arrowElement, { arrowPadding }),
            getSizeMiddleware({
              sameWidth,
              fitViewport,
              overflowPadding
            })
          ];
          const pos = await computePosition2(anchor, popoverElement, {
            placement,
            strategy: fixed ? "fixed" : "absolute",
            middleware: middleware2
          });
          store6 == null ? void 0 : store6.setState("currentPlacement", pos.placement);
          setPositioned(true);
          const x2 = roundByDPR(pos.x);
          const y2 = roundByDPR(pos.y);
          Object.assign(popoverElement.style, {
            top: "0",
            left: "0",
            transform: `translate3d(${x2}px,${y2}px,0)`
          });
          if (arrowElement && pos.middlewareData.arrow) {
            const { x: arrowX, y: arrowY } = pos.middlewareData.arrow;
            const dir = pos.placement.split("-")[0];
            Object.assign(arrowElement.style, {
              left: arrowX != null ? `${arrowX}px` : "",
              top: arrowY != null ? `${arrowY}px` : "",
              [dir]: "100%"
            });
          }
        };
        const update3 = async () => {
          if (hasCustomUpdatePosition) {
            await updatePositionProp({ updatePosition: updatePosition2 });
            setPositioned(true);
          } else {
            await updatePosition2();
          }
        };
        const cancelAutoUpdate = autoUpdate(anchor, popoverElement, update3, {
          // JSDOM doesn't support ResizeObserver
          elementResize: typeof ResizeObserver === "function"
        });
        return () => {
          setPositioned(false);
          cancelAutoUpdate();
        };
      }, [
        store6,
        rendered,
        popoverElement,
        arrowElement,
        anchorElement,
        popoverElement,
        placement,
        mounted,
        domReady2,
        fixed,
        flip22,
        shift22,
        slide,
        overlap,
        sameWidth,
        fitViewport,
        gutter,
        arrowPadding,
        overflowPadding,
        getAnchorRectProp,
        hasCustomUpdatePosition,
        updatePositionProp
      ]);
      useSafeLayoutEffect(() => {
        if (!mounted)
          return;
        if (!domReady2)
          return;
        if (!(popoverElement == null ? void 0 : popoverElement.isConnected))
          return;
        if (!(contentElement == null ? void 0 : contentElement.isConnected))
          return;
        const applyZIndex = () => {
          popoverElement.style.zIndex = getComputedStyle(contentElement).zIndex;
        };
        applyZIndex();
        let raf2 = requestAnimationFrame(() => {
          raf2 = requestAnimationFrame(applyZIndex);
        });
        return () => cancelAnimationFrame(raf2);
      }, [mounted, domReady2, popoverElement, contentElement]);
      const position2 = fixed ? "fixed" : "absolute";
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "div",
          __spreadProps(__spreadValues({
            role: "presentation"
          }, wrapperProps), {
            style: __spreadValues({
              // https://floating-ui.com/docs/computeposition#initial-layout
              position: position2,
              top: 0,
              left: 0,
              width: "max-content"
            }, wrapperProps == null ? void 0 : wrapperProps.style),
            ref: store6 == null ? void 0 : store6.setPopoverElement,
            children: element
          })
        ),
        [store6, position2, wrapperProps]
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(PopoverScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      props = __spreadProps(__spreadValues({
        // data-placing is not part of the public API. We're setting this here so
        // we can wait for the popover to be positioned before other components
        // move focus into it. For example, this attribute is observed by the
        // Combobox component with the autoSelect behavior.
        "data-placing": !positioned ? "" : void 0
      }, props), {
        style: __spreadValues({
          position: "relative"
        }, props.style)
      });
      props = useDialog2(__spreadProps(__spreadValues({
        store: store6,
        modal,
        portal,
        preserveTabOrder,
        preserveTabOrderAnchor: disclosureElement || anchorElement,
        autoFocusOnShow: positioned && autoFocusOnShow
      }, props), {
        portalRef
      }));
      return props;
    }
  );
  var Popover = createDialogComponent(
    createComponent((props) => {
      const htmlProps = usePopover(props);
      return createElement3("div", htmlProps);
    }),
    usePopoverProviderContext
  );
  if (true) {
    Popover.displayName = "Popover";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/4ZEZYKUR.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var usePopoverDisclosure = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = usePopoverProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "PopoverDisclosure must receive a `store` prop or be wrapped in a PopoverProvider component."
      );
      const onClickProp = props.onClick;
      const onClick = useEvent((event) => {
        store6 == null ? void 0 : store6.setAnchorElement(event.currentTarget);
        onClickProp == null ? void 0 : onClickProp(event);
      });
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      props = __spreadProps(__spreadValues({}, props), {
        onClick
      });
      props = usePopoverAnchor(__spreadValues({ store: store6 }, props));
      props = useDialogDisclosure(__spreadValues({ store: store6 }, props));
      return props;
    }
  );
  var PopoverDisclosure = createComponent(
    (props) => {
      const htmlProps = usePopoverDisclosure(props);
      return createElement3("button", htmlProps);
    }
  );
  if (true) {
    PopoverDisclosure.displayName = "PopoverDisclosure";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/KA4GX64Z.js
  var import_react40 = __toESM(require_react(), 1);
  var menubar = createStoreContext(
    [CompositeContextProvider],
    [CompositeScopedContextProvider]
  );
  var useMenubarContext = menubar.useContext;
  var useMenubarScopedContext = menubar.useScopedContext;
  var useMenubarProviderContext = menubar.useProviderContext;
  var MenubarContextProvider = menubar.ContextProvider;
  var MenubarScopedContextProvider = menubar.ScopedContextProvider;
  var MenuItemCheckedContext = (0, import_react40.createContext)(
    void 0
  );

  // node_modules/@ariakit/react-core/esm/__chunks/TI7CMBHW.js
  var ctx9 = createStoreContext(
    [PopoverContextProvider],
    [PopoverScopedContextProvider]
  );
  var useHovercardContext = ctx9.useContext;
  var useHovercardScopedContext = ctx9.useScopedContext;
  var useHovercardProviderContext = ctx9.useProviderContext;
  var HovercardContextProvider = ctx9.ContextProvider;
  var HovercardScopedContextProvider = ctx9.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/__chunks/YGMEBI3A.js
  var import_react41 = __toESM(require_react(), 1);
  var menu = createStoreContext(
    [CompositeContextProvider, HovercardContextProvider],
    [CompositeScopedContextProvider, HovercardScopedContextProvider]
  );
  var useMenuContext = menu.useContext;
  var useMenuScopedContext = menu.useScopedContext;
  var useMenuProviderContext = menu.useProviderContext;
  var MenuContextProvider = menu.ContextProvider;
  var MenuScopedContextProvider = menu.ScopedContextProvider;
  var MenuItemCheckedContext2 = (0, import_react41.createContext)(
    void 0
  );

  // node_modules/@ariakit/core/esm/__chunks/SOLWE6E5.js
  function createHovercardStore(props = {}) {
    var _a;
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const popover = createPopoverStore(__spreadProps2(__spreadValues2({}, props), {
      placement: defaultValue(
        props.placement,
        syncState == null ? void 0 : syncState.placement,
        "bottom"
      )
    }));
    const timeout = defaultValue(props.timeout, syncState == null ? void 0 : syncState.timeout, 500);
    const initialState = __spreadProps2(__spreadValues2({}, popover.getState()), {
      timeout,
      showTimeout: defaultValue(props.showTimeout, syncState == null ? void 0 : syncState.showTimeout),
      hideTimeout: defaultValue(props.hideTimeout, syncState == null ? void 0 : syncState.hideTimeout),
      autoFocusOnShow: defaultValue(syncState == null ? void 0 : syncState.autoFocusOnShow, false)
    });
    const hovercard = createStore2(initialState, popover, props.store);
    return __spreadProps2(__spreadValues2(__spreadValues2({}, popover), hovercard), {
      setAutoFocusOnShow: (value) => hovercard.setState("autoFocusOnShow", value)
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/ZU7LQC5V.js
  function useHovercardStoreProps(store6, update3, props) {
    store6 = usePopoverStoreProps(store6, update3, props);
    useStoreProps(store6, props, "timeout");
    useStoreProps(store6, props, "showTimeout");
    useStoreProps(store6, props, "hideTimeout");
    return store6;
  }

  // node_modules/@ariakit/core/esm/menu/menu-store.js
  function createMenuStore(_a = {}) {
    var _b = _a, {
      combobox,
      parent,
      menubar: menubar2
    } = _b, props = __objRest2(_b, [
      "combobox",
      "parent",
      "menubar"
    ]);
    const parentIsMenubar = !!menubar2 && !parent;
    const store6 = mergeStore(
      props.store,
      pick2(parent, ["values"]),
      omit22(combobox, [
        "arrowElement",
        "anchorElement",
        "contentElement",
        "popoverElement",
        "disclosureElement"
      ])
    );
    throwOnConflictingProps(props, store6);
    const syncState = store6.getState();
    const composite = createCompositeStore(__spreadProps2(__spreadValues2({}, props), {
      store: store6,
      orientation: defaultValue(
        props.orientation,
        syncState.orientation,
        "vertical"
      )
    }));
    const hovercard = createHovercardStore(__spreadProps2(__spreadValues2({}, props), {
      store: store6,
      placement: defaultValue(
        props.placement,
        syncState.placement,
        "bottom-start"
      ),
      timeout: defaultValue(
        props.timeout,
        syncState.timeout,
        parentIsMenubar ? 0 : 150
      ),
      hideTimeout: defaultValue(props.hideTimeout, syncState.hideTimeout, 0)
    }));
    const initialState = __spreadProps2(__spreadValues2(__spreadValues2({}, composite.getState()), hovercard.getState()), {
      initialFocus: defaultValue(syncState.initialFocus, "container"),
      values: defaultValue(
        props.values,
        syncState.values,
        props.defaultValues,
        {}
      )
    });
    const menu3 = createStore2(initialState, composite, hovercard, store6);
    setup2(
      menu3,
      () => sync(menu3, ["mounted"], (state) => {
        if (state.mounted)
          return;
        menu3.setState("activeId", null);
      })
    );
    setup2(
      menu3,
      () => sync(parent, ["orientation"], (state) => {
        menu3.setState(
          "placement",
          state.orientation === "vertical" ? "right-start" : "bottom-start"
        );
      })
    );
    return __spreadProps2(__spreadValues2(__spreadValues2(__spreadValues2({}, composite), hovercard), menu3), {
      combobox,
      parent,
      menubar: menubar2,
      hideAll: () => {
        hovercard.hide();
        parent == null ? void 0 : parent.hideAll();
      },
      setInitialFocus: (value) => menu3.setState("initialFocus", value),
      setValues: (values) => menu3.setState("values", values),
      setValue: (name, value) => {
        if (name === "__proto__")
          return;
        if (name === "constructor")
          return;
        if (Array.isArray(name))
          return;
        menu3.setState("values", (values) => {
          const prevValue = values[name];
          const nextValue = applyState(value, prevValue);
          if (nextValue === prevValue)
            return values;
          return __spreadProps2(__spreadValues2({}, values), {
            [name]: nextValue !== void 0 && nextValue
          });
        });
      }
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/XJXP7ZSQ.js
  function useMenuStoreProps(store6, update3, props) {
    useUpdateEffect(update3, [props.combobox, props.parent, props.menubar]);
    store6 = useCompositeStoreProps(store6, update3, props);
    store6 = useHovercardStoreProps(store6, update3, props);
    useStoreProps(store6, props, "values", "setValues");
    return Object.assign(store6, {
      combobox: props.combobox,
      parent: props.parent,
      menubar: props.menubar
    });
  }
  function useMenuStore(props = {}) {
    const parent = useMenuContext();
    const menubar2 = useMenubarContext();
    const combobox = useComboboxProviderContext();
    props = __spreadProps(__spreadValues({}, props), {
      parent: props.parent !== void 0 ? props.parent : parent,
      menubar: props.menubar !== void 0 ? props.menubar : menubar2,
      combobox: props.combobox !== void 0 ? props.combobox : combobox
    });
    const [store6, update3] = useStore(createMenuStore, props);
    return useMenuStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/HHNFDKU2.js
  var import_react42 = __toESM(require_react(), 1);
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  function useAriaLabelledBy(_a) {
    var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
    const [id3, setId] = (0, import_react42.useState)(void 0);
    const label = props["aria-label"];
    const disclosureElement = useStoreState(store6, "disclosureElement");
    const contentElement = useStoreState(store6, "contentElement");
    (0, import_react42.useEffect)(() => {
      const disclosure = disclosureElement;
      if (!disclosure)
        return;
      const menu3 = contentElement;
      if (!menu3)
        return;
      const menuLabel = label || menu3.hasAttribute("aria-label");
      if (menuLabel) {
        setId(void 0);
      } else if (disclosure.id) {
        setId(disclosure.id);
      }
    }, [label, disclosureElement, contentElement]);
    return id3;
  }
  var useMenuList = createHook(
    (_a) => {
      var _b = _a, { store: store6, alwaysVisible, composite } = _b, props = __objRest(_b, ["store", "alwaysVisible", "composite"]);
      const context2 = useMenuProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "MenuList must receive a `store` prop or be wrapped in a MenuProvider component."
      );
      const parentMenu = store6.parent;
      const parentMenubar = store6.menubar;
      const hasParentMenu = !!parentMenu;
      const id3 = useId2(props.id);
      const onKeyDownProp = props.onKeyDown;
      const dir = store6.useState(
        (state) => state.placement.split("-")[0]
      );
      const orientation = store6.useState(
        (state) => state.orientation === "both" ? void 0 : state.orientation
      );
      const isHorizontal = orientation !== "vertical";
      const isMenubarHorizontal = useStoreState(
        parentMenubar,
        (state) => !!state && state.orientation !== "vertical"
      );
      const onKeyDown = useEvent((event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (event.defaultPrevented)
          return;
        if (hasParentMenu || parentMenubar && !isHorizontal) {
          const hideMap = {
            ArrowRight: () => dir === "left" && !isHorizontal,
            ArrowLeft: () => dir === "right" && !isHorizontal,
            ArrowUp: () => dir === "bottom" && isHorizontal,
            ArrowDown: () => dir === "top" && isHorizontal
          };
          const action = hideMap[event.key];
          if (action == null ? void 0 : action()) {
            event.stopPropagation();
            event.preventDefault();
            return store6 == null ? void 0 : store6.hide();
          }
        }
        if (parentMenubar) {
          const keyMap = {
            ArrowRight: () => {
              if (!isMenubarHorizontal)
                return;
              return parentMenubar.next();
            },
            ArrowLeft: () => {
              if (!isMenubarHorizontal)
                return;
              return parentMenubar.previous();
            },
            ArrowDown: () => {
              if (isMenubarHorizontal)
                return;
              return parentMenubar.next();
            },
            ArrowUp: () => {
              if (isMenubarHorizontal)
                return;
              return parentMenubar.previous();
            }
          };
          const action = keyMap[event.key];
          const id22 = action == null ? void 0 : action();
          if (id22 !== void 0) {
            event.stopPropagation();
            event.preventDefault();
            parentMenubar.move(id22);
          }
        }
      });
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(MenuScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      const ariaLabelledBy = useAriaLabelledBy(__spreadValues({ store: store6 }, props));
      const mounted = store6.useState("mounted");
      const hidden = isHidden(mounted, props.hidden, alwaysVisible);
      const style = hidden ? __spreadProps(__spreadValues({}, props.style), { display: "none" }) : props.style;
      props = __spreadProps(__spreadValues({
        id: id3,
        "aria-labelledby": ariaLabelledBy,
        hidden
      }, props), {
        ref: useMergeRefs2(id3 ? store6.setContentElement : null, props.ref),
        style,
        onKeyDown
      });
      const hasCombobox = !!store6.combobox;
      composite = composite != null ? composite : !hasCombobox;
      if (composite) {
        props = __spreadValues({
          role: "menu",
          "aria-orientation": orientation
        }, props);
      }
      props = useComposite(__spreadValues({ store: store6, composite }, props));
      props = useCompositeTypeahead(__spreadValues({ store: store6, typeahead: !hasCombobox }, props));
      return props;
    }
  );
  var MenuList = createComponent((props) => {
    const htmlProps = useMenuList(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    MenuList.displayName = "MenuList";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/YMV43K4F.js
  function getEventPoint(event) {
    return [event.clientX, event.clientY];
  }
  function isPointInPolygon(point, polygon) {
    const [x2, y2] = point;
    let inside = false;
    const length2 = polygon.length;
    for (let l2 = length2, i3 = 0, j2 = l2 - 1; i3 < l2; j2 = i3++) {
      const [xi, yi] = polygon[i3];
      const [xj, yj] = polygon[j2];
      const [, vy] = polygon[j2 === 0 ? l2 - 1 : j2 - 1] || [0, 0];
      const where = (yi - yj) * (x2 - xi) - (xi - xj) * (y2 - yi);
      if (yj < yi) {
        if (y2 >= yj && y2 < yi) {
          if (where === 0)
            return true;
          if (where > 0) {
            if (y2 === yj) {
              if (y2 > vy) {
                inside = !inside;
              }
            } else {
              inside = !inside;
            }
          }
        }
      } else if (yi < yj) {
        if (y2 > yi && y2 <= yj) {
          if (where === 0)
            return true;
          if (where < 0) {
            if (y2 === yj) {
              if (y2 < vy) {
                inside = !inside;
              }
            } else {
              inside = !inside;
            }
          }
        }
      } else if (y2 == yi && (x2 >= xj && x2 <= xi || x2 >= xi && x2 <= xj)) {
        return true;
      }
    }
    return inside;
  }
  function getEnterPointPlacement(enterPoint, rect) {
    const { top, right, bottom, left } = rect;
    const [x2, y2] = enterPoint;
    const placementX = x2 < left ? "left" : x2 > right ? "right" : null;
    const placementY = y2 < top ? "top" : y2 > bottom ? "bottom" : null;
    return [placementX, placementY];
  }
  function getElementPolygon(element, enterPoint) {
    const rect = element.getBoundingClientRect();
    const { top, right, bottom, left } = rect;
    const [x2, y2] = getEnterPointPlacement(enterPoint, rect);
    const polygon = [enterPoint];
    if (x2) {
      if (y2 !== "top") {
        polygon.push([x2 === "left" ? left : right, top]);
      }
      polygon.push([x2 === "left" ? right : left, top]);
      polygon.push([x2 === "left" ? right : left, bottom]);
      if (y2 !== "bottom") {
        polygon.push([x2 === "left" ? left : right, bottom]);
      }
    } else if (y2 === "top") {
      polygon.push([left, top]);
      polygon.push([left, bottom]);
      polygon.push([right, bottom]);
      polygon.push([right, top]);
    } else {
      polygon.push([left, bottom]);
      polygon.push([left, top]);
      polygon.push([right, top]);
      polygon.push([right, bottom]);
    }
    return polygon;
  }

  // node_modules/@ariakit/react-core/esm/__chunks/QWSZGSIG.js
  var import_react43 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  function isMovingOnHovercard(target, card, anchor, nested) {
    if (hasFocusWithin(card))
      return true;
    if (!target)
      return false;
    if (contains(card, target))
      return true;
    if (anchor && contains(anchor, target))
      return true;
    if (nested == null ? void 0 : nested.some((card2) => isMovingOnHovercard(target, card2, anchor))) {
      return true;
    }
    return false;
  }
  function useAutoFocusOnHide(_a) {
    var _b = _a, {
      store: store6
    } = _b, props = __objRest(_b, [
      "store"
    ]);
    const [autoFocusOnHide, setAutoFocusOnHide] = (0, import_react43.useState)(false);
    const mounted = store6.useState("mounted");
    (0, import_react43.useEffect)(() => {
      if (!mounted) {
        setAutoFocusOnHide(false);
      }
    }, [mounted]);
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      setAutoFocusOnHide(true);
    });
    const finalFocusRef = (0, import_react43.useRef)(null);
    (0, import_react43.useEffect)(() => {
      return sync(store6, ["anchorElement"], (state) => {
        finalFocusRef.current = state.anchorElement;
      });
    }, []);
    props = __spreadProps(__spreadValues({
      autoFocusOnHide,
      finalFocus: finalFocusRef
    }, props), {
      onFocus
    });
    return props;
  }
  var NestedHovercardContext = (0, import_react43.createContext)(null);
  var useHovercard = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        modal = false,
        portal = !!modal,
        hideOnEscape = true,
        hideOnHoverOutside = true,
        disablePointerEventsOnApproach = !!hideOnHoverOutside
      } = _b, props = __objRest(_b, [
        "store",
        "modal",
        "portal",
        "hideOnEscape",
        "hideOnHoverOutside",
        "disablePointerEventsOnApproach"
      ]);
      const context2 = useHovercardProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Hovercard must receive a `store` prop or be wrapped in a HovercardProvider component."
      );
      const ref = (0, import_react43.useRef)(null);
      const [nestedHovercards, setNestedHovercards] = (0, import_react43.useState)([]);
      const hideTimeoutRef = (0, import_react43.useRef)(0);
      const enterPointRef = (0, import_react43.useRef)(null);
      const { portalRef, domReady: domReady2 } = usePortalRef(portal, props.portalRef);
      const mayHideOnHoverOutside = !!hideOnHoverOutside;
      const hideOnHoverOutsideProp = useBooleanEvent(hideOnHoverOutside);
      const mayDisablePointerEvents = !!disablePointerEventsOnApproach;
      const disablePointerEventsProp = useBooleanEvent(
        disablePointerEventsOnApproach
      );
      const open = store6.useState("open");
      const mounted = store6.useState("mounted");
      (0, import_react43.useEffect)(() => {
        if (!domReady2)
          return;
        if (!mounted)
          return;
        if (!mayHideOnHoverOutside && !mayDisablePointerEvents)
          return;
        const element = ref.current;
        if (!element)
          return;
        const onMouseMove = (event) => {
          if (!store6)
            return;
          const { anchorElement, hideTimeout, timeout } = store6.getState();
          const enterPoint = enterPointRef.current;
          const [target] = event.composedPath();
          const anchor = anchorElement;
          if (isMovingOnHovercard(target, element, anchor, nestedHovercards)) {
            enterPointRef.current = target && anchor && contains(anchor, target) ? getEventPoint(event) : null;
            window.clearTimeout(hideTimeoutRef.current);
            hideTimeoutRef.current = 0;
            return;
          }
          if (hideTimeoutRef.current)
            return;
          if (enterPoint) {
            const currentPoint = getEventPoint(event);
            const polygon = getElementPolygon(element, enterPoint);
            if (isPointInPolygon(currentPoint, polygon)) {
              enterPointRef.current = currentPoint;
              if (!disablePointerEventsProp(event))
                return;
              event.preventDefault();
              event.stopPropagation();
              return;
            }
          }
          if (!hideOnHoverOutsideProp(event))
            return;
          hideTimeoutRef.current = window.setTimeout(() => {
            hideTimeoutRef.current = 0;
            store6 == null ? void 0 : store6.hide();
          }, hideTimeout != null ? hideTimeout : timeout);
        };
        return chain(
          addGlobalEventListener("mousemove", onMouseMove, true),
          () => clearTimeout(hideTimeoutRef.current)
        );
      }, [
        store6,
        domReady2,
        mounted,
        mayHideOnHoverOutside,
        mayDisablePointerEvents,
        nestedHovercards,
        disablePointerEventsProp,
        hideOnHoverOutsideProp
      ]);
      (0, import_react43.useEffect)(() => {
        if (!domReady2)
          return;
        if (!mounted)
          return;
        if (!mayDisablePointerEvents)
          return;
        const disableEvent = (event) => {
          const element = ref.current;
          if (!element)
            return;
          const enterPoint = enterPointRef.current;
          if (!enterPoint)
            return;
          const polygon = getElementPolygon(element, enterPoint);
          if (isPointInPolygon(getEventPoint(event), polygon)) {
            if (!disablePointerEventsProp(event))
              return;
            event.preventDefault();
            event.stopPropagation();
          }
        };
        return chain(
          // Note: we may need to add pointer events here in the future.
          addGlobalEventListener("mouseenter", disableEvent, true),
          addGlobalEventListener("mouseover", disableEvent, true),
          addGlobalEventListener("mouseout", disableEvent, true),
          addGlobalEventListener("mouseleave", disableEvent, true)
        );
      }, [domReady2, mounted, mayDisablePointerEvents, disablePointerEventsProp]);
      (0, import_react43.useEffect)(() => {
        if (!domReady2)
          return;
        if (open)
          return;
        store6 == null ? void 0 : store6.setAutoFocusOnShow(false);
      }, [store6, domReady2, open]);
      const openRef = useLiveRef(open);
      (0, import_react43.useEffect)(() => {
        if (!domReady2)
          return;
        return () => {
          if (!openRef.current) {
            store6 == null ? void 0 : store6.setAutoFocusOnShow(false);
          }
        };
      }, [store6, domReady2]);
      const registerOnParent = (0, import_react43.useContext)(NestedHovercardContext);
      useSafeLayoutEffect(() => {
        if (modal)
          return;
        if (!portal)
          return;
        if (!mounted)
          return;
        if (!domReady2)
          return;
        const element = ref.current;
        if (!element)
          return;
        return registerOnParent == null ? void 0 : registerOnParent(element);
      }, [modal, portal, mounted, domReady2]);
      const registerNestedHovercard = (0, import_react43.useCallback)(
        (element) => {
          setNestedHovercards((prevElements) => [...prevElements, element]);
          const parentUnregister = registerOnParent == null ? void 0 : registerOnParent(element);
          return () => {
            setNestedHovercards(
              (prevElements) => prevElements.filter((item) => item !== element)
            );
            parentUnregister == null ? void 0 : parentUnregister();
          };
        },
        [registerOnParent]
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(HovercardScopedContextProvider, { value: store6, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(NestedHovercardContext.Provider, { value: registerNestedHovercard, children: element }) }),
        [store6, registerNestedHovercard]
      );
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(ref, props.ref)
      });
      props = useAutoFocusOnHide(__spreadValues({ store: store6 }, props));
      const autoFocusOnShow = store6.useState(
        (state) => modal || state.autoFocusOnShow
      );
      props = usePopover(__spreadProps(__spreadValues({
        store: store6,
        modal,
        portal,
        autoFocusOnShow
      }, props), {
        portalRef,
        hideOnEscape(event) {
          if (isFalsyBooleanCallback(hideOnEscape, event))
            return false;
          requestAnimationFrame(() => {
            requestAnimationFrame(() => {
              store6 == null ? void 0 : store6.hide();
            });
          });
          return true;
        }
      }));
      return props;
    }
  );
  var Hovercard = createDialogComponent(
    createComponent((props) => {
      const htmlProps = useHovercard(props);
      return createElement3("div", htmlProps);
    }),
    useHovercardProviderContext
  );
  if (true) {
    Hovercard.displayName = "Hovercard";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu.js
  var import_react44 = __toESM(require_react(), 1);
  var useMenu = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        modal: modalProp = false,
        portal = !!modalProp,
        hideOnEscape = true,
        autoFocusOnShow = true,
        hideOnHoverOutside,
        alwaysVisible
      } = _b, props = __objRest(_b, [
        "store",
        "modal",
        "portal",
        "hideOnEscape",
        "autoFocusOnShow",
        "hideOnHoverOutside",
        "alwaysVisible"
      ]);
      const context2 = useMenuProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Menu must receive a `store` prop or be wrapped in a MenuProvider component."
      );
      const ref = (0, import_react44.useRef)(null);
      const parentMenu = store6.parent;
      const parentMenubar = store6.menubar;
      const hasParentMenu = !!parentMenu;
      const parentIsMenubar = !!parentMenubar && !hasParentMenu;
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(ref, props.ref)
      });
      const _a2 = useMenuList(
        __spreadValues({ store: store6, alwaysVisible }, props)
      ), { "aria-labelledby": ariaLabelledBy } = _a2, menuListProps = __objRest(_a2, ["aria-labelledby"]);
      props = menuListProps;
      const [initialFocusRef, setInitialFocusRef] = (0, import_react44.useState)();
      const autoFocusOnShowState = store6.useState("autoFocusOnShow");
      const initialFocus = store6.useState("initialFocus");
      const baseElement = store6.useState("baseElement");
      const items = store6.useState("renderedItems");
      (0, import_react44.useEffect)(() => {
        let cleaning = false;
        setInitialFocusRef((prevInitialFocusRef) => {
          var _a3, _b2, _c;
          if (cleaning)
            return;
          if (!autoFocusOnShowState)
            return;
          if ((_a3 = prevInitialFocusRef == null ? void 0 : prevInitialFocusRef.current) == null ? void 0 : _a3.isConnected)
            return prevInitialFocusRef;
          const ref2 = (0, import_react44.createRef)();
          switch (initialFocus) {
            case "first":
              ref2.current = ((_b2 = items.find((item) => !item.disabled && item.element)) == null ? void 0 : _b2.element) || null;
              break;
            case "last":
              ref2.current = ((_c = [...items].reverse().find((item) => !item.disabled && item.element)) == null ? void 0 : _c.element) || null;
              break;
            default:
              ref2.current = baseElement;
          }
          return ref2;
        });
        return () => {
          cleaning = true;
        };
      }, [store6, autoFocusOnShowState, initialFocus, items, baseElement]);
      const modal = hasParentMenu ? false : modalProp;
      const mayAutoFocusOnShow = !!autoFocusOnShow;
      const canAutoFocusOnShow = !!initialFocusRef || !!props.initialFocus || !!modal;
      const contentElement = useStoreState(
        store6.combobox || store6,
        "contentElement"
      );
      const parentContentElement = useStoreState(
        (parentMenu == null ? void 0 : parentMenu.combobox) || parentMenu,
        "contentElement"
      );
      const preserveTabOrderAnchor = (0, import_react44.useMemo)(() => {
        if (!parentContentElement)
          return;
        if (!contentElement)
          return;
        const role = contentElement.getAttribute("role");
        const parentRole = parentContentElement.getAttribute("role");
        const parentIsMenuOrMenubar = parentRole === "menu" || parentRole === "menubar";
        if (parentIsMenuOrMenubar && role === "menu")
          return;
        return parentContentElement;
      }, [contentElement, parentContentElement]);
      if (preserveTabOrderAnchor !== void 0) {
        props = __spreadValues({
          preserveTabOrderAnchor
        }, props);
      }
      props = useHovercard(__spreadProps(__spreadValues({
        store: store6,
        alwaysVisible,
        initialFocus: initialFocusRef,
        autoFocusOnShow: mayAutoFocusOnShow ? canAutoFocusOnShow && autoFocusOnShow : autoFocusOnShowState || !!modal
      }, props), {
        hideOnEscape: (event) => {
          if (isFalsyBooleanCallback(hideOnEscape, event))
            return false;
          store6 == null ? void 0 : store6.hideAll();
          return true;
        },
        hideOnHoverOutside: (event) => {
          const disclosureElement = store6 == null ? void 0 : store6.getState().disclosureElement;
          const getHideOnHoverOutside = () => {
            if (typeof hideOnHoverOutside === "function") {
              return hideOnHoverOutside(event);
            }
            if (hideOnHoverOutside != null)
              return hideOnHoverOutside;
            if (hasParentMenu)
              return true;
            if (!parentIsMenubar)
              return false;
            if (!disclosureElement)
              return true;
            if (hasFocusWithin(disclosureElement))
              return false;
            return true;
          };
          if (!getHideOnHoverOutside())
            return false;
          if (event.defaultPrevented)
            return true;
          if (!hasParentMenu)
            return true;
          if (!disclosureElement)
            return true;
          fireEvent(disclosureElement, "mouseout", event);
          if (!hasFocusWithin(disclosureElement))
            return true;
          requestAnimationFrame(() => {
            if (hasFocusWithin(disclosureElement))
              return;
            store6 == null ? void 0 : store6.hide();
          });
          return false;
        },
        modal,
        portal,
        backdrop: hasParentMenu ? false : props.backdrop
      }));
      props = __spreadValues({
        "aria-labelledby": ariaLabelledBy
      }, props);
      return props;
    }
  );
  var Menu = createDialogComponent(
    createComponent((props) => {
      const htmlProps = useMenu(props);
      return createElement3("div", htmlProps);
    }),
    useMenuProviderContext
  );
  if (true) {
    Menu.displayName = "Menu";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7X4DYKYU.js
  var import_react45 = __toESM(require_react(), 1);
  var useHovercardAnchor = createHook(
    (_a) => {
      var _b = _a, { store: store6, showOnHover = true } = _b, props = __objRest(_b, ["store", "showOnHover"]);
      const context2 = useHovercardProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "HovercardAnchor must receive a `store` prop or be wrapped in a HovercardProvider component."
      );
      const disabled = disabledFromProps(props);
      const showTimeoutRef = (0, import_react45.useRef)(0);
      (0, import_react45.useEffect)(() => () => window.clearTimeout(showTimeoutRef.current), []);
      (0, import_react45.useEffect)(() => {
        const onMouseLeave = (event) => {
          if (!store6)
            return;
          const { anchorElement } = store6.getState();
          if (!anchorElement)
            return;
          if (event.target !== anchorElement)
            return;
          window.clearTimeout(showTimeoutRef.current);
          showTimeoutRef.current = 0;
        };
        return addGlobalEventListener("mouseleave", onMouseLeave, true);
      }, [store6]);
      const onMouseMoveProp = props.onMouseMove;
      const showOnHoverProp = useBooleanEvent(showOnHover);
      const isMouseMoving = useIsMouseMoving();
      const onMouseMove = useEvent(
        (event) => {
          onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
          if (disabled)
            return;
          if (!store6)
            return;
          if (event.defaultPrevented)
            return;
          if (showTimeoutRef.current)
            return;
          if (!isMouseMoving())
            return;
          if (!showOnHoverProp(event))
            return;
          const element = event.currentTarget;
          store6.setAnchorElement(element);
          store6.setDisclosureElement(element);
          const { showTimeout, timeout } = store6.getState();
          const showHovercard = () => {
            showTimeoutRef.current = 0;
            if (!isMouseMoving())
              return;
            store6 == null ? void 0 : store6.setAnchorElement(element);
            store6 == null ? void 0 : store6.show();
            queueMicrotask(() => {
              store6 == null ? void 0 : store6.setDisclosureElement(element);
            });
          };
          const timeoutMs = showTimeout != null ? showTimeout : timeout;
          if (timeoutMs === 0) {
            showHovercard();
          } else {
            showTimeoutRef.current = window.setTimeout(showHovercard, timeoutMs);
          }
        }
      );
      const ref = (0, import_react45.useCallback)(
        (element) => {
          if (!store6)
            return;
          const { anchorElement } = store6.getState();
          if (anchorElement == null ? void 0 : anchorElement.isConnected)
            return;
          store6.setAnchorElement(element);
        },
        [store6]
      );
      props = __spreadProps(__spreadValues({}, props), {
        ref: useMergeRefs2(ref, props.ref),
        onMouseMove
      });
      props = useFocusable(props);
      return props;
    }
  );
  var HovercardAnchor = createComponent(
    (props) => {
      const htmlProps = useHovercardAnchor(props);
      return createElement3("a", htmlProps);
    }
  );
  if (true) {
    HovercardAnchor.displayName = "HovercardAnchor";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-button.js
  var import_react46 = __toESM(require_react(), 1);
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  function getInitialFocus(event, dir) {
    const keyMap = {
      ArrowDown: dir === "bottom" || dir === "top" ? "first" : false,
      ArrowUp: dir === "bottom" || dir === "top" ? "last" : false,
      ArrowRight: dir === "right" ? "first" : false,
      ArrowLeft: dir === "left" ? "first" : false
    };
    return keyMap[event.key];
  }
  function hasActiveItem(items, excludeElement) {
    return !!(items == null ? void 0 : items.some((item) => {
      if (!item.element)
        return false;
      if (item.element === excludeElement)
        return false;
      return item.element.getAttribute("aria-expanded") === "true";
    }));
  }
  var useMenuButton = createHook(
    (_a) => {
      var _b = _a, { store: store6, focusable, accessibleWhenDisabled, showOnHover } = _b, props = __objRest(_b, ["store", "focusable", "accessibleWhenDisabled", "showOnHover"]);
      const context2 = useMenuProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "MenuButton must receive a `store` prop or be wrapped in a MenuProvider component."
      );
      const ref = (0, import_react46.useRef)(null);
      const parentMenu = store6.parent;
      const parentMenubar = store6.menubar;
      const hasParentMenu = !!parentMenu;
      const parentIsMenubar = !!parentMenubar && !hasParentMenu;
      const disabled = disabledFromProps(props);
      const showMenu = () => {
        const trigger = ref.current;
        if (!trigger)
          return;
        store6 == null ? void 0 : store6.setDisclosureElement(trigger);
        store6 == null ? void 0 : store6.setAnchorElement(trigger);
        store6 == null ? void 0 : store6.show();
      };
      const onFocusProp = props.onFocus;
      const onFocus = useEvent((event) => {
        onFocusProp == null ? void 0 : onFocusProp(event);
        if (disabled)
          return;
        if (event.defaultPrevented)
          return;
        store6 == null ? void 0 : store6.setAutoFocusOnShow(false);
        store6 == null ? void 0 : store6.setActiveId(null);
        if (!parentMenubar)
          return;
        if (!parentIsMenubar)
          return;
        const { items } = parentMenubar.getState();
        if (hasActiveItem(items, event.currentTarget)) {
          showMenu();
        }
      });
      const dir = store6.useState(
        (state) => state.placement.split("-")[0]
      );
      const onKeyDownProp = props.onKeyDown;
      const onKeyDown = useEvent((event) => {
        onKeyDownProp == null ? void 0 : onKeyDownProp(event);
        if (disabled)
          return;
        if (event.defaultPrevented)
          return;
        const initialFocus = getInitialFocus(event, dir);
        if (initialFocus) {
          event.preventDefault();
          showMenu();
          store6 == null ? void 0 : store6.setAutoFocusOnShow(true);
          store6 == null ? void 0 : store6.setInitialFocus(initialFocus);
        }
      });
      const onClickProp = props.onClick;
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        if (!store6)
          return;
        const isKeyboardClick = !event.detail;
        const { open } = store6.getState();
        if (!open || isKeyboardClick) {
          if (!hasParentMenu || isKeyboardClick) {
            store6.setAutoFocusOnShow(true);
          }
          store6.setInitialFocus(isKeyboardClick ? "first" : "container");
        }
        if (hasParentMenu) {
          showMenu();
        }
      });
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(MenuContextProvider, { value: store6, children: element }),
        [store6]
      );
      if (hasParentMenu) {
        props = __spreadProps(__spreadValues({}, props), {
          render: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Role.div, { render: props.render })
        });
      }
      const id3 = useId2(props.id);
      const parentContentElement = useStoreState(
        (parentMenu == null ? void 0 : parentMenu.combobox) || parentMenu,
        "contentElement"
      );
      const role = hasParentMenu || parentIsMenubar ? getPopupItemRole(parentContentElement, "menuitem") : void 0;
      const contentElement = store6.useState("contentElement");
      props = __spreadProps(__spreadValues({
        id: id3,
        role,
        "aria-haspopup": getPopupRole(contentElement, "menu")
      }, props), {
        ref: useMergeRefs2(ref, props.ref),
        onFocus,
        onKeyDown,
        onClick
      });
      props = useHovercardAnchor(__spreadProps(__spreadValues({
        store: store6,
        focusable,
        accessibleWhenDisabled
      }, props), {
        showOnHover: (event) => {
          const getShowOnHover = () => {
            if (typeof showOnHover === "function")
              return showOnHover(event);
            if (showOnHover != null)
              return showOnHover;
            if (hasParentMenu)
              return true;
            if (!parentMenubar)
              return false;
            const { items } = parentMenubar.getState();
            return parentIsMenubar && hasActiveItem(items);
          };
          const canShowOnHover = getShowOnHover();
          if (!canShowOnHover)
            return false;
          const parent = parentIsMenubar ? parentMenubar : parentMenu;
          if (!parent)
            return true;
          parent.setActiveId(event.currentTarget.id);
          return true;
        }
      }));
      props = usePopoverDisclosure(__spreadValues({
        store: store6,
        toggleOnClick: !hasParentMenu,
        focusable,
        accessibleWhenDisabled
      }, props));
      props = useCompositeTypeahead(__spreadValues({
        store: store6,
        typeahead: parentIsMenubar
      }, props));
      return props;
    }
  );
  var MenuButton = createComponent((props) => {
    const htmlProps = useMenuButton(props);
    return createElement3("button", htmlProps);
  });
  if (true) {
    MenuButton.displayName = "MenuButton";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-group.js
  var useMenuGroup = createHook((props) => {
    props = useCompositeGroup(props);
    return props;
  });
  var MenuGroup = createComponent((props) => {
    const htmlProps = useMenuGroup(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    MenuGroup.displayName = "MenuGroup";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-item-check.js
  var import_react47 = __toESM(require_react(), 1);
  var useMenuItemCheck = createHook(
    (_a) => {
      var _b = _a, { store: store6, checked } = _b, props = __objRest(_b, ["store", "checked"]);
      const context2 = (0, import_react47.useContext)(MenuItemCheckedContext2);
      checked = checked != null ? checked : context2;
      props = useCheckboxCheck(__spreadProps(__spreadValues({}, props), { checked }));
      return props;
    }
  );
  var MenuItemCheck = createComponent((props) => {
    const htmlProps = useMenuItemCheck(props);
    return createElement3("span", htmlProps);
  });
  if (true) {
    MenuItemCheck.displayName = "MenuItemCheck";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/Y6467XPW.js
  function menuHasFocus(baseElement, items, currentTarget) {
    var _a;
    if (!baseElement)
      return false;
    if (hasFocusWithin(baseElement))
      return true;
    const expandedItem = items == null ? void 0 : items.find((item) => {
      var _a2;
      if (item.element === currentTarget)
        return false;
      return ((_a2 = item.element) == null ? void 0 : _a2.getAttribute("aria-expanded")) === "true";
    });
    const expandedMenuId = (_a = expandedItem == null ? void 0 : expandedItem.element) == null ? void 0 : _a.getAttribute("aria-controls");
    if (!expandedMenuId)
      return false;
    const doc = getDocument2(baseElement);
    const expandedMenu = doc.getElementById(expandedMenuId);
    if (!expandedMenu)
      return false;
    if (hasFocusWithin(expandedMenu))
      return true;
    return !!expandedMenu.querySelector("[role=menuitem][aria-expanded=true]");
  }
  var useMenuItem = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        hideOnClick = true,
        preventScrollOnKeyDown = true,
        focusOnHover,
        blurOnHoverEnd
      } = _b, props = __objRest(_b, [
        "store",
        "hideOnClick",
        "preventScrollOnKeyDown",
        "focusOnHover",
        "blurOnHoverEnd"
      ]);
      const menuContext = useMenuScopedContext(true);
      const menubarContext = useMenubarScopedContext();
      store6 = store6 || menuContext || menubarContext;
      invariant(
        store6,
        "MenuItem must be wrapped in a MenuList, Menu or Menubar component"
      );
      const onClickProp = props.onClick;
      const hideOnClickProp = useBooleanEvent(hideOnClick);
      const hideMenu = "hideAll" in store6 ? store6.hideAll : void 0;
      const isWithinMenu = !!hideMenu;
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        if (isDownloading(event))
          return;
        if (isOpeningInNewTab(event))
          return;
        if (!hideMenu)
          return;
        const popupType = event.currentTarget.getAttribute("aria-haspopup");
        if (popupType === "menu")
          return;
        if (!hideOnClickProp(event))
          return;
        hideMenu();
      });
      const contentElement = useStoreState(
        store6,
        (state) => "contentElement" in state ? state.contentElement : null
      );
      const role = getPopupItemRole(contentElement, "menuitem");
      props = __spreadProps(__spreadValues({
        role
      }, props), {
        onClick
      });
      props = useCompositeItem(__spreadValues({ store: store6, preventScrollOnKeyDown }, props));
      props = useCompositeHover(__spreadProps(__spreadValues({
        store: store6
      }, props), {
        focusOnHover(event) {
          const getFocusOnHover = () => {
            if (typeof focusOnHover === "function")
              return focusOnHover(event);
            if (focusOnHover != null)
              return focusOnHover;
            return true;
          };
          if (!store6)
            return false;
          if (!getFocusOnHover())
            return false;
          const { baseElement, items } = store6.getState();
          if (isWithinMenu) {
            if (event.currentTarget.hasAttribute("aria-expanded")) {
              event.currentTarget.focus();
            }
            return true;
          }
          if (menuHasFocus(baseElement, items, event.currentTarget)) {
            event.currentTarget.focus();
            return true;
          }
          return false;
        },
        blurOnHoverEnd(event) {
          if (typeof blurOnHoverEnd === "function")
            return blurOnHoverEnd(event);
          if (blurOnHoverEnd != null)
            return blurOnHoverEnd;
          return isWithinMenu;
        }
      }));
      return props;
    }
  );
  var MenuItem = createMemoComponent((props) => {
    const htmlProps = useMenuItem(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    MenuItem.displayName = "MenuItem";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-item-checkbox.js
  var import_react48 = __toESM(require_react(), 1);
  function getPrimitiveValue2(value) {
    if (Array.isArray(value)) {
      return value.toString();
    }
    return value;
  }
  function getValue(storeValue, value, checked) {
    if (value === void 0) {
      if (Array.isArray(storeValue))
        return storeValue;
      return !!checked;
    }
    const primitiveValue = getPrimitiveValue2(value);
    if (!Array.isArray(storeValue)) {
      if (checked) {
        return primitiveValue;
      }
      return storeValue === primitiveValue ? false : storeValue;
    }
    if (checked) {
      if (storeValue.includes(primitiveValue)) {
        return storeValue;
      }
      return [...storeValue, primitiveValue];
    }
    return storeValue.filter((v2) => v2 !== primitiveValue);
  }
  var useMenuItemCheckbox = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        name,
        value,
        checked,
        defaultChecked: defaultCheckedProp,
        hideOnClick = false
      } = _b, props = __objRest(_b, [
        "store",
        "name",
        "value",
        "checked",
        "defaultChecked",
        "hideOnClick"
      ]);
      const context2 = useMenuScopedContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "MenuItemCheckbox must be wrapped in a MenuList or Menu component"
      );
      const defaultChecked = useInitialValue(defaultCheckedProp);
      (0, import_react48.useEffect)(() => {
        store6 == null ? void 0 : store6.setValue(name, (prevValue = []) => {
          if (!defaultChecked)
            return prevValue;
          return getValue(prevValue, value, true);
        });
      }, [store6, name, value, defaultChecked]);
      (0, import_react48.useEffect)(() => {
        if (checked === void 0)
          return;
        store6 == null ? void 0 : store6.setValue(name, (prevValue) => {
          return getValue(prevValue, value, checked);
        });
      }, [store6, name, value, checked]);
      const checkboxStore = useCheckboxStore({
        value: store6.useState((state) => state.values[name]),
        setValue(internalValue) {
          store6 == null ? void 0 : store6.setValue(name, () => {
            if (checked === void 0)
              return internalValue;
            const nextValue = getValue(internalValue, value, checked);
            if (!Array.isArray(nextValue))
              return nextValue;
            if (!Array.isArray(internalValue))
              return nextValue;
            if (shallowEqual(internalValue, nextValue))
              return internalValue;
            return nextValue;
          });
        }
      });
      props = __spreadValues({
        role: "menuitemcheckbox"
      }, props);
      props = useCheckbox(__spreadValues({
        store: checkboxStore,
        name,
        value,
        checked
      }, props));
      props = useMenuItem(__spreadValues({ store: store6, hideOnClick }, props));
      return props;
    }
  );
  var MenuItemCheckbox = createMemoComponent(
    (props) => {
      const htmlProps = useMenuItemCheckbox(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    MenuItemCheckbox.displayName = "MenuItemCheckbox";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-item-radio.js
  var import_react49 = __toESM(require_react(), 1);
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  function getValue2(prevValue, value, checked) {
    if (checked === void 0)
      return prevValue;
    if (checked)
      return value;
    return prevValue;
  }
  var useMenuItemRadio = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        name,
        value,
        checked,
        onChange: onChangeProp,
        hideOnClick = false
      } = _b, props = __objRest(_b, [
        "store",
        "name",
        "value",
        "checked",
        "onChange",
        "hideOnClick"
      ]);
      const context2 = useMenuScopedContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "MenuItemRadio must be wrapped in a MenuList or Menu component"
      );
      const defaultChecked = useInitialValue(props.defaultChecked);
      (0, import_react49.useEffect)(() => {
        store6 == null ? void 0 : store6.setValue(name, (prevValue = false) => {
          return getValue2(prevValue, value, defaultChecked);
        });
      }, [store6, name, value, defaultChecked]);
      (0, import_react49.useEffect)(() => {
        if (checked === void 0)
          return;
        store6 == null ? void 0 : store6.setValue(name, (prevValue) => {
          return getValue2(prevValue, value, checked);
        });
      }, [store6, name, value, checked]);
      const isChecked = store6.useState((state) => state.values[name] === value);
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(MenuItemCheckedContext2.Provider, { value: !!isChecked, children: element }),
        [isChecked]
      );
      props = __spreadValues({
        role: "menuitemradio"
      }, props);
      props = useRadio(__spreadValues({
        name,
        value,
        checked: isChecked,
        onChange: (event) => {
          onChangeProp == null ? void 0 : onChangeProp(event);
          if (event.defaultPrevented)
            return;
          const element = event.currentTarget;
          store6 == null ? void 0 : store6.setValue(name, (prevValue) => {
            return getValue2(prevValue, value, checked != null ? checked : element.checked);
          });
        }
      }, props));
      props = useMenuItem(__spreadValues({ store: store6, hideOnClick }, props));
      return props;
    }
  );
  var MenuItemRadio = createMemoComponent(
    (props) => {
      const htmlProps = useMenuItemRadio(props);
      return createElement3("div", htmlProps);
    }
  );
  if (true) {
    MenuItemRadio.displayName = "MenuItemRadio";
  }

  // node_modules/@ariakit/react-core/esm/menu/menu-separator.js
  var useMenuSeparator = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = useMenuContext();
      store6 = store6 || context2;
      props = useCompositeSeparator(__spreadValues({ store: store6 }, props));
      return props;
    }
  );
  var MenuSeparator = createComponent((props) => {
    const htmlProps = useMenuSeparator(props);
    return createElement3("hr", htmlProps);
  });
  if (true) {
    MenuSeparator.displayName = "MenuSeparator";
  }

  // node_modules/@ariakit/core/esm/tooltip/tooltip-store.js
  function createTooltipStore(props = {}) {
    var _a;
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const hovercard = createHovercardStore(__spreadProps2(__spreadValues2({}, props), {
      placement: defaultValue(
        props.placement,
        syncState == null ? void 0 : syncState.placement,
        "top"
      ),
      hideTimeout: defaultValue(props.hideTimeout, syncState == null ? void 0 : syncState.hideTimeout, 0)
    }));
    const initialState = __spreadProps2(__spreadValues2({}, hovercard.getState()), {
      type: defaultValue(props.type, syncState == null ? void 0 : syncState.type, "description"),
      skipTimeout: defaultValue(props.skipTimeout, syncState == null ? void 0 : syncState.skipTimeout, 300)
    });
    const tooltip = createStore2(initialState, hovercard, props.store);
    return __spreadValues2(__spreadValues2({}, hovercard), tooltip);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/2QMN5E6B.js
  function useTooltipStoreProps(store6, update3, props) {
    store6 = useHovercardStoreProps(store6, update3, props);
    useStoreProps(store6, props, "type");
    useStoreProps(store6, props, "skipTimeout");
    return store6;
  }
  function useTooltipStore(props = {}) {
    const [store6, update3] = useStore(createTooltipStore, props);
    return useTooltipStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/MNFF5YOJ.js
  var ctx10 = createStoreContext(
    [HovercardContextProvider],
    [HovercardScopedContextProvider]
  );
  var useTooltipContext = ctx10.useContext;
  var useTooltipScopedContext = ctx10.useScopedContext;
  var useTooltipProviderContext = ctx10.useProviderContext;
  var TooltipContextProvider = ctx10.ContextProvider;
  var TooltipScopedContextProvider = ctx10.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/tooltip/tooltip.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var useTooltip = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        portal = true,
        gutter = 8,
        preserveTabOrder = false,
        hideOnHoverOutside = true,
        hideOnInteractOutside = true
      } = _b, props = __objRest(_b, [
        "store",
        "portal",
        "gutter",
        "preserveTabOrder",
        "hideOnHoverOutside",
        "hideOnInteractOutside"
      ]);
      const context2 = useTooltipProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Tooltip must receive a `store` prop or be wrapped in a TooltipProvider component."
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(TooltipScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      const role = store6.useState(
        (state) => state.type === "description" ? "tooltip" : "none"
      );
      props = __spreadValues({ role }, props);
      props = useHovercard(__spreadProps(__spreadValues({}, props), {
        store: store6,
        portal,
        gutter,
        preserveTabOrder,
        hideOnHoverOutside: (event) => {
          if (isFalsyBooleanCallback(hideOnHoverOutside, event))
            return false;
          const anchorElement = store6 == null ? void 0 : store6.getState().anchorElement;
          if (!anchorElement)
            return true;
          if ("focusVisible" in anchorElement.dataset)
            return false;
          return true;
        },
        hideOnInteractOutside: (event) => {
          if (isFalsyBooleanCallback(hideOnInteractOutside, event))
            return false;
          const anchorElement = store6 == null ? void 0 : store6.getState().anchorElement;
          if (!anchorElement)
            return true;
          if (contains(anchorElement, event.target))
            return false;
          return true;
        }
      }));
      return props;
    }
  );
  var Tooltip = createDialogComponent(
    createComponent((props) => {
      const htmlProps = useTooltip(props);
      return createElement3("div", htmlProps);
    }),
    useTooltipProviderContext
  );
  if (true) {
    Tooltip.displayName = "Tooltip";
  }

  // node_modules/@ariakit/react-core/esm/tooltip/tooltip-anchor.js
  var import_react50 = __toESM(require_react(), 1);
  var globalStore = createStore2({
    activeStore: null
  });
  var useTooltipAnchor = createHook(
    (_a) => {
      var _b = _a, { store: store6, showOnHover = true } = _b, props = __objRest(_b, ["store", "showOnHover"]);
      const context2 = useTooltipProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "TooltipAnchor must receive a `store` prop or be wrapped in a TooltipProvider component."
      );
      const canShowOnHoverRef = (0, import_react50.useRef)(false);
      (0, import_react50.useEffect)(() => {
        return sync(store6, ["mounted"], (state) => {
          if (state.mounted)
            return;
          canShowOnHoverRef.current = false;
        });
      }, [store6]);
      (0, import_react50.useEffect)(() => {
        return sync(store6, ["mounted", "skipTimeout"], (state) => {
          if (!store6)
            return;
          if (state.mounted) {
            const { activeStore } = globalStore.getState();
            if (activeStore !== store6) {
              activeStore == null ? void 0 : activeStore.hide();
            }
            return globalStore.setState("activeStore", store6);
          }
          const id3 = setTimeout(() => {
            const { activeStore } = globalStore.getState();
            if (activeStore !== store6)
              return;
            globalStore.setState("activeStore", null);
          }, state.skipTimeout);
          return () => clearTimeout(id3);
        });
      }, [store6]);
      const onMouseEnterProp = props.onMouseEnter;
      const onMouseEnter = useEvent((event) => {
        onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
        canShowOnHoverRef.current = true;
      });
      const onFocusVisibleProp = props.onFocusVisible;
      const onFocusVisible = useEvent((event) => {
        onFocusVisibleProp == null ? void 0 : onFocusVisibleProp(event);
        if (event.defaultPrevented)
          return;
        store6 == null ? void 0 : store6.setAnchorElement(event.currentTarget);
        store6 == null ? void 0 : store6.show();
      });
      const onBlurProp = props.onBlur;
      const onBlur = useEvent((event) => {
        onBlurProp == null ? void 0 : onBlurProp(event);
        if (event.defaultPrevented)
          return;
        const { activeStore } = globalStore.getState();
        if (activeStore === store6) {
          globalStore.setState("activeStore", null);
        }
      });
      const type = store6.useState("type");
      const contentId = store6.useState((state) => {
        var _a2;
        return (_a2 = state.contentElement) == null ? void 0 : _a2.id;
      });
      props = __spreadProps(__spreadValues({
        "aria-labelledby": type === "label" ? contentId : void 0,
        "aria-describedby": type === "description" ? contentId : void 0
      }, props), {
        onMouseEnter,
        onFocusVisible,
        onBlur
      });
      props = useHovercardAnchor(__spreadValues({
        store: store6,
        showOnHover: (event) => {
          if (!canShowOnHoverRef.current)
            return false;
          if (isFalsyBooleanCallback(showOnHover, event))
            return false;
          const { activeStore } = globalStore.getState();
          if (!activeStore)
            return true;
          store6 == null ? void 0 : store6.show();
          return false;
        }
      }, props));
      return props;
    }
  );
  var TooltipAnchor = createComponent((props) => {
    const htmlProps = useTooltipAnchor(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    TooltipAnchor.displayName = "TooltipAnchor";
  }

  // node_modules/@ariakit/core/esm/toolbar/toolbar-store.js
  function createToolbarStore(props = {}) {
    var _a;
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    return createCompositeStore(__spreadProps2(__spreadValues2({}, props), {
      orientation: defaultValue(
        props.orientation,
        syncState == null ? void 0 : syncState.orientation,
        "horizontal"
      ),
      focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, true)
    }));
  }

  // node_modules/@ariakit/react-core/esm/__chunks/BPNXFCFY.js
  function useToolbarStoreProps(store6, update3, props) {
    return useCompositeStoreProps(store6, update3, props);
  }
  function useToolbarStore(props = {}) {
    const [store6, update3] = useStore(createToolbarStore, props);
    return useToolbarStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/SOK7T35T.js
  var ctx11 = createStoreContext(
    [CompositeContextProvider],
    [CompositeScopedContextProvider]
  );
  var useToolbarContext = ctx11.useContext;
  var useToolbarScopedContext = ctx11.useScopedContext;
  var useToolbarProviderContext = ctx11.useProviderContext;
  var ToolbarContextProvider = ctx11.ContextProvider;
  var ToolbarScopedContextProvider = ctx11.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/toolbar/toolbar.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var useToolbar = createHook(
    (_a) => {
      var _b = _a, {
        store: storeProp,
        orientation: orientationProp,
        virtualFocus,
        focusLoop,
        rtl: rtl2
      } = _b, props = __objRest(_b, [
        "store",
        "orientation",
        "virtualFocus",
        "focusLoop",
        "rtl"
      ]);
      const context2 = useToolbarProviderContext();
      storeProp = storeProp || context2;
      const store6 = useToolbarStore({
        store: storeProp,
        orientation: orientationProp,
        virtualFocus,
        focusLoop,
        rtl: rtl2
      });
      const orientation = store6.useState(
        (state) => state.orientation === "both" ? void 0 : state.orientation
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ToolbarScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      props = __spreadValues({
        role: "toolbar",
        "aria-orientation": orientation
      }, props);
      props = useComposite(__spreadValues({ store: store6 }, props));
      return props;
    }
  );
  var Toolbar = createComponent((props) => {
    const htmlProps = useToolbar(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    Toolbar.displayName = "Toolbar";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/7NHUGSTF.js
  var useToolbarItem = createHook(
    (_a) => {
      var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
      const context2 = useToolbarContext();
      store6 = store6 || context2;
      props = useCompositeItem(__spreadValues({ store: store6 }, props));
      return props;
    }
  );
  var ToolbarItem = createMemoComponent((props) => {
    const htmlProps = useToolbarItem(props);
    return createElement3("button", htmlProps);
  });
  if (true) {
    ToolbarItem.displayName = "ToolbarItem";
  }

  // node_modules/@ariakit/react-core/esm/__chunks/CQMDBRG5.js
  var import_react51 = __toESM(require_react(), 1);

  // node_modules/@ariakit/core/esm/tab/tab-store.js
  function createTabStore(props = {}) {
    var _a;
    const syncState = (_a = props.store) == null ? void 0 : _a.getState();
    const composite = createCompositeStore(__spreadProps2(__spreadValues2({}, props), {
      orientation: defaultValue(
        props.orientation,
        syncState == null ? void 0 : syncState.orientation,
        "horizontal"
      ),
      focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, true)
    }));
    const panels = createCollectionStore();
    const initialState = __spreadProps2(__spreadValues2({}, composite.getState()), {
      selectedId: defaultValue(
        props.selectedId,
        syncState == null ? void 0 : syncState.selectedId,
        props.defaultSelectedId,
        void 0
      ),
      selectOnMove: defaultValue(
        props.selectOnMove,
        syncState == null ? void 0 : syncState.selectOnMove,
        true
      )
    });
    const tab = createStore2(initialState, composite, props.store);
    setup2(
      tab,
      () => sync(tab, ["moves"], () => {
        const { activeId, selectOnMove } = tab.getState();
        if (!selectOnMove)
          return;
        if (!activeId)
          return;
        const tabItem = composite.item(activeId);
        if (!tabItem)
          return;
        if (tabItem.dimmed)
          return;
        if (tabItem.disabled)
          return;
        tab.setState("selectedId", tabItem.id);
      })
    );
    setup2(
      tab,
      () => batch(
        tab,
        ["selectedId"],
        (state) => tab.setState("activeId", state.selectedId)
      )
    );
    setup2(
      tab,
      () => sync(tab, ["selectedId", "renderedItems"], (state) => {
        if (state.selectedId !== void 0)
          return;
        const { activeId, renderedItems } = tab.getState();
        const tabItem = composite.item(activeId);
        if (tabItem && !tabItem.disabled && !tabItem.dimmed) {
          tab.setState("selectedId", tabItem.id);
        } else {
          const tabItem2 = renderedItems.find(
            (item) => !item.disabled && !item.dimmed
          );
          tab.setState("selectedId", tabItem2 == null ? void 0 : tabItem2.id);
        }
      })
    );
    setup2(
      tab,
      () => sync(tab, ["renderedItems"], (state) => {
        const tabs = state.renderedItems;
        if (!tabs.length)
          return;
        return sync(panels, ["renderedItems"], (state2) => {
          const items = state2.renderedItems;
          const hasOrphanPanels = items.some((panel) => !panel.tabId);
          if (!hasOrphanPanels)
            return;
          items.forEach((panel, i3) => {
            if (panel.tabId)
              return;
            const tabItem = tabs[i3];
            if (!tabItem)
              return;
            panels.renderItem(__spreadProps2(__spreadValues2({}, panel), { tabId: tabItem.id }));
          });
        });
      })
    );
    return __spreadProps2(__spreadValues2(__spreadValues2({}, composite), tab), {
      panels,
      setSelectedId: (id3) => tab.setState("selectedId", id3),
      select: (id3) => {
        tab.setState("selectedId", id3);
        composite.move(id3);
      }
    });
  }

  // node_modules/@ariakit/react-core/esm/__chunks/CQMDBRG5.js
  function useTabStoreProps(store6, update3, props) {
    store6 = useCompositeStoreProps(store6, update3, props);
    useStoreProps(store6, props, "selectedId", "setSelectedId");
    useStoreProps(store6, props, "selectOnMove");
    const [panels, updatePanels] = useStore(() => store6.panels, {});
    useUpdateEffect(updatePanels, [store6, updatePanels]);
    return (0, import_react51.useMemo)(() => __spreadProps(__spreadValues({}, store6), { panels }), [store6, panels]);
  }
  function useTabStore(props = {}) {
    const [store6, update3] = useStore(createTabStore, props);
    return useTabStoreProps(store6, update3, props);
  }

  // node_modules/@ariakit/react-core/esm/__chunks/4B73HROV.js
  var ctx12 = createStoreContext(
    [CompositeContextProvider],
    [CompositeScopedContextProvider]
  );
  var useTabContext = ctx12.useContext;
  var useTabScopedContext = ctx12.useScopedContext;
  var useTabProviderContext = ctx12.useProviderContext;
  var TabContextProvider = ctx12.ContextProvider;
  var TabScopedContextProvider = ctx12.ScopedContextProvider;

  // node_modules/@ariakit/react-core/esm/tab/tab.js
  var import_react52 = __toESM(require_react(), 1);
  var useTab = createHook(
    (_a) => {
      var _b = _a, {
        store: store6,
        accessibleWhenDisabled = true,
        getItem: getItemProp
      } = _b, props = __objRest(_b, [
        "store",
        "accessibleWhenDisabled",
        "getItem"
      ]);
      const context2 = useTabScopedContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "Tab must be wrapped in a TabList component."
      );
      const defaultId = useId2();
      const id3 = props.id || defaultId;
      const dimmed = disabledFromProps(props);
      const getItem = (0, import_react52.useCallback)(
        (item) => {
          const nextItem = __spreadProps(__spreadValues({}, item), { dimmed });
          if (getItemProp) {
            return getItemProp(nextItem);
          }
          return nextItem;
        },
        [dimmed, getItemProp]
      );
      const onClickProp = props.onClick;
      const onClick = useEvent((event) => {
        onClickProp == null ? void 0 : onClickProp(event);
        if (event.defaultPrevented)
          return;
        store6 == null ? void 0 : store6.setSelectedId(id3);
      });
      const panelId = store6.panels.useState(
        (state) => {
          var _a2;
          return (_a2 = state.items.find((item) => item.tabId === id3)) == null ? void 0 : _a2.id;
        }
      );
      const selected = store6.useState((state) => !!id3 && state.selectedId === id3);
      props = __spreadProps(__spreadValues({
        id: id3,
        role: "tab",
        "aria-selected": selected,
        "aria-controls": panelId || void 0
      }, props), {
        onClick
      });
      props = useCompositeItem(__spreadProps(__spreadValues({
        store: store6
      }, props), {
        accessibleWhenDisabled,
        getItem,
        shouldRegisterItem: !!defaultId ? props.shouldRegisterItem : false
      }));
      return props;
    }
  );
  var Tab = createMemoComponent((props) => {
    const htmlProps = useTab(props);
    return createElement3("button", htmlProps);
  });
  if (true) {
    Tab.displayName = "Tab";
  }

  // node_modules/@ariakit/react-core/esm/tab/tab-list.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var useTabList = createHook((_a) => {
    var _b = _a, { store: store6 } = _b, props = __objRest(_b, ["store"]);
    const context2 = useTabProviderContext();
    store6 = store6 || context2;
    invariant(
      store6,
      "TabList must receive a `store` prop or be wrapped in a TabProvider component."
    );
    const orientation = store6.useState(
      (state) => state.orientation === "both" ? void 0 : state.orientation
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(TabScopedContextProvider, { value: store6, children: element }),
      [store6]
    );
    props = __spreadValues({
      role: "tablist",
      "aria-orientation": orientation
    }, props);
    props = useComposite(__spreadValues({ store: store6 }, props));
    return props;
  });
  var TabList = createComponent((props) => {
    const htmlProps = useTabList(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    TabList.displayName = "TabList";
  }

  // node_modules/@ariakit/react-core/esm/tab/tab-panel.js
  var import_react53 = __toESM(require_react(), 1);
  var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
  var useTabPanel = createHook(
    (_a) => {
      var _b = _a, { store: store6, tabId: tabIdProp, getItem: getItemProp } = _b, props = __objRest(_b, ["store", "tabId", "getItem"]);
      const context2 = useTabProviderContext();
      store6 = store6 || context2;
      invariant(
        store6,
        "TabPanel must receive a `store` prop or be wrapped in a TabProvider component."
      );
      const ref = (0, import_react53.useRef)(null);
      const id3 = useId2(props.id);
      const [hasTabbableChildren, setHasTabbableChildren] = (0, import_react53.useState)(false);
      (0, import_react53.useEffect)(() => {
        const element = ref.current;
        if (!element)
          return;
        const tabbable = getAllTabbableIn(element);
        setHasTabbableChildren(!!tabbable.length);
      }, []);
      const getItem = (0, import_react53.useCallback)(
        (item) => {
          const nextItem = __spreadProps(__spreadValues({}, item), { id: id3 || item.id, tabId: tabIdProp });
          if (getItemProp) {
            return getItemProp(nextItem);
          }
          return nextItem;
        },
        [id3, tabIdProp, getItemProp]
      );
      props = useWrapElement(
        props,
        (element) => /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(TabScopedContextProvider, { value: store6, children: element }),
        [store6]
      );
      const tabId = store6.panels.useState(
        () => {
          var _a2;
          return tabIdProp || ((_a2 = store6 == null ? void 0 : store6.panels.item(id3)) == null ? void 0 : _a2.tabId);
        }
      );
      const open = store6.useState(
        (state) => !!tabId && state.selectedId === tabId
      );
      props = __spreadProps(__spreadValues({
        id: id3,
        role: "tabpanel",
        "aria-labelledby": tabId || void 0
      }, props), {
        ref: useMergeRefs2(ref, props.ref)
      });
      const disclosure = useDisclosureStore({ open });
      props = useFocusable(__spreadValues({ focusable: !hasTabbableChildren }, props));
      props = useDisclosureContent(__spreadValues({ store: disclosure }, props));
      props = useCollectionItem(__spreadProps(__spreadValues({ store: store6.panels }, props), { getItem }));
      return props;
    }
  );
  var TabPanel = createComponent((props) => {
    const htmlProps = useTabPanel(props);
    return createElement3("div", htmlProps);
  });
  if (true) {
    TabPanel.displayName = "TabPanel";
  }

  // node_modules/@wordpress/components/build-module/shortcut/index.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  function Shortcut(props) {
    const {
      shortcut,
      className
    } = props;
    if (!shortcut) {
      return null;
    }
    let displayText;
    let ariaLabel;
    if (typeof shortcut === "string") {
      displayText = shortcut;
    }
    if (shortcut !== null && typeof shortcut === "object") {
      displayText = shortcut.display;
      ariaLabel = shortcut.ariaLabel;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("span", {
      className,
      "aria-label": ariaLabel,
      children: displayText
    });
  }
  var shortcut_default = Shortcut;

  // node_modules/@wordpress/components/build-module/popover/utils.js
  var POSITION_TO_PLACEMENT = {
    bottom: "bottom",
    top: "top",
    "middle left": "left",
    "middle right": "right",
    "bottom left": "bottom-end",
    "bottom center": "bottom",
    "bottom right": "bottom-start",
    "top left": "top-end",
    "top center": "top",
    "top right": "top-start",
    "middle left left": "left",
    "middle left right": "left",
    "middle left bottom": "left-end",
    "middle left top": "left-start",
    "middle right left": "right",
    "middle right right": "right",
    "middle right bottom": "right-end",
    "middle right top": "right-start",
    "bottom left left": "bottom-end",
    "bottom left right": "bottom-end",
    "bottom left bottom": "bottom-end",
    "bottom left top": "bottom-end",
    "bottom center left": "bottom",
    "bottom center right": "bottom",
    "bottom center bottom": "bottom",
    "bottom center top": "bottom",
    "bottom right left": "bottom-start",
    "bottom right right": "bottom-start",
    "bottom right bottom": "bottom-start",
    "bottom right top": "bottom-start",
    "top left left": "top-end",
    "top left right": "top-end",
    "top left bottom": "top-end",
    "top left top": "top-end",
    "top center left": "top",
    "top center right": "top",
    "top center bottom": "top",
    "top center top": "top",
    "top right left": "top-start",
    "top right right": "top-start",
    "top right bottom": "top-start",
    "top right top": "top-start",
    // `middle`/`middle center [corner?]` positions are associated to a fallback
    // `bottom` placement because there aren't any corresponding placement values.
    middle: "bottom",
    "middle center": "bottom",
    "middle center bottom": "bottom",
    "middle center left": "bottom",
    "middle center right": "bottom",
    "middle center top": "bottom"
  };
  var positionToPlacement = (position2) => {
    var _POSITION_TO_PLACEMEN;
    return (_POSITION_TO_PLACEMEN = POSITION_TO_PLACEMENT[position2]) !== null && _POSITION_TO_PLACEMEN !== void 0 ? _POSITION_TO_PLACEMEN : "bottom";
  };
  var PLACEMENT_TO_ANIMATION_ORIGIN = {
    top: {
      originX: 0.5,
      originY: 1
    },
    // open from bottom, center
    "top-start": {
      originX: 0,
      originY: 1
    },
    // open from bottom, left
    "top-end": {
      originX: 1,
      originY: 1
    },
    // open from bottom, right
    right: {
      originX: 0,
      originY: 0.5
    },
    // open from middle, left
    "right-start": {
      originX: 0,
      originY: 0
    },
    // open from top, left
    "right-end": {
      originX: 0,
      originY: 1
    },
    // open from bottom, left
    bottom: {
      originX: 0.5,
      originY: 0
    },
    // open from top, center
    "bottom-start": {
      originX: 0,
      originY: 0
    },
    // open from top, left
    "bottom-end": {
      originX: 1,
      originY: 0
    },
    // open from top, right
    left: {
      originX: 1,
      originY: 0.5
    },
    // open from middle, right
    "left-start": {
      originX: 1,
      originY: 0
    },
    // open from top, right
    "left-end": {
      originX: 1,
      originY: 1
    },
    // open from bottom, right
    overlay: {
      originX: 0.5,
      originY: 0.5
    }
    // open from center, center
  };
  var placementToMotionAnimationProps = (placement) => {
    const translateProp = placement.startsWith("top") || placement.startsWith("bottom") ? "translateY" : "translateX";
    const translateDirection = placement.startsWith("top") || placement.startsWith("left") ? 1 : -1;
    return {
      style: PLACEMENT_TO_ANIMATION_ORIGIN[placement],
      initial: {
        opacity: 0,
        scale: 0,
        [translateProp]: `${2 * translateDirection}em`
      },
      animate: {
        opacity: 1,
        scale: 1,
        [translateProp]: 0
      },
      transition: {
        duration: 0.1,
        ease: [0, 0, 0.2, 1]
      }
    };
  };
  function isTopBottom(anchorRef) {
    return !!anchorRef?.top;
  }
  function isRef(anchorRef) {
    return !!anchorRef?.current;
  }
  var getReferenceElement = ({
    anchor,
    anchorRef,
    anchorRect,
    getAnchorRect,
    fallbackReferenceElement
  }) => {
    var _referenceElement;
    let referenceElement = null;
    if (anchor) {
      referenceElement = anchor;
    } else if (isTopBottom(anchorRef)) {
      referenceElement = {
        getBoundingClientRect() {
          const topRect = anchorRef.top.getBoundingClientRect();
          const bottomRect = anchorRef.bottom.getBoundingClientRect();
          return new window.DOMRect(topRect.x, topRect.y, topRect.width, bottomRect.bottom - topRect.top);
        }
      };
    } else if (isRef(anchorRef)) {
      referenceElement = anchorRef.current;
    } else if (anchorRef) {
      referenceElement = anchorRef;
    } else if (anchorRect) {
      referenceElement = {
        getBoundingClientRect() {
          return anchorRect;
        }
      };
    } else if (getAnchorRect) {
      referenceElement = {
        getBoundingClientRect() {
          var _rect$x, _rect$y, _rect$width, _rect$height;
          const rect = getAnchorRect(fallbackReferenceElement);
          return new window.DOMRect((_rect$x = rect.x) !== null && _rect$x !== void 0 ? _rect$x : rect.left, (_rect$y = rect.y) !== null && _rect$y !== void 0 ? _rect$y : rect.top, (_rect$width = rect.width) !== null && _rect$width !== void 0 ? _rect$width : rect.right - rect.left, (_rect$height = rect.height) !== null && _rect$height !== void 0 ? _rect$height : rect.bottom - rect.top);
        }
      };
    } else if (fallbackReferenceElement) {
      referenceElement = fallbackReferenceElement.parentElement;
    }
    return (_referenceElement = referenceElement) !== null && _referenceElement !== void 0 ? _referenceElement : null;
  };
  var computePopoverPosition = (c6) => c6 === null || Number.isNaN(c6) ? void 0 : Math.round(c6);

  // node_modules/@wordpress/components/build-module/tooltip/index.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var TooltipInternalContext = (0, import_react.createContext)({
    isNestedInTooltip: false
  });
  var TOOLTIP_DELAY = 700;
  var CONTEXT_VALUE = {
    isNestedInTooltip: true
  };
  function UnforwardedTooltip(props, ref) {
    const {
      children,
      delay: delay2 = TOOLTIP_DELAY,
      hideOnClick = true,
      placement,
      position: position2,
      shortcut,
      text: text2,
      ...restProps
    } = props;
    const {
      isNestedInTooltip
    } = (0, import_react.useContext)(TooltipInternalContext);
    const baseId = use_instance_id_default(Tooltip2, "tooltip");
    const describedById = text2 || shortcut ? baseId : void 0;
    const isOnlyChild = import_react.Children.count(children) === 1;
    if (!isOnlyChild) {
      if (true) {
        console.error("wp-components.Tooltip should be called with only a single child element.");
      }
    }
    let computedPlacement;
    if (placement !== void 0) {
      computedPlacement = placement;
    } else if (position2 !== void 0) {
      computedPlacement = positionToPlacement(position2);
      deprecated("`position` prop in wp.components.tooltip", {
        since: "6.4",
        alternative: "`placement` prop"
      });
    }
    computedPlacement = computedPlacement || "bottom";
    const tooltipStore = useTooltipStore({
      placement: computedPlacement,
      showTimeout: delay2
    });
    if (isNestedInTooltip) {
      return isOnlyChild ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(Role, {
        ...restProps,
        render: children
      }) : children;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(TooltipInternalContext.Provider, {
      value: CONTEXT_VALUE,
      children: [/* @__PURE__ */ (0, import_jsx_runtime28.jsx)(TooltipAnchor, {
        onClick: hideOnClick ? tooltipStore.hide : void 0,
        store: tooltipStore,
        render: isOnlyChild ? children : void 0,
        ref,
        children: isOnlyChild ? void 0 : children
      }), isOnlyChild && (text2 || shortcut) && /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(Tooltip, {
        ...restProps,
        className: "components-tooltip",
        unmountOnHide: true,
        gutter: 4,
        id: describedById,
        overflowPadding: 0.5,
        store: tooltipStore,
        children: [text2, shortcut && /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(shortcut_default, {
          className: text2 ? "components-tooltip__shortcut" : "",
          shortcut
        })]
      })]
    });
  }
  var Tooltip2 = (0, import_react.forwardRef)(UnforwardedTooltip);
  var tooltip_default = Tooltip2;

  // node_modules/@wordpress/components/build-module/context/context-system-provider.js
  var import_deepmerge = __toESM(require_cjs());
  var import_es62 = __toESM(require_es6());

  // node_modules/@wordpress/warning/build-module/utils.js
  var logged2 = /* @__PURE__ */ new Set();

  // node_modules/@wordpress/warning/build-module/index.js
  function isDev() {
    return globalThis.SCRIPT_DEBUG === true;
  }
  function warning(message) {
    if (!isDev()) {
      return;
    }
    if (logged2.has(message)) {
      return;
    }
    console.warn(message);
    try {
      throw Error(message);
    } catch (x2) {
    }
    logged2.add(message);
  }

  // node_modules/@wordpress/components/build-module/utils/values.js
  function isValueDefined(value) {
    return value !== void 0 && value !== null;
  }

  // node_modules/@wordpress/components/build-module/utils/hooks/use-update-effect.js
  function useUpdateEffect2(effect, deps) {
    const mounted = (0, import_react.useRef)(false);
    (0, import_react.useEffect)(() => {
      if (mounted.current) {
        return effect();
      }
      mounted.current = true;
      return void 0;
    }, deps);
  }
  var use_update_effect_default = useUpdateEffect2;

  // node_modules/@wordpress/components/build-module/utils/hooks/use-controlled-value.js
  function useControlledValue({
    defaultValue: defaultValue2,
    onChange,
    value: valueProp
  }) {
    const hasValue = typeof valueProp !== "undefined";
    const initialValue2 = hasValue ? valueProp : defaultValue2;
    const [state, setState] = (0, import_react.useState)(initialValue2);
    const value = hasValue ? valueProp : state;
    let setValue;
    if (hasValue && typeof onChange === "function") {
      setValue = onChange;
    } else if (!hasValue && typeof onChange === "function") {
      setValue = (nextValue) => {
        onChange(nextValue);
        setState(nextValue);
      };
    } else {
      setValue = setState;
    }
    return [value, setValue];
  }

  // node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var React6 = __toESM(require_react());
  var import_react55 = __toESM(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.esm.js
  var isDevelopment = false;
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i3 = 0; i3 < document.styleSheets.length; i3++) {
      if (document.styleSheets[i3].ownerNode === tag) {
        return document.styleSheets[i3];
      }
    }
    return void 0;
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag) {
        var before;
        if (_this.tags.length === 0) {
          if (_this.insertionPoint) {
            before = _this.insertionPoint.nextSibling;
          } else if (_this.prepend) {
            before = _this.container.firstChild;
          } else {
            before = _this.before;
          }
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag, before);
        _this.tags.push(tag);
      };
      this.isSpeedy = options.speedy === void 0 ? !isDevelopment : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.insertionPoint = options.insertionPoint;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate3(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert2(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag = this.tags[this.tags.length - 1];
      if (this.isSpeedy) {
        var sheet2 = sheetForTag(tag);
        try {
          sheet2.insertRule(rule, sheet2.cssRules.length);
        } catch (e3) {
        }
      } else {
        tag.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush3() {
      this.tags.forEach(function(tag) {
        var _tag$parentNode;
        return (_tag$parentNode = tag.parentNode) == null ? void 0 : _tag$parentNode.removeChild(tag);
      });
      this.tags = [];
      this.ctr = 0;
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/src/Enum.js
  var MS = "-ms-";
  var MOZ = "-moz-";
  var WEBKIT = "-webkit-";
  var COMMENT = "comm";
  var RULESET = "rule";
  var DECLARATION = "decl";
  var IMPORT = "@import";
  var KEYFRAMES = "@keyframes";
  var LAYER = "@layer";

  // node_modules/stylis/src/Utility.js
  var abs = Math.abs;
  var from = String.fromCharCode;
  var assign = Object.assign;
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace4(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index2) {
    return value.charCodeAt(index2) | 0;
  }
  function substr(value, begin, end) {
    return value.slice(begin, end);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append3(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }

  // node_modules/stylis/src/Tokenizer.js
  var line = 1;
  var column = 1;
  var length = 0;
  var position = 0;
  var character = 0;
  var characters = "";
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next2() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice2(begin, end) {
    return substr(characters, begin, end);
  }
  function token(type) {
    switch (type) {
      // \0 \t \n \r \s whitespace token
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      // ! + , / > @ ~ isolate token
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      // ; { } breakpoint token
      case 59:
      case 123:
      case 125:
        return 4;
      // : accompanied token
      case 58:
        return 3;
      // " ' ( [ opening delimit token
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      // ) ] closing delimit token
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice2(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next2();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index2, count) {
    while (--count && next2())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice2(index2, caret() + (count < 6 && peek() == 32 && next2() == 32));
  }
  function delimiter(type) {
    while (next2())
      switch (character) {
        // ] ) " '
        case type:
          return position;
        // " '
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        // (
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        // \
        case 92:
          next2();
          break;
      }
    return position;
  }
  function commenter(type, index2) {
    while (next2())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice2(index2, position - 1) + "*" + from(type === 47 ? type : next2());
  }
  function identifier(index2) {
    while (!token(peek()))
      next2();
    return slice2(index2, position);
  }

  // node_modules/stylis/src/Parser.js
  function compile2(value) {
    return dealloc(parse4("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse4(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index2 = 0;
    var offset5 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next2()) {
        // (
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace4(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        // " ' [
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        // \t \n \r \s
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        // \
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        // /
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append3(comment(commenter(next2(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        // {
        case 123 * variable:
          points[index2++] = strlen(characters2) * ampersand;
        // } ; \0
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            // \0 }
            case 0:
            case 125:
              scanning = 0;
            // ;
            case 59 + offset5:
              if (ampersand == -1) characters2 = replace4(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append3(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace4(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            // @ ;
            case 59:
              characters2 += ";";
            // { rule/at-rule
            default:
              append3(reference = ruleset(characters2, root, parent, index2, offset5, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset5 === 0)
                  parse4(characters2, root, reference, reference, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    // d l m s
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse4(value, reference, reference, rule && append3(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse4(characters2, reference, reference, reference, [""], children, 0, points, children);
                  }
          }
          index2 = offset5 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        // :
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            // &
            case 38:
              ampersand = offset5 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            // ,
            case 44:
              points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            // @
            case 64:
              if (peek() === 45)
                characters2 += delimit(next2());
              atrule = peek(), offset5 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            // -
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index2, offset5, rules, points, type, props, children, length2) {
    var post2 = offset5 - 1;
    var rule = offset5 === 0 ? rules : [""];
    var size4 = sizeof(rule);
    for (var i3 = 0, j2 = 0, k2 = 0; i3 < index2; ++i3)
      for (var x2 = 0, y2 = substr(value, post2 + 1, post2 = abs(j2 = points[i3])), z = value; x2 < size4; ++x2)
        if (z = trim(j2 > 0 ? rule[x2] + " " + y2 : replace4(y2, /&\f/g, rule[x2])))
          props[k2++] = z;
    return node(value, root, parent, offset5 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }

  // node_modules/stylis/src/Serializer.js
  function serialize2(children, callback) {
    var output2 = "";
    var length2 = sizeof(children);
    for (var i3 = 0; i3 < length2; i3++)
      output2 += callback(children[i3], i3, children, callback) || "";
    return output2;
  }
  function stringify(element, index2, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length) break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize2(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize2(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index2, children, callback) {
      var output2 = "";
      for (var i3 = 0; i3 < length2; i3++)
        output2 += collection[i3](element, index2, children, callback) || "";
      return output2;
    };
  }
  function rulesheet(callback) {
    return function(element) {
      if (!element.root) {
        if (element = element.return)
          callback(element);
      }
    };
  }

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  init_emotion_memoize_esm();
  var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index2) {
    var previous = 0;
    var character2 = 0;
    while (true) {
      previous = character2;
      character2 = peek();
      if (previous === 38 && character2 === 12) {
        points[index2] = 1;
      }
      if (token(character2)) {
        break;
      }
      next2();
    }
    return slice2(begin, position);
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character2 = 44;
    do {
      switch (token(character2)) {
        case 0:
          if (character2 === 38 && peek() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += identifierWithPointTracking(position - 1, points, index2);
          break;
        case 2:
          parsed[index2] += delimit(character2);
          break;
        case 4:
          if (character2 === 44) {
            parsed[++index2] = peek() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        // fallthrough
        default:
          parsed[index2] += from(character2);
      }
    } while (character2 = next2());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return dealloc(toRules(alloc(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
    // negative .length indicates that this rule has been already prefixed
    element.length < 1) {
      return;
    }
    var value = element.value;
    var parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
      if (!parent) return;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i3 = 0, k2 = 0; i3 < rules.length; i3++) {
      for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
        element.props[k2] = points[i3] ? rules[i3].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i3];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (
        // charcode for l
        value.charCodeAt(0) === 108 && // charcode for b
        value.charCodeAt(2) === 98
      ) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  function prefix(value, length2) {
    switch (hash(value, length2)) {
      // color-adjust
      case 5103:
        return WEBKIT + "print-" + value + value;
      // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      // appearance, user-select, transform, hyphens, text-size-adjust
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      // flex, flex-direction
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      // order
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      // align-items
      case 5187:
        return WEBKIT + value + replace4(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      // align-self
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace4(value, /flex-|-self/, "") + value;
      // align-content
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace4(value, /align-content|flex-|-self/, "") + value;
      // flex-shrink
      case 5548:
        return WEBKIT + value + MS + replace4(value, "shrink", "negative") + value;
      // flex-basis
      case 5292:
        return WEBKIT + value + MS + replace4(value, "basis", "preferred-size") + value;
      // flex-grow
      case 6060:
        return WEBKIT + "box-" + replace4(value, "-grow", "") + WEBKIT + value + MS + replace4(value, "grow", "positive") + value;
      // transition
      case 4554:
        return WEBKIT + replace4(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      // cursor
      case 6187:
        return replace4(replace4(replace4(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      // background, background-image
      case 5495:
      case 3959:
        return replace4(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      // justify-content
      case 4968:
        return replace4(replace4(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      // (margin|padding)-inline-(start|end)
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace4(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      // (min|max)?(width|height|inline-size|block-size)
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6) switch (charat(value, length2 + 1)) {
          // (m)ax-content, (m)in-content
          case 109:
            if (charat(value, length2 + 4) !== 45) break;
          // (f)ill-available, (f)it-content
          case 102:
            return replace4(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          // (s)tretch
          case 115:
            return ~indexof(value, "stretch") ? prefix(replace4(value, "stretch", "fill-available"), length2) + value : value;
        }
        break;
      // position: sticky
      case 4949:
        if (charat(value, length2 + 1) !== 115) break;
      // display: (flex|inline-flex)
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          // stic(k)y
          case 107:
            return replace4(value, ":", ":" + WEBKIT) + value;
          // (inline-)?fl(e)x
          case 101:
            return replace4(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      // writing-mode
      case 5936:
        switch (charat(value, length2 + 11)) {
          // vertical-l(r)
          case 114:
            return WEBKIT + value + MS + replace4(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          // vertical-r(l)
          case 108:
            return WEBKIT + value + MS + replace4(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          // horizontal(-)tb
          case 45:
            return WEBKIT + value + MS + replace4(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var prefixer = function prefixer2(element, index2, children, callback) {
    if (element.length > -1) {
      if (!element["return"]) switch (element.type) {
        case DECLARATION:
          element["return"] = prefix(element.value, element.length);
          break;
        case KEYFRAMES:
          return serialize2([copy(element, {
            value: replace4(element.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element.length) return combine(element.props, function(value) {
            switch (match(value, /(::plac\w+|:read-\w+)/)) {
              // :read-(only|write)
              case ":read-only":
              case ":read-write":
                return serialize2([copy(element, {
                  props: [replace4(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                })], callback);
              // :placeholder
              case "::placeholder":
                return serialize2([copy(element, {
                  props: [replace4(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                }), copy(element, {
                  props: [replace4(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                }), copy(element, {
                  props: [replace4(value, /:(plac\w+)/, MS + "input-$1")]
                })], callback);
            }
            return "";
          });
      }
    }
  };
  var defaultStylisPlugins = [prefixer];
  var createCache2 = function createCache3(options) {
    var key = options.key;
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node2) {
        var dataEmotionAttribute = node2.getAttribute("data-emotion");
        if (dataEmotionAttribute.indexOf(" ") === -1) {
          return;
        }
        document.head.appendChild(node2);
        node2.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    var inserted = {};
    var container;
    var nodesToHydrate = [];
    {
      container = options.container || document.head;
      Array.prototype.forEach.call(
        // this means we will ignore elements which don't have a space in them which
        // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
        document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
        function(node2) {
          var attrib = node2.getAttribute("data-emotion").split(" ");
          for (var i3 = 1; i3 < attrib.length; i3++) {
            inserted[attrib[i3]] = true;
          }
          nodesToHydrate.push(node2);
        }
      );
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    {
      var currentSheet;
      var finalizingPlugins = [stringify, rulesheet(function(rule) {
        currentSheet.insert(rule);
      })];
      var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis = function stylis2(styles) {
        return serialize2(compile2(styles), serializer);
      };
      _insert = function insert2(selector2, serialized, sheet2, shouldCache) {
        currentSheet = sheet2;
        stylis(selector2 ? selector2 + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache3.inserted[serialized.name] = true;
        }
      };
    }
    var cache3 = {
      key,
      sheet: new StyleSheet({
        key,
        container,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend,
        insertionPoint: options.insertionPoint
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache3.sheet.hydrate(nodesToHydrate);
    return cache3;
  };

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n3) {
      for (var e3 = 1; e3 < arguments.length; e3++) {
        var t4 = arguments[e3];
        for (var r4 in t4) ({}).hasOwnProperty.call(t4, r4) && (n3[r4] = t4[r4]);
      }
      return n3;
    }, _extends.apply(null, arguments);
  }

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else if (className) {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var registerStyles = function registerStyles2(cache3, serialized, isStringTag) {
    var className = cache3.key + "-" + serialized.name;
    if (
      // we only need to add the styles to the registered cache if the
      // class name could be used further down
      // the tree but if it's a string tag, we know it won't
      // so we don't have to add it to registered cache.
      // this improves memory usage since we can avoid storing the whole style string
      (isStringTag === false || // we need to always store it if we're in compat mode and
      // in node since emotion-server relies on whether a style is in
      // the registered cache to know whether a style is global or not
      // also, note that this check will be dead code eliminated in the browser
      isBrowser === false) && cache3.registered[className] === void 0
    ) {
      cache3.registered[className] = serialized.styles;
    }
  };
  var insertStyles = function insertStyles2(cache3, serialized, isStringTag) {
    registerStyles(cache3, serialized, isStringTag);
    var className = cache3.key + "-" + serialized.name;
    if (cache3.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h2 = 0;
    var k2, i3 = 0, len = str.length;
    for (; len >= 4; ++i3, len -= 4) {
      k2 = str.charCodeAt(i3) & 255 | (str.charCodeAt(++i3) & 255) << 8 | (str.charCodeAt(++i3) & 255) << 16 | (str.charCodeAt(++i3) & 255) << 24;
      k2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= /* k >>> r: */
      k2 >>> 24;
      h2 = /* Math.imul(k, m): */
      (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h2 ^= (str.charCodeAt(i3 + 2) & 255) << 16;
      case 2:
        h2 ^= (str.charCodeAt(i3 + 1) & 255) << 8;
      case 1:
        h2 ^= str.charCodeAt(i3) & 255;
        h2 = /* Math.imul(h, m): */
        (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    }
    h2 ^= h2 >>> 13;
    h2 = /* Math.imul(h, m): */
    (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
    return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
  }

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    aspectRatio: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    scale: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    // SVG-related properties
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };

  // node_modules/@emotion/serialize/dist/emotion-serialize.esm.js
  init_emotion_memoize_esm();
  var isDevelopment2 = false;
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ memoize(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match2, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    var componentSelector = interpolation;
    if (componentSelector.__emotion_styles !== void 0) {
      return componentSelector;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        var keyframes4 = interpolation;
        if (keyframes4.anim === 1) {
          cursor = {
            name: keyframes4.name,
            styles: keyframes4.styles,
            next: cursor
          };
          return keyframes4.name;
        }
        var serializedStyles = interpolation;
        if (serializedStyles.styles !== void 0) {
          var next3 = serializedStyles.next;
          if (next3 !== void 0) {
            while (next3 !== void 0) {
              cursor = {
                name: next3.name,
                styles: next3.styles,
                next: cursor
              };
              next3 = next3.next;
            }
          }
          var styles = serializedStyles.styles + ";";
          return styles;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        }
        break;
      }
    }
    var asString = interpolation;
    if (registered == null) {
      return asString;
    }
    var cached = registered[asString];
    return cached !== void 0 ? cached : asString;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string2 = "";
    if (Array.isArray(obj)) {
      for (var i3 = 0; i3 < obj.length; i3++) {
        string2 += handleInterpolation(mergedProps, registered, obj[i3]) + ";";
      }
    } else {
      for (var key in obj) {
        var value = obj[key];
        if (typeof value !== "object") {
          var asString = value;
          if (registered != null && registered[asString] !== void 0) {
            string2 += key + "{" + registered[asString] + "}";
          } else if (isProcessableValue(asString)) {
            string2 += processStyleName(key) + ":" + processStyleValue(key, asString) + ";";
          }
        } else {
          if (key === "NO_COMPONENT_SELECTOR" && isDevelopment2) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string2 += processStyleName(key) + ":" + processStyleValue(key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (key) {
              case "animation":
              case "animationName": {
                string2 += processStyleName(key) + ":" + interpolated + ";";
                break;
              }
              default: {
                string2 += key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string2;
  }
  var labelPattern = /label:\s*([^\s;{]+)\s*(;|$)/g;
  var cursor;
  function serializeStyles(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles += handleInterpolation(mergedProps, registered, strings);
    } else {
      var asTemplateStringsArr = strings;
      styles += asTemplateStringsArr[0];
    }
    for (var i3 = 1; i3 < args.length; i3++) {
      styles += handleInterpolation(mergedProps, registered, args[i3]);
      if (stringMode) {
        var templateStringsArr = strings;
        styles += templateStringsArr[i3];
      }
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match2;
    while ((match2 = labelPattern.exec(styles)) !== null) {
      identifierName += "-" + match2[1];
    }
    var name = murmur2(styles) + identifierName;
    return {
      name,
      styles,
      next: cursor
    };
  }

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React5 = __toESM(require_react());
  var syncFallback = function syncFallback2(create3) {
    return create3();
  };
  var useInsertionEffect3 = React5["useInsertionEffect"] ? React5["useInsertionEffect"] : false;
  var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect3 || syncFallback;

  // node_modules/@emotion/react/dist/emotion-element-f0de968e.browser.esm.js
  var isDevelopment3 = false;
  var EmotionCacheContext = /* @__PURE__ */ React6.createContext(
    // we're doing this to avoid preconstruct's dead code elimination in this one case
    // because this module is primarily intended for the browser and node
    // but it's also required in react native and similar environments sometimes
    // and we could have a special build just for that
    // but this is much easier and the native packages
    // might use a different theme context in the future anyway
    typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache2({
      key: "css"
    }) : null
  );
  var CacheProvider = EmotionCacheContext.Provider;
  var __unsafe_useEmotionCache = function useEmotionCache() {
    return (0, import_react55.useContext)(EmotionCacheContext);
  };
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ (0, import_react55.forwardRef)(function(props, ref) {
      var cache3 = (0, import_react55.useContext)(EmotionCacheContext);
      return func(props, cache3, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ React6.createContext({});
  var hasOwn = {}.hasOwnProperty;
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var createEmotionProps = function createEmotionProps2(type, props) {
    var newProps = {};
    for (var _key in props) {
      if (hasOwn.call(props, _key)) {
        newProps[_key] = props[_key];
      }
    }
    newProps[typePropName] = type;
    return newProps;
  };
  var Insertion = function Insertion2(_ref4) {
    var cache3 = _ref4.cache, serialized = _ref4.serialized, isStringTag = _ref4.isStringTag;
    registerStyles(cache3, serialized, isStringTag);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache3, serialized, isStringTag);
    });
    return null;
  };
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache3, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache3.registered[cssProp] !== void 0) {
      cssProp = cache3.registered[cssProp];
    }
    var WrappedComponent = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache3.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, React6.useContext(ThemeContext));
    className += cache3.key + "-" + serialized.name;
    var newProps = {};
    for (var _key2 in props) {
      if (hasOwn.call(props, _key2) && _key2 !== "css" && _key2 !== typePropName && !isDevelopment3) {
        newProps[_key2] = props[_key2];
      }
    }
    newProps.className = className;
    if (ref) {
      newProps.ref = ref;
    }
    return /* @__PURE__ */ React6.createElement(React6.Fragment, null, /* @__PURE__ */ React6.createElement(Insertion, {
      cache: cache3,
      serialized,
      isStringTag: typeof WrappedComponent === "string"
    }), /* @__PURE__ */ React6.createElement(WrappedComponent, newProps));
  });
  var Emotion$1 = Emotion;

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var React7 = __toESM(require_react());
  var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
  var jsx25 = function jsx26(type, props) {
    var args = arguments;
    if (props == null || !hasOwn.call(props, "css")) {
      return React7.createElement.apply(void 0, args);
    }
    var argsLength = args.length;
    var createElementArgArray = new Array(argsLength);
    createElementArgArray[0] = Emotion$1;
    createElementArgArray[1] = createEmotionProps(type, props);
    for (var i3 = 2; i3 < argsLength; i3++) {
      createElementArgArray[i3] = args[i3];
    }
    return React7.createElement.apply(null, createElementArgArray);
  };
  (function(_jsx83) {
    var JSX;
    /* @__PURE__ */ (function(_JSX) {
    })(JSX || (JSX = _jsx83.JSX || (_jsx83.JSX = {})));
  })(jsx25 || (jsx25 = {}));
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function keyframes() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  }

  // node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js
  function insertWithoutScoping(cache3, serialized) {
    if (cache3.inserted[serialized.name] === void 0) {
      return cache3.insert("", serialized, cache3.sheet, true);
    }
  }
  function merge(registered, css4, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css4(registeredStyles);
  }
  var createEmotion = function createEmotion2(options) {
    var cache3 = createCache2(options);
    cache3.sheet.speedy = function(value) {
      this.isSpeedy = value;
    };
    cache3.compat = true;
    var css4 = function css5() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache3.registered, void 0);
      insertStyles(cache3, serialized, false);
      return cache3.key + "-" + serialized.name;
    };
    var keyframes4 = function keyframes5() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      var serialized = serializeStyles(args, cache3.registered);
      var animation = "animation-" + serialized.name;
      insertWithoutScoping(cache3, {
        name: serialized.name,
        styles: "@keyframes " + animation + "{" + serialized.styles + "}"
      });
      return animation;
    };
    var injectGlobal2 = function injectGlobal3() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      var serialized = serializeStyles(args, cache3.registered);
      insertWithoutScoping(cache3, serialized);
    };
    var cx3 = function cx4() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return merge(cache3.registered, css4, classnames(args));
    };
    return {
      css: css4,
      cx: cx3,
      injectGlobal: injectGlobal2,
      keyframes: keyframes4,
      hydrate: function hydrate3(ids) {
        ids.forEach(function(key) {
          cache3.inserted[key] = true;
        });
      },
      flush: function flush3() {
        cache3.registered = {};
        cache3.inserted = {};
        cache3.sheet.flush();
      },
      sheet: cache3.sheet,
      cache: cache3,
      getRegisteredStyles: getRegisteredStyles.bind(null, cache3.registered),
      merge: merge.bind(null, cache3.registered, css4)
    };
  };
  var classnames = function classnames2(args) {
    var cls = "";
    for (var i3 = 0; i3 < args.length; i3++) {
      var arg = args[i3];
      if (arg == null) continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            toAdd = "";
            for (var k2 in arg) {
              if (arg[k2] && k2) {
                toAdd && (toAdd += " ");
                toAdd += k2;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };

  // node_modules/@emotion/css/dist/emotion-css.esm.js
  var _createEmotion = createEmotion({
    key: "css"
  });
  var flush = _createEmotion.flush;
  var hydrate2 = _createEmotion.hydrate;
  var cx2 = _createEmotion.cx;
  var merge2 = _createEmotion.merge;
  var getRegisteredStyles2 = _createEmotion.getRegisteredStyles;
  var injectGlobal = _createEmotion.injectGlobal;
  var keyframes2 = _createEmotion.keyframes;
  var css2 = _createEmotion.css;
  var sheet = _createEmotion.sheet;
  var cache2 = _createEmotion.cache;

  // node_modules/@wordpress/components/build-module/utils/hooks/use-cx.js
  var isSerializedStyles = (o3) => typeof o3 !== "undefined" && o3 !== null && ["name", "styles"].every((p2) => typeof o3[p2] !== "undefined");
  var useCx = () => {
    const cache3 = __unsafe_useEmotionCache();
    const cx3 = (0, import_react.useCallback)((...classNames) => {
      if (cache3 === null) {
        throw new Error("The `useCx` hook should be only used within a valid Emotion Cache Context");
      }
      return cx2(...classNames.map((arg) => {
        if (isSerializedStyles(arg)) {
          insertStyles(cache3, arg, false);
          return `${cache3.key}-${arg.name}`;
        }
        return arg;
      }));
    }, [cache3]);
    return cx3;
  };

  // node_modules/@wordpress/components/build-module/utils/box-sizing.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var boxSizingReset = false ? {
    name: "kv6lnz",
    styles: "box-sizing:border-box;*,*::before,*::after{box-sizing:inherit;}"
  } : {
    name: "1pa5nhz-boxSizingReset",
    styles: "box-sizing:border-box;*,*::before,*::after{box-sizing:inherit;};label:boxSizingReset;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvYm94LXNpemluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLaUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ib3gtc2l6aW5nLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG5leHBvcnQgY29uc3QgYm94U2l6aW5nUmVzZXQgPSBjc3NgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cblx0Kixcblx0Kjo6YmVmb3JlLFxuXHQqOjphZnRlciB7XG5cdFx0Ym94LXNpemluZzogaW5oZXJpdDtcblx0fVxuYDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__
  };

  // node_modules/@wordpress/components/build-module/utils/colors.js
  var colorComputationNode;
  k([names_default]);
  function getColorComputationNode() {
    if (typeof document === "undefined") {
      return;
    }
    if (!colorComputationNode) {
      const el = document.createElement("div");
      el.setAttribute("data-g2-color-computation-node", "");
      document.body.appendChild(el);
      colorComputationNode = el;
    }
    return colorComputationNode;
  }
  function isColor(value) {
    if (typeof value !== "string") {
      return false;
    }
    const test2 = w(value);
    return test2.isValid();
  }
  function _getComputedBackgroundColor(backgroundColor) {
    if (typeof backgroundColor !== "string") {
      return "";
    }
    if (isColor(backgroundColor)) {
      return backgroundColor;
    }
    if (!backgroundColor.includes("var(")) {
      return "";
    }
    if (typeof document === "undefined") {
      return "";
    }
    const el = getColorComputationNode();
    if (!el) {
      return "";
    }
    el.style.background = backgroundColor;
    const computedColor = window?.getComputedStyle(el).background;
    el.style.background = "";
    return computedColor || "";
  }
  var getComputedBackgroundColor = memize(_getComputedBackgroundColor);
  function getOptimalTextColor(backgroundColor) {
    const background = getComputedBackgroundColor(backgroundColor);
    return w(background).isLight() ? "#000000" : "#ffffff";
  }
  function getOptimalTextShade(backgroundColor) {
    const result = getOptimalTextColor(backgroundColor);
    return result === "#000000" ? "dark" : "light";
  }

  // node_modules/@wordpress/components/build-module/utils/rtl.js
  var LOWER_LEFT_REGEXP = new RegExp(/-left/g);
  var LOWER_RIGHT_REGEXP = new RegExp(/-right/g);
  var UPPER_LEFT_REGEXP = new RegExp(/Left/g);
  var UPPER_RIGHT_REGEXP = new RegExp(/Right/g);
  function getConvertedKey(key) {
    if (key === "left") {
      return "right";
    }
    if (key === "right") {
      return "left";
    }
    if (LOWER_LEFT_REGEXP.test(key)) {
      return key.replace(LOWER_LEFT_REGEXP, "-right");
    }
    if (LOWER_RIGHT_REGEXP.test(key)) {
      return key.replace(LOWER_RIGHT_REGEXP, "-left");
    }
    if (UPPER_LEFT_REGEXP.test(key)) {
      return key.replace(UPPER_LEFT_REGEXP, "Right");
    }
    if (UPPER_RIGHT_REGEXP.test(key)) {
      return key.replace(UPPER_RIGHT_REGEXP, "Left");
    }
    return key;
  }
  var convertLTRToRTL = (ltrStyles = {}) => {
    return Object.fromEntries(Object.entries(ltrStyles).map(([key, value]) => [getConvertedKey(key), value]));
  };
  function rtl(ltrStyles = {}, rtlStyles) {
    return () => {
      if (rtlStyles) {
        return isRTL2() ? /* @__PURE__ */ css(rtlStyles, false ? "" : ";label:rtl;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFb0IiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBpc1JUTCB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5cbmNvbnN0IExPV0VSX0xFRlRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1sZWZ0L2cgKTtcbmNvbnN0IExPV0VSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC8tcmlnaHQvZyApO1xuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XG5jb25zdCBVUFBFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvUmlnaHQvZyApO1xuXG4vKipcbiAqIEZsaXBzIGEgQ1NTIHByb3BlcnR5IGZyb20gbGVmdCA8LT4gcmlnaHQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZmxpcHBlZCBDU1MgcHJvcGVydHkgbmFtZSwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udmVydGVkS2V5KCBrZXkgKSB7XG5cdGlmICgga2V5ID09PSAnbGVmdCcgKSB7XG5cdFx0cmV0dXJuICdyaWdodCc7XG5cdH1cblxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX0xFRlRfUkVHRVhQLCAnLXJpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcblx0fVxuXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9MRUZUX1JFR0VYUCwgJ1JpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9SSUdIVF9SRUdFWFAsICdMZWZ0JyApO1xuXHR9XG5cblx0cmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gbHRyU3R5bGVzXG4gKlxuICogQHJldHVybiB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IENvbnZlcnRlZCBsdHIgLT4gcnRsIHN0eWxlc1xuICovXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcblx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcblx0XHRPYmplY3QuZW50cmllcyggbHRyU3R5bGVzICkubWFwKCAoIFsga2V5LCB2YWx1ZSBdICkgPT4gW1xuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcblx0XHRcdHZhbHVlLFxuXHRcdF0gKVxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZSBhbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgc3R5bGUgY29udmVydGVyIGZvciBDU1Mgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gW3J0bFN0eWxlc10gUnRsIHN0eWxlcy4gUmVuZGVycyBpZiBwcm92aWRlZC5cbiAqXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydGwoIGx0clN0eWxlcyA9IHt9LCBydGxTdHlsZXMgKSB7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCBydGxTdHlsZXMgKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlOiBgY3NzYCB0eXBlcyBhcmUgd3JvbmcsIGl0IGNhbiBhY2NlcHQgYW4gb2JqZWN0OiBodHRwczovL2Vtb3Rpb24uc2gvZG9jcy9vYmplY3Qtc3R5bGVzI3dpdGgtY3NzXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggY29udmVydExUUlRvUlRMKCBsdHJTdHlsZXMgKSApIDogY3NzKCBsdHJTdHlsZXMgKTtcblx0fTtcbn1cblxuLyoqXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXG4gKiBjYXVzZSBydGwgc3R5bGVzIHRvIHVwZGF0ZSBiYXNlZCBvbiB0aGUgYGlzUlRMYCByZXR1cm4gdmFsdWUgZXZlbiBpZiBhbGwgb3RoZXIgZGVwZW5kZW5jaWVzXG4gKiByZW1haW4gdGhlIHNhbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0eWxlcyA9IHVzZU1lbW8oICgpID0+IHtcbiAqICAgcmV0dXJuIGNzc2BcbiAqICAgICAkeyBydGwoIHsgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9ICkgfVxuICogICBgO1xuICogfSwgWyBydGwud2F0Y2goKSBdICk7XG4gKi9cbnJ0bC53YXRjaCA9ICgpID0+IGlzUlRMKCk7XG4iXX0= */") : /* @__PURE__ */ css(ltrStyles, false ? "" : ";label:rtl;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQThFdUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBpc1JUTCB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5cbmNvbnN0IExPV0VSX0xFRlRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1sZWZ0L2cgKTtcbmNvbnN0IExPV0VSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC8tcmlnaHQvZyApO1xuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XG5jb25zdCBVUFBFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvUmlnaHQvZyApO1xuXG4vKipcbiAqIEZsaXBzIGEgQ1NTIHByb3BlcnR5IGZyb20gbGVmdCA8LT4gcmlnaHQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZmxpcHBlZCBDU1MgcHJvcGVydHkgbmFtZSwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udmVydGVkS2V5KCBrZXkgKSB7XG5cdGlmICgga2V5ID09PSAnbGVmdCcgKSB7XG5cdFx0cmV0dXJuICdyaWdodCc7XG5cdH1cblxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX0xFRlRfUkVHRVhQLCAnLXJpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcblx0fVxuXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9MRUZUX1JFR0VYUCwgJ1JpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9SSUdIVF9SRUdFWFAsICdMZWZ0JyApO1xuXHR9XG5cblx0cmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gbHRyU3R5bGVzXG4gKlxuICogQHJldHVybiB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IENvbnZlcnRlZCBsdHIgLT4gcnRsIHN0eWxlc1xuICovXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcblx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcblx0XHRPYmplY3QuZW50cmllcyggbHRyU3R5bGVzICkubWFwKCAoIFsga2V5LCB2YWx1ZSBdICkgPT4gW1xuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcblx0XHRcdHZhbHVlLFxuXHRcdF0gKVxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZSBhbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgc3R5bGUgY29udmVydGVyIGZvciBDU1Mgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gW3J0bFN0eWxlc10gUnRsIHN0eWxlcy4gUmVuZGVycyBpZiBwcm92aWRlZC5cbiAqXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydGwoIGx0clN0eWxlcyA9IHt9LCBydGxTdHlsZXMgKSB7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCBydGxTdHlsZXMgKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlOiBgY3NzYCB0eXBlcyBhcmUgd3JvbmcsIGl0IGNhbiBhY2NlcHQgYW4gb2JqZWN0OiBodHRwczovL2Vtb3Rpb24uc2gvZG9jcy9vYmplY3Qtc3R5bGVzI3dpdGgtY3NzXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggY29udmVydExUUlRvUlRMKCBsdHJTdHlsZXMgKSApIDogY3NzKCBsdHJTdHlsZXMgKTtcblx0fTtcbn1cblxuLyoqXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXG4gKiBjYXVzZSBydGwgc3R5bGVzIHRvIHVwZGF0ZSBiYXNlZCBvbiB0aGUgYGlzUlRMYCByZXR1cm4gdmFsdWUgZXZlbiBpZiBhbGwgb3RoZXIgZGVwZW5kZW5jaWVzXG4gKiByZW1haW4gdGhlIHNhbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0eWxlcyA9IHVzZU1lbW8oICgpID0+IHtcbiAqICAgcmV0dXJuIGNzc2BcbiAqICAgICAkeyBydGwoIHsgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9ICkgfVxuICogICBgO1xuICogfSwgWyBydGwud2F0Y2goKSBdICk7XG4gKi9cbnJ0bC53YXRjaCA9ICgpID0+IGlzUlRMKCk7XG4iXX0= */");
      }
      return isRTL2() ? /* @__PURE__ */ css(convertLTRToRTL(ltrStyles), false ? "" : ";label:rtl;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGbUIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBpc1JUTCB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5cbmNvbnN0IExPV0VSX0xFRlRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1sZWZ0L2cgKTtcbmNvbnN0IExPV0VSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC8tcmlnaHQvZyApO1xuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XG5jb25zdCBVUFBFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvUmlnaHQvZyApO1xuXG4vKipcbiAqIEZsaXBzIGEgQ1NTIHByb3BlcnR5IGZyb20gbGVmdCA8LT4gcmlnaHQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZmxpcHBlZCBDU1MgcHJvcGVydHkgbmFtZSwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udmVydGVkS2V5KCBrZXkgKSB7XG5cdGlmICgga2V5ID09PSAnbGVmdCcgKSB7XG5cdFx0cmV0dXJuICdyaWdodCc7XG5cdH1cblxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX0xFRlRfUkVHRVhQLCAnLXJpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcblx0fVxuXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9MRUZUX1JFR0VYUCwgJ1JpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9SSUdIVF9SRUdFWFAsICdMZWZ0JyApO1xuXHR9XG5cblx0cmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gbHRyU3R5bGVzXG4gKlxuICogQHJldHVybiB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IENvbnZlcnRlZCBsdHIgLT4gcnRsIHN0eWxlc1xuICovXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcblx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcblx0XHRPYmplY3QuZW50cmllcyggbHRyU3R5bGVzICkubWFwKCAoIFsga2V5LCB2YWx1ZSBdICkgPT4gW1xuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcblx0XHRcdHZhbHVlLFxuXHRcdF0gKVxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZSBhbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgc3R5bGUgY29udmVydGVyIGZvciBDU1Mgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gW3J0bFN0eWxlc10gUnRsIHN0eWxlcy4gUmVuZGVycyBpZiBwcm92aWRlZC5cbiAqXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydGwoIGx0clN0eWxlcyA9IHt9LCBydGxTdHlsZXMgKSB7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCBydGxTdHlsZXMgKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlOiBgY3NzYCB0eXBlcyBhcmUgd3JvbmcsIGl0IGNhbiBhY2NlcHQgYW4gb2JqZWN0OiBodHRwczovL2Vtb3Rpb24uc2gvZG9jcy9vYmplY3Qtc3R5bGVzI3dpdGgtY3NzXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggY29udmVydExUUlRvUlRMKCBsdHJTdHlsZXMgKSApIDogY3NzKCBsdHJTdHlsZXMgKTtcblx0fTtcbn1cblxuLyoqXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXG4gKiBjYXVzZSBydGwgc3R5bGVzIHRvIHVwZGF0ZSBiYXNlZCBvbiB0aGUgYGlzUlRMYCByZXR1cm4gdmFsdWUgZXZlbiBpZiBhbGwgb3RoZXIgZGVwZW5kZW5jaWVzXG4gKiByZW1haW4gdGhlIHNhbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0eWxlcyA9IHVzZU1lbW8oICgpID0+IHtcbiAqICAgcmV0dXJuIGNzc2BcbiAqICAgICAkeyBydGwoIHsgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9ICkgfVxuICogICBgO1xuICogfSwgWyBydGwud2F0Y2goKSBdICk7XG4gKi9cbnJ0bC53YXRjaCA9ICgpID0+IGlzUlRMKCk7XG4iXX0= */") : /* @__PURE__ */ css(ltrStyles, false ? "" : ";label:rtl;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvcnRsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtGeUQiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9ydGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBpc1JUTCB9IGZyb20gJ0B3b3JkcHJlc3MvaTE4bic7XG5cbmNvbnN0IExPV0VSX0xFRlRfUkVHRVhQID0gbmV3IFJlZ0V4cCggLy1sZWZ0L2cgKTtcbmNvbnN0IExPV0VSX1JJR0hUX1JFR0VYUCA9IG5ldyBSZWdFeHAoIC8tcmlnaHQvZyApO1xuY29uc3QgVVBQRVJfTEVGVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvTGVmdC9nICk7XG5jb25zdCBVUFBFUl9SSUdIVF9SRUdFWFAgPSBuZXcgUmVnRXhwKCAvUmlnaHQvZyApO1xuXG4vKipcbiAqIEZsaXBzIGEgQ1NTIHByb3BlcnR5IGZyb20gbGVmdCA8LT4gcmlnaHQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgQ1NTIHByb3BlcnR5IG5hbWUuXG4gKlxuICogQHJldHVybiB7c3RyaW5nfSBUaGUgZmxpcHBlZCBDU1MgcHJvcGVydHkgbmFtZSwgaWYgYXBwbGljYWJsZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29udmVydGVkS2V5KCBrZXkgKSB7XG5cdGlmICgga2V5ID09PSAnbGVmdCcgKSB7XG5cdFx0cmV0dXJuICdyaWdodCc7XG5cdH1cblxuXHRpZiAoIGtleSA9PT0gJ3JpZ2h0JyApIHtcblx0XHRyZXR1cm4gJ2xlZnQnO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9MRUZUX1JFR0VYUC50ZXN0KCBrZXkgKSApIHtcblx0XHRyZXR1cm4ga2V5LnJlcGxhY2UoIExPV0VSX0xFRlRfUkVHRVhQLCAnLXJpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBMT1dFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBMT1dFUl9SSUdIVF9SRUdFWFAsICctbGVmdCcgKTtcblx0fVxuXG5cdGlmICggVVBQRVJfTEVGVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9MRUZUX1JFR0VYUCwgJ1JpZ2h0JyApO1xuXHR9XG5cblx0aWYgKCBVUFBFUl9SSUdIVF9SRUdFWFAudGVzdCgga2V5ICkgKSB7XG5cdFx0cmV0dXJuIGtleS5yZXBsYWNlKCBVUFBFUl9SSUdIVF9SRUdFWFAsICdMZWZ0JyApO1xuXHR9XG5cblx0cmV0dXJuIGtleTtcbn1cblxuLyoqXG4gKiBBbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgY29udmVydGVyIGZvciBzdHlsZSBwcm9wZXJ0aWVzXG4gKlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gbHRyU3R5bGVzXG4gKlxuICogQHJldHVybiB7aW1wb3J0KCdyZWFjdCcpLkNTU1Byb3BlcnRpZXN9IENvbnZlcnRlZCBsdHIgLT4gcnRsIHN0eWxlc1xuICovXG5leHBvcnQgY29uc3QgY29udmVydExUUlRvUlRMID0gKCBsdHJTdHlsZXMgPSB7fSApID0+IHtcblx0cmV0dXJuIE9iamVjdC5mcm9tRW50cmllcyhcblx0XHRPYmplY3QuZW50cmllcyggbHRyU3R5bGVzICkubWFwKCAoIFsga2V5LCB2YWx1ZSBdICkgPT4gW1xuXHRcdFx0Z2V0Q29udmVydGVkS2V5KCBrZXkgKSxcblx0XHRcdHZhbHVlLFxuXHRcdF0gKVxuXHQpO1xufTtcblxuLyoqXG4gKiBBIGhpZ2hlci1vcmRlciBmdW5jdGlvbiB0aGF0IGNyZWF0ZSBhbiBpbmNyZWRpYmx5IGJhc2ljIGx0ciAtPiBydGwgc3R5bGUgY29udmVydGVyIGZvciBDU1Mgb2JqZWN0cy5cbiAqXG4gKiBAcGFyYW0ge2ltcG9ydCgncmVhY3QnKS5DU1NQcm9wZXJ0aWVzfSBsdHJTdHlsZXMgICBMdHIgc3R5bGVzLiBDb252ZXJ0cyBhbmQgcmVuZGVycyBmcm9tIGx0ciAtPiBydGwgc3R5bGVzLCBpZiBhcHBsaWNhYmxlLlxuICogQHBhcmFtIHtpbXBvcnQoJ3JlYWN0JykuQ1NTUHJvcGVydGllc30gW3J0bFN0eWxlc10gUnRsIHN0eWxlcy4gUmVuZGVycyBpZiBwcm92aWRlZC5cbiAqXG4gKiBAcmV0dXJuIHsoKSA9PiBpbXBvcnQoJ0BlbW90aW9uL3JlYWN0JykuU2VyaWFsaXplZFN0eWxlc30gQSBmdW5jdGlvbiB0byBvdXRwdXQgQ1NTIHN0eWxlcyBmb3IgRW1vdGlvbidzIHJlbmRlcmVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydGwoIGx0clN0eWxlcyA9IHt9LCBydGxTdHlsZXMgKSB7XG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCBydGxTdHlsZXMgKSB7XG5cdFx0XHQvLyBAdHMtaWdub3JlOiBgY3NzYCB0eXBlcyBhcmUgd3JvbmcsIGl0IGNhbiBhY2NlcHQgYW4gb2JqZWN0OiBodHRwczovL2Vtb3Rpb24uc2gvZG9jcy9vYmplY3Qtc3R5bGVzI3dpdGgtY3NzXG5cdFx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggcnRsU3R5bGVzICkgOiBjc3MoIGx0clN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIEB0cy1pZ25vcmU6IGBjc3NgIHR5cGVzIGFyZSB3cm9uZywgaXQgY2FuIGFjY2VwdCBhbiBvYmplY3Q6IGh0dHBzOi8vZW1vdGlvbi5zaC9kb2NzL29iamVjdC1zdHlsZXMjd2l0aC1jc3Ncblx0XHRyZXR1cm4gaXNSVEwoKSA/IGNzcyggY29udmVydExUUlRvUlRMKCBsdHJTdHlsZXMgKSApIDogY3NzKCBsdHJTdHlsZXMgKTtcblx0fTtcbn1cblxuLyoqXG4gKiBDYWxsIHRoaXMgaW4gdGhlIGB1c2VNZW1vYCBkZXBlbmRlbmN5IGFycmF5IHRvIGVuc3VyZSB0aGF0IHN1YnNlcXVlbnQgcmVuZGVycyB3aWxsXG4gKiBjYXVzZSBydGwgc3R5bGVzIHRvIHVwZGF0ZSBiYXNlZCBvbiB0aGUgYGlzUlRMYCByZXR1cm4gdmFsdWUgZXZlbiBpZiBhbGwgb3RoZXIgZGVwZW5kZW5jaWVzXG4gKiByZW1haW4gdGhlIHNhbWUuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHN0eWxlcyA9IHVzZU1lbW8oICgpID0+IHtcbiAqICAgcmV0dXJuIGNzc2BcbiAqICAgICAkeyBydGwoIHsgbWFyZ2luUmlnaHQ6ICcxMHB4JyB9ICkgfVxuICogICBgO1xuICogfSwgWyBydGwud2F0Y2goKSBdICk7XG4gKi9cbnJ0bC53YXRjaCA9ICgpID0+IGlzUlRMKCk7XG4iXX0= */");
    };
  }
  rtl.watch = () => isRTL2();

  // node_modules/@wordpress/components/build-module/utils/font-values.js
  var font_values_default = {
    "default.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif",
    "default.fontSize": "13px",
    "helpText.fontSize": "12px",
    mobileTextMinFontSize: "16px"
  };

  // node_modules/@wordpress/components/build-module/utils/font.js
  function font(value) {
    var _FONT$value;
    return (_FONT$value = font_values_default[value]) !== null && _FONT$value !== void 0 ? _FONT$value : "";
  }

  // node_modules/@wordpress/components/build-module/utils/space.js
  var GRID_BASE = "4px";
  function space(value) {
    if (typeof value === "undefined") {
      return void 0;
    }
    if (!value) {
      return "0";
    }
    const asInt = typeof value === "number" ? value : Number(value);
    if (typeof window !== "undefined" && window.CSS?.supports?.("margin", value.toString()) || Number.isNaN(asInt)) {
      return value.toString();
    }
    return `calc(${GRID_BASE} * ${value})`;
  }

  // node_modules/@wordpress/components/build-module/utils/colors-values.js
  var white = "#fff";
  var GRAY = {
    900: "#1e1e1e",
    800: "#2f2f2f",
    /** Meets 4.6:1 text contrast against white. */
    700: "#757575",
    /** Meets 3:1 UI or large text contrast against white. */
    600: "#949494",
    400: "#ccc",
    /** Used for most borders. */
    300: "#ddd",
    /** Used sparingly for light borders. */
    200: "#e0e0e0",
    /** Used for light gray backgrounds. */
    100: "#f0f0f0"
  };
  var ALERT = {
    yellow: "#f0b849",
    red: "#d94f4f",
    green: "#4ab866"
  };
  var THEME = {
    accent: `var(--wp-components-color-accent, var(--wp-admin-theme-color, #3858e9))`,
    accentDarker10: `var(--wp-components-color-accent-darker-10, var(--wp-admin-theme-color-darker-10, #2145e6))`,
    accentDarker20: `var(--wp-components-color-accent-darker-20, var(--wp-admin-theme-color-darker-20, #183ad6))`,
    /** Used when placing text on the accent color. */
    accentInverted: `var(--wp-components-color-accent-inverted, ${white})`,
    background: `var(--wp-components-color-background, ${white})`,
    foreground: `var(--wp-components-color-foreground, ${GRAY[900]})`,
    /** Used when placing text on the foreground color. */
    foregroundInverted: `var(--wp-components-color-foreground-inverted, ${white})`,
    gray: {
      /** @deprecated Use `COLORS.theme.foreground` instead. */
      900: `var(--wp-components-color-foreground, ${GRAY[900]})`,
      800: `var(--wp-components-color-gray-800, ${GRAY[800]})`,
      700: `var(--wp-components-color-gray-700, ${GRAY[700]})`,
      600: `var(--wp-components-color-gray-600, ${GRAY[600]})`,
      400: `var(--wp-components-color-gray-400, ${GRAY[400]})`,
      300: `var(--wp-components-color-gray-300, ${GRAY[300]})`,
      200: `var(--wp-components-color-gray-200, ${GRAY[200]})`,
      100: `var(--wp-components-color-gray-100, ${GRAY[100]})`
    }
  };
  var UI = {
    background: THEME.background,
    backgroundDisabled: THEME.gray[100],
    border: THEME.gray[600],
    borderHover: THEME.gray[700],
    borderFocus: THEME.accent,
    borderDisabled: THEME.gray[400],
    textDisabled: THEME.gray[600],
    // Matches @wordpress/base-styles
    darkGrayPlaceholder: `color-mix(in srgb, ${THEME.foreground}, transparent 38%)`,
    lightGrayPlaceholder: `color-mix(in srgb, ${THEME.background}, transparent 35%)`
  };
  var COLORS = Object.freeze({
    /**
     * The main gray color object.
     *
     * @deprecated Use semantic aliases in `COLORS.ui` or theme-ready variables in `COLORS.theme.gray`.
     */
    gray: GRAY,
    // TODO: Stop exporting this when everything is migrated to `theme` or `ui`
    white,
    alert: ALERT,
    /**
     * Theme-ready variables with fallbacks.
     *
     * Prefer semantic aliases in `COLORS.ui` when applicable.
     */
    theme: THEME,
    /**
     * Semantic aliases (prefer these over raw variables when applicable).
     */
    ui: UI
  });

  // node_modules/@wordpress/components/build-module/utils/config-values.js
  var CONTROL_HEIGHT = "36px";
  var CONTROL_PADDING_X = "12px";
  var CONTROL_PROPS = {
    controlSurfaceColor: COLORS.white,
    controlTextActiveColor: COLORS.theme.accent,
    controlPaddingX: CONTROL_PADDING_X,
    controlPaddingXLarge: `calc(${CONTROL_PADDING_X} * 1.3334)`,
    controlPaddingXSmall: `calc(${CONTROL_PADDING_X} / 1.3334)`,
    controlBackgroundColor: COLORS.white,
    controlBorderRadius: "2px",
    controlBoxShadow: "transparent",
    controlBoxShadowFocus: `0 0 0 0.5px ${COLORS.theme.accent}`,
    controlDestructiveBorderColor: COLORS.alert.red,
    controlHeight: CONTROL_HEIGHT,
    controlHeightXSmall: `calc( ${CONTROL_HEIGHT} * 0.6 )`,
    controlHeightSmall: `calc( ${CONTROL_HEIGHT} * 0.8 )`,
    controlHeightLarge: `calc( ${CONTROL_HEIGHT} * 1.2 )`,
    controlHeightXLarge: `calc( ${CONTROL_HEIGHT} * 1.4 )`
  };
  var TOGGLE_GROUP_CONTROL_PROPS = {
    toggleGroupControlBackgroundColor: CONTROL_PROPS.controlBackgroundColor,
    toggleGroupControlBorderColor: COLORS.ui.border,
    toggleGroupControlBackdropBackgroundColor: CONTROL_PROPS.controlSurfaceColor,
    toggleGroupControlBackdropBorderColor: COLORS.ui.border,
    toggleGroupControlButtonColorActive: CONTROL_PROPS.controlBackgroundColor
  };
  var config_values_default = Object.assign({}, CONTROL_PROPS, TOGGLE_GROUP_CONTROL_PROPS, {
    colorDivider: "rgba(0, 0, 0, 0.1)",
    colorScrollbarThumb: "rgba(0, 0, 0, 0.2)",
    colorScrollbarThumbHover: "rgba(0, 0, 0, 0.5)",
    colorScrollbarTrack: "rgba(0, 0, 0, 0.04)",
    elevationIntensity: 1,
    radiusBlockUi: "2px",
    borderWidth: "1px",
    borderWidthFocus: "1.5px",
    borderWidthTab: "4px",
    spinnerSize: 16,
    fontSize: "13px",
    fontSizeH1: "calc(2.44 * 13px)",
    fontSizeH2: "calc(1.95 * 13px)",
    fontSizeH3: "calc(1.56 * 13px)",
    fontSizeH4: "calc(1.25 * 13px)",
    fontSizeH5: "13px",
    fontSizeH6: "calc(0.8 * 13px)",
    fontSizeInputMobile: "16px",
    fontSizeMobile: "15px",
    fontSizeSmall: "calc(0.92 * 13px)",
    fontSizeXSmall: "calc(0.75 * 13px)",
    fontLineHeightBase: "1.4",
    fontWeight: "normal",
    fontWeightHeading: "600",
    gridBase: "4px",
    cardBorderRadius: "2px",
    cardPaddingXSmall: `${space(2)}`,
    cardPaddingSmall: `${space(4)}`,
    cardPaddingMedium: `${space(4)} ${space(6)}`,
    cardPaddingLarge: `${space(6)} ${space(8)}`,
    popoverShadow: `0 0.7px 1px rgba(0, 0, 0, 0.1), 0 1.2px 1.7px -0.2px rgba(0, 0, 0, 0.1), 0 2.3px 3.3px -0.5px rgba(0, 0, 0, 0.1)`,
    surfaceBackgroundColor: COLORS.white,
    surfaceBackgroundSubtleColor: "#F3F3F3",
    surfaceBackgroundTintColor: "#F5F5F5",
    surfaceBorderColor: "rgba(0, 0, 0, 0.1)",
    surfaceBorderBoldColor: "rgba(0, 0, 0, 0.15)",
    surfaceBorderSubtleColor: "rgba(0, 0, 0, 0.05)",
    surfaceBackgroundTertiaryColor: COLORS.white,
    surfaceColor: COLORS.white,
    transitionDuration: "200ms",
    transitionDurationFast: "160ms",
    transitionDurationFaster: "120ms",
    transitionDurationFastest: "100ms",
    transitionTimingFunction: "cubic-bezier(0.08, 0.52, 0.52, 1)",
    transitionTimingFunctionControl: "cubic-bezier(0.12, 0.8, 0.32, 1)"
  });

  // node_modules/@wordpress/components/build-module/utils/base-label.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__2() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var baseLabelTypography = false ? {
    name: "9amh4a",
    styles: "font-size:11px;font-weight:500;line-height:1.4;text-transform:uppercase"
  } : {
    name: "1awj7qe-baseLabelTypography",
    styles: "font-size:11px;font-weight:500;line-height:1.4;text-transform:uppercase;label:baseLabelTypography;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdXRpbHMvYmFzZS1sYWJlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPc0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy91dGlscy9iYXNlLWxhYmVsLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vLyBUaGlzIGlzIGEgdmVyeSBsb3ctbGV2ZWwgbWl4aW4gd2hpY2ggeW91IHNob3VsZG4ndCBoYXZlIHRvIHVzZSBkaXJlY3RseS5cbi8vIFRyeSB0byB1c2UgQmFzZUNvbnRyb2wncyBTdHlsZWRMYWJlbCBvciBCYXNlQ29udHJvbC5WaXN1YWxMYWJlbCBpZiB5b3UgY2FuLlxuZXhwb3J0IGNvbnN0IGJhc2VMYWJlbFR5cG9ncmFwaHkgPSBjc3NgXG5cdGZvbnQtc2l6ZTogMTFweDtcblx0Zm9udC13ZWlnaHQ6IDUwMDtcblx0bGluZS1oZWlnaHQ6IDEuNDtcblx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbmA7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__2
  };

  // node_modules/@wordpress/components/build-module/context/context-system-provider.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var ComponentsContext = (0, import_react.createContext)(
    /** @type {Record<string, any>} */
    {}
  );
  var useComponentsContext = () => (0, import_react.useContext)(ComponentsContext);
  function useContextSystemBridge({
    value
  }) {
    const parentContext = useComponentsContext();
    const valueRef = (0, import_react.useRef)(value);
    use_update_effect_default(() => {
      if (
        // Objects are equivalent.
        (0, import_es62.default)(valueRef.current, value) && // But not the same reference.
        valueRef.current !== value
      ) {
        globalThis.SCRIPT_DEBUG === true ? warning(`Please memoize your context: ${JSON.stringify(value)}`) : void 0;
      }
    }, [value]);
    const config2 = (0, import_react.useMemo)(() => {
      return (0, import_deepmerge.default)(parentContext !== null && parentContext !== void 0 ? parentContext : {}, value !== null && value !== void 0 ? value : {}, {
        isMergeableObject: isPlainObject2
      });
    }, [parentContext, value]);
    return config2;
  }
  var BaseContextSystemProvider = ({
    children,
    value
  }) => {
    const contextValue = useContextSystemBridge({
      value
    });
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ComponentsContext.Provider, {
      value: contextValue,
      children
    });
  };
  var ContextSystemProvider = (0, import_react.memo)(BaseContextSystemProvider);

  // node_modules/@wordpress/components/build-module/context/constants.js
  var COMPONENT_NAMESPACE = "data-wp-component";
  var CONNECTED_NAMESPACE = "data-wp-c16t";
  var CONNECT_STATIC_NAMESPACE = "__contextSystemKey__";

  // node_modules/@wordpress/components/build-module/context/get-styled-class-name-from-key.js
  function getStyledClassName(namespace) {
    const kebab = paramCase(namespace);
    return `components-${kebab}`;
  }
  var getStyledClassNameFromKey = memize(getStyledClassName);

  // node_modules/@wordpress/components/build-module/context/context-connect.js
  function contextConnect(Component4, namespace) {
    return _contextConnect(Component4, namespace, {
      forwardsRef: true
    });
  }
  function contextConnectWithoutRef(Component4, namespace) {
    return _contextConnect(Component4, namespace);
  }
  function _contextConnect(Component4, namespace, options) {
    const WrappedComponent = options?.forwardsRef ? (0, import_react.forwardRef)(Component4) : Component4;
    if (typeof namespace === "undefined") {
      globalThis.SCRIPT_DEBUG === true ? warning("contextConnect: Please provide a namespace") : void 0;
    }
    let mergedNamespace = WrappedComponent[CONNECT_STATIC_NAMESPACE] || [namespace];
    if (Array.isArray(namespace)) {
      mergedNamespace = [...mergedNamespace, ...namespace];
    }
    if (typeof namespace === "string") {
      mergedNamespace = [...mergedNamespace, namespace];
    }
    return Object.assign(WrappedComponent, {
      [CONNECT_STATIC_NAMESPACE]: [...new Set(mergedNamespace)],
      displayName: namespace,
      selector: `.${getStyledClassNameFromKey(namespace)}`
    });
  }
  function getConnectNamespace(Component4) {
    if (!Component4) {
      return [];
    }
    let namespaces = [];
    if (Component4[CONNECT_STATIC_NAMESPACE]) {
      namespaces = Component4[CONNECT_STATIC_NAMESPACE];
    }
    if (Component4.type && Component4.type[CONNECT_STATIC_NAMESPACE]) {
      namespaces = Component4.type[CONNECT_STATIC_NAMESPACE];
    }
    return namespaces;
  }
  function hasConnectNamespace(Component4, match2) {
    if (!Component4) {
      return false;
    }
    if (typeof match2 === "string") {
      return getConnectNamespace(Component4).includes(match2);
    }
    if (Array.isArray(match2)) {
      return match2.some((result) => getConnectNamespace(Component4).includes(result));
    }
    return false;
  }

  // node_modules/@wordpress/components/build-module/context/utils.js
  function getNamespace(componentName) {
    return {
      [COMPONENT_NAMESPACE]: componentName
    };
  }
  function getConnectedNamespace() {
    return {
      [CONNECTED_NAMESPACE]: true
    };
  }

  // node_modules/@wordpress/components/build-module/context/use-context-system.js
  function useContextSystem(props, namespace) {
    const contextSystemProps = useComponentsContext();
    if (typeof namespace === "undefined") {
      globalThis.SCRIPT_DEBUG === true ? warning("useContextSystem: Please provide a namespace") : void 0;
    }
    const contextProps = contextSystemProps?.[namespace] || {};
    const finalComponentProps = {
      ...getConnectedNamespace(),
      ...getNamespace(namespace)
    };
    const {
      _overrides: overrideProps,
      ...otherContextProps
    } = contextProps;
    const initialMergedProps = Object.entries(otherContextProps).length ? Object.assign({}, otherContextProps, props) : props;
    const cx3 = useCx();
    const classes = cx3(getStyledClassNameFromKey(namespace), props.className);
    const rendered = typeof initialMergedProps.renderChildren === "function" ? initialMergedProps.renderChildren(initialMergedProps) : initialMergedProps.children;
    for (const key in initialMergedProps) {
      finalComponentProps[key] = initialMergedProps[key];
    }
    for (const key in overrideProps) {
      finalComponentProps[key] = overrideProps[key];
    }
    if (rendered !== void 0) {
      finalComponentProps.children = rendered;
    }
    finalComponentProps.className = classes;
    return finalComponentProps;
  }

  // node_modules/@wordpress/components/build-module/visually-hidden/styles.js
  var visuallyHidden = {
    border: 0,
    clip: "rect(1px, 1px, 1px, 1px)",
    WebkitClipPath: "inset( 50% )",
    clipPath: "inset( 50% )",
    height: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    width: "1px",
    wordWrap: "normal"
  };

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React8 = __toESM(require_react());
  init_emotion_is_prop_valid_esm();
  var isDevelopment4 = false;
  var testOmitPropsOnStringTag = isPropValid;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
    return typeof tag === "string" && // 96 is one less than the char code
    // for "a" so this is checking that
    // it's a lowercase character
    tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
    var shouldForwardProp;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp !== "function" && isReal) {
      shouldForwardProp = tag.__emotion_forwardProp;
    }
    return shouldForwardProp;
  };
  var Insertion3 = function Insertion4(_ref4) {
    var cache3 = _ref4.cache, serialized = _ref4.serialized, isStringTag = _ref4.isStringTag;
    registerStyles(cache3, serialized, isStringTag);
    useInsertionEffectAlwaysWithSyncFallback(function() {
      return insertStyles(cache3, serialized, isStringTag);
    });
    return null;
  };
  var createStyled = function createStyled2(tag, options) {
    var isReal = tag.__emotion_real === tag;
    var baseTag = isReal && tag.__emotion_base || tag;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles.push.apply(styles, args);
      } else {
        var templateStringsArr = args[0];
        styles.push(templateStringsArr[0]);
        var len = args.length;
        var i3 = 1;
        for (; i3 < len; i3++) {
          styles.push(args[i3], templateStringsArr[i3]);
        }
      }
      var Styled = withEmotionCache(function(props, cache3, ref) {
        var FinalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = React8.useContext(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache3.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles.concat(classInterpolations), cache3.registered, mergedProps);
        className += cache3.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as") continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        if (ref) {
          newProps.ref = ref;
        }
        return /* @__PURE__ */ React8.createElement(React8.Fragment, null, /* @__PURE__ */ React8.createElement(Insertion3, {
          cache: cache3,
          serialized,
          isStringTag: typeof FinalTag === "string"
        }), /* @__PURE__ */ React8.createElement(FinalTag, newProps));
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles;
      Styled.__emotion_forwardProp = shouldForwardProp;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && isDevelopment4) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        var newStyled = createStyled2(nextTag, _extends({}, options, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        }));
        return newStyled.apply(void 0, styles);
      };
      return Styled;
    };
  };

  // node_modules/@wordpress/components/build-module/view/component.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var PolymorphicDiv = /* @__PURE__ */ createStyled("div", false ? {
    target: "e19lxcc00"
  } : {
    target: "e19lxcc00",
    label: "PolymorphicDiv"
  })(false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdmlldy9jb21wb25lbnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVpQyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3ZpZXcvY29tcG9uZW50LnRzeCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGZvcndhcmRSZWYgfSBmcm9tICdAd29yZHByZXNzL2VsZW1lbnQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29udGV4dCc7XG5cbmNvbnN0IFBvbHltb3JwaGljRGl2ID0gc3R5bGVkLmRpdmBgO1xuXG5mdW5jdGlvbiBVbmZvcndhcmRlZFZpZXc8IFQgZXh0ZW5kcyBSZWFjdC5FbGVtZW50VHlwZSA9ICdkaXYnID4oXG5cdHsgYXMsIC4uLnJlc3RQcm9wcyB9OiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwge30sIFQgPixcblx0cmVmOiBSZWFjdC5Gb3J3YXJkZWRSZWY8IGFueSA+XG4pIHtcblx0cmV0dXJuIDxQb2x5bW9ycGhpY0RpdiBhcz17IGFzIH0gcmVmPXsgcmVmIH0geyAuLi5yZXN0UHJvcHMgfSAvPjtcbn1cblxuLyoqXG4gKiBgVmlld2AgaXMgYSBjb3JlIGNvbXBvbmVudCB0aGF0IHJlbmRlcnMgZXZlcnl0aGluZyBpbiB0aGUgbGlicmFyeS5cbiAqIEl0IGlzIHRoZSBwcmluY2lwbGUgY29tcG9uZW50IGluIHRoZSBlbnRpcmUgbGlicmFyeS5cbiAqXG4gKiBgYGBqc3hcbiAqIGltcG9ydCB7IFZpZXcgfSBmcm9tIGBAd29yZHByZXNzL2NvbXBvbmVudHNgO1xuICpcbiAqIGZ1bmN0aW9uIEV4YW1wbGUoKSB7XG4gKiBcdHJldHVybiAoXG4gKiBcdFx0PFZpZXc+XG4gKiBcdFx0XHQgQ29kZSBpcyBQb2V0cnlcbiAqIFx0XHQ8L1ZpZXc+XG4gKiBcdCk7XG4gKiB9XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNvbnN0IFZpZXcgPSBPYmplY3QuYXNzaWduKCBmb3J3YXJkUmVmKCBVbmZvcndhcmRlZFZpZXcgKSwge1xuXHRzZWxlY3RvcjogJy5jb21wb25lbnRzLXZpZXcnLFxufSApO1xuXG5leHBvcnQgZGVmYXVsdCBWaWV3O1xuIl19 */");
  function UnforwardedView({
    as,
    ...restProps
  }, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(PolymorphicDiv, {
      as,
      ref,
      ...restProps
    });
  }
  var View = Object.assign((0, import_react.forwardRef)(UnforwardedView), {
    selector: ".components-view"
  });
  var component_default = View;

  // node_modules/@wordpress/components/build-module/visually-hidden/component.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  function UnconnectedVisuallyHidden(props, forwardedRef) {
    const {
      style: styleProp,
      ...contextProps
    } = useContextSystem(props, "VisuallyHidden");
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(component_default, {
      ref: forwardedRef,
      ...contextProps,
      style: {
        ...visuallyHidden,
        ...styleProp || {}
      }
    });
  }
  var VisuallyHidden2 = contextConnect(UnconnectedVisuallyHidden, "VisuallyHidden");
  var component_default2 = VisuallyHidden2;

  // node_modules/framer-motion/dist/es/context/LayoutGroupContext.mjs
  var import_react59 = __toESM(require_react(), 1);
  var LayoutGroupContext = (0, import_react59.createContext)({});

  // node_modules/framer-motion/dist/es/utils/use-constant.mjs
  var import_react60 = __toESM(require_react(), 1);
  function useConstant(init2) {
    const ref = (0, import_react60.useRef)(null);
    if (ref.current === null) {
      ref.current = init2();
    }
    return ref.current;
  }

  // node_modules/framer-motion/dist/es/context/PresenceContext.mjs
  var import_react61 = __toESM(require_react(), 1);
  var PresenceContext = (0, import_react61.createContext)(null);

  // node_modules/framer-motion/dist/es/context/MotionConfigContext.mjs
  var import_react62 = __toESM(require_react(), 1);
  var MotionConfigContext = (0, import_react62.createContext)({
    transformPagePoint: (p2) => p2,
    isStatic: false,
    reducedMotion: "never"
  });

  // node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.mjs
  var import_react63 = __toESM(require_react(), 1);
  function usePresence(subscribe4 = true) {
    const context2 = (0, import_react63.useContext)(PresenceContext);
    if (context2 === null)
      return [true, null];
    const { isPresent, onExitComplete, register: register2 } = context2;
    const id3 = (0, import_react63.useId)();
    (0, import_react63.useEffect)(() => {
      if (subscribe4)
        register2(id3);
    }, [subscribe4]);
    const safeToRemove = (0, import_react63.useCallback)(() => subscribe4 && onExitComplete && onExitComplete(id3), [id3, onExitComplete, subscribe4]);
    return !isPresent && onExitComplete ? [false, safeToRemove] : [true];
  }

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var import_react64 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-browser.mjs
  var isBrowser2 = typeof window !== "undefined";

  // node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.mjs
  var useIsomorphicLayoutEffect = isBrowser2 ? import_react64.useLayoutEffect : import_react64.useEffect;

  // node_modules/motion-utils/dist/es/noop.mjs
  var noop3 = /* @__NO_SIDE_EFFECTS__ */ (any) => any;

  // node_modules/motion-utils/dist/es/errors.mjs
  var warning2 = noop3;
  var invariant2 = noop3;
  if (true) {
    warning2 = (check2, message) => {
      if (!check2 && typeof console !== "undefined") {
        console.warn(message);
      }
    };
    invariant2 = (check2, message) => {
      if (!check2) {
        throw new Error(message);
      }
    };
  }

  // node_modules/motion-utils/dist/es/memo.mjs
  // @__NO_SIDE_EFFECTS__
  function memo3(callback) {
    let result;
    return () => {
      if (result === void 0)
        result = callback();
      return result;
    };
  }

  // node_modules/motion-utils/dist/es/progress.mjs
  var progress = /* @__NO_SIDE_EFFECTS__ */ (from2, to2, value) => {
    const toFromDifference = to2 - from2;
    return toFromDifference === 0 ? 1 : (value - from2) / toFromDifference;
  };

  // node_modules/motion-utils/dist/es/time-conversion.mjs
  var secondsToMilliseconds = /* @__NO_SIDE_EFFECTS__ */ (seconds) => seconds * 1e3;
  var millisecondsToSeconds = /* @__NO_SIDE_EFFECTS__ */ (milliseconds) => milliseconds / 1e3;

  // node_modules/framer-motion/dist/es/utils/GlobalConfig.mjs
  var MotionGlobalConfig = {
    skipAnimations: false,
    useManualTiming: false
  };

  // node_modules/framer-motion/dist/es/frameloop/render-step.mjs
  function createRenderStep(runNextFrame) {
    let thisFrame = /* @__PURE__ */ new Set();
    let nextFrame = /* @__PURE__ */ new Set();
    let isProcessing = false;
    let flushNextFrame = false;
    const toKeepAlive = /* @__PURE__ */ new WeakSet();
    let latestFrameData = {
      delta: 0,
      timestamp: 0,
      isProcessing: false
    };
    function triggerCallback(callback) {
      if (toKeepAlive.has(callback)) {
        step.schedule(callback);
        runNextFrame();
      }
      callback(latestFrameData);
    }
    const step = {
      /**
       * Schedule a process to run on the next frame.
       */
      schedule: (callback, keepAlive = false, immediate = false) => {
        const addToCurrentFrame = immediate && isProcessing;
        const queue = addToCurrentFrame ? thisFrame : nextFrame;
        if (keepAlive)
          toKeepAlive.add(callback);
        if (!queue.has(callback))
          queue.add(callback);
        return callback;
      },
      /**
       * Cancel the provided callback from running on the next frame.
       */
      cancel: (callback) => {
        nextFrame.delete(callback);
        toKeepAlive.delete(callback);
      },
      /**
       * Execute all schedule callbacks.
       */
      process: (frameData2) => {
        latestFrameData = frameData2;
        if (isProcessing) {
          flushNextFrame = true;
          return;
        }
        isProcessing = true;
        [thisFrame, nextFrame] = [nextFrame, thisFrame];
        thisFrame.forEach(triggerCallback);
        thisFrame.clear();
        isProcessing = false;
        if (flushNextFrame) {
          flushNextFrame = false;
          step.process(frameData2);
        }
      }
    };
    return step;
  }

  // node_modules/framer-motion/dist/es/frameloop/batcher.mjs
  var stepsOrder = [
    "read",
    // Read
    "resolveKeyframes",
    // Write/Read/Write/Read
    "update",
    // Compute
    "preRender",
    // Compute
    "render",
    // Write
    "postRender"
    // Compute
  ];
  var maxElapsed = 40;
  function createRenderBatcher(scheduleNextBatch, allowKeepAlive) {
    let runNextFrame = false;
    let useDefaultElapsed = true;
    const state = {
      delta: 0,
      timestamp: 0,
      isProcessing: false
    };
    const flagRunNextFrame = () => runNextFrame = true;
    const steps2 = stepsOrder.reduce((acc, key) => {
      acc[key] = createRenderStep(flagRunNextFrame);
      return acc;
    }, {});
    const { read, resolveKeyframes, update: update3, preRender, render: render2, postRender } = steps2;
    const processBatch = () => {
      const timestamp = MotionGlobalConfig.useManualTiming ? state.timestamp : performance.now();
      runNextFrame = false;
      state.delta = useDefaultElapsed ? 1e3 / 60 : Math.max(Math.min(timestamp - state.timestamp, maxElapsed), 1);
      state.timestamp = timestamp;
      state.isProcessing = true;
      read.process(state);
      resolveKeyframes.process(state);
      update3.process(state);
      preRender.process(state);
      render2.process(state);
      postRender.process(state);
      state.isProcessing = false;
      if (runNextFrame && allowKeepAlive) {
        useDefaultElapsed = false;
        scheduleNextBatch(processBatch);
      }
    };
    const wake = () => {
      runNextFrame = true;
      useDefaultElapsed = true;
      if (!state.isProcessing) {
        scheduleNextBatch(processBatch);
      }
    };
    const schedule2 = stepsOrder.reduce((acc, key) => {
      const step = steps2[key];
      acc[key] = (process2, keepAlive = false, immediate = false) => {
        if (!runNextFrame)
          wake();
        return step.schedule(process2, keepAlive, immediate);
      };
      return acc;
    }, {});
    const cancel = (process2) => {
      for (let i3 = 0; i3 < stepsOrder.length; i3++) {
        steps2[stepsOrder[i3]].cancel(process2);
      }
    };
    return { schedule: schedule2, cancel, state, steps: steps2 };
  }

  // node_modules/framer-motion/dist/es/frameloop/frame.mjs
  var { schedule: frame, cancel: cancelFrame, state: frameData, steps: frameSteps } = createRenderBatcher(typeof requestAnimationFrame !== "undefined" ? requestAnimationFrame : noop3, true);

  // node_modules/framer-motion/dist/es/context/LazyContext.mjs
  var import_react65 = __toESM(require_react(), 1);
  var LazyContext = (0, import_react65.createContext)({ strict: false });

  // node_modules/framer-motion/dist/es/motion/features/definitions.mjs
  var featureProps = {
    animation: [
      "animate",
      "variants",
      "whileHover",
      "whileTap",
      "exit",
      "whileInView",
      "whileFocus",
      "whileDrag"
    ],
    exit: ["exit"],
    drag: ["drag", "dragControls"],
    focus: ["whileFocus"],
    hover: ["whileHover", "onHoverStart", "onHoverEnd"],
    tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"],
    pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"],
    inView: ["whileInView", "onViewportEnter", "onViewportLeave"],
    layout: ["layout", "layoutId"]
  };
  var featureDefinitions = {};
  for (const key in featureProps) {
    featureDefinitions[key] = {
      isEnabled: (props) => featureProps[key].some((name) => !!props[name])
    };
  }

  // node_modules/framer-motion/dist/es/motion/features/load-features.mjs
  function loadFeatures(features) {
    for (const key in features) {
      featureDefinitions[key] = {
        ...featureDefinitions[key],
        ...features[key]
      };
    }
  }

  // node_modules/framer-motion/dist/es/motion/utils/valid-prop.mjs
  var validMotionProps = /* @__PURE__ */ new Set([
    "animate",
    "exit",
    "variants",
    "initial",
    "style",
    "values",
    "variants",
    "transition",
    "transformTemplate",
    "custom",
    "inherit",
    "onBeforeLayoutMeasure",
    "onAnimationStart",
    "onAnimationComplete",
    "onUpdate",
    "onDragStart",
    "onDrag",
    "onDragEnd",
    "onMeasureDragConstraints",
    "onDirectionLock",
    "onDragTransitionEnd",
    "_dragX",
    "_dragY",
    "onHoverStart",
    "onHoverEnd",
    "onViewportEnter",
    "onViewportLeave",
    "globalTapTarget",
    "ignoreStrict",
    "viewport"
  ]);
  function isValidMotionProp(key) {
    return key.startsWith("while") || key.startsWith("drag") && key !== "draggable" || key.startsWith("layout") || key.startsWith("onTap") || key.startsWith("onPan") || key.startsWith("onLayout") || validMotionProps.has(key);
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/filter-props.mjs
  var shouldForward = (key) => !isValidMotionProp(key);
  function loadExternalIsValidProp(isValidProp) {
    if (!isValidProp)
      return;
    shouldForward = (key) => key.startsWith("on") ? !isValidMotionProp(key) : isValidProp(key);
  }
  try {
    loadExternalIsValidProp((init_emotion_is_prop_valid_esm(), __toCommonJS(emotion_is_prop_valid_esm_exports)).default);
  } catch (_a) {
  }
  function filterProps(props, isDom, forwardMotionProps) {
    const filteredProps = {};
    for (const key in props) {
      if (key === "values" && typeof props.values === "object")
        continue;
      if (shouldForward(key) || forwardMotionProps === true && isValidMotionProp(key) || !isDom && !isValidMotionProp(key) || // If trying to use native HTML drag events, forward drag listeners
      props["draggable"] && key.startsWith("onDrag")) {
        filteredProps[key] = props[key];
      }
    }
    return filteredProps;
  }

  // node_modules/framer-motion/dist/es/utils/warn-once.mjs
  var warned = /* @__PURE__ */ new Set();
  function warnOnce(condition, message, element) {
    if (condition || warned.has(message))
      return;
    console.warn(message);
    if (element)
      console.warn(element);
    warned.add(message);
  }

  // node_modules/framer-motion/dist/es/render/components/create-proxy.mjs
  function createDOMMotionComponentProxy(componentFactory) {
    if (typeof Proxy === "undefined") {
      return componentFactory;
    }
    const componentCache = /* @__PURE__ */ new Map();
    const deprecatedFactoryFunction = (...args) => {
      if (true) {
        warnOnce(false, "motion() is deprecated. Use motion.create() instead.");
      }
      return componentFactory(...args);
    };
    return new Proxy(deprecatedFactoryFunction, {
      /**
       * Called when `motion` is referenced with a prop: `motion.div`, `motion.input` etc.
       * The prop name is passed through as `key` and we can use that to generate a `motion`
       * DOM component with that name.
       */
      get: (_target, key) => {
        if (key === "create")
          return componentFactory;
        if (!componentCache.has(key)) {
          componentCache.set(key, componentFactory(key));
        }
        return componentCache.get(key);
      }
    });
  }

  // node_modules/framer-motion/dist/es/motion/index.mjs
  var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
  var import_react71 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/context/MotionContext/index.mjs
  var import_react66 = __toESM(require_react(), 1);
  var MotionContext = (0, import_react66.createContext)({});

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  var import_react67 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/utils/is-variant-label.mjs
  function isVariantLabel(v2) {
    return typeof v2 === "string" || Array.isArray(v2);
  }

  // node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.mjs
  function isAnimationControls(v2) {
    return v2 !== null && typeof v2 === "object" && typeof v2.start === "function";
  }

  // node_modules/framer-motion/dist/es/render/utils/variant-props.mjs
  var variantPriorityOrder = [
    "animate",
    "whileInView",
    "whileFocus",
    "whileHover",
    "whileTap",
    "whileDrag",
    "exit"
  ];
  var variantProps = ["initial", ...variantPriorityOrder];

  // node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.mjs
  function isControllingVariants(props) {
    return isAnimationControls(props.animate) || variantProps.some((name) => isVariantLabel(props[name]));
  }
  function isVariantNode(props) {
    return Boolean(isControllingVariants(props) || props.variants);
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/utils.mjs
  function getCurrentTreeVariants(props, context2) {
    if (isControllingVariants(props)) {
      const { initial, animate } = props;
      return {
        initial: initial === false || isVariantLabel(initial) ? initial : void 0,
        animate: isVariantLabel(animate) ? animate : void 0
      };
    }
    return props.inherit !== false ? context2 : {};
  }

  // node_modules/framer-motion/dist/es/context/MotionContext/create.mjs
  function useCreateMotionContext(props) {
    const { initial, animate } = getCurrentTreeVariants(props, (0, import_react67.useContext)(MotionContext));
    return (0, import_react67.useMemo)(() => ({ initial, animate }), [variantLabelsAsDependency(initial), variantLabelsAsDependency(animate)]);
  }
  function variantLabelsAsDependency(prop2) {
    return Array.isArray(prop2) ? prop2.join(" ") : prop2;
  }

  // node_modules/framer-motion/dist/es/motion/utils/symbol.mjs
  var motionComponentSymbol = Symbol.for("motionComponentSymbol");

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  var import_react68 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/is-ref-object.mjs
  function isRefObject(ref) {
    return ref && typeof ref === "object" && Object.prototype.hasOwnProperty.call(ref, "current");
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.mjs
  function useMotionRef(visualState, visualElement, externalRef) {
    return (0, import_react68.useCallback)(
      (instance) => {
        if (instance) {
          visualState.onMount && visualState.onMount(instance);
        }
        if (visualElement) {
          if (instance) {
            visualElement.mount(instance);
          } else {
            visualElement.unmount();
          }
        }
        if (externalRef) {
          if (typeof externalRef === "function") {
            externalRef(instance);
          } else if (isRefObject(externalRef)) {
            externalRef.current = instance;
          }
        }
      },
      /**
       * Only pass a new ref callback to React if we've received a visual element
       * factory. Otherwise we'll be mounting/remounting every time externalRef
       * or other dependencies change.
       */
      [visualElement]
    );
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  var import_react70 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.mjs
  var camelToDash = (str) => str.replace(/([a-z])([A-Z])/gu, "$1-$2").toLowerCase();

  // node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.mjs
  var optimizedAppearDataId = "framerAppearId";
  var optimizedAppearDataAttribute = "data-" + camelToDash(optimizedAppearDataId);

  // node_modules/framer-motion/dist/es/frameloop/microtask.mjs
  var { schedule: microtask, cancel: cancelMicrotask } = createRenderBatcher(queueMicrotask, false);

  // node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.mjs
  var import_react69 = __toESM(require_react(), 1);
  var SwitchLayoutGroupContext = (0, import_react69.createContext)({});

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-element.mjs
  function useVisualElement(Component4, visualState, props, createVisualElement, ProjectionNodeConstructor) {
    var _a, _b;
    const { visualElement: parent } = (0, import_react70.useContext)(MotionContext);
    const lazyContext = (0, import_react70.useContext)(LazyContext);
    const presenceContext = (0, import_react70.useContext)(PresenceContext);
    const reducedMotionConfig = (0, import_react70.useContext)(MotionConfigContext).reducedMotion;
    const visualElementRef = (0, import_react70.useRef)(null);
    createVisualElement = createVisualElement || lazyContext.renderer;
    if (!visualElementRef.current && createVisualElement) {
      visualElementRef.current = createVisualElement(Component4, {
        visualState,
        parent,
        props,
        presenceContext,
        blockInitialAnimation: presenceContext ? presenceContext.initial === false : false,
        reducedMotionConfig
      });
    }
    const visualElement = visualElementRef.current;
    const initialLayoutGroupConfig = (0, import_react70.useContext)(SwitchLayoutGroupContext);
    if (visualElement && !visualElement.projection && ProjectionNodeConstructor && (visualElement.type === "html" || visualElement.type === "svg")) {
      createProjectionNode(visualElementRef.current, props, ProjectionNodeConstructor, initialLayoutGroupConfig);
    }
    const isMounted = (0, import_react70.useRef)(false);
    (0, import_react70.useInsertionEffect)(() => {
      if (visualElement && isMounted.current) {
        visualElement.update(props, presenceContext);
      }
    });
    const optimisedAppearId = props[optimizedAppearDataAttribute];
    const wantsHandoff = (0, import_react70.useRef)(Boolean(optimisedAppearId) && !((_a = window.MotionHandoffIsComplete) === null || _a === void 0 ? void 0 : _a.call(window, optimisedAppearId)) && ((_b = window.MotionHasOptimisedAnimation) === null || _b === void 0 ? void 0 : _b.call(window, optimisedAppearId)));
    useIsomorphicLayoutEffect(() => {
      if (!visualElement)
        return;
      isMounted.current = true;
      window.MotionIsMounted = true;
      visualElement.updateFeatures();
      microtask.render(visualElement.render);
      if (wantsHandoff.current && visualElement.animationState) {
        visualElement.animationState.animateChanges();
      }
    });
    (0, import_react70.useEffect)(() => {
      if (!visualElement)
        return;
      if (!wantsHandoff.current && visualElement.animationState) {
        visualElement.animationState.animateChanges();
      }
      if (wantsHandoff.current) {
        queueMicrotask(() => {
          var _a2;
          (_a2 = window.MotionHandoffMarkAsComplete) === null || _a2 === void 0 ? void 0 : _a2.call(window, optimisedAppearId);
        });
        wantsHandoff.current = false;
      }
    });
    return visualElement;
  }
  function createProjectionNode(visualElement, props, ProjectionNodeConstructor, initialPromotionConfig) {
    const { layoutId, layout: layout2, drag: drag2, dragConstraints, layoutScroll, layoutRoot } = props;
    visualElement.projection = new ProjectionNodeConstructor(visualElement.latestValues, props["data-framer-portal-id"] ? void 0 : getClosestProjectingNode(visualElement.parent));
    visualElement.projection.setOptions({
      layoutId,
      layout: layout2,
      alwaysMeasureLayout: Boolean(drag2) || dragConstraints && isRefObject(dragConstraints),
      visualElement,
      /**
       * TODO: Update options in an effect. This could be tricky as it'll be too late
       * to update by the time layout animations run.
       * We also need to fix this safeToRemove by linking it up to the one returned by usePresence,
       * ensuring it gets called if there's no potential layout animations.
       *
       */
      animationType: typeof layout2 === "string" ? layout2 : "both",
      initialPromotionConfig,
      layoutScroll,
      layoutRoot
    });
  }
  function getClosestProjectingNode(visualElement) {
    if (!visualElement)
      return void 0;
    return visualElement.options.allowProjection !== false ? visualElement.projection : getClosestProjectingNode(visualElement.parent);
  }

  // node_modules/framer-motion/dist/es/motion/index.mjs
  function createRendererMotionComponent({ preloadedFeatures, createVisualElement, useRender, useVisualState, Component: Component4 }) {
    var _a, _b;
    preloadedFeatures && loadFeatures(preloadedFeatures);
    function MotionComponent(props, externalRef) {
      let MeasureLayout2;
      const configAndProps = {
        ...(0, import_react71.useContext)(MotionConfigContext),
        ...props,
        layoutId: useLayoutId(props)
      };
      const { isStatic } = configAndProps;
      const context2 = useCreateMotionContext(props);
      const visualState = useVisualState(props, isStatic);
      if (!isStatic && isBrowser2) {
        useStrictMode(configAndProps, preloadedFeatures);
        const layoutProjection = getProjectionFunctionality(configAndProps);
        MeasureLayout2 = layoutProjection.MeasureLayout;
        context2.visualElement = useVisualElement(Component4, visualState, configAndProps, createVisualElement, layoutProjection.ProjectionNode);
      }
      return (0, import_jsx_runtime33.jsxs)(MotionContext.Provider, { value: context2, children: [MeasureLayout2 && context2.visualElement ? (0, import_jsx_runtime33.jsx)(MeasureLayout2, { visualElement: context2.visualElement, ...configAndProps }) : null, useRender(Component4, props, useMotionRef(visualState, context2.visualElement, externalRef), visualState, isStatic, context2.visualElement)] });
    }
    MotionComponent.displayName = `motion.${typeof Component4 === "string" ? Component4 : `create(${(_b = (_a = Component4.displayName) !== null && _a !== void 0 ? _a : Component4.name) !== null && _b !== void 0 ? _b : ""})`}`;
    const ForwardRefMotionComponent = (0, import_react71.forwardRef)(MotionComponent);
    ForwardRefMotionComponent[motionComponentSymbol] = Component4;
    return ForwardRefMotionComponent;
  }
  function useLayoutId({ layoutId }) {
    const layoutGroupId = (0, import_react71.useContext)(LayoutGroupContext).id;
    return layoutGroupId && layoutId !== void 0 ? layoutGroupId + "-" + layoutId : layoutId;
  }
  function useStrictMode(configAndProps, preloadedFeatures) {
    const isStrict = (0, import_react71.useContext)(LazyContext).strict;
    if (preloadedFeatures && isStrict) {
      const strictMessage = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      configAndProps.ignoreStrict ? warning2(false, strictMessage) : invariant2(false, strictMessage);
    }
  }
  function getProjectionFunctionality(props) {
    const { drag: drag2, layout: layout2 } = featureDefinitions;
    if (!drag2 && !layout2)
      return {};
    const combined = { ...drag2, ...layout2 };
    return {
      MeasureLayout: (drag2 === null || drag2 === void 0 ? void 0 : drag2.isEnabled(props)) || (layout2 === null || layout2 === void 0 ? void 0 : layout2.isEnabled(props)) ? combined.MeasureLayout : void 0,
      ProjectionNode: combined.ProjectionNode
    };
  }

  // node_modules/framer-motion/dist/es/render/svg/lowercase-elements.mjs
  var lowercaseSVGElements = [
    "animate",
    "circle",
    "defs",
    "desc",
    "ellipse",
    "g",
    "image",
    "line",
    "filter",
    "marker",
    "mask",
    "metadata",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "rect",
    "stop",
    "switch",
    "symbol",
    "svg",
    "text",
    "tspan",
    "use",
    "view"
  ];

  // node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.mjs
  function isSVGComponent(Component4) {
    if (
      /**
       * If it's not a string, it's a custom React component. Currently we only support
       * HTML custom React components.
       */
      typeof Component4 !== "string" || /**
       * If it contains a dash, the element is a custom HTML webcomponent.
       */
      Component4.includes("-")
    ) {
      return false;
    } else if (
      /**
       * If it's in our list of lowercase SVG tags, it's an SVG component
       */
      lowercaseSVGElements.indexOf(Component4) > -1 || /**
       * If it contains a capital letter, it's an SVG component
       */
      /[A-Z]/u.test(Component4)
    ) {
      return true;
    }
    return false;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  var import_react72 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/utils/resolve-variants.mjs
  function getValueState(visualElement) {
    const state = [{}, {}];
    visualElement === null || visualElement === void 0 ? void 0 : visualElement.values.forEach((value, key) => {
      state[0][key] = value.get();
      state[1][key] = value.getVelocity();
    });
    return state;
  }
  function resolveVariantFromProps(props, definition, custom, visualElement) {
    if (typeof definition === "function") {
      const [current, velocity] = getValueState(visualElement);
      definition = definition(custom !== void 0 ? custom : props.custom, current, velocity);
    }
    if (typeof definition === "string") {
      definition = props.variants && props.variants[definition];
    }
    if (typeof definition === "function") {
      const [current, velocity] = getValueState(visualElement);
      definition = definition(custom !== void 0 ? custom : props.custom, current, velocity);
    }
    return definition;
  }

  // node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.mjs
  var isKeyframesTarget = (v2) => {
    return Array.isArray(v2);
  };

  // node_modules/framer-motion/dist/es/utils/resolve-value.mjs
  var isCustomValue = (v2) => {
    return Boolean(v2 && typeof v2 === "object" && v2.mix && v2.toValue);
  };
  var resolveFinalValueInKeyframes = (v2) => {
    return isKeyframesTarget(v2) ? v2[v2.length - 1] || 0 : v2;
  };

  // node_modules/framer-motion/dist/es/value/utils/is-motion-value.mjs
  var isMotionValue = (value) => Boolean(value && value.getVelocity);

  // node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.mjs
  function resolveMotionValue(value) {
    const unwrappedValue = isMotionValue(value) ? value.get() : value;
    return isCustomValue(unwrappedValue) ? unwrappedValue.toValue() : unwrappedValue;
  }

  // node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs
  function makeState({ scrapeMotionValuesFromProps: scrapeMotionValuesFromProps3, createRenderState, onUpdate }, props, context2, presenceContext) {
    const state = {
      latestValues: makeLatestValues(props, context2, presenceContext, scrapeMotionValuesFromProps3),
      renderState: createRenderState()
    };
    if (onUpdate) {
      state.onMount = (instance) => onUpdate({ props, current: instance, ...state });
      state.onUpdate = (visualElement) => onUpdate(visualElement);
    }
    return state;
  }
  var makeUseVisualState = (config2) => (props, isStatic) => {
    const context2 = (0, import_react72.useContext)(MotionContext);
    const presenceContext = (0, import_react72.useContext)(PresenceContext);
    const make = () => makeState(config2, props, context2, presenceContext);
    return isStatic ? make() : useConstant(make);
  };
  function makeLatestValues(props, context2, presenceContext, scrapeMotionValues) {
    const values = {};
    const motionValues = scrapeMotionValues(props, {});
    for (const key in motionValues) {
      values[key] = resolveMotionValue(motionValues[key]);
    }
    let { initial, animate } = props;
    const isControllingVariants$1 = isControllingVariants(props);
    const isVariantNode$1 = isVariantNode(props);
    if (context2 && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {
      if (initial === void 0)
        initial = context2.initial;
      if (animate === void 0)
        animate = context2.animate;
    }
    let isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;
    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;
    const variantToSet = isInitialAnimationBlocked ? animate : initial;
    if (variantToSet && typeof variantToSet !== "boolean" && !isAnimationControls(variantToSet)) {
      const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];
      for (let i3 = 0; i3 < list.length; i3++) {
        const resolved = resolveVariantFromProps(props, list[i3]);
        if (resolved) {
          const { transitionEnd, transition, ...target } = resolved;
          for (const key in target) {
            let valueTarget = target[key];
            if (Array.isArray(valueTarget)) {
              const index2 = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;
              valueTarget = valueTarget[index2];
            }
            if (valueTarget !== null) {
              values[key] = valueTarget;
            }
          }
          for (const key in transitionEnd) {
            values[key] = transitionEnd[key];
          }
        }
      }
    }
    return values;
  }

  // node_modules/framer-motion/dist/es/render/html/utils/keys-transform.mjs
  var transformPropOrder = [
    "transformPerspective",
    "x",
    "y",
    "z",
    "translateX",
    "translateY",
    "translateZ",
    "scale",
    "scaleX",
    "scaleY",
    "rotate",
    "rotateX",
    "rotateY",
    "rotateZ",
    "skew",
    "skewX",
    "skewY"
  ];
  var transformProps = new Set(transformPropOrder);

  // node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.mjs
  var checkStringStartsWith = (token2) => (key) => typeof key === "string" && key.startsWith(token2);
  var isCSSVariableName = /* @__PURE__ */ checkStringStartsWith("--");
  var startsAsVariableToken = /* @__PURE__ */ checkStringStartsWith("var(--");
  var isCSSVariableToken = (value) => {
    const startsWithToken = startsAsVariableToken(value);
    if (!startsWithToken)
      return false;
    return singleCssVariableRegex.test(value.split("/*")[0].trim());
  };
  var singleCssVariableRegex = /var\(--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)$/iu;

  // node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.mjs
  var getValueAsType = (value, type) => {
    return type && typeof value === "number" ? type.transform(value) : value;
  };

  // node_modules/framer-motion/dist/es/utils/clamp.mjs
  var clamp2 = (min2, max2, v2) => {
    if (v2 > max2)
      return max2;
    if (v2 < min2)
      return min2;
    return v2;
  };

  // node_modules/framer-motion/dist/es/value/types/numbers/index.mjs
  var number = {
    test: (v2) => typeof v2 === "number",
    parse: parseFloat,
    transform: (v2) => v2
  };
  var alpha = {
    ...number,
    transform: (v2) => clamp2(0, 1, v2)
  };
  var scale = {
    ...number,
    default: 1
  };

  // node_modules/framer-motion/dist/es/value/types/numbers/units.mjs
  var createUnitType = (unit) => ({
    test: (v2) => typeof v2 === "string" && v2.endsWith(unit) && v2.split(" ").length === 1,
    parse: parseFloat,
    transform: (v2) => `${v2}${unit}`
  });
  var degrees = /* @__PURE__ */ createUnitType("deg");
  var percent = /* @__PURE__ */ createUnitType("%");
  var px = /* @__PURE__ */ createUnitType("px");
  var vh = /* @__PURE__ */ createUnitType("vh");
  var vw = /* @__PURE__ */ createUnitType("vw");
  var progressPercentage = {
    ...percent,
    parse: (v2) => percent.parse(v2) / 100,
    transform: (v2) => percent.transform(v2 * 100)
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/number-browser.mjs
  var browserNumberValueTypes = {
    // Border props
    borderWidth: px,
    borderTopWidth: px,
    borderRightWidth: px,
    borderBottomWidth: px,
    borderLeftWidth: px,
    borderRadius: px,
    radius: px,
    borderTopLeftRadius: px,
    borderTopRightRadius: px,
    borderBottomRightRadius: px,
    borderBottomLeftRadius: px,
    // Positioning props
    width: px,
    maxWidth: px,
    height: px,
    maxHeight: px,
    top: px,
    right: px,
    bottom: px,
    left: px,
    // Spacing props
    padding: px,
    paddingTop: px,
    paddingRight: px,
    paddingBottom: px,
    paddingLeft: px,
    margin: px,
    marginTop: px,
    marginRight: px,
    marginBottom: px,
    marginLeft: px,
    // Misc
    backgroundPositionX: px,
    backgroundPositionY: px
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/transform.mjs
  var transformValueTypes = {
    rotate: degrees,
    rotateX: degrees,
    rotateY: degrees,
    rotateZ: degrees,
    scale,
    scaleX: scale,
    scaleY: scale,
    scaleZ: scale,
    skew: degrees,
    skewX: degrees,
    skewY: degrees,
    distance: px,
    translateX: px,
    translateY: px,
    translateZ: px,
    x: px,
    y: px,
    z: px,
    perspective: px,
    transformPerspective: px,
    opacity: alpha,
    originX: progressPercentage,
    originY: progressPercentage,
    originZ: px
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-int.mjs
  var int = {
    ...number,
    transform: Math.round
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/number.mjs
  var numberValueTypes = {
    ...browserNumberValueTypes,
    ...transformValueTypes,
    zIndex: int,
    size: px,
    // SVG
    fillOpacity: alpha,
    strokeOpacity: alpha,
    numOctaves: int
  };

  // node_modules/framer-motion/dist/es/render/html/utils/build-transform.mjs
  var translateAlias = {
    x: "translateX",
    y: "translateY",
    z: "translateZ",
    transformPerspective: "perspective"
  };
  var numTransforms = transformPropOrder.length;
  function buildTransform(latestValues, transform, transformTemplate) {
    let transformString = "";
    let transformIsDefault = true;
    for (let i3 = 0; i3 < numTransforms; i3++) {
      const key = transformPropOrder[i3];
      const value = latestValues[key];
      if (value === void 0)
        continue;
      let valueIsDefault = true;
      if (typeof value === "number") {
        valueIsDefault = value === (key.startsWith("scale") ? 1 : 0);
      } else {
        valueIsDefault = parseFloat(value) === 0;
      }
      if (!valueIsDefault || transformTemplate) {
        const valueAsType = getValueAsType(value, numberValueTypes[key]);
        if (!valueIsDefault) {
          transformIsDefault = false;
          const transformName = translateAlias[key] || key;
          transformString += `${transformName}(${valueAsType}) `;
        }
        if (transformTemplate) {
          transform[key] = valueAsType;
        }
      }
    }
    transformString = transformString.trim();
    if (transformTemplate) {
      transformString = transformTemplate(transform, transformIsDefault ? "" : transformString);
    } else if (transformIsDefault) {
      transformString = "none";
    }
    return transformString;
  }

  // node_modules/framer-motion/dist/es/render/html/utils/build-styles.mjs
  function buildHTMLStyles(state, latestValues, transformTemplate) {
    const { style, vars, transformOrigin } = state;
    let hasTransform2 = false;
    let hasTransformOrigin = false;
    for (const key in latestValues) {
      const value = latestValues[key];
      if (transformProps.has(key)) {
        hasTransform2 = true;
        continue;
      } else if (isCSSVariableName(key)) {
        vars[key] = value;
        continue;
      } else {
        const valueAsType = getValueAsType(value, numberValueTypes[key]);
        if (key.startsWith("origin")) {
          hasTransformOrigin = true;
          transformOrigin[key] = valueAsType;
        } else {
          style[key] = valueAsType;
        }
      }
    }
    if (!latestValues.transform) {
      if (hasTransform2 || transformTemplate) {
        style.transform = buildTransform(latestValues, state.transform, transformTemplate);
      } else if (style.transform) {
        style.transform = "none";
      }
    }
    if (hasTransformOrigin) {
      const { originX = "50%", originY = "50%", originZ = 0 } = transformOrigin;
      style.transformOrigin = `${originX} ${originY} ${originZ}`;
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/path.mjs
  var dashKeys = {
    offset: "stroke-dashoffset",
    array: "stroke-dasharray"
  };
  var camelKeys = {
    offset: "strokeDashoffset",
    array: "strokeDasharray"
  };
  function buildSVGPath(attrs2, length2, spacing = 1, offset5 = 0, useDashCase = true) {
    attrs2.pathLength = 1;
    const keys = useDashCase ? dashKeys : camelKeys;
    attrs2[keys.offset] = px.transform(-offset5);
    const pathLength = px.transform(length2);
    const pathSpacing = px.transform(spacing);
    attrs2[keys.array] = `${pathLength} ${pathSpacing}`;
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.mjs
  function calcOrigin(origin2, offset5, size4) {
    return typeof origin2 === "string" ? origin2 : px.transform(offset5 + size4 * origin2);
  }
  function calcSVGTransformOrigin(dimensions, originX, originY) {
    const pxOriginX = calcOrigin(originX, dimensions.x, dimensions.width);
    const pxOriginY = calcOrigin(originY, dimensions.y, dimensions.height);
    return `${pxOriginX} ${pxOriginY}`;
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs
  function buildSVGAttrs(state, {
    attrX,
    attrY,
    attrScale,
    originX,
    originY,
    pathLength,
    pathSpacing = 1,
    pathOffset = 0,
    // This is object creation, which we try to avoid per-frame.
    ...latest
  }, isSVGTag2, transformTemplate) {
    buildHTMLStyles(state, latest, transformTemplate);
    if (isSVGTag2) {
      if (state.style.viewBox) {
        state.attrs.viewBox = state.style.viewBox;
      }
      return;
    }
    state.attrs = state.style;
    state.style = {};
    const { attrs: attrs2, style, dimensions } = state;
    if (attrs2.transform) {
      if (dimensions)
        style.transform = attrs2.transform;
      delete attrs2.transform;
    }
    if (dimensions && (originX !== void 0 || originY !== void 0 || style.transform)) {
      style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== void 0 ? originX : 0.5, originY !== void 0 ? originY : 0.5);
    }
    if (attrX !== void 0)
      attrs2.x = attrX;
    if (attrY !== void 0)
      attrs2.y = attrY;
    if (attrScale !== void 0)
      attrs2.scale = attrScale;
    if (pathLength !== void 0) {
      buildSVGPath(attrs2, pathLength, pathSpacing, pathOffset, false);
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/create-render-state.mjs
  var createHtmlRenderState = () => ({
    style: {},
    transform: {},
    transformOrigin: {},
    vars: {}
  });

  // node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.mjs
  var createSvgRenderState = () => ({
    ...createHtmlRenderState(),
    attrs: {}
  });

  // node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.mjs
  var isSVGTag = (tag) => typeof tag === "string" && tag.toLowerCase() === "svg";

  // node_modules/framer-motion/dist/es/render/html/utils/render.mjs
  function renderHTML(element, { style, vars }, styleProp, projection) {
    Object.assign(element.style, style, projection && projection.getProjectionStyles(styleProp));
    for (const key in vars) {
      element.style.setProperty(key, vars[key]);
    }
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.mjs
  var camelCaseAttributes = /* @__PURE__ */ new Set([
    "baseFrequency",
    "diffuseConstant",
    "kernelMatrix",
    "kernelUnitLength",
    "keySplines",
    "keyTimes",
    "limitingConeAngle",
    "markerHeight",
    "markerWidth",
    "numOctaves",
    "targetX",
    "targetY",
    "surfaceScale",
    "specularConstant",
    "specularExponent",
    "stdDeviation",
    "tableValues",
    "viewBox",
    "gradientTransform",
    "pathLength",
    "startOffset",
    "textLength",
    "lengthAdjust"
  ]);

  // node_modules/framer-motion/dist/es/render/svg/utils/render.mjs
  function renderSVG(element, renderState, _styleProp, projection) {
    renderHTML(element, renderState, void 0, projection);
    for (const key in renderState.attrs) {
      element.setAttribute(!camelCaseAttributes.has(key) ? camelToDash(key) : key, renderState.attrs[key]);
    }
  }

  // node_modules/framer-motion/dist/es/projection/styles/scale-correction.mjs
  var scaleCorrectors = {};
  function addScaleCorrector(correctors) {
    Object.assign(scaleCorrectors, correctors);
  }

  // node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.mjs
  function isForcedMotionValue(key, { layout: layout2, layoutId }) {
    return transformProps.has(key) || key.startsWith("origin") || (layout2 || layoutId !== void 0) && (!!scaleCorrectors[key] || key === "opacity");
  }

  // node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps(props, prevProps, visualElement) {
    var _a;
    const { style } = props;
    const newValues = {};
    for (const key in style) {
      if (isMotionValue(style[key]) || prevProps.style && isMotionValue(prevProps.style[key]) || isForcedMotionValue(key, props) || ((_a = visualElement === null || visualElement === void 0 ? void 0 : visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.liveStyle) !== void 0) {
        newValues[key] = style[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.mjs
  function scrapeMotionValuesFromProps2(props, prevProps, visualElement) {
    const newValues = scrapeMotionValuesFromProps(props, prevProps, visualElement);
    for (const key in props) {
      if (isMotionValue(props[key]) || isMotionValue(prevProps[key])) {
        const targetKey = transformPropOrder.indexOf(key) !== -1 ? "attr" + key.charAt(0).toUpperCase() + key.substring(1) : key;
        newValues[targetKey] = props[key];
      }
    }
    return newValues;
  }

  // node_modules/framer-motion/dist/es/render/svg/config-motion.mjs
  function updateSVGDimensions(instance, renderState) {
    try {
      renderState.dimensions = typeof instance.getBBox === "function" ? instance.getBBox() : instance.getBoundingClientRect();
    } catch (e3) {
      renderState.dimensions = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };
    }
  }
  var layoutProps = ["x", "y", "width", "height", "cx", "cy", "r"];
  var svgMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps: scrapeMotionValuesFromProps2,
      createRenderState: createSvgRenderState,
      onUpdate: ({ props, prevProps, current, renderState, latestValues }) => {
        if (!current)
          return;
        let hasTransform2 = !!props.drag;
        if (!hasTransform2) {
          for (const key in latestValues) {
            if (transformProps.has(key)) {
              hasTransform2 = true;
              break;
            }
          }
        }
        if (!hasTransform2)
          return;
        let needsMeasure = !prevProps;
        if (prevProps) {
          for (let i3 = 0; i3 < layoutProps.length; i3++) {
            const key = layoutProps[i3];
            if (props[key] !== prevProps[key]) {
              needsMeasure = true;
            }
          }
        }
        if (!needsMeasure)
          return;
        frame.read(() => {
          updateSVGDimensions(current, renderState);
          frame.render(() => {
            buildSVGAttrs(renderState, latestValues, isSVGTag(current.tagName), props.transformTemplate);
            renderSVG(current, renderState);
          });
        });
      }
    })
  };

  // node_modules/framer-motion/dist/es/render/html/config-motion.mjs
  var htmlMotionConfig = {
    useVisualState: makeUseVisualState({
      scrapeMotionValuesFromProps,
      createRenderState: createHtmlRenderState
    })
  };

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  var import_react75 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/render/html/use-props.mjs
  var import_react73 = __toESM(require_react(), 1);
  function copyRawValuesOnly(target, source, props) {
    for (const key in source) {
      if (!isMotionValue(source[key]) && !isForcedMotionValue(key, props)) {
        target[key] = source[key];
      }
    }
  }
  function useInitialMotionValues({ transformTemplate }, visualState) {
    return (0, import_react73.useMemo)(() => {
      const state = createHtmlRenderState();
      buildHTMLStyles(state, visualState, transformTemplate);
      return Object.assign({}, state.vars, state.style);
    }, [visualState]);
  }
  function useStyle(props, visualState) {
    const styleProp = props.style || {};
    const style = {};
    copyRawValuesOnly(style, styleProp, props);
    Object.assign(style, useInitialMotionValues(props, visualState));
    return style;
  }
  function useHTMLProps(props, visualState) {
    const htmlProps = {};
    const style = useStyle(props, visualState);
    if (props.drag && props.dragListener !== false) {
      htmlProps.draggable = false;
      style.userSelect = style.WebkitUserSelect = style.WebkitTouchCallout = "none";
      style.touchAction = props.drag === true ? "none" : `pan-${props.drag === "x" ? "y" : "x"}`;
    }
    if (props.tabIndex === void 0 && (props.onTap || props.onTapStart || props.whileTap)) {
      htmlProps.tabIndex = 0;
    }
    htmlProps.style = style;
    return htmlProps;
  }

  // node_modules/framer-motion/dist/es/render/svg/use-props.mjs
  var import_react74 = __toESM(require_react(), 1);
  function useSVGProps(props, visualState, _isStatic, Component4) {
    const visualProps = (0, import_react74.useMemo)(() => {
      const state = createSvgRenderState();
      buildSVGAttrs(state, visualState, isSVGTag(Component4), props.transformTemplate);
      return {
        ...state.attrs,
        style: { ...state.style }
      };
    }, [visualState]);
    if (props.style) {
      const rawStyles = {};
      copyRawValuesOnly(rawStyles, props.style, props);
      visualProps.style = { ...rawStyles, ...visualProps.style };
    }
    return visualProps;
  }

  // node_modules/framer-motion/dist/es/render/dom/use-render.mjs
  function createUseRender(forwardMotionProps = false) {
    const useRender = (Component4, props, ref, { latestValues }, isStatic) => {
      const useVisualProps = isSVGComponent(Component4) ? useSVGProps : useHTMLProps;
      const visualProps = useVisualProps(props, latestValues, isStatic, Component4);
      const filteredProps = filterProps(props, typeof Component4 === "string", forwardMotionProps);
      const elementProps = Component4 !== import_react75.Fragment ? { ...filteredProps, ...visualProps, ref } : {};
      const { children } = props;
      const renderedChildren = (0, import_react75.useMemo)(() => isMotionValue(children) ? children.get() : children, [children]);
      return (0, import_react75.createElement)(Component4, {
        ...elementProps,
        children: renderedChildren
      });
    };
    return useRender;
  }

  // node_modules/framer-motion/dist/es/render/components/create-factory.mjs
  function createMotionComponentFactory(preloadedFeatures, createVisualElement) {
    return function createMotionComponent2(Component4, { forwardMotionProps } = { forwardMotionProps: false }) {
      const baseConfig = isSVGComponent(Component4) ? svgMotionConfig : htmlMotionConfig;
      const config2 = {
        ...baseConfig,
        preloadedFeatures,
        useRender: createUseRender(forwardMotionProps),
        createVisualElement,
        Component: Component4
      };
      return createRendererMotionComponent(config2);
    };
  }

  // node_modules/framer-motion/dist/es/utils/shallow-compare.mjs
  function shallowCompare(next3, prev2) {
    if (!Array.isArray(prev2))
      return false;
    const prevLength = prev2.length;
    if (prevLength !== next3.length)
      return false;
    for (let i3 = 0; i3 < prevLength; i3++) {
      if (prev2[i3] !== next3[i3])
        return false;
    }
    return true;
  }

  // node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.mjs
  function resolveVariant(visualElement, definition, custom) {
    const props = visualElement.getProps();
    return resolveVariantFromProps(props, definition, custom !== void 0 ? custom : props.custom, visualElement);
  }

  // node_modules/motion-dom/dist/es/utils/supports/scroll-timeline.mjs
  var supportsScrollTimeline = memo3(() => window.ScrollTimeline !== void 0);

  // node_modules/motion-dom/dist/es/animation/controls/BaseGroup.mjs
  var BaseGroupPlaybackControls = class {
    constructor(animations2) {
      this.stop = () => this.runAll("stop");
      this.animations = animations2.filter(Boolean);
    }
    get finished() {
      return Promise.all(this.animations.map((animation) => "finished" in animation ? animation.finished : animation));
    }
    /**
     * TODO: Filter out cancelled or stopped animations before returning
     */
    getAll(propName) {
      return this.animations[0][propName];
    }
    setAll(propName, newValue) {
      for (let i3 = 0; i3 < this.animations.length; i3++) {
        this.animations[i3][propName] = newValue;
      }
    }
    attachTimeline(timeline, fallback) {
      const subscriptions = this.animations.map((animation) => {
        if (supportsScrollTimeline() && animation.attachTimeline) {
          return animation.attachTimeline(timeline);
        } else if (typeof fallback === "function") {
          return fallback(animation);
        }
      });
      return () => {
        subscriptions.forEach((cancel, i3) => {
          cancel && cancel();
          this.animations[i3].stop();
        });
      };
    }
    get time() {
      return this.getAll("time");
    }
    set time(time2) {
      this.setAll("time", time2);
    }
    get speed() {
      return this.getAll("speed");
    }
    set speed(speed) {
      this.setAll("speed", speed);
    }
    get startTime() {
      return this.getAll("startTime");
    }
    get duration() {
      let max2 = 0;
      for (let i3 = 0; i3 < this.animations.length; i3++) {
        max2 = Math.max(max2, this.animations[i3].duration);
      }
      return max2;
    }
    runAll(methodName) {
      this.animations.forEach((controls) => controls[methodName]());
    }
    flatten() {
      this.runAll("flatten");
    }
    play() {
      this.runAll("play");
    }
    pause() {
      this.runAll("pause");
    }
    cancel() {
      this.runAll("cancel");
    }
    complete() {
      this.runAll("complete");
    }
  };

  // node_modules/motion-dom/dist/es/animation/controls/Group.mjs
  var GroupPlaybackControls = class extends BaseGroupPlaybackControls {
    then(onResolve, onReject) {
      return Promise.all(this.animations).then(onResolve).catch(onReject);
    }
  };

  // node_modules/motion-dom/dist/es/animation/utils/get-value-transition.mjs
  function getValueTransition(transition, key) {
    return transition ? transition[key] || transition["default"] || transition : void 0;
  }

  // node_modules/motion-dom/dist/es/animation/generators/utils/calc-duration.mjs
  var maxGeneratorDuration = 2e4;
  function calcGeneratorDuration(generator) {
    let duration = 0;
    const timeStep = 50;
    let state = generator.next(duration);
    while (!state.done && duration < maxGeneratorDuration) {
      duration += timeStep;
      state = generator.next(duration);
    }
    return duration >= maxGeneratorDuration ? Infinity : duration;
  }

  // node_modules/motion-dom/dist/es/animation/generators/utils/is-generator.mjs
  function isGenerator2(type) {
    return typeof type === "function";
  }

  // node_modules/motion-dom/dist/es/animation/waapi/utils/attach-timeline.mjs
  function attachTimeline(animation, timeline) {
    animation.timeline = timeline;
    animation.onfinish = null;
  }

  // node_modules/motion-dom/dist/es/utils/is-bezier-definition.mjs
  var isBezierDefinition = (easing) => Array.isArray(easing) && typeof easing[0] === "number";

  // node_modules/motion-dom/dist/es/utils/supports/flags.mjs
  var supportsFlags = {
    linearEasing: void 0
  };

  // node_modules/motion-dom/dist/es/utils/supports/memo.mjs
  function memoSupports(callback, supportsFlag) {
    const memoized = memo3(callback);
    return () => {
      var _a;
      return (_a = supportsFlags[supportsFlag]) !== null && _a !== void 0 ? _a : memoized();
    };
  }

  // node_modules/motion-dom/dist/es/utils/supports/linear-easing.mjs
  var supportsLinearEasing = /* @__PURE__ */ memoSupports(() => {
    try {
      document.createElement("div").animate({ opacity: 0 }, { easing: "linear(0, 1)" });
    } catch (e3) {
      return false;
    }
    return true;
  }, "linearEasing");

  // node_modules/motion-dom/dist/es/animation/waapi/utils/linear.mjs
  var generateLinearEasing = (easing, duration, resolution = 10) => {
    let points = "";
    const numPoints = Math.max(Math.round(duration / resolution), 2);
    for (let i3 = 0; i3 < numPoints; i3++) {
      points += easing(progress(0, numPoints - 1, i3)) + ", ";
    }
    return `linear(${points.substring(0, points.length - 2)})`;
  };

  // node_modules/motion-dom/dist/es/animation/waapi/utils/easing.mjs
  function isWaapiSupportedEasing(easing) {
    return Boolean(typeof easing === "function" && supportsLinearEasing() || !easing || typeof easing === "string" && (easing in supportedWaapiEasing || supportsLinearEasing()) || isBezierDefinition(easing) || Array.isArray(easing) && easing.every(isWaapiSupportedEasing));
  }
  var cubicBezierAsString = ([a2, b2, c6, d2]) => `cubic-bezier(${a2}, ${b2}, ${c6}, ${d2})`;
  var supportedWaapiEasing = {
    linear: "linear",
    ease: "ease",
    easeIn: "ease-in",
    easeOut: "ease-out",
    easeInOut: "ease-in-out",
    circIn: /* @__PURE__ */ cubicBezierAsString([0, 0.65, 0.55, 1]),
    circOut: /* @__PURE__ */ cubicBezierAsString([0.55, 0, 1, 0.45]),
    backIn: /* @__PURE__ */ cubicBezierAsString([0.31, 0.01, 0.66, -0.59]),
    backOut: /* @__PURE__ */ cubicBezierAsString([0.33, 1.53, 0.69, 0.99])
  };
  function mapEasingToNativeEasing(easing, duration) {
    if (!easing) {
      return void 0;
    } else if (typeof easing === "function" && supportsLinearEasing()) {
      return generateLinearEasing(easing, duration);
    } else if (isBezierDefinition(easing)) {
      return cubicBezierAsString(easing);
    } else if (Array.isArray(easing)) {
      return easing.map((segmentEasing) => mapEasingToNativeEasing(segmentEasing, duration) || supportedWaapiEasing.easeOut);
    } else {
      return supportedWaapiEasing[easing];
    }
  }

  // node_modules/motion-dom/dist/es/gestures/drag/state/is-active.mjs
  var isDragging = {
    x: false,
    y: false
  };
  function isDragActive() {
    return isDragging.x || isDragging.y;
  }

  // node_modules/motion-dom/dist/es/utils/resolve-elements.mjs
  function resolveElements(elementOrSelector, scope, selectorCache) {
    var _a;
    if (elementOrSelector instanceof Element) {
      return [elementOrSelector];
    } else if (typeof elementOrSelector === "string") {
      let root = document;
      if (scope) {
        root = scope.current;
      }
      const elements2 = (_a = selectorCache === null || selectorCache === void 0 ? void 0 : selectorCache[elementOrSelector]) !== null && _a !== void 0 ? _a : root.querySelectorAll(elementOrSelector);
      return elements2 ? Array.from(elements2) : [];
    }
    return Array.from(elementOrSelector);
  }

  // node_modules/motion-dom/dist/es/gestures/utils/setup.mjs
  function setupGesture(elementOrSelector, options) {
    const elements2 = resolveElements(elementOrSelector);
    const gestureAbortController = new AbortController();
    const eventOptions = {
      passive: true,
      ...options,
      signal: gestureAbortController.signal
    };
    const cancel = () => gestureAbortController.abort();
    return [elements2, eventOptions, cancel];
  }

  // node_modules/motion-dom/dist/es/gestures/hover.mjs
  function filterEvents(callback) {
    return (event) => {
      if (event.pointerType === "touch" || isDragActive())
        return;
      callback(event);
    };
  }
  function hover(elementOrSelector, onHoverStart, options = {}) {
    const [elements2, eventOptions, cancel] = setupGesture(elementOrSelector, options);
    const onPointerEnter = filterEvents((enterEvent) => {
      const { target } = enterEvent;
      const onHoverEnd = onHoverStart(enterEvent);
      if (typeof onHoverEnd !== "function" || !target)
        return;
      const onPointerLeave = filterEvents((leaveEvent) => {
        onHoverEnd(leaveEvent);
        target.removeEventListener("pointerleave", onPointerLeave);
      });
      target.addEventListener("pointerleave", onPointerLeave, eventOptions);
    });
    elements2.forEach((element) => {
      element.addEventListener("pointerenter", onPointerEnter, eventOptions);
    });
    return cancel;
  }

  // node_modules/motion-dom/dist/es/gestures/utils/is-node-or-child.mjs
  var isNodeOrChild = (parent, child) => {
    if (!child) {
      return false;
    } else if (parent === child) {
      return true;
    } else {
      return isNodeOrChild(parent, child.parentElement);
    }
  };

  // node_modules/motion-dom/dist/es/gestures/utils/is-primary-pointer.mjs
  var isPrimaryPointer = (event) => {
    if (event.pointerType === "mouse") {
      return typeof event.button !== "number" || event.button <= 0;
    } else {
      return event.isPrimary !== false;
    }
  };

  // node_modules/motion-dom/dist/es/gestures/press/utils/is-keyboard-accessible.mjs
  var focusableElements = /* @__PURE__ */ new Set([
    "BUTTON",
    "INPUT",
    "SELECT",
    "TEXTAREA",
    "A"
  ]);
  function isElementKeyboardAccessible(element) {
    return focusableElements.has(element.tagName) || element.tabIndex !== -1;
  }

  // node_modules/motion-dom/dist/es/gestures/press/utils/state.mjs
  var isPressing = /* @__PURE__ */ new WeakSet();

  // node_modules/motion-dom/dist/es/gestures/press/utils/keyboard.mjs
  function filterEvents2(callback) {
    return (event) => {
      if (event.key !== "Enter")
        return;
      callback(event);
    };
  }
  function firePointerEvent(target, type) {
    target.dispatchEvent(new PointerEvent("pointer" + type, { isPrimary: true, bubbles: true }));
  }
  var enableKeyboardPress = (focusEvent, eventOptions) => {
    const element = focusEvent.currentTarget;
    if (!element)
      return;
    const handleKeydown = filterEvents2(() => {
      if (isPressing.has(element))
        return;
      firePointerEvent(element, "down");
      const handleKeyup = filterEvents2(() => {
        firePointerEvent(element, "up");
      });
      const handleBlur = () => firePointerEvent(element, "cancel");
      element.addEventListener("keyup", handleKeyup, eventOptions);
      element.addEventListener("blur", handleBlur, eventOptions);
    });
    element.addEventListener("keydown", handleKeydown, eventOptions);
    element.addEventListener("blur", () => element.removeEventListener("keydown", handleKeydown), eventOptions);
  };

  // node_modules/motion-dom/dist/es/gestures/press/index.mjs
  function isValidPressEvent(event) {
    return isPrimaryPointer(event) && !isDragActive();
  }
  function press(elementOrSelector, onPressStart, options = {}) {
    const [elements2, eventOptions, cancelEvents] = setupGesture(elementOrSelector, options);
    const startPress = (startEvent) => {
      const element = startEvent.currentTarget;
      if (!isValidPressEvent(startEvent) || isPressing.has(element))
        return;
      isPressing.add(element);
      const onPressEnd = onPressStart(startEvent);
      const onPointerEnd = (endEvent, success) => {
        window.removeEventListener("pointerup", onPointerUp);
        window.removeEventListener("pointercancel", onPointerCancel);
        if (!isValidPressEvent(endEvent) || !isPressing.has(element)) {
          return;
        }
        isPressing.delete(element);
        if (typeof onPressEnd === "function") {
          onPressEnd(endEvent, { success });
        }
      };
      const onPointerUp = (upEvent) => {
        onPointerEnd(upEvent, options.useGlobalTarget || isNodeOrChild(element, upEvent.target));
      };
      const onPointerCancel = (cancelEvent) => {
        onPointerEnd(cancelEvent, false);
      };
      window.addEventListener("pointerup", onPointerUp, eventOptions);
      window.addEventListener("pointercancel", onPointerCancel, eventOptions);
    };
    elements2.forEach((element) => {
      if (!isElementKeyboardAccessible(element) && element.getAttribute("tabindex") === null) {
        element.tabIndex = 0;
      }
      const target = options.useGlobalTarget ? window : element;
      target.addEventListener("pointerdown", startPress, eventOptions);
      element.addEventListener("focus", (event) => enableKeyboardPress(event, eventOptions), eventOptions);
    });
    return cancelEvents;
  }

  // node_modules/motion-dom/dist/es/gestures/drag/state/set-active.mjs
  function setDragLock(axis) {
    if (axis === "x" || axis === "y") {
      if (isDragging[axis]) {
        return null;
      } else {
        isDragging[axis] = true;
        return () => {
          isDragging[axis] = false;
        };
      }
    } else {
      if (isDragging.x || isDragging.y) {
        return null;
      } else {
        isDragging.x = isDragging.y = true;
        return () => {
          isDragging.x = isDragging.y = false;
        };
      }
    }
  }

  // node_modules/framer-motion/dist/es/render/html/utils/keys-position.mjs
  var positionalKeys = /* @__PURE__ */ new Set([
    "width",
    "height",
    "top",
    "left",
    "right",
    "bottom",
    ...transformPropOrder
  ]);

  // node_modules/framer-motion/dist/es/frameloop/sync-time.mjs
  var now;
  function clearTime() {
    now = void 0;
  }
  var time = {
    now: () => {
      if (now === void 0) {
        time.set(frameData.isProcessing || MotionGlobalConfig.useManualTiming ? frameData.timestamp : performance.now());
      }
      return now;
    },
    set: (newTime) => {
      now = newTime;
      queueMicrotask(clearTime);
    }
  };

  // node_modules/framer-motion/dist/es/utils/array.mjs
  function addUniqueItem(arr, item) {
    if (arr.indexOf(item) === -1)
      arr.push(item);
  }
  function removeItem(arr, item) {
    const index2 = arr.indexOf(item);
    if (index2 > -1)
      arr.splice(index2, 1);
  }

  // node_modules/framer-motion/dist/es/utils/subscription-manager.mjs
  var SubscriptionManager = class {
    constructor() {
      this.subscriptions = [];
    }
    add(handler) {
      addUniqueItem(this.subscriptions, handler);
      return () => removeItem(this.subscriptions, handler);
    }
    notify(a2, b2, c6) {
      const numSubscriptions = this.subscriptions.length;
      if (!numSubscriptions)
        return;
      if (numSubscriptions === 1) {
        this.subscriptions[0](a2, b2, c6);
      } else {
        for (let i3 = 0; i3 < numSubscriptions; i3++) {
          const handler = this.subscriptions[i3];
          handler && handler(a2, b2, c6);
        }
      }
    }
    getSize() {
      return this.subscriptions.length;
    }
    clear() {
      this.subscriptions.length = 0;
    }
  };

  // node_modules/framer-motion/dist/es/utils/velocity-per-second.mjs
  function velocityPerSecond(velocity, frameDuration) {
    return frameDuration ? velocity * (1e3 / frameDuration) : 0;
  }

  // node_modules/framer-motion/dist/es/value/index.mjs
  var MAX_VELOCITY_DELTA = 30;
  var isFloat = (value) => {
    return !isNaN(parseFloat(value));
  };
  var collectMotionValues = {
    current: void 0
  };
  var MotionValue = class {
    /**
     * @param init - The initiating value
     * @param config - Optional configuration options
     *
     * -  `transformer`: A function to transform incoming values with.
     *
     * @internal
     */
    constructor(init2, options = {}) {
      this.version = "11.18.2";
      this.canTrackVelocity = null;
      this.events = {};
      this.updateAndNotify = (v2, render2 = true) => {
        const currentTime = time.now();
        if (this.updatedAt !== currentTime) {
          this.setPrevFrameValue();
        }
        this.prev = this.current;
        this.setCurrent(v2);
        if (this.current !== this.prev && this.events.change) {
          this.events.change.notify(this.current);
        }
        if (render2 && this.events.renderRequest) {
          this.events.renderRequest.notify(this.current);
        }
      };
      this.hasAnimated = false;
      this.setCurrent(init2);
      this.owner = options.owner;
    }
    setCurrent(current) {
      this.current = current;
      this.updatedAt = time.now();
      if (this.canTrackVelocity === null && current !== void 0) {
        this.canTrackVelocity = isFloat(this.current);
      }
    }
    setPrevFrameValue(prevFrameValue = this.current) {
      this.prevFrameValue = prevFrameValue;
      this.prevUpdatedAt = this.updatedAt;
    }
    /**
     * Adds a function that will be notified when the `MotionValue` is updated.
     *
     * It returns a function that, when called, will cancel the subscription.
     *
     * When calling `onChange` inside a React component, it should be wrapped with the
     * `useEffect` hook. As it returns an unsubscribe function, this should be returned
     * from the `useEffect` function to ensure you don't add duplicate subscribers..
     *
     * ```jsx
     * export const MyComponent = () => {
     *   const x = useMotionValue(0)
     *   const y = useMotionValue(0)
     *   const opacity = useMotionValue(1)
     *
     *   useEffect(() => {
     *     function updateOpacity() {
     *       const maxXY = Math.max(x.get(), y.get())
     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])
     *       opacity.set(newOpacity)
     *     }
     *
     *     const unsubscribeX = x.on("change", updateOpacity)
     *     const unsubscribeY = y.on("change", updateOpacity)
     *
     *     return () => {
     *       unsubscribeX()
     *       unsubscribeY()
     *     }
     *   }, [])
     *
     *   return <motion.div style={{ x }} />
     * }
     * ```
     *
     * @param subscriber - A function that receives the latest value.
     * @returns A function that, when called, will cancel this subscription.
     *
     * @deprecated
     */
    onChange(subscription) {
      if (true) {
        warnOnce(false, `value.onChange(callback) is deprecated. Switch to value.on("change", callback).`);
      }
      return this.on("change", subscription);
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      const unsubscribe = this.events[eventName].add(callback);
      if (eventName === "change") {
        return () => {
          unsubscribe();
          frame.read(() => {
            if (!this.events.change.getSize()) {
              this.stop();
            }
          });
        };
      }
      return unsubscribe;
    }
    clearListeners() {
      for (const eventManagers in this.events) {
        this.events[eventManagers].clear();
      }
    }
    /**
     * Attaches a passive effect to the `MotionValue`.
     *
     * @internal
     */
    attach(passiveEffect, stopPassiveEffect) {
      this.passiveEffect = passiveEffect;
      this.stopPassiveEffect = stopPassiveEffect;
    }
    /**
     * Sets the state of the `MotionValue`.
     *
     * @remarks
     *
     * ```jsx
     * const x = useMotionValue(0)
     * x.set(10)
     * ```
     *
     * @param latest - Latest value to set.
     * @param render - Whether to notify render subscribers. Defaults to `true`
     *
     * @public
     */
    set(v2, render2 = true) {
      if (!render2 || !this.passiveEffect) {
        this.updateAndNotify(v2, render2);
      } else {
        this.passiveEffect(v2, this.updateAndNotify);
      }
    }
    setWithVelocity(prev2, current, delta) {
      this.set(current);
      this.prev = void 0;
      this.prevFrameValue = prev2;
      this.prevUpdatedAt = this.updatedAt - delta;
    }
    /**
     * Set the state of the `MotionValue`, stopping any active animations,
     * effects, and resets velocity to `0`.
     */
    jump(v2, endAnimation = true) {
      this.updateAndNotify(v2);
      this.prev = v2;
      this.prevUpdatedAt = this.prevFrameValue = void 0;
      endAnimation && this.stop();
      if (this.stopPassiveEffect)
        this.stopPassiveEffect();
    }
    /**
     * Returns the latest state of `MotionValue`
     *
     * @returns - The latest state of `MotionValue`
     *
     * @public
     */
    get() {
      if (collectMotionValues.current) {
        collectMotionValues.current.push(this);
      }
      return this.current;
    }
    /**
     * @public
     */
    getPrevious() {
      return this.prev;
    }
    /**
     * Returns the latest velocity of `MotionValue`
     *
     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.
     *
     * @public
     */
    getVelocity() {
      const currentTime = time.now();
      if (!this.canTrackVelocity || this.prevFrameValue === void 0 || currentTime - this.updatedAt > MAX_VELOCITY_DELTA) {
        return 0;
      }
      const delta = Math.min(this.updatedAt - this.prevUpdatedAt, MAX_VELOCITY_DELTA);
      return velocityPerSecond(parseFloat(this.current) - parseFloat(this.prevFrameValue), delta);
    }
    /**
     * Registers a new animation to control this `MotionValue`. Only one
     * animation can drive a `MotionValue` at one time.
     *
     * ```jsx
     * value.start()
     * ```
     *
     * @param animation - A function that starts the provided animation
     *
     * @internal
     */
    start(startAnimation) {
      this.stop();
      return new Promise((resolve) => {
        this.hasAnimated = true;
        this.animation = startAnimation(resolve);
        if (this.events.animationStart) {
          this.events.animationStart.notify();
        }
      }).then(() => {
        if (this.events.animationComplete) {
          this.events.animationComplete.notify();
        }
        this.clearAnimation();
      });
    }
    /**
     * Stop the currently active animation.
     *
     * @public
     */
    stop() {
      if (this.animation) {
        this.animation.stop();
        if (this.events.animationCancel) {
          this.events.animationCancel.notify();
        }
      }
      this.clearAnimation();
    }
    /**
     * Returns `true` if this value is currently animating.
     *
     * @public
     */
    isAnimating() {
      return !!this.animation;
    }
    clearAnimation() {
      delete this.animation;
    }
    /**
     * Destroy and clean up subscribers to this `MotionValue`.
     *
     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically
     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually
     * created a `MotionValue` via the `motionValue` function.
     *
     * @public
     */
    destroy() {
      this.clearListeners();
      this.stop();
      if (this.stopPassiveEffect) {
        this.stopPassiveEffect();
      }
    }
  };
  function motionValue(init2, options) {
    return new MotionValue(init2, options);
  }

  // node_modules/framer-motion/dist/es/render/utils/setters.mjs
  function setMotionValue(visualElement, key, value) {
    if (visualElement.hasValue(key)) {
      visualElement.getValue(key).set(value);
    } else {
      visualElement.addValue(key, motionValue(value));
    }
  }
  function setTarget(visualElement, definition) {
    const resolved = resolveVariant(visualElement, definition);
    let { transitionEnd = {}, transition = {}, ...target } = resolved || {};
    target = { ...target, ...transitionEnd };
    for (const key in target) {
      const value = resolveFinalValueInKeyframes(target[key]);
      setMotionValue(visualElement, key, value);
    }
  }

  // node_modules/framer-motion/dist/es/value/use-will-change/is.mjs
  function isWillChangeMotionValue(value) {
    return Boolean(isMotionValue(value) && value.add);
  }

  // node_modules/framer-motion/dist/es/value/use-will-change/add-will-change.mjs
  function addValueToWillChange(visualElement, key) {
    const willChange = visualElement.getValue("willChange");
    if (isWillChangeMotionValue(willChange)) {
      return willChange.add(key);
    }
  }

  // node_modules/framer-motion/dist/es/animation/optimized-appear/get-appear-id.mjs
  function getOptimisedAppearId(visualElement) {
    return visualElement.props[optimizedAppearDataAttribute];
  }

  // node_modules/framer-motion/dist/es/utils/use-instant-transition-state.mjs
  var instantAnimationState = {
    current: false
  };

  // node_modules/framer-motion/dist/es/easing/cubic-bezier.mjs
  var calcBezier = (t4, a1, a2) => (((1 - 3 * a2 + 3 * a1) * t4 + (3 * a2 - 6 * a1)) * t4 + 3 * a1) * t4;
  var subdivisionPrecision = 1e-7;
  var subdivisionMaxIterations = 12;
  function binarySubdivide(x2, lowerBound, upperBound, mX1, mX2) {
    let currentX;
    let currentT;
    let i3 = 0;
    do {
      currentT = lowerBound + (upperBound - lowerBound) / 2;
      currentX = calcBezier(currentT, mX1, mX2) - x2;
      if (currentX > 0) {
        upperBound = currentT;
      } else {
        lowerBound = currentT;
      }
    } while (Math.abs(currentX) > subdivisionPrecision && ++i3 < subdivisionMaxIterations);
    return currentT;
  }
  function cubicBezier(mX1, mY1, mX2, mY2) {
    if (mX1 === mY1 && mX2 === mY2)
      return noop3;
    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);
    return (t4) => t4 === 0 || t4 === 1 ? t4 : calcBezier(getTForX(t4), mY1, mY2);
  }

  // node_modules/framer-motion/dist/es/easing/modifiers/mirror.mjs
  var mirrorEasing = (easing) => (p2) => p2 <= 0.5 ? easing(2 * p2) / 2 : (2 - easing(2 * (1 - p2))) / 2;

  // node_modules/framer-motion/dist/es/easing/modifiers/reverse.mjs
  var reverseEasing = (easing) => (p2) => 1 - easing(1 - p2);

  // node_modules/framer-motion/dist/es/easing/back.mjs
  var backOut = /* @__PURE__ */ cubicBezier(0.33, 1.53, 0.69, 0.99);
  var backIn = /* @__PURE__ */ reverseEasing(backOut);
  var backInOut = /* @__PURE__ */ mirrorEasing(backIn);

  // node_modules/framer-motion/dist/es/easing/anticipate.mjs
  var anticipate = (p2) => (p2 *= 2) < 1 ? 0.5 * backIn(p2) : 0.5 * (2 - Math.pow(2, -10 * (p2 - 1)));

  // node_modules/framer-motion/dist/es/easing/circ.mjs
  var circIn = (p2) => 1 - Math.sin(Math.acos(p2));
  var circOut = reverseEasing(circIn);
  var circInOut = mirrorEasing(circIn);

  // node_modules/framer-motion/dist/es/utils/is-zero-value-string.mjs
  var isZeroValueString = (v2) => /^0[^.\s]+$/u.test(v2);

  // node_modules/framer-motion/dist/es/animation/utils/is-none.mjs
  function isNone(value) {
    if (typeof value === "number") {
      return value === 0;
    } else if (value !== null) {
      return value === "none" || value === "0" || isZeroValueString(value);
    } else {
      return true;
    }
  }

  // node_modules/framer-motion/dist/es/value/types/utils/sanitize.mjs
  var sanitize = (v2) => Math.round(v2 * 1e5) / 1e5;

  // node_modules/framer-motion/dist/es/value/types/utils/float-regex.mjs
  var floatRegex = /-?(?:\d+(?:\.\d+)?|\.\d+)/gu;

  // node_modules/framer-motion/dist/es/value/types/utils/is-nullish.mjs
  function isNullish(v2) {
    return v2 == null;
  }

  // node_modules/framer-motion/dist/es/value/types/utils/single-color-regex.mjs
  var singleColorRegex = /^(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))$/iu;

  // node_modules/framer-motion/dist/es/value/types/color/utils.mjs
  var isColorString = (type, testProp) => (v2) => {
    return Boolean(typeof v2 === "string" && singleColorRegex.test(v2) && v2.startsWith(type) || testProp && !isNullish(v2) && Object.prototype.hasOwnProperty.call(v2, testProp));
  };
  var splitColor = (aName, bName, cName) => (v2) => {
    if (typeof v2 !== "string")
      return v2;
    const [a2, b2, c6, alpha2] = v2.match(floatRegex);
    return {
      [aName]: parseFloat(a2),
      [bName]: parseFloat(b2),
      [cName]: parseFloat(c6),
      alpha: alpha2 !== void 0 ? parseFloat(alpha2) : 1
    };
  };

  // node_modules/framer-motion/dist/es/value/types/color/rgba.mjs
  var clampRgbUnit = (v2) => clamp2(0, 255, v2);
  var rgbUnit = {
    ...number,
    transform: (v2) => Math.round(clampRgbUnit(v2))
  };
  var rgba = {
    test: /* @__PURE__ */ isColorString("rgb", "red"),
    parse: /* @__PURE__ */ splitColor("red", "green", "blue"),
    transform: ({ red, green, blue, alpha: alpha$1 = 1 }) => "rgba(" + rgbUnit.transform(red) + ", " + rgbUnit.transform(green) + ", " + rgbUnit.transform(blue) + ", " + sanitize(alpha.transform(alpha$1)) + ")"
  };

  // node_modules/framer-motion/dist/es/value/types/color/hex.mjs
  function parseHex(v2) {
    let r4 = "";
    let g2 = "";
    let b2 = "";
    let a2 = "";
    if (v2.length > 5) {
      r4 = v2.substring(1, 3);
      g2 = v2.substring(3, 5);
      b2 = v2.substring(5, 7);
      a2 = v2.substring(7, 9);
    } else {
      r4 = v2.substring(1, 2);
      g2 = v2.substring(2, 3);
      b2 = v2.substring(3, 4);
      a2 = v2.substring(4, 5);
      r4 += r4;
      g2 += g2;
      b2 += b2;
      a2 += a2;
    }
    return {
      red: parseInt(r4, 16),
      green: parseInt(g2, 16),
      blue: parseInt(b2, 16),
      alpha: a2 ? parseInt(a2, 16) / 255 : 1
    };
  }
  var hex = {
    test: /* @__PURE__ */ isColorString("#"),
    parse: parseHex,
    transform: rgba.transform
  };

  // node_modules/framer-motion/dist/es/value/types/color/hsla.mjs
  var hsla = {
    test: /* @__PURE__ */ isColorString("hsl", "hue"),
    parse: /* @__PURE__ */ splitColor("hue", "saturation", "lightness"),
    transform: ({ hue, saturation, lightness, alpha: alpha$1 = 1 }) => {
      return "hsla(" + Math.round(hue) + ", " + percent.transform(sanitize(saturation)) + ", " + percent.transform(sanitize(lightness)) + ", " + sanitize(alpha.transform(alpha$1)) + ")";
    }
  };

  // node_modules/framer-motion/dist/es/value/types/color/index.mjs
  var color = {
    test: (v2) => rgba.test(v2) || hex.test(v2) || hsla.test(v2),
    parse: (v2) => {
      if (rgba.test(v2)) {
        return rgba.parse(v2);
      } else if (hsla.test(v2)) {
        return hsla.parse(v2);
      } else {
        return hex.parse(v2);
      }
    },
    transform: (v2) => {
      return typeof v2 === "string" ? v2 : v2.hasOwnProperty("red") ? rgba.transform(v2) : hsla.transform(v2);
    }
  };

  // node_modules/framer-motion/dist/es/value/types/utils/color-regex.mjs
  var colorRegex = /(?:#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\))/giu;

  // node_modules/framer-motion/dist/es/value/types/complex/index.mjs
  function test(v2) {
    var _a, _b;
    return isNaN(v2) && typeof v2 === "string" && (((_a = v2.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v2.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;
  }
  var NUMBER_TOKEN = "number";
  var COLOR_TOKEN = "color";
  var VAR_TOKEN = "var";
  var VAR_FUNCTION_TOKEN = "var(";
  var SPLIT_TOKEN = "${}";
  var complexRegex = /var\s*\(\s*--(?:[\w-]+\s*|[\w-]+\s*,(?:\s*[^)(\s]|\s*\((?:[^)(]|\([^)(]*\))*\))+\s*)\)|#[\da-f]{3,8}|(?:rgb|hsl)a?\((?:-?[\d.]+%?[,\s]+){2}-?[\d.]+%?\s*(?:[,/]\s*)?(?:\b\d+(?:\.\d+)?|\.\d+)?%?\)|-?(?:\d+(?:\.\d+)?|\.\d+)/giu;
  function analyseComplexValue(value) {
    const originalValue = value.toString();
    const values = [];
    const indexes = {
      color: [],
      number: [],
      var: []
    };
    const types = [];
    let i3 = 0;
    const tokenised = originalValue.replace(complexRegex, (parsedValue) => {
      if (color.test(parsedValue)) {
        indexes.color.push(i3);
        types.push(COLOR_TOKEN);
        values.push(color.parse(parsedValue));
      } else if (parsedValue.startsWith(VAR_FUNCTION_TOKEN)) {
        indexes.var.push(i3);
        types.push(VAR_TOKEN);
        values.push(parsedValue);
      } else {
        indexes.number.push(i3);
        types.push(NUMBER_TOKEN);
        values.push(parseFloat(parsedValue));
      }
      ++i3;
      return SPLIT_TOKEN;
    });
    const split2 = tokenised.split(SPLIT_TOKEN);
    return { values, split: split2, indexes, types };
  }
  function parseComplexValue(v2) {
    return analyseComplexValue(v2).values;
  }
  function createTransformer(source) {
    const { split: split2, types } = analyseComplexValue(source);
    const numSections = split2.length;
    return (v2) => {
      let output2 = "";
      for (let i3 = 0; i3 < numSections; i3++) {
        output2 += split2[i3];
        if (v2[i3] !== void 0) {
          const type = types[i3];
          if (type === NUMBER_TOKEN) {
            output2 += sanitize(v2[i3]);
          } else if (type === COLOR_TOKEN) {
            output2 += color.transform(v2[i3]);
          } else {
            output2 += v2[i3];
          }
        }
      }
      return output2;
    };
  }
  var convertNumbersToZero = (v2) => typeof v2 === "number" ? 0 : v2;
  function getAnimatableNone(v2) {
    const parsed = parseComplexValue(v2);
    const transformer = createTransformer(v2);
    return transformer(parsed.map(convertNumbersToZero));
  }
  var complex = {
    test,
    parse: parseComplexValue,
    createTransformer,
    getAnimatableNone
  };

  // node_modules/framer-motion/dist/es/value/types/complex/filter.mjs
  var maxDefaults = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
  function applyDefaultFilter(v2) {
    const [name, value] = v2.slice(0, -1).split("(");
    if (name === "drop-shadow")
      return v2;
    const [number2] = value.match(floatRegex) || [];
    if (!number2)
      return v2;
    const unit = value.replace(number2, "");
    let defaultValue2 = maxDefaults.has(name) ? 1 : 0;
    if (number2 !== value)
      defaultValue2 *= 100;
    return name + "(" + defaultValue2 + unit + ")";
  }
  var functionRegex = /\b([a-z-]*)\(.*?\)/gu;
  var filter = {
    ...complex,
    getAnimatableNone: (v2) => {
      const functions = v2.match(functionRegex);
      return functions ? functions.map(applyDefaultFilter).join(" ") : v2;
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/defaults.mjs
  var defaultValueTypes = {
    ...numberValueTypes,
    // Color props
    color,
    backgroundColor: color,
    outlineColor: color,
    fill: color,
    stroke: color,
    // Border props
    borderColor: color,
    borderTopColor: color,
    borderRightColor: color,
    borderBottomColor: color,
    borderLeftColor: color,
    filter,
    WebkitFilter: filter
  };
  var getDefaultValueType = (key) => defaultValueTypes[key];

  // node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.mjs
  function getAnimatableNone2(key, value) {
    let defaultValueType = getDefaultValueType(key);
    if (defaultValueType !== filter)
      defaultValueType = complex;
    return defaultValueType.getAnimatableNone ? defaultValueType.getAnimatableNone(value) : void 0;
  }

  // node_modules/framer-motion/dist/es/render/html/utils/make-none-animatable.mjs
  var invalidTemplates = /* @__PURE__ */ new Set(["auto", "none", "0"]);
  function makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name) {
    let i3 = 0;
    let animatableTemplate = void 0;
    while (i3 < unresolvedKeyframes.length && !animatableTemplate) {
      const keyframe = unresolvedKeyframes[i3];
      if (typeof keyframe === "string" && !invalidTemplates.has(keyframe) && analyseComplexValue(keyframe).values.length) {
        animatableTemplate = unresolvedKeyframes[i3];
      }
      i3++;
    }
    if (animatableTemplate && name) {
      for (const noneIndex of noneKeyframeIndexes) {
        unresolvedKeyframes[noneIndex] = getAnimatableNone2(name, animatableTemplate);
      }
    }
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.mjs
  var isNumOrPxType = (v2) => v2 === number || v2 === px;
  var getPosFromMatrix = (matrix, pos) => parseFloat(matrix.split(", ")[pos]);
  var getTranslateFromMatrix = (pos2, pos3) => (_bbox, { transform }) => {
    if (transform === "none" || !transform)
      return 0;
    const matrix3d = transform.match(/^matrix3d\((.+)\)$/u);
    if (matrix3d) {
      return getPosFromMatrix(matrix3d[1], pos3);
    } else {
      const matrix = transform.match(/^matrix\((.+)\)$/u);
      if (matrix) {
        return getPosFromMatrix(matrix[1], pos2);
      } else {
        return 0;
      }
    }
  };
  var transformKeys = /* @__PURE__ */ new Set(["x", "y", "z"]);
  var nonTranslationalTransformKeys = transformPropOrder.filter((key) => !transformKeys.has(key));
  function removeNonTranslationalTransform(visualElement) {
    const removedTransforms = [];
    nonTranslationalTransformKeys.forEach((key) => {
      const value = visualElement.getValue(key);
      if (value !== void 0) {
        removedTransforms.push([key, value.get()]);
        value.set(key.startsWith("scale") ? 1 : 0);
      }
    });
    return removedTransforms;
  }
  var positionalValues = {
    // Dimensions
    width: ({ x: x2 }, { paddingLeft = "0", paddingRight = "0" }) => x2.max - x2.min - parseFloat(paddingLeft) - parseFloat(paddingRight),
    height: ({ y: y2 }, { paddingTop = "0", paddingBottom = "0" }) => y2.max - y2.min - parseFloat(paddingTop) - parseFloat(paddingBottom),
    top: (_bbox, { top }) => parseFloat(top),
    left: (_bbox, { left }) => parseFloat(left),
    bottom: ({ y: y2 }, { top }) => parseFloat(top) + (y2.max - y2.min),
    right: ({ x: x2 }, { left }) => parseFloat(left) + (x2.max - x2.min),
    // Transform
    x: getTranslateFromMatrix(4, 13),
    y: getTranslateFromMatrix(5, 14)
  };
  positionalValues.translateX = positionalValues.x;
  positionalValues.translateY = positionalValues.y;

  // node_modules/framer-motion/dist/es/render/utils/KeyframesResolver.mjs
  var toResolve = /* @__PURE__ */ new Set();
  var isScheduled = false;
  var anyNeedsMeasurement = false;
  function measureAllKeyframes() {
    if (anyNeedsMeasurement) {
      const resolversToMeasure = Array.from(toResolve).filter((resolver) => resolver.needsMeasurement);
      const elementsToMeasure = new Set(resolversToMeasure.map((resolver) => resolver.element));
      const transformsToRestore = /* @__PURE__ */ new Map();
      elementsToMeasure.forEach((element) => {
        const removedTransforms = removeNonTranslationalTransform(element);
        if (!removedTransforms.length)
          return;
        transformsToRestore.set(element, removedTransforms);
        element.render();
      });
      resolversToMeasure.forEach((resolver) => resolver.measureInitialState());
      elementsToMeasure.forEach((element) => {
        element.render();
        const restore = transformsToRestore.get(element);
        if (restore) {
          restore.forEach(([key, value]) => {
            var _a;
            (_a = element.getValue(key)) === null || _a === void 0 ? void 0 : _a.set(value);
          });
        }
      });
      resolversToMeasure.forEach((resolver) => resolver.measureEndState());
      resolversToMeasure.forEach((resolver) => {
        if (resolver.suspendedScrollY !== void 0) {
          window.scrollTo(0, resolver.suspendedScrollY);
        }
      });
    }
    anyNeedsMeasurement = false;
    isScheduled = false;
    toResolve.forEach((resolver) => resolver.complete());
    toResolve.clear();
  }
  function readAllKeyframes() {
    toResolve.forEach((resolver) => {
      resolver.readKeyframes();
      if (resolver.needsMeasurement) {
        anyNeedsMeasurement = true;
      }
    });
  }
  function flushKeyframeResolvers() {
    readAllKeyframes();
    measureAllKeyframes();
  }
  var KeyframeResolver = class {
    constructor(unresolvedKeyframes, onComplete, name, motionValue2, element, isAsync = false) {
      this.isComplete = false;
      this.isAsync = false;
      this.needsMeasurement = false;
      this.isScheduled = false;
      this.unresolvedKeyframes = [...unresolvedKeyframes];
      this.onComplete = onComplete;
      this.name = name;
      this.motionValue = motionValue2;
      this.element = element;
      this.isAsync = isAsync;
    }
    scheduleResolve() {
      this.isScheduled = true;
      if (this.isAsync) {
        toResolve.add(this);
        if (!isScheduled) {
          isScheduled = true;
          frame.read(readAllKeyframes);
          frame.resolveKeyframes(measureAllKeyframes);
        }
      } else {
        this.readKeyframes();
        this.complete();
      }
    }
    readKeyframes() {
      const { unresolvedKeyframes, name, element, motionValue: motionValue2 } = this;
      for (let i3 = 0; i3 < unresolvedKeyframes.length; i3++) {
        if (unresolvedKeyframes[i3] === null) {
          if (i3 === 0) {
            const currentValue = motionValue2 === null || motionValue2 === void 0 ? void 0 : motionValue2.get();
            const finalKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
            if (currentValue !== void 0) {
              unresolvedKeyframes[0] = currentValue;
            } else if (element && name) {
              const valueAsRead = element.readValue(name, finalKeyframe);
              if (valueAsRead !== void 0 && valueAsRead !== null) {
                unresolvedKeyframes[0] = valueAsRead;
              }
            }
            if (unresolvedKeyframes[0] === void 0) {
              unresolvedKeyframes[0] = finalKeyframe;
            }
            if (motionValue2 && currentValue === void 0) {
              motionValue2.set(unresolvedKeyframes[0]);
            }
          } else {
            unresolvedKeyframes[i3] = unresolvedKeyframes[i3 - 1];
          }
        }
      }
    }
    setFinalKeyframe() {
    }
    measureInitialState() {
    }
    renderEndStyles() {
    }
    measureEndState() {
    }
    complete() {
      this.isComplete = true;
      this.onComplete(this.unresolvedKeyframes, this.finalKeyframe);
      toResolve.delete(this);
    }
    cancel() {
      if (!this.isComplete) {
        this.isScheduled = false;
        toResolve.delete(this);
      }
    }
    resume() {
      if (!this.isComplete)
        this.scheduleResolve();
    }
  };

  // node_modules/framer-motion/dist/es/utils/is-numerical-string.mjs
  var isNumericalString = (v2) => /^-?(?:\d+(?:\.\d+)?|\.\d+)$/u.test(v2);

  // node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.mjs
  var splitCSSVariableRegex = (
    // eslint-disable-next-line redos-detector/no-unsafe-regex -- false positive, as it can match a lot of words
    /^var\(--(?:([\w-]+)|([\w-]+), ?([a-zA-Z\d ()%#.,-]+))\)/u
  );
  function parseCSSVariable(current) {
    const match2 = splitCSSVariableRegex.exec(current);
    if (!match2)
      return [,];
    const [, token1, token2, fallback] = match2;
    return [`--${token1 !== null && token1 !== void 0 ? token1 : token2}`, fallback];
  }
  var maxDepth = 4;
  function getVariableValue(current, element, depth = 1) {
    invariant2(depth <= maxDepth, `Max CSS variable fallback depth detected in property "${current}". This may indicate a circular fallback dependency.`);
    const [token2, fallback] = parseCSSVariable(current);
    if (!token2)
      return;
    const resolved = window.getComputedStyle(element).getPropertyValue(token2);
    if (resolved) {
      const trimmed = resolved.trim();
      return isNumericalString(trimmed) ? parseFloat(trimmed) : trimmed;
    }
    return isCSSVariableToken(fallback) ? getVariableValue(fallback, element, depth + 1) : fallback;
  }

  // node_modules/framer-motion/dist/es/render/dom/value-types/test.mjs
  var testValueType = (v2) => (type) => type.test(v2);

  // node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.mjs
  var auto = {
    test: (v2) => v2 === "auto",
    parse: (v2) => v2
  };

  // node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.mjs
  var dimensionValueTypes = [number, px, percent, degrees, vw, vh, auto];
  var findDimensionValueType = (v2) => dimensionValueTypes.find(testValueType(v2));

  // node_modules/framer-motion/dist/es/render/dom/DOMKeyframesResolver.mjs
  var DOMKeyframesResolver = class extends KeyframeResolver {
    constructor(unresolvedKeyframes, onComplete, name, motionValue2, element) {
      super(unresolvedKeyframes, onComplete, name, motionValue2, element, true);
    }
    readKeyframes() {
      const { unresolvedKeyframes, element, name } = this;
      if (!element || !element.current)
        return;
      super.readKeyframes();
      for (let i3 = 0; i3 < unresolvedKeyframes.length; i3++) {
        let keyframe = unresolvedKeyframes[i3];
        if (typeof keyframe === "string") {
          keyframe = keyframe.trim();
          if (isCSSVariableToken(keyframe)) {
            const resolved = getVariableValue(keyframe, element.current);
            if (resolved !== void 0) {
              unresolvedKeyframes[i3] = resolved;
            }
            if (i3 === unresolvedKeyframes.length - 1) {
              this.finalKeyframe = keyframe;
            }
          }
        }
      }
      this.resolveNoneKeyframes();
      if (!positionalKeys.has(name) || unresolvedKeyframes.length !== 2) {
        return;
      }
      const [origin2, target] = unresolvedKeyframes;
      const originType = findDimensionValueType(origin2);
      const targetType = findDimensionValueType(target);
      if (originType === targetType)
        return;
      if (isNumOrPxType(originType) && isNumOrPxType(targetType)) {
        for (let i3 = 0; i3 < unresolvedKeyframes.length; i3++) {
          const value = unresolvedKeyframes[i3];
          if (typeof value === "string") {
            unresolvedKeyframes[i3] = parseFloat(value);
          }
        }
      } else {
        this.needsMeasurement = true;
      }
    }
    resolveNoneKeyframes() {
      const { unresolvedKeyframes, name } = this;
      const noneKeyframeIndexes = [];
      for (let i3 = 0; i3 < unresolvedKeyframes.length; i3++) {
        if (isNone(unresolvedKeyframes[i3])) {
          noneKeyframeIndexes.push(i3);
        }
      }
      if (noneKeyframeIndexes.length) {
        makeNoneKeyframesAnimatable(unresolvedKeyframes, noneKeyframeIndexes, name);
      }
    }
    measureInitialState() {
      const { element, unresolvedKeyframes, name } = this;
      if (!element || !element.current)
        return;
      if (name === "height") {
        this.suspendedScrollY = window.pageYOffset;
      }
      this.measuredOrigin = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
      unresolvedKeyframes[0] = this.measuredOrigin;
      const measureKeyframe = unresolvedKeyframes[unresolvedKeyframes.length - 1];
      if (measureKeyframe !== void 0) {
        element.getValue(name, measureKeyframe).jump(measureKeyframe, false);
      }
    }
    measureEndState() {
      var _a;
      const { element, name, unresolvedKeyframes } = this;
      if (!element || !element.current)
        return;
      const value = element.getValue(name);
      value && value.jump(this.measuredOrigin, false);
      const finalKeyframeIndex = unresolvedKeyframes.length - 1;
      const finalKeyframe = unresolvedKeyframes[finalKeyframeIndex];
      unresolvedKeyframes[finalKeyframeIndex] = positionalValues[name](element.measureViewportBox(), window.getComputedStyle(element.current));
      if (finalKeyframe !== null && this.finalKeyframe === void 0) {
        this.finalKeyframe = finalKeyframe;
      }
      if ((_a = this.removedTransforms) === null || _a === void 0 ? void 0 : _a.length) {
        this.removedTransforms.forEach(([unsetTransformName, unsetTransformValue]) => {
          element.getValue(unsetTransformName).set(unsetTransformValue);
        });
      }
      this.resolveNoneKeyframes();
    }
  };

  // node_modules/framer-motion/dist/es/animation/utils/is-animatable.mjs
  var isAnimatable = (value, name) => {
    if (name === "zIndex")
      return false;
    if (typeof value === "number" || Array.isArray(value))
      return true;
    if (typeof value === "string" && // It's animatable if we have a string
    (complex.test(value) || value === "0") && // And it contains numbers and/or colors
    !value.startsWith("url(")) {
      return true;
    }
    return false;
  };

  // node_modules/framer-motion/dist/es/animation/animators/utils/can-animate.mjs
  function hasKeyframesChanged(keyframes4) {
    const current = keyframes4[0];
    if (keyframes4.length === 1)
      return true;
    for (let i3 = 0; i3 < keyframes4.length; i3++) {
      if (keyframes4[i3] !== current)
        return true;
    }
  }
  function canAnimate(keyframes4, name, type, velocity) {
    const originKeyframe = keyframes4[0];
    if (originKeyframe === null)
      return false;
    if (name === "display" || name === "visibility")
      return true;
    const targetKeyframe = keyframes4[keyframes4.length - 1];
    const isOriginAnimatable = isAnimatable(originKeyframe, name);
    const isTargetAnimatable = isAnimatable(targetKeyframe, name);
    warning2(isOriginAnimatable === isTargetAnimatable, `You are trying to animate ${name} from "${originKeyframe}" to "${targetKeyframe}". ${originKeyframe} is not an animatable value - to enable this animation set ${originKeyframe} to a value animatable to ${targetKeyframe} via the \`style\` property.`);
    if (!isOriginAnimatable || !isTargetAnimatable) {
      return false;
    }
    return hasKeyframesChanged(keyframes4) || (type === "spring" || isGenerator2(type)) && velocity;
  }

  // node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.mjs
  var isNotNull = (value) => value !== null;
  function getFinalKeyframe(keyframes4, { repeat, repeatType = "loop" }, finalKeyframe) {
    const resolvedKeyframes = keyframes4.filter(isNotNull);
    const index2 = repeat && repeatType !== "loop" && repeat % 2 === 1 ? 0 : resolvedKeyframes.length - 1;
    return !index2 || finalKeyframe === void 0 ? resolvedKeyframes[index2] : finalKeyframe;
  }

  // node_modules/framer-motion/dist/es/animation/animators/BaseAnimation.mjs
  var MAX_RESOLVE_DELAY = 40;
  var BaseAnimation = class {
    constructor({ autoplay = true, delay: delay2 = 0, type = "keyframes", repeat = 0, repeatDelay = 0, repeatType = "loop", ...options }) {
      this.isStopped = false;
      this.hasAttemptedResolve = false;
      this.createdAt = time.now();
      this.options = {
        autoplay,
        delay: delay2,
        type,
        repeat,
        repeatDelay,
        repeatType,
        ...options
      };
      this.updateFinishedPromise();
    }
    /**
     * This method uses the createdAt and resolvedAt to calculate the
     * animation startTime. *Ideally*, we would use the createdAt time as t=0
     * as the following frame would then be the first frame of the animation in
     * progress, which would feel snappier.
     *
     * However, if there's a delay (main thread work) between the creation of
     * the animation and the first commited frame, we prefer to use resolvedAt
     * to avoid a sudden jump into the animation.
     */
    calcStartTime() {
      if (!this.resolvedAt)
        return this.createdAt;
      return this.resolvedAt - this.createdAt > MAX_RESOLVE_DELAY ? this.resolvedAt : this.createdAt;
    }
    /**
     * A getter for resolved data. If keyframes are not yet resolved, accessing
     * this.resolved will synchronously flush all pending keyframe resolvers.
     * This is a deoptimisation, but at its worst still batches read/writes.
     */
    get resolved() {
      if (!this._resolved && !this.hasAttemptedResolve) {
        flushKeyframeResolvers();
      }
      return this._resolved;
    }
    /**
     * A method to be called when the keyframes resolver completes. This method
     * will check if its possible to run the animation and, if not, skip it.
     * Otherwise, it will call initPlayback on the implementing class.
     */
    onKeyframesResolved(keyframes4, finalKeyframe) {
      this.resolvedAt = time.now();
      this.hasAttemptedResolve = true;
      const { name, type, velocity, delay: delay2, onComplete, onUpdate, isGenerator: isGenerator3 } = this.options;
      if (!isGenerator3 && !canAnimate(keyframes4, name, type, velocity)) {
        if (instantAnimationState.current || !delay2) {
          onUpdate && onUpdate(getFinalKeyframe(keyframes4, this.options, finalKeyframe));
          onComplete && onComplete();
          this.resolveFinishedPromise();
          return;
        } else {
          this.options.duration = 0;
        }
      }
      const resolvedAnimation = this.initPlayback(keyframes4, finalKeyframe);
      if (resolvedAnimation === false)
        return;
      this._resolved = {
        keyframes: keyframes4,
        finalKeyframe,
        ...resolvedAnimation
      };
      this.onPostResolved();
    }
    onPostResolved() {
    }
    /**
     * Allows the returned animation to be awaited or promise-chained. Currently
     * resolves when the animation finishes at all but in a future update could/should
     * reject if its cancels.
     */
    then(resolve, reject) {
      return this.currentFinishedPromise.then(resolve, reject);
    }
    flatten() {
      this.options.type = "keyframes";
      this.options.ease = "linear";
    }
    updateFinishedPromise() {
      this.currentFinishedPromise = new Promise((resolve) => {
        this.resolveFinishedPromise = resolve;
      });
    }
  };

  // node_modules/framer-motion/dist/es/utils/mix/number.mjs
  var mixNumber = (from2, to2, progress2) => {
    return from2 + (to2 - from2) * progress2;
  };

  // node_modules/framer-motion/dist/es/utils/hsla-to-rgba.mjs
  function hueToRgb(p2, q, t4) {
    if (t4 < 0)
      t4 += 1;
    if (t4 > 1)
      t4 -= 1;
    if (t4 < 1 / 6)
      return p2 + (q - p2) * 6 * t4;
    if (t4 < 1 / 2)
      return q;
    if (t4 < 2 / 3)
      return p2 + (q - p2) * (2 / 3 - t4) * 6;
    return p2;
  }
  function hslaToRgba({ hue, saturation, lightness, alpha: alpha2 }) {
    hue /= 360;
    saturation /= 100;
    lightness /= 100;
    let red = 0;
    let green = 0;
    let blue = 0;
    if (!saturation) {
      red = green = blue = lightness;
    } else {
      const q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - lightness * saturation;
      const p2 = 2 * lightness - q;
      red = hueToRgb(p2, q, hue + 1 / 3);
      green = hueToRgb(p2, q, hue);
      blue = hueToRgb(p2, q, hue - 1 / 3);
    }
    return {
      red: Math.round(red * 255),
      green: Math.round(green * 255),
      blue: Math.round(blue * 255),
      alpha: alpha2
    };
  }

  // node_modules/framer-motion/dist/es/utils/mix/immediate.mjs
  function mixImmediate(a2, b2) {
    return (p2) => p2 > 0 ? b2 : a2;
  }

  // node_modules/framer-motion/dist/es/utils/mix/color.mjs
  var mixLinearColor = (from2, to2, v2) => {
    const fromExpo = from2 * from2;
    const expo = v2 * (to2 * to2 - fromExpo) + fromExpo;
    return expo < 0 ? 0 : Math.sqrt(expo);
  };
  var colorTypes = [hex, rgba, hsla];
  var getColorType = (v2) => colorTypes.find((type) => type.test(v2));
  function asRGBA(color2) {
    const type = getColorType(color2);
    warning2(Boolean(type), `'${color2}' is not an animatable color. Use the equivalent color code instead.`);
    if (!Boolean(type))
      return false;
    let model = type.parse(color2);
    if (type === hsla) {
      model = hslaToRgba(model);
    }
    return model;
  }
  var mixColor = (from2, to2) => {
    const fromRGBA = asRGBA(from2);
    const toRGBA = asRGBA(to2);
    if (!fromRGBA || !toRGBA) {
      return mixImmediate(from2, to2);
    }
    const blended = { ...fromRGBA };
    return (v2) => {
      blended.red = mixLinearColor(fromRGBA.red, toRGBA.red, v2);
      blended.green = mixLinearColor(fromRGBA.green, toRGBA.green, v2);
      blended.blue = mixLinearColor(fromRGBA.blue, toRGBA.blue, v2);
      blended.alpha = mixNumber(fromRGBA.alpha, toRGBA.alpha, v2);
      return rgba.transform(blended);
    };
  };

  // node_modules/framer-motion/dist/es/utils/pipe.mjs
  var combineFunctions = (a2, b2) => (v2) => b2(a2(v2));
  var pipe2 = (...transformers) => transformers.reduce(combineFunctions);

  // node_modules/framer-motion/dist/es/utils/mix/visibility.mjs
  var invisibleValues = /* @__PURE__ */ new Set(["none", "hidden"]);
  function mixVisibility(origin2, target) {
    if (invisibleValues.has(origin2)) {
      return (p2) => p2 <= 0 ? origin2 : target;
    } else {
      return (p2) => p2 >= 1 ? target : origin2;
    }
  }

  // node_modules/framer-motion/dist/es/utils/mix/complex.mjs
  function mixNumber2(a2, b2) {
    return (p2) => mixNumber(a2, b2, p2);
  }
  function getMixer(a2) {
    if (typeof a2 === "number") {
      return mixNumber2;
    } else if (typeof a2 === "string") {
      return isCSSVariableToken(a2) ? mixImmediate : color.test(a2) ? mixColor : mixComplex;
    } else if (Array.isArray(a2)) {
      return mixArray;
    } else if (typeof a2 === "object") {
      return color.test(a2) ? mixColor : mixObject;
    }
    return mixImmediate;
  }
  function mixArray(a2, b2) {
    const output2 = [...a2];
    const numValues = output2.length;
    const blendValue = a2.map((v2, i3) => getMixer(v2)(v2, b2[i3]));
    return (p2) => {
      for (let i3 = 0; i3 < numValues; i3++) {
        output2[i3] = blendValue[i3](p2);
      }
      return output2;
    };
  }
  function mixObject(a2, b2) {
    const output2 = { ...a2, ...b2 };
    const blendValue = {};
    for (const key in output2) {
      if (a2[key] !== void 0 && b2[key] !== void 0) {
        blendValue[key] = getMixer(a2[key])(a2[key], b2[key]);
      }
    }
    return (v2) => {
      for (const key in blendValue) {
        output2[key] = blendValue[key](v2);
      }
      return output2;
    };
  }
  function matchOrder(origin2, target) {
    var _a;
    const orderedOrigin = [];
    const pointers = { color: 0, var: 0, number: 0 };
    for (let i3 = 0; i3 < target.values.length; i3++) {
      const type = target.types[i3];
      const originIndex = origin2.indexes[type][pointers[type]];
      const originValue = (_a = origin2.values[originIndex]) !== null && _a !== void 0 ? _a : 0;
      orderedOrigin[i3] = originValue;
      pointers[type]++;
    }
    return orderedOrigin;
  }
  var mixComplex = (origin2, target) => {
    const template2 = complex.createTransformer(target);
    const originStats = analyseComplexValue(origin2);
    const targetStats = analyseComplexValue(target);
    const canInterpolate = originStats.indexes.var.length === targetStats.indexes.var.length && originStats.indexes.color.length === targetStats.indexes.color.length && originStats.indexes.number.length >= targetStats.indexes.number.length;
    if (canInterpolate) {
      if (invisibleValues.has(origin2) && !targetStats.values.length || invisibleValues.has(target) && !originStats.values.length) {
        return mixVisibility(origin2, target);
      }
      return pipe2(mixArray(matchOrder(originStats, targetStats), targetStats.values), template2);
    } else {
      warning2(true, `Complex values '${origin2}' and '${target}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`);
      return mixImmediate(origin2, target);
    }
  };

  // node_modules/framer-motion/dist/es/utils/mix/index.mjs
  function mix(from2, to2, p2) {
    if (typeof from2 === "number" && typeof to2 === "number" && typeof p2 === "number") {
      return mixNumber(from2, to2, p2);
    }
    const mixer = getMixer(from2);
    return mixer(from2, to2);
  }

  // node_modules/framer-motion/dist/es/animation/generators/utils/velocity.mjs
  var velocitySampleDuration = 5;
  function calcGeneratorVelocity(resolveValue, t4, current) {
    const prevT = Math.max(t4 - velocitySampleDuration, 0);
    return velocityPerSecond(current - resolveValue(prevT), t4 - prevT);
  }

  // node_modules/framer-motion/dist/es/animation/generators/spring/defaults.mjs
  var springDefaults = {
    // Default spring physics
    stiffness: 100,
    damping: 10,
    mass: 1,
    velocity: 0,
    // Default duration/bounce-based options
    duration: 800,
    // in ms
    bounce: 0.3,
    visualDuration: 0.3,
    // in seconds
    // Rest thresholds
    restSpeed: {
      granular: 0.01,
      default: 2
    },
    restDelta: {
      granular: 5e-3,
      default: 0.5
    },
    // Limits
    minDuration: 0.01,
    // in seconds
    maxDuration: 10,
    // in seconds
    minDamping: 0.05,
    maxDamping: 1
  };

  // node_modules/framer-motion/dist/es/animation/generators/spring/find.mjs
  var safeMin = 1e-3;
  function findSpring({ duration = springDefaults.duration, bounce = springDefaults.bounce, velocity = springDefaults.velocity, mass = springDefaults.mass }) {
    let envelope;
    let derivative;
    warning2(duration <= secondsToMilliseconds(springDefaults.maxDuration), "Spring duration must be 10 seconds or less");
    let dampingRatio = 1 - bounce;
    dampingRatio = clamp2(springDefaults.minDamping, springDefaults.maxDamping, dampingRatio);
    duration = clamp2(springDefaults.minDuration, springDefaults.maxDuration, millisecondsToSeconds(duration));
    if (dampingRatio < 1) {
      envelope = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const a2 = exponentialDecay - velocity;
        const b2 = calcAngularFreq(undampedFreq2, dampingRatio);
        const c6 = Math.exp(-delta);
        return safeMin - a2 / b2 * c6;
      };
      derivative = (undampedFreq2) => {
        const exponentialDecay = undampedFreq2 * dampingRatio;
        const delta = exponentialDecay * duration;
        const d2 = delta * velocity + velocity;
        const e3 = Math.pow(dampingRatio, 2) * Math.pow(undampedFreq2, 2) * duration;
        const f2 = Math.exp(-delta);
        const g2 = calcAngularFreq(Math.pow(undampedFreq2, 2), dampingRatio);
        const factor = -envelope(undampedFreq2) + safeMin > 0 ? -1 : 1;
        return factor * ((d2 - e3) * f2) / g2;
      };
    } else {
      envelope = (undampedFreq2) => {
        const a2 = Math.exp(-undampedFreq2 * duration);
        const b2 = (undampedFreq2 - velocity) * duration + 1;
        return -safeMin + a2 * b2;
      };
      derivative = (undampedFreq2) => {
        const a2 = Math.exp(-undampedFreq2 * duration);
        const b2 = (velocity - undampedFreq2) * (duration * duration);
        return a2 * b2;
      };
    }
    const initialGuess = 5 / duration;
    const undampedFreq = approximateRoot(envelope, derivative, initialGuess);
    duration = secondsToMilliseconds(duration);
    if (isNaN(undampedFreq)) {
      return {
        stiffness: springDefaults.stiffness,
        damping: springDefaults.damping,
        duration
      };
    } else {
      const stiffness = Math.pow(undampedFreq, 2) * mass;
      return {
        stiffness,
        damping: dampingRatio * 2 * Math.sqrt(mass * stiffness),
        duration
      };
    }
  }
  var rootIterations = 12;
  function approximateRoot(envelope, derivative, initialGuess) {
    let result = initialGuess;
    for (let i3 = 1; i3 < rootIterations; i3++) {
      result = result - envelope(result) / derivative(result);
    }
    return result;
  }
  function calcAngularFreq(undampedFreq, dampingRatio) {
    return undampedFreq * Math.sqrt(1 - dampingRatio * dampingRatio);
  }

  // node_modules/framer-motion/dist/es/animation/generators/spring/index.mjs
  var durationKeys = ["duration", "bounce"];
  var physicsKeys = ["stiffness", "damping", "mass"];
  function isSpringType(options, keys) {
    return keys.some((key) => options[key] !== void 0);
  }
  function getSpringOptions(options) {
    let springOptions = {
      velocity: springDefaults.velocity,
      stiffness: springDefaults.stiffness,
      damping: springDefaults.damping,
      mass: springDefaults.mass,
      isResolvedFromDuration: false,
      ...options
    };
    if (!isSpringType(options, physicsKeys) && isSpringType(options, durationKeys)) {
      if (options.visualDuration) {
        const visualDuration = options.visualDuration;
        const root = 2 * Math.PI / (visualDuration * 1.2);
        const stiffness = root * root;
        const damping = 2 * clamp2(0.05, 1, 1 - (options.bounce || 0)) * Math.sqrt(stiffness);
        springOptions = {
          ...springOptions,
          mass: springDefaults.mass,
          stiffness,
          damping
        };
      } else {
        const derived = findSpring(options);
        springOptions = {
          ...springOptions,
          ...derived,
          mass: springDefaults.mass
        };
        springOptions.isResolvedFromDuration = true;
      }
    }
    return springOptions;
  }
  function spring(optionsOrVisualDuration = springDefaults.visualDuration, bounce = springDefaults.bounce) {
    const options = typeof optionsOrVisualDuration !== "object" ? {
      visualDuration: optionsOrVisualDuration,
      keyframes: [0, 1],
      bounce
    } : optionsOrVisualDuration;
    let { restSpeed, restDelta } = options;
    const origin2 = options.keyframes[0];
    const target = options.keyframes[options.keyframes.length - 1];
    const state = { done: false, value: origin2 };
    const { stiffness, damping, mass, duration, velocity, isResolvedFromDuration } = getSpringOptions({
      ...options,
      velocity: -millisecondsToSeconds(options.velocity || 0)
    });
    const initialVelocity = velocity || 0;
    const dampingRatio = damping / (2 * Math.sqrt(stiffness * mass));
    const initialDelta = target - origin2;
    const undampedAngularFreq = millisecondsToSeconds(Math.sqrt(stiffness / mass));
    const isGranularScale = Math.abs(initialDelta) < 5;
    restSpeed || (restSpeed = isGranularScale ? springDefaults.restSpeed.granular : springDefaults.restSpeed.default);
    restDelta || (restDelta = isGranularScale ? springDefaults.restDelta.granular : springDefaults.restDelta.default);
    let resolveSpring;
    if (dampingRatio < 1) {
      const angularFreq = calcAngularFreq(undampedAngularFreq, dampingRatio);
      resolveSpring = (t4) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t4);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t4) + initialDelta * Math.cos(angularFreq * t4));
      };
    } else if (dampingRatio === 1) {
      resolveSpring = (t4) => target - Math.exp(-undampedAngularFreq * t4) * (initialDelta + (initialVelocity + undampedAngularFreq * initialDelta) * t4);
    } else {
      const dampedAngularFreq = undampedAngularFreq * Math.sqrt(dampingRatio * dampingRatio - 1);
      resolveSpring = (t4) => {
        const envelope = Math.exp(-dampingRatio * undampedAngularFreq * t4);
        const freqForT = Math.min(dampedAngularFreq * t4, 300);
        return target - envelope * ((initialVelocity + dampingRatio * undampedAngularFreq * initialDelta) * Math.sinh(freqForT) + dampedAngularFreq * initialDelta * Math.cosh(freqForT)) / dampedAngularFreq;
      };
    }
    const generator = {
      calculatedDuration: isResolvedFromDuration ? duration || null : null,
      next: (t4) => {
        const current = resolveSpring(t4);
        if (!isResolvedFromDuration) {
          let currentVelocity = 0;
          if (dampingRatio < 1) {
            currentVelocity = t4 === 0 ? secondsToMilliseconds(initialVelocity) : calcGeneratorVelocity(resolveSpring, t4, current);
          }
          const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;
          const isBelowDisplacementThreshold = Math.abs(target - current) <= restDelta;
          state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;
        } else {
          state.done = t4 >= duration;
        }
        state.value = state.done ? target : current;
        return state;
      },
      toString: () => {
        const calculatedDuration = Math.min(calcGeneratorDuration(generator), maxGeneratorDuration);
        const easing = generateLinearEasing((progress2) => generator.next(calculatedDuration * progress2).value, calculatedDuration, 30);
        return calculatedDuration + "ms " + easing;
      }
    };
    return generator;
  }

  // node_modules/framer-motion/dist/es/animation/generators/inertia.mjs
  function inertia({ keyframes: keyframes4, velocity = 0, power = 0.8, timeConstant = 325, bounceDamping = 10, bounceStiffness = 500, modifyTarget, min: min2, max: max2, restDelta = 0.5, restSpeed }) {
    const origin2 = keyframes4[0];
    const state = {
      done: false,
      value: origin2
    };
    const isOutOfBounds = (v2) => min2 !== void 0 && v2 < min2 || max2 !== void 0 && v2 > max2;
    const nearestBoundary = (v2) => {
      if (min2 === void 0)
        return max2;
      if (max2 === void 0)
        return min2;
      return Math.abs(min2 - v2) < Math.abs(max2 - v2) ? min2 : max2;
    };
    let amplitude = power * velocity;
    const ideal = origin2 + amplitude;
    const target = modifyTarget === void 0 ? ideal : modifyTarget(ideal);
    if (target !== ideal)
      amplitude = target - origin2;
    const calcDelta = (t4) => -amplitude * Math.exp(-t4 / timeConstant);
    const calcLatest = (t4) => target + calcDelta(t4);
    const applyFriction = (t4) => {
      const delta = calcDelta(t4);
      const latest = calcLatest(t4);
      state.done = Math.abs(delta) <= restDelta;
      state.value = state.done ? target : latest;
    };
    let timeReachedBoundary;
    let spring$1;
    const checkCatchBoundary = (t4) => {
      if (!isOutOfBounds(state.value))
        return;
      timeReachedBoundary = t4;
      spring$1 = spring({
        keyframes: [state.value, nearestBoundary(state.value)],
        velocity: calcGeneratorVelocity(calcLatest, t4, state.value),
        // TODO: This should be passing * 1000
        damping: bounceDamping,
        stiffness: bounceStiffness,
        restDelta,
        restSpeed
      });
    };
    checkCatchBoundary(0);
    return {
      calculatedDuration: null,
      next: (t4) => {
        let hasUpdatedFrame = false;
        if (!spring$1 && timeReachedBoundary === void 0) {
          hasUpdatedFrame = true;
          applyFriction(t4);
          checkCatchBoundary(t4);
        }
        if (timeReachedBoundary !== void 0 && t4 >= timeReachedBoundary) {
          return spring$1.next(t4 - timeReachedBoundary);
        } else {
          !hasUpdatedFrame && applyFriction(t4);
          return state;
        }
      }
    };
  }

  // node_modules/framer-motion/dist/es/easing/ease.mjs
  var easeIn = /* @__PURE__ */ cubicBezier(0.42, 0, 1, 1);
  var easeOut = /* @__PURE__ */ cubicBezier(0, 0, 0.58, 1);
  var easeInOut = /* @__PURE__ */ cubicBezier(0.42, 0, 0.58, 1);

  // node_modules/framer-motion/dist/es/easing/utils/is-easing-array.mjs
  var isEasingArray = (ease2) => {
    return Array.isArray(ease2) && typeof ease2[0] !== "number";
  };

  // node_modules/framer-motion/dist/es/easing/utils/map.mjs
  var easingLookup = {
    linear: noop3,
    easeIn,
    easeInOut,
    easeOut,
    circIn,
    circInOut,
    circOut,
    backIn,
    backInOut,
    backOut,
    anticipate
  };
  var easingDefinitionToFunction = (definition) => {
    if (isBezierDefinition(definition)) {
      invariant2(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);
      const [x1, y1, x2, y2] = definition;
      return cubicBezier(x1, y1, x2, y2);
    } else if (typeof definition === "string") {
      invariant2(easingLookup[definition] !== void 0, `Invalid easing type '${definition}'`);
      return easingLookup[definition];
    }
    return definition;
  };

  // node_modules/framer-motion/dist/es/utils/interpolate.mjs
  function createMixers(output2, ease2, customMixer) {
    const mixers = [];
    const mixerFactory = customMixer || mix;
    const numMixers = output2.length - 1;
    for (let i3 = 0; i3 < numMixers; i3++) {
      let mixer = mixerFactory(output2[i3], output2[i3 + 1]);
      if (ease2) {
        const easingFunction = Array.isArray(ease2) ? ease2[i3] || noop3 : ease2;
        mixer = pipe2(easingFunction, mixer);
      }
      mixers.push(mixer);
    }
    return mixers;
  }
  function interpolate(input, output2, { clamp: isClamp = true, ease: ease2, mixer } = {}) {
    const inputLength = input.length;
    invariant2(inputLength === output2.length, "Both input and output ranges must be the same length");
    if (inputLength === 1)
      return () => output2[0];
    if (inputLength === 2 && output2[0] === output2[1])
      return () => output2[1];
    const isZeroDeltaRange = input[0] === input[1];
    if (input[0] > input[inputLength - 1]) {
      input = [...input].reverse();
      output2 = [...output2].reverse();
    }
    const mixers = createMixers(output2, ease2, mixer);
    const numMixers = mixers.length;
    const interpolator = (v2) => {
      if (isZeroDeltaRange && v2 < input[0])
        return output2[0];
      let i3 = 0;
      if (numMixers > 1) {
        for (; i3 < input.length - 2; i3++) {
          if (v2 < input[i3 + 1])
            break;
        }
      }
      const progressInRange = progress(input[i3], input[i3 + 1], v2);
      return mixers[i3](progressInRange);
    };
    return isClamp ? (v2) => interpolator(clamp2(input[0], input[inputLength - 1], v2)) : interpolator;
  }

  // node_modules/framer-motion/dist/es/utils/offsets/fill.mjs
  function fillOffset(offset5, remaining) {
    const min2 = offset5[offset5.length - 1];
    for (let i3 = 1; i3 <= remaining; i3++) {
      const offsetProgress = progress(0, remaining, i3);
      offset5.push(mixNumber(min2, 1, offsetProgress));
    }
  }

  // node_modules/framer-motion/dist/es/utils/offsets/default.mjs
  function defaultOffset(arr) {
    const offset5 = [0];
    fillOffset(offset5, arr.length - 1);
    return offset5;
  }

  // node_modules/framer-motion/dist/es/utils/offsets/time.mjs
  function convertOffsetToTimes(offset5, duration) {
    return offset5.map((o3) => o3 * duration);
  }

  // node_modules/framer-motion/dist/es/animation/generators/keyframes.mjs
  function defaultEasing(values, easing) {
    return values.map(() => easing || easeInOut).splice(0, values.length - 1);
  }
  function keyframes3({ duration = 300, keyframes: keyframeValues, times, ease: ease2 = "easeInOut" }) {
    const easingFunctions = isEasingArray(ease2) ? ease2.map(easingDefinitionToFunction) : easingDefinitionToFunction(ease2);
    const state = {
      done: false,
      value: keyframeValues[0]
    };
    const absoluteTimes = convertOffsetToTimes(
      // Only use the provided offsets if they're the correct length
      // TODO Maybe we should warn here if there's a length mismatch
      times && times.length === keyframeValues.length ? times : defaultOffset(keyframeValues),
      duration
    );
    const mapTimeToKeyframe = interpolate(absoluteTimes, keyframeValues, {
      ease: Array.isArray(easingFunctions) ? easingFunctions : defaultEasing(keyframeValues, easingFunctions)
    });
    return {
      calculatedDuration: duration,
      next: (t4) => {
        state.value = mapTimeToKeyframe(t4);
        state.done = t4 >= duration;
        return state;
      }
    };
  }

  // node_modules/framer-motion/dist/es/animation/animators/drivers/driver-frameloop.mjs
  var frameloopDriver = (update3) => {
    const passTimestamp = ({ timestamp }) => update3(timestamp);
    return {
      start: () => frame.update(passTimestamp, true),
      stop: () => cancelFrame(passTimestamp),
      /**
       * If we're processing this frame we can use the
       * framelocked timestamp to keep things in sync.
       */
      now: () => frameData.isProcessing ? frameData.timestamp : time.now()
    };
  };

  // node_modules/framer-motion/dist/es/animation/animators/MainThreadAnimation.mjs
  var generators = {
    decay: inertia,
    inertia,
    tween: keyframes3,
    keyframes: keyframes3,
    spring
  };
  var percentToProgress = (percent2) => percent2 / 100;
  var MainThreadAnimation = class extends BaseAnimation {
    constructor(options) {
      super(options);
      this.holdTime = null;
      this.cancelTime = null;
      this.currentTime = 0;
      this.playbackSpeed = 1;
      this.pendingPlayState = "running";
      this.startTime = null;
      this.state = "idle";
      this.stop = () => {
        this.resolver.cancel();
        this.isStopped = true;
        if (this.state === "idle")
          return;
        this.teardown();
        const { onStop } = this.options;
        onStop && onStop();
      };
      const { name, motionValue: motionValue2, element, keyframes: keyframes4 } = this.options;
      const KeyframeResolver$1 = (element === null || element === void 0 ? void 0 : element.KeyframeResolver) || KeyframeResolver;
      const onResolved = (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe);
      this.resolver = new KeyframeResolver$1(keyframes4, onResolved, name, motionValue2, element);
      this.resolver.scheduleResolve();
    }
    flatten() {
      super.flatten();
      if (this._resolved) {
        Object.assign(this._resolved, this.initPlayback(this._resolved.keyframes));
      }
    }
    initPlayback(keyframes$1) {
      const { type = "keyframes", repeat = 0, repeatDelay = 0, repeatType, velocity = 0 } = this.options;
      const generatorFactory = isGenerator2(type) ? type : generators[type] || keyframes3;
      let mapPercentToKeyframes;
      let mirroredGenerator;
      if (generatorFactory !== keyframes3 && typeof keyframes$1[0] !== "number") {
        if (true) {
          invariant2(keyframes$1.length === 2, `Only two keyframes currently supported with spring and inertia animations. Trying to animate ${keyframes$1}`);
        }
        mapPercentToKeyframes = pipe2(percentToProgress, mix(keyframes$1[0], keyframes$1[1]));
        keyframes$1 = [0, 100];
      }
      const generator = generatorFactory({ ...this.options, keyframes: keyframes$1 });
      if (repeatType === "mirror") {
        mirroredGenerator = generatorFactory({
          ...this.options,
          keyframes: [...keyframes$1].reverse(),
          velocity: -velocity
        });
      }
      if (generator.calculatedDuration === null) {
        generator.calculatedDuration = calcGeneratorDuration(generator);
      }
      const { calculatedDuration } = generator;
      const resolvedDuration = calculatedDuration + repeatDelay;
      const totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;
      return {
        generator,
        mirroredGenerator,
        mapPercentToKeyframes,
        calculatedDuration,
        resolvedDuration,
        totalDuration
      };
    }
    onPostResolved() {
      const { autoplay = true } = this.options;
      this.play();
      if (this.pendingPlayState === "paused" || !autoplay) {
        this.pause();
      } else {
        this.state = this.pendingPlayState;
      }
    }
    tick(timestamp, sample = false) {
      const { resolved } = this;
      if (!resolved) {
        const { keyframes: keyframes5 } = this.options;
        return { done: true, value: keyframes5[keyframes5.length - 1] };
      }
      const { finalKeyframe, generator, mirroredGenerator, mapPercentToKeyframes, keyframes: keyframes4, calculatedDuration, totalDuration, resolvedDuration } = resolved;
      if (this.startTime === null)
        return generator.next(0);
      const { delay: delay2, repeat, repeatType, repeatDelay, onUpdate } = this.options;
      if (this.speed > 0) {
        this.startTime = Math.min(this.startTime, timestamp);
      } else if (this.speed < 0) {
        this.startTime = Math.min(timestamp - totalDuration / this.speed, this.startTime);
      }
      if (sample) {
        this.currentTime = timestamp;
      } else if (this.holdTime !== null) {
        this.currentTime = this.holdTime;
      } else {
        this.currentTime = Math.round(timestamp - this.startTime) * this.speed;
      }
      const timeWithoutDelay = this.currentTime - delay2 * (this.speed >= 0 ? 1 : -1);
      const isInDelayPhase = this.speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;
      this.currentTime = Math.max(timeWithoutDelay, 0);
      if (this.state === "finished" && this.holdTime === null) {
        this.currentTime = totalDuration;
      }
      let elapsed = this.currentTime;
      let frameGenerator = generator;
      if (repeat) {
        const progress2 = Math.min(this.currentTime, totalDuration) / resolvedDuration;
        let currentIteration = Math.floor(progress2);
        let iterationProgress = progress2 % 1;
        if (!iterationProgress && progress2 >= 1) {
          iterationProgress = 1;
        }
        iterationProgress === 1 && currentIteration--;
        currentIteration = Math.min(currentIteration, repeat + 1);
        const isOddIteration = Boolean(currentIteration % 2);
        if (isOddIteration) {
          if (repeatType === "reverse") {
            iterationProgress = 1 - iterationProgress;
            if (repeatDelay) {
              iterationProgress -= repeatDelay / resolvedDuration;
            }
          } else if (repeatType === "mirror") {
            frameGenerator = mirroredGenerator;
          }
        }
        elapsed = clamp2(0, 1, iterationProgress) * resolvedDuration;
      }
      const state = isInDelayPhase ? { done: false, value: keyframes4[0] } : frameGenerator.next(elapsed);
      if (mapPercentToKeyframes) {
        state.value = mapPercentToKeyframes(state.value);
      }
      let { done } = state;
      if (!isInDelayPhase && calculatedDuration !== null) {
        done = this.speed >= 0 ? this.currentTime >= totalDuration : this.currentTime <= 0;
      }
      const isAnimationFinished = this.holdTime === null && (this.state === "finished" || this.state === "running" && done);
      if (isAnimationFinished && finalKeyframe !== void 0) {
        state.value = getFinalKeyframe(keyframes4, this.options, finalKeyframe);
      }
      if (onUpdate) {
        onUpdate(state.value);
      }
      if (isAnimationFinished) {
        this.finish();
      }
      return state;
    }
    get duration() {
      const { resolved } = this;
      return resolved ? millisecondsToSeconds(resolved.calculatedDuration) : 0;
    }
    get time() {
      return millisecondsToSeconds(this.currentTime);
    }
    set time(newTime) {
      newTime = secondsToMilliseconds(newTime);
      this.currentTime = newTime;
      if (this.holdTime !== null || this.speed === 0) {
        this.holdTime = newTime;
      } else if (this.driver) {
        this.startTime = this.driver.now() - newTime / this.speed;
      }
    }
    get speed() {
      return this.playbackSpeed;
    }
    set speed(newSpeed) {
      const hasChanged = this.playbackSpeed !== newSpeed;
      this.playbackSpeed = newSpeed;
      if (hasChanged) {
        this.time = millisecondsToSeconds(this.currentTime);
      }
    }
    play() {
      if (!this.resolver.isScheduled) {
        this.resolver.resume();
      }
      if (!this._resolved) {
        this.pendingPlayState = "running";
        return;
      }
      if (this.isStopped)
        return;
      const { driver = frameloopDriver, onPlay, startTime } = this.options;
      if (!this.driver) {
        this.driver = driver((timestamp) => this.tick(timestamp));
      }
      onPlay && onPlay();
      const now2 = this.driver.now();
      if (this.holdTime !== null) {
        this.startTime = now2 - this.holdTime;
      } else if (!this.startTime) {
        this.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
      } else if (this.state === "finished") {
        this.startTime = now2;
      }
      if (this.state === "finished") {
        this.updateFinishedPromise();
      }
      this.cancelTime = this.startTime;
      this.holdTime = null;
      this.state = "running";
      this.driver.start();
    }
    pause() {
      var _a;
      if (!this._resolved) {
        this.pendingPlayState = "paused";
        return;
      }
      this.state = "paused";
      this.holdTime = (_a = this.currentTime) !== null && _a !== void 0 ? _a : 0;
    }
    complete() {
      if (this.state !== "running") {
        this.play();
      }
      this.pendingPlayState = this.state = "finished";
      this.holdTime = null;
    }
    finish() {
      this.teardown();
      this.state = "finished";
      const { onComplete } = this.options;
      onComplete && onComplete();
    }
    cancel() {
      if (this.cancelTime !== null) {
        this.tick(this.cancelTime);
      }
      this.teardown();
      this.updateFinishedPromise();
    }
    teardown() {
      this.state = "idle";
      this.stopDriver();
      this.resolveFinishedPromise();
      this.updateFinishedPromise();
      this.startTime = this.cancelTime = null;
      this.resolver.cancel();
    }
    stopDriver() {
      if (!this.driver)
        return;
      this.driver.stop();
      this.driver = void 0;
    }
    sample(time2) {
      this.startTime = 0;
      return this.tick(time2, true);
    }
  };

  // node_modules/framer-motion/dist/es/animation/animators/utils/accelerated-values.mjs
  var acceleratedValues = /* @__PURE__ */ new Set([
    "opacity",
    "clipPath",
    "filter",
    "transform"
    // TODO: Can be accelerated but currently disabled until https://issues.chromium.org/issues/41491098 is resolved
    // or until we implement support for linear() easing.
    // "background-color"
  ]);

  // node_modules/framer-motion/dist/es/animation/animators/waapi/index.mjs
  function startWaapiAnimation(element, valueName, keyframes4, { delay: delay2 = 0, duration = 300, repeat = 0, repeatType = "loop", ease: ease2 = "easeInOut", times } = {}) {
    const keyframeOptions = { [valueName]: keyframes4 };
    if (times)
      keyframeOptions.offset = times;
    const easing = mapEasingToNativeEasing(ease2, duration);
    if (Array.isArray(easing))
      keyframeOptions.easing = easing;
    return element.animate(keyframeOptions, {
      delay: delay2,
      duration,
      easing: !Array.isArray(easing) ? easing : "linear",
      fill: "both",
      iterations: repeat + 1,
      direction: repeatType === "reverse" ? "alternate" : "normal"
    });
  }

  // node_modules/framer-motion/dist/es/animation/animators/waapi/utils/supports-waapi.mjs
  var supportsWaapi = /* @__PURE__ */ memo3(() => Object.hasOwnProperty.call(Element.prototype, "animate"));

  // node_modules/framer-motion/dist/es/animation/animators/AcceleratedAnimation.mjs
  var sampleDelta = 10;
  var maxDuration = 2e4;
  function requiresPregeneratedKeyframes(options) {
    return isGenerator2(options.type) || options.type === "spring" || !isWaapiSupportedEasing(options.ease);
  }
  function pregenerateKeyframes(keyframes4, options) {
    const sampleAnimation = new MainThreadAnimation({
      ...options,
      keyframes: keyframes4,
      repeat: 0,
      delay: 0,
      isGenerator: true
    });
    let state = { done: false, value: keyframes4[0] };
    const pregeneratedKeyframes = [];
    let t4 = 0;
    while (!state.done && t4 < maxDuration) {
      state = sampleAnimation.sample(t4);
      pregeneratedKeyframes.push(state.value);
      t4 += sampleDelta;
    }
    return {
      times: void 0,
      keyframes: pregeneratedKeyframes,
      duration: t4 - sampleDelta,
      ease: "linear"
    };
  }
  var unsupportedEasingFunctions = {
    anticipate,
    backInOut,
    circInOut
  };
  function isUnsupportedEase(key) {
    return key in unsupportedEasingFunctions;
  }
  var AcceleratedAnimation = class extends BaseAnimation {
    constructor(options) {
      super(options);
      const { name, motionValue: motionValue2, element, keyframes: keyframes4 } = this.options;
      this.resolver = new DOMKeyframesResolver(keyframes4, (resolvedKeyframes, finalKeyframe) => this.onKeyframesResolved(resolvedKeyframes, finalKeyframe), name, motionValue2, element);
      this.resolver.scheduleResolve();
    }
    initPlayback(keyframes4, finalKeyframe) {
      let { duration = 300, times, ease: ease2, type, motionValue: motionValue2, name, startTime } = this.options;
      if (!motionValue2.owner || !motionValue2.owner.current) {
        return false;
      }
      if (typeof ease2 === "string" && supportsLinearEasing() && isUnsupportedEase(ease2)) {
        ease2 = unsupportedEasingFunctions[ease2];
      }
      if (requiresPregeneratedKeyframes(this.options)) {
        const { onComplete, onUpdate, motionValue: motionValue3, element, ...options } = this.options;
        const pregeneratedAnimation = pregenerateKeyframes(keyframes4, options);
        keyframes4 = pregeneratedAnimation.keyframes;
        if (keyframes4.length === 1) {
          keyframes4[1] = keyframes4[0];
        }
        duration = pregeneratedAnimation.duration;
        times = pregeneratedAnimation.times;
        ease2 = pregeneratedAnimation.ease;
        type = "keyframes";
      }
      const animation = startWaapiAnimation(motionValue2.owner.current, name, keyframes4, { ...this.options, duration, times, ease: ease2 });
      animation.startTime = startTime !== null && startTime !== void 0 ? startTime : this.calcStartTime();
      if (this.pendingTimeline) {
        attachTimeline(animation, this.pendingTimeline);
        this.pendingTimeline = void 0;
      } else {
        animation.onfinish = () => {
          const { onComplete } = this.options;
          motionValue2.set(getFinalKeyframe(keyframes4, this.options, finalKeyframe));
          onComplete && onComplete();
          this.cancel();
          this.resolveFinishedPromise();
        };
      }
      return {
        animation,
        duration,
        times,
        type,
        ease: ease2,
        keyframes: keyframes4
      };
    }
    get duration() {
      const { resolved } = this;
      if (!resolved)
        return 0;
      const { duration } = resolved;
      return millisecondsToSeconds(duration);
    }
    get time() {
      const { resolved } = this;
      if (!resolved)
        return 0;
      const { animation } = resolved;
      return millisecondsToSeconds(animation.currentTime || 0);
    }
    set time(newTime) {
      const { resolved } = this;
      if (!resolved)
        return;
      const { animation } = resolved;
      animation.currentTime = secondsToMilliseconds(newTime);
    }
    get speed() {
      const { resolved } = this;
      if (!resolved)
        return 1;
      const { animation } = resolved;
      return animation.playbackRate;
    }
    set speed(newSpeed) {
      const { resolved } = this;
      if (!resolved)
        return;
      const { animation } = resolved;
      animation.playbackRate = newSpeed;
    }
    get state() {
      const { resolved } = this;
      if (!resolved)
        return "idle";
      const { animation } = resolved;
      return animation.playState;
    }
    get startTime() {
      const { resolved } = this;
      if (!resolved)
        return null;
      const { animation } = resolved;
      return animation.startTime;
    }
    /**
     * Replace the default DocumentTimeline with another AnimationTimeline.
     * Currently used for scroll animations.
     */
    attachTimeline(timeline) {
      if (!this._resolved) {
        this.pendingTimeline = timeline;
      } else {
        const { resolved } = this;
        if (!resolved)
          return noop3;
        const { animation } = resolved;
        attachTimeline(animation, timeline);
      }
      return noop3;
    }
    play() {
      if (this.isStopped)
        return;
      const { resolved } = this;
      if (!resolved)
        return;
      const { animation } = resolved;
      if (animation.playState === "finished") {
        this.updateFinishedPromise();
      }
      animation.play();
    }
    pause() {
      const { resolved } = this;
      if (!resolved)
        return;
      const { animation } = resolved;
      animation.pause();
    }
    stop() {
      this.resolver.cancel();
      this.isStopped = true;
      if (this.state === "idle")
        return;
      this.resolveFinishedPromise();
      this.updateFinishedPromise();
      const { resolved } = this;
      if (!resolved)
        return;
      const { animation, keyframes: keyframes4, duration, type, ease: ease2, times } = resolved;
      if (animation.playState === "idle" || animation.playState === "finished") {
        return;
      }
      if (this.time) {
        const { motionValue: motionValue2, onUpdate, onComplete, element, ...options } = this.options;
        const sampleAnimation = new MainThreadAnimation({
          ...options,
          keyframes: keyframes4,
          duration,
          type,
          ease: ease2,
          times,
          isGenerator: true
        });
        const sampleTime = secondsToMilliseconds(this.time);
        motionValue2.setWithVelocity(sampleAnimation.sample(sampleTime - sampleDelta).value, sampleAnimation.sample(sampleTime).value, sampleDelta);
      }
      const { onStop } = this.options;
      onStop && onStop();
      this.cancel();
    }
    complete() {
      const { resolved } = this;
      if (!resolved)
        return;
      resolved.animation.finish();
    }
    cancel() {
      const { resolved } = this;
      if (!resolved)
        return;
      resolved.animation.cancel();
    }
    static supports(options) {
      const { motionValue: motionValue2, name, repeatDelay, repeatType, damping, type } = options;
      if (!motionValue2 || !motionValue2.owner || !(motionValue2.owner.current instanceof HTMLElement)) {
        return false;
      }
      const { onUpdate, transformTemplate } = motionValue2.owner.getProps();
      return supportsWaapi() && name && acceleratedValues.has(name) && /**
       * If we're outputting values to onUpdate then we can't use WAAPI as there's
       * no way to read the value from WAAPI every frame.
       */
      !onUpdate && !transformTemplate && !repeatDelay && repeatType !== "mirror" && damping !== 0 && type !== "inertia";
    }
  };

  // node_modules/framer-motion/dist/es/animation/utils/default-transitions.mjs
  var underDampedSpring = {
    type: "spring",
    stiffness: 500,
    damping: 25,
    restSpeed: 10
  };
  var criticallyDampedSpring = (target) => ({
    type: "spring",
    stiffness: 550,
    damping: target === 0 ? 2 * Math.sqrt(550) : 30,
    restSpeed: 10
  });
  var keyframesTransition = {
    type: "keyframes",
    duration: 0.8
  };
  var ease = {
    type: "keyframes",
    ease: [0.25, 0.1, 0.35, 1],
    duration: 0.3
  };
  var getDefaultTransition = (valueKey, { keyframes: keyframes4 }) => {
    if (keyframes4.length > 2) {
      return keyframesTransition;
    } else if (transformProps.has(valueKey)) {
      return valueKey.startsWith("scale") ? criticallyDampedSpring(keyframes4[1]) : underDampedSpring;
    }
    return ease;
  };

  // node_modules/framer-motion/dist/es/animation/utils/is-transition-defined.mjs
  function isTransitionDefined({ when, delay: _delay, delayChildren, staggerChildren, staggerDirection, repeat, repeatType, repeatDelay, from: from2, elapsed, ...transition }) {
    return !!Object.keys(transition).length;
  }

  // node_modules/framer-motion/dist/es/animation/interfaces/motion-value.mjs
  var animateMotionValue = (name, value, target, transition = {}, element, isHandoff) => (onComplete) => {
    const valueTransition = getValueTransition(transition, name) || {};
    const delay2 = valueTransition.delay || transition.delay || 0;
    let { elapsed = 0 } = transition;
    elapsed = elapsed - secondsToMilliseconds(delay2);
    let options = {
      keyframes: Array.isArray(target) ? target : [null, target],
      ease: "easeOut",
      velocity: value.getVelocity(),
      ...valueTransition,
      delay: -elapsed,
      onUpdate: (v2) => {
        value.set(v2);
        valueTransition.onUpdate && valueTransition.onUpdate(v2);
      },
      onComplete: () => {
        onComplete();
        valueTransition.onComplete && valueTransition.onComplete();
      },
      name,
      motionValue: value,
      element: isHandoff ? void 0 : element
    };
    if (!isTransitionDefined(valueTransition)) {
      options = {
        ...options,
        ...getDefaultTransition(name, options)
      };
    }
    if (options.duration) {
      options.duration = secondsToMilliseconds(options.duration);
    }
    if (options.repeatDelay) {
      options.repeatDelay = secondsToMilliseconds(options.repeatDelay);
    }
    if (options.from !== void 0) {
      options.keyframes[0] = options.from;
    }
    let shouldSkip = false;
    if (options.type === false || options.duration === 0 && !options.repeatDelay) {
      options.duration = 0;
      if (options.delay === 0) {
        shouldSkip = true;
      }
    }
    if (instantAnimationState.current || MotionGlobalConfig.skipAnimations) {
      shouldSkip = true;
      options.duration = 0;
      options.delay = 0;
    }
    if (shouldSkip && !isHandoff && value.get() !== void 0) {
      const finalKeyframe = getFinalKeyframe(options.keyframes, valueTransition);
      if (finalKeyframe !== void 0) {
        frame.update(() => {
          options.onUpdate(finalKeyframe);
          options.onComplete();
        });
        return new GroupPlaybackControls([]);
      }
    }
    if (!isHandoff && AcceleratedAnimation.supports(options)) {
      return new AcceleratedAnimation(options);
    } else {
      return new MainThreadAnimation(options);
    }
  };

  // node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.mjs
  function shouldBlockAnimation({ protectedKeys, needsAnimating }, key) {
    const shouldBlock = protectedKeys.hasOwnProperty(key) && needsAnimating[key] !== true;
    needsAnimating[key] = false;
    return shouldBlock;
  }
  function animateTarget(visualElement, targetAndTransition, { delay: delay2 = 0, transitionOverride, type } = {}) {
    var _a;
    let { transition = visualElement.getDefaultTransition(), transitionEnd, ...target } = targetAndTransition;
    if (transitionOverride)
      transition = transitionOverride;
    const animations2 = [];
    const animationTypeState = type && visualElement.animationState && visualElement.animationState.getState()[type];
    for (const key in target) {
      const value = visualElement.getValue(key, (_a = visualElement.latestValues[key]) !== null && _a !== void 0 ? _a : null);
      const valueTarget = target[key];
      if (valueTarget === void 0 || animationTypeState && shouldBlockAnimation(animationTypeState, key)) {
        continue;
      }
      const valueTransition = {
        delay: delay2,
        ...getValueTransition(transition || {}, key)
      };
      let isHandoff = false;
      if (window.MotionHandoffAnimation) {
        const appearId = getOptimisedAppearId(visualElement);
        if (appearId) {
          const startTime = window.MotionHandoffAnimation(appearId, key, frame);
          if (startTime !== null) {
            valueTransition.startTime = startTime;
            isHandoff = true;
          }
        }
      }
      addValueToWillChange(visualElement, key);
      value.start(animateMotionValue(key, value, valueTarget, visualElement.shouldReduceMotion && positionalKeys.has(key) ? { type: false } : valueTransition, visualElement, isHandoff));
      const animation = value.animation;
      if (animation) {
        animations2.push(animation);
      }
    }
    if (transitionEnd) {
      Promise.all(animations2).then(() => {
        frame.update(() => {
          transitionEnd && setTarget(visualElement, transitionEnd);
        });
      });
    }
    return animations2;
  }

  // node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.mjs
  function animateVariant(visualElement, variant, options = {}) {
    var _a;
    const resolved = resolveVariant(visualElement, variant, options.type === "exit" ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom : void 0);
    let { transition = visualElement.getDefaultTransition() || {} } = resolved || {};
    if (options.transitionOverride) {
      transition = options.transitionOverride;
    }
    const getAnimation = resolved ? () => Promise.all(animateTarget(visualElement, resolved, options)) : () => Promise.resolve();
    const getChildAnimations = visualElement.variantChildren && visualElement.variantChildren.size ? (forwardDelay = 0) => {
      const { delayChildren = 0, staggerChildren, staggerDirection } = transition;
      return animateChildren(visualElement, variant, delayChildren + forwardDelay, staggerChildren, staggerDirection, options);
    } : () => Promise.resolve();
    const { when } = transition;
    if (when) {
      const [first, last] = when === "beforeChildren" ? [getAnimation, getChildAnimations] : [getChildAnimations, getAnimation];
      return first().then(() => last());
    } else {
      return Promise.all([getAnimation(), getChildAnimations(options.delay)]);
    }
  }
  function animateChildren(visualElement, variant, delayChildren = 0, staggerChildren = 0, staggerDirection = 1, options) {
    const animations2 = [];
    const maxStaggerDuration = (visualElement.variantChildren.size - 1) * staggerChildren;
    const generateStaggerDuration = staggerDirection === 1 ? (i3 = 0) => i3 * staggerChildren : (i3 = 0) => maxStaggerDuration - i3 * staggerChildren;
    Array.from(visualElement.variantChildren).sort(sortByTreeOrder).forEach((child, i3) => {
      child.notify("AnimationStart", variant);
      animations2.push(animateVariant(child, variant, {
        ...options,
        delay: delayChildren + generateStaggerDuration(i3)
      }).then(() => child.notify("AnimationComplete", variant)));
    });
    return Promise.all(animations2);
  }
  function sortByTreeOrder(a2, b2) {
    return a2.sortNodePosition(b2);
  }

  // node_modules/framer-motion/dist/es/animation/interfaces/visual-element.mjs
  function animateVisualElement(visualElement, definition, options = {}) {
    visualElement.notify("AnimationStart", definition);
    let animation;
    if (Array.isArray(definition)) {
      const animations2 = definition.map((variant) => animateVariant(visualElement, variant, options));
      animation = Promise.all(animations2);
    } else if (typeof definition === "string") {
      animation = animateVariant(visualElement, definition, options);
    } else {
      const resolvedDefinition = typeof definition === "function" ? resolveVariant(visualElement, definition, options.custom) : definition;
      animation = Promise.all(animateTarget(visualElement, resolvedDefinition, options));
    }
    return animation.then(() => {
      visualElement.notify("AnimationComplete", definition);
    });
  }

  // node_modules/framer-motion/dist/es/render/utils/get-variant-context.mjs
  var numVariantProps = variantProps.length;
  function getVariantContext(visualElement) {
    if (!visualElement)
      return void 0;
    if (!visualElement.isControllingVariants) {
      const context3 = visualElement.parent ? getVariantContext(visualElement.parent) || {} : {};
      if (visualElement.props.initial !== void 0) {
        context3.initial = visualElement.props.initial;
      }
      return context3;
    }
    const context2 = {};
    for (let i3 = 0; i3 < numVariantProps; i3++) {
      const name = variantProps[i3];
      const prop2 = visualElement.props[name];
      if (isVariantLabel(prop2) || prop2 === false) {
        context2[name] = prop2;
      }
    }
    return context2;
  }

  // node_modules/framer-motion/dist/es/render/utils/animation-state.mjs
  var reversePriorityOrder = [...variantPriorityOrder].reverse();
  var numAnimationTypes = variantPriorityOrder.length;
  function animateList(visualElement) {
    return (animations2) => Promise.all(animations2.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));
  }
  function createAnimationState(visualElement) {
    let animate = animateList(visualElement);
    let state = createState();
    let isInitialRender = true;
    const buildResolvedTypeValues = (type) => (acc, definition) => {
      var _a;
      const resolved = resolveVariant(visualElement, definition, type === "exit" ? (_a = visualElement.presenceContext) === null || _a === void 0 ? void 0 : _a.custom : void 0);
      if (resolved) {
        const { transition, transitionEnd, ...target } = resolved;
        acc = { ...acc, ...target, ...transitionEnd };
      }
      return acc;
    };
    function setAnimateFunction(makeAnimator) {
      animate = makeAnimator(visualElement);
    }
    function animateChanges(changedActiveType) {
      const { props } = visualElement;
      const context2 = getVariantContext(visualElement.parent) || {};
      const animations2 = [];
      const removedKeys = /* @__PURE__ */ new Set();
      let encounteredKeys = {};
      let removedVariantIndex = Infinity;
      for (let i3 = 0; i3 < numAnimationTypes; i3++) {
        const type = reversePriorityOrder[i3];
        const typeState = state[type];
        const prop2 = props[type] !== void 0 ? props[type] : context2[type];
        const propIsVariant = isVariantLabel(prop2);
        const activeDelta = type === changedActiveType ? typeState.isActive : null;
        if (activeDelta === false)
          removedVariantIndex = i3;
        let isInherited = prop2 === context2[type] && prop2 !== props[type] && propIsVariant;
        if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {
          isInherited = false;
        }
        typeState.protectedKeys = { ...encounteredKeys };
        if (
          // If it isn't active and hasn't *just* been set as inactive
          !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type
          !prop2 && !typeState.prevProp || // Or if the prop doesn't define an animation
          isAnimationControls(prop2) || typeof prop2 === "boolean"
        ) {
          continue;
        }
        const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop2);
        let shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active
        type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)
        i3 > removedVariantIndex && propIsVariant;
        let handledRemovedValues = false;
        const definitionList = Array.isArray(prop2) ? prop2 : [prop2];
        let resolvedValues = definitionList.reduce(buildResolvedTypeValues(type), {});
        if (activeDelta === false)
          resolvedValues = {};
        const { prevResolvedValues = {} } = typeState;
        const allKeys = {
          ...prevResolvedValues,
          ...resolvedValues
        };
        const markToAnimate = (key) => {
          shouldAnimateType = true;
          if (removedKeys.has(key)) {
            handledRemovedValues = true;
            removedKeys.delete(key);
          }
          typeState.needsAnimating[key] = true;
          const motionValue2 = visualElement.getValue(key);
          if (motionValue2)
            motionValue2.liveStyle = false;
        };
        for (const key in allKeys) {
          const next3 = resolvedValues[key];
          const prev2 = prevResolvedValues[key];
          if (encounteredKeys.hasOwnProperty(key))
            continue;
          let valueHasChanged = false;
          if (isKeyframesTarget(next3) && isKeyframesTarget(prev2)) {
            valueHasChanged = !shallowCompare(next3, prev2);
          } else {
            valueHasChanged = next3 !== prev2;
          }
          if (valueHasChanged) {
            if (next3 !== void 0 && next3 !== null) {
              markToAnimate(key);
            } else {
              removedKeys.add(key);
            }
          } else if (next3 !== void 0 && removedKeys.has(key)) {
            markToAnimate(key);
          } else {
            typeState.protectedKeys[key] = true;
          }
        }
        typeState.prevProp = prop2;
        typeState.prevResolvedValues = resolvedValues;
        if (typeState.isActive) {
          encounteredKeys = { ...encounteredKeys, ...resolvedValues };
        }
        if (isInitialRender && visualElement.blockInitialAnimation) {
          shouldAnimateType = false;
        }
        const willAnimateViaParent = isInherited && variantDidChange;
        const needsAnimating = !willAnimateViaParent || handledRemovedValues;
        if (shouldAnimateType && needsAnimating) {
          animations2.push(...definitionList.map((animation) => ({
            animation,
            options: { type }
          })));
        }
      }
      if (removedKeys.size) {
        const fallbackAnimation = {};
        removedKeys.forEach((key) => {
          const fallbackTarget = visualElement.getBaseTarget(key);
          const motionValue2 = visualElement.getValue(key);
          if (motionValue2)
            motionValue2.liveStyle = true;
          fallbackAnimation[key] = fallbackTarget !== null && fallbackTarget !== void 0 ? fallbackTarget : null;
        });
        animations2.push({ animation: fallbackAnimation });
      }
      let shouldAnimate = Boolean(animations2.length);
      if (isInitialRender && (props.initial === false || props.initial === props.animate) && !visualElement.manuallyAnimateOnMount) {
        shouldAnimate = false;
      }
      isInitialRender = false;
      return shouldAnimate ? animate(animations2) : Promise.resolve();
    }
    function setActive(type, isActive) {
      var _a;
      if (state[type].isActive === isActive)
        return Promise.resolve();
      (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {
        var _a2;
        return (_a2 = child.animationState) === null || _a2 === void 0 ? void 0 : _a2.setActive(type, isActive);
      });
      state[type].isActive = isActive;
      const animations2 = animateChanges(type);
      for (const key in state) {
        state[key].protectedKeys = {};
      }
      return animations2;
    }
    return {
      animateChanges,
      setActive,
      setAnimateFunction,
      getState: () => state,
      reset: () => {
        state = createState();
        isInitialRender = true;
      }
    };
  }
  function checkVariantsDidChange(prev2, next3) {
    if (typeof next3 === "string") {
      return next3 !== prev2;
    } else if (Array.isArray(next3)) {
      return !shallowCompare(next3, prev2);
    }
    return false;
  }
  function createTypeState(isActive = false) {
    return {
      isActive,
      protectedKeys: {},
      needsAnimating: {},
      prevResolvedValues: {}
    };
  }
  function createState() {
    return {
      animate: createTypeState(true),
      whileInView: createTypeState(),
      whileHover: createTypeState(),
      whileTap: createTypeState(),
      whileDrag: createTypeState(),
      whileFocus: createTypeState(),
      exit: createTypeState()
    };
  }

  // node_modules/framer-motion/dist/es/motion/features/Feature.mjs
  var Feature = class {
    constructor(node2) {
      this.isMounted = false;
      this.node = node2;
    }
    update() {
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/animation/index.mjs
  var AnimationFeature = class extends Feature {
    /**
     * We dynamically generate the AnimationState manager as it contains a reference
     * to the underlying animation library. We only want to load that if we load this,
     * so people can optionally code split it out using the `m` component.
     */
    constructor(node2) {
      super(node2);
      node2.animationState || (node2.animationState = createAnimationState(node2));
    }
    updateAnimationControlsSubscription() {
      const { animate } = this.node.getProps();
      if (isAnimationControls(animate)) {
        this.unmountControls = animate.subscribe(this.node);
      }
    }
    /**
     * Subscribe any provided AnimationControls to the component's VisualElement
     */
    mount() {
      this.updateAnimationControlsSubscription();
    }
    update() {
      const { animate } = this.node.getProps();
      const { animate: prevAnimate } = this.node.prevProps || {};
      if (animate !== prevAnimate) {
        this.updateAnimationControlsSubscription();
      }
    }
    unmount() {
      var _a;
      this.node.animationState.reset();
      (_a = this.unmountControls) === null || _a === void 0 ? void 0 : _a.call(this);
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/animation/exit.mjs
  var id = 0;
  var ExitAnimationFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.id = id++;
    }
    update() {
      if (!this.node.presenceContext)
        return;
      const { isPresent, onExitComplete } = this.node.presenceContext;
      const { isPresent: prevIsPresent } = this.node.prevPresenceContext || {};
      if (!this.node.animationState || isPresent === prevIsPresent) {
        return;
      }
      const exitAnimation = this.node.animationState.setActive("exit", !isPresent);
      if (onExitComplete && !isPresent) {
        exitAnimation.then(() => onExitComplete(this.id));
      }
    }
    mount() {
      const { register: register2 } = this.node.presenceContext || {};
      if (register2) {
        this.unmount = register2(this.id);
      }
    }
    unmount() {
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/animations.mjs
  var animations = {
    animation: {
      Feature: AnimationFeature
    },
    exit: {
      Feature: ExitAnimationFeature
    }
  };

  // node_modules/framer-motion/dist/es/events/add-dom-event.mjs
  function addDomEvent(target, eventName, handler, options = { passive: true }) {
    target.addEventListener(eventName, handler, options);
    return () => target.removeEventListener(eventName, handler);
  }

  // node_modules/framer-motion/dist/es/events/event-info.mjs
  function extractEventInfo(event) {
    return {
      point: {
        x: event.pageX,
        y: event.pageY
      }
    };
  }
  var addPointerInfo = (handler) => {
    return (event) => isPrimaryPointer(event) && handler(event, extractEventInfo(event));
  };

  // node_modules/framer-motion/dist/es/events/add-pointer-event.mjs
  function addPointerEvent(target, eventName, handler, options) {
    return addDomEvent(target, eventName, addPointerInfo(handler), options);
  }

  // node_modules/framer-motion/dist/es/utils/distance.mjs
  var distance = (a2, b2) => Math.abs(a2 - b2);
  function distance2D(a2, b2) {
    const xDelta = distance(a2.x, b2.x);
    const yDelta = distance(a2.y, b2.y);
    return Math.sqrt(xDelta ** 2 + yDelta ** 2);
  }

  // node_modules/framer-motion/dist/es/gestures/pan/PanSession.mjs
  var PanSession = class {
    constructor(event, handlers, { transformPagePoint, contextWindow, dragSnapToOrigin = false } = {}) {
      this.startEvent = null;
      this.lastMoveEvent = null;
      this.lastMoveEventInfo = null;
      this.handlers = {};
      this.contextWindow = window;
      this.updatePoint = () => {
        if (!(this.lastMoveEvent && this.lastMoveEventInfo))
          return;
        const info2 = getPanInfo(this.lastMoveEventInfo, this.history);
        const isPanStarted = this.startEvent !== null;
        const isDistancePastThreshold = distance2D(info2.offset, { x: 0, y: 0 }) >= 3;
        if (!isPanStarted && !isDistancePastThreshold)
          return;
        const { point: point2 } = info2;
        const { timestamp: timestamp2 } = frameData;
        this.history.push({ ...point2, timestamp: timestamp2 });
        const { onStart, onMove } = this.handlers;
        if (!isPanStarted) {
          onStart && onStart(this.lastMoveEvent, info2);
          this.startEvent = this.lastMoveEvent;
        }
        onMove && onMove(this.lastMoveEvent, info2);
      };
      this.handlePointerMove = (event2, info2) => {
        this.lastMoveEvent = event2;
        this.lastMoveEventInfo = transformPoint(info2, this.transformPagePoint);
        frame.update(this.updatePoint, true);
      };
      this.handlePointerUp = (event2, info2) => {
        this.end();
        const { onEnd, onSessionEnd, resumeAnimation } = this.handlers;
        if (this.dragSnapToOrigin)
          resumeAnimation && resumeAnimation();
        if (!(this.lastMoveEvent && this.lastMoveEventInfo))
          return;
        const panInfo = getPanInfo(event2.type === "pointercancel" ? this.lastMoveEventInfo : transformPoint(info2, this.transformPagePoint), this.history);
        if (this.startEvent && onEnd) {
          onEnd(event2, panInfo);
        }
        onSessionEnd && onSessionEnd(event2, panInfo);
      };
      if (!isPrimaryPointer(event))
        return;
      this.dragSnapToOrigin = dragSnapToOrigin;
      this.handlers = handlers;
      this.transformPagePoint = transformPagePoint;
      this.contextWindow = contextWindow || window;
      const info = extractEventInfo(event);
      const initialInfo = transformPoint(info, this.transformPagePoint);
      const { point } = initialInfo;
      const { timestamp } = frameData;
      this.history = [{ ...point, timestamp }];
      const { onSessionStart } = handlers;
      onSessionStart && onSessionStart(event, getPanInfo(initialInfo, this.history));
      this.removeListeners = pipe2(addPointerEvent(this.contextWindow, "pointermove", this.handlePointerMove), addPointerEvent(this.contextWindow, "pointerup", this.handlePointerUp), addPointerEvent(this.contextWindow, "pointercancel", this.handlePointerUp));
    }
    updateHandlers(handlers) {
      this.handlers = handlers;
    }
    end() {
      this.removeListeners && this.removeListeners();
      cancelFrame(this.updatePoint);
    }
  };
  function transformPoint(info, transformPagePoint) {
    return transformPagePoint ? { point: transformPagePoint(info.point) } : info;
  }
  function subtractPoint(a2, b2) {
    return { x: a2.x - b2.x, y: a2.y - b2.y };
  }
  function getPanInfo({ point }, history) {
    return {
      point,
      delta: subtractPoint(point, lastDevicePoint(history)),
      offset: subtractPoint(point, startDevicePoint(history)),
      velocity: getVelocity(history, 0.1)
    };
  }
  function startDevicePoint(history) {
    return history[0];
  }
  function lastDevicePoint(history) {
    return history[history.length - 1];
  }
  function getVelocity(history, timeDelta) {
    if (history.length < 2) {
      return { x: 0, y: 0 };
    }
    let i3 = history.length - 1;
    let timestampedPoint = null;
    const lastPoint = lastDevicePoint(history);
    while (i3 >= 0) {
      timestampedPoint = history[i3];
      if (lastPoint.timestamp - timestampedPoint.timestamp > secondsToMilliseconds(timeDelta)) {
        break;
      }
      i3--;
    }
    if (!timestampedPoint) {
      return { x: 0, y: 0 };
    }
    const time2 = millisecondsToSeconds(lastPoint.timestamp - timestampedPoint.timestamp);
    if (time2 === 0) {
      return { x: 0, y: 0 };
    }
    const currentVelocity = {
      x: (lastPoint.x - timestampedPoint.x) / time2,
      y: (lastPoint.y - timestampedPoint.y) / time2
    };
    if (currentVelocity.x === Infinity) {
      currentVelocity.x = 0;
    }
    if (currentVelocity.y === Infinity) {
      currentVelocity.y = 0;
    }
    return currentVelocity;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-calc.mjs
  var SCALE_PRECISION = 1e-4;
  var SCALE_MIN = 1 - SCALE_PRECISION;
  var SCALE_MAX = 1 + SCALE_PRECISION;
  var TRANSLATE_PRECISION = 0.01;
  var TRANSLATE_MIN = 0 - TRANSLATE_PRECISION;
  var TRANSLATE_MAX = 0 + TRANSLATE_PRECISION;
  function calcLength(axis) {
    return axis.max - axis.min;
  }
  function isNear(value, target, maxDistance) {
    return Math.abs(value - target) <= maxDistance;
  }
  function calcAxisDelta(delta, source, target, origin2 = 0.5) {
    delta.origin = origin2;
    delta.originPoint = mixNumber(source.min, source.max, delta.origin);
    delta.scale = calcLength(target) / calcLength(source);
    delta.translate = mixNumber(target.min, target.max, delta.origin) - delta.originPoint;
    if (delta.scale >= SCALE_MIN && delta.scale <= SCALE_MAX || isNaN(delta.scale)) {
      delta.scale = 1;
    }
    if (delta.translate >= TRANSLATE_MIN && delta.translate <= TRANSLATE_MAX || isNaN(delta.translate)) {
      delta.translate = 0;
    }
  }
  function calcBoxDelta(delta, source, target, origin2) {
    calcAxisDelta(delta.x, source.x, target.x, origin2 ? origin2.originX : void 0);
    calcAxisDelta(delta.y, source.y, target.y, origin2 ? origin2.originY : void 0);
  }
  function calcRelativeAxis(target, relative, parent) {
    target.min = parent.min + relative.min;
    target.max = target.min + calcLength(relative);
  }
  function calcRelativeBox(target, relative, parent) {
    calcRelativeAxis(target.x, relative.x, parent.x);
    calcRelativeAxis(target.y, relative.y, parent.y);
  }
  function calcRelativeAxisPosition(target, layout2, parent) {
    target.min = layout2.min - parent.min;
    target.max = target.min + calcLength(layout2);
  }
  function calcRelativePosition(target, layout2, parent) {
    calcRelativeAxisPosition(target.x, layout2.x, parent.x);
    calcRelativeAxisPosition(target.y, layout2.y, parent.y);
  }

  // node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs
  function applyConstraints(point, { min: min2, max: max2 }, elastic) {
    if (min2 !== void 0 && point < min2) {
      point = elastic ? mixNumber(min2, point, elastic.min) : Math.max(point, min2);
    } else if (max2 !== void 0 && point > max2) {
      point = elastic ? mixNumber(max2, point, elastic.max) : Math.min(point, max2);
    }
    return point;
  }
  function calcRelativeAxisConstraints(axis, min2, max2) {
    return {
      min: min2 !== void 0 ? axis.min + min2 : void 0,
      max: max2 !== void 0 ? axis.max + max2 - (axis.max - axis.min) : void 0
    };
  }
  function calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {
    return {
      x: calcRelativeAxisConstraints(layoutBox.x, left, right),
      y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)
    };
  }
  function calcViewportAxisConstraints(layoutAxis, constraintsAxis) {
    let min2 = constraintsAxis.min - layoutAxis.min;
    let max2 = constraintsAxis.max - layoutAxis.max;
    if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {
      [min2, max2] = [max2, min2];
    }
    return { min: min2, max: max2 };
  }
  function calcViewportConstraints(layoutBox, constraintsBox) {
    return {
      x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),
      y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)
    };
  }
  function calcOrigin2(source, target) {
    let origin2 = 0.5;
    const sourceLength = calcLength(source);
    const targetLength = calcLength(target);
    if (targetLength > sourceLength) {
      origin2 = progress(target.min, target.max - sourceLength, source.min);
    } else if (sourceLength > targetLength) {
      origin2 = progress(source.min, source.max - targetLength, target.min);
    }
    return clamp2(0, 1, origin2);
  }
  function rebaseAxisConstraints(layout2, constraints) {
    const relativeConstraints = {};
    if (constraints.min !== void 0) {
      relativeConstraints.min = constraints.min - layout2.min;
    }
    if (constraints.max !== void 0) {
      relativeConstraints.max = constraints.max - layout2.min;
    }
    return relativeConstraints;
  }
  var defaultElastic = 0.35;
  function resolveDragElastic(dragElastic = defaultElastic) {
    if (dragElastic === false) {
      dragElastic = 0;
    } else if (dragElastic === true) {
      dragElastic = defaultElastic;
    }
    return {
      x: resolveAxisElastic(dragElastic, "left", "right"),
      y: resolveAxisElastic(dragElastic, "top", "bottom")
    };
  }
  function resolveAxisElastic(dragElastic, minLabel, maxLabel) {
    return {
      min: resolvePointElastic(dragElastic, minLabel),
      max: resolvePointElastic(dragElastic, maxLabel)
    };
  }
  function resolvePointElastic(dragElastic, label) {
    return typeof dragElastic === "number" ? dragElastic : dragElastic[label] || 0;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/models.mjs
  var createAxisDelta = () => ({
    translate: 0,
    scale: 1,
    origin: 0,
    originPoint: 0
  });
  var createDelta = () => ({
    x: createAxisDelta(),
    y: createAxisDelta()
  });
  var createAxis = () => ({ min: 0, max: 0 });
  var createBox = () => ({
    x: createAxis(),
    y: createAxis()
  });

  // node_modules/framer-motion/dist/es/projection/utils/each-axis.mjs
  function eachAxis(callback) {
    return [callback("x"), callback("y")];
  }

  // node_modules/framer-motion/dist/es/projection/geometry/conversion.mjs
  function convertBoundingBoxToBox({ top, left, right, bottom }) {
    return {
      x: { min: left, max: right },
      y: { min: top, max: bottom }
    };
  }
  function convertBoxToBoundingBox({ x: x2, y: y2 }) {
    return { top: y2.min, right: x2.max, bottom: y2.max, left: x2.min };
  }
  function transformBoxPoints(point, transformPoint2) {
    if (!transformPoint2)
      return point;
    const topLeft = transformPoint2({ x: point.left, y: point.top });
    const bottomRight = transformPoint2({ x: point.right, y: point.bottom });
    return {
      top: topLeft.y,
      left: topLeft.x,
      bottom: bottomRight.y,
      right: bottomRight.x
    };
  }

  // node_modules/framer-motion/dist/es/projection/utils/has-transform.mjs
  function isIdentityScale(scale2) {
    return scale2 === void 0 || scale2 === 1;
  }
  function hasScale({ scale: scale2, scaleX, scaleY }) {
    return !isIdentityScale(scale2) || !isIdentityScale(scaleX) || !isIdentityScale(scaleY);
  }
  function hasTransform(values) {
    return hasScale(values) || has2DTranslate(values) || values.z || values.rotate || values.rotateX || values.rotateY || values.skewX || values.skewY;
  }
  function has2DTranslate(values) {
    return is2DTranslate(values.x) || is2DTranslate(values.y);
  }
  function is2DTranslate(value) {
    return value && value !== "0%";
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-apply.mjs
  function scalePoint(point, scale2, originPoint) {
    const distanceFromOrigin = point - originPoint;
    const scaled = scale2 * distanceFromOrigin;
    return originPoint + scaled;
  }
  function applyPointDelta(point, translate, scale2, originPoint, boxScale) {
    if (boxScale !== void 0) {
      point = scalePoint(point, boxScale, originPoint);
    }
    return scalePoint(point, scale2, originPoint) + translate;
  }
  function applyAxisDelta(axis, translate = 0, scale2 = 1, originPoint, boxScale) {
    axis.min = applyPointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = applyPointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function applyBoxDelta(box, { x: x2, y: y2 }) {
    applyAxisDelta(box.x, x2.translate, x2.scale, x2.originPoint);
    applyAxisDelta(box.y, y2.translate, y2.scale, y2.originPoint);
  }
  var TREE_SCALE_SNAP_MIN = 0.999999999999;
  var TREE_SCALE_SNAP_MAX = 1.0000000000001;
  function applyTreeDeltas(box, treeScale, treePath, isSharedTransition = false) {
    const treeLength = treePath.length;
    if (!treeLength)
      return;
    treeScale.x = treeScale.y = 1;
    let node2;
    let delta;
    for (let i3 = 0; i3 < treeLength; i3++) {
      node2 = treePath[i3];
      delta = node2.projectionDelta;
      const { visualElement } = node2.options;
      if (visualElement && visualElement.props.style && visualElement.props.style.display === "contents") {
        continue;
      }
      if (isSharedTransition && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
        transformBox(box, {
          x: -node2.scroll.offset.x,
          y: -node2.scroll.offset.y
        });
      }
      if (delta) {
        treeScale.x *= delta.x.scale;
        treeScale.y *= delta.y.scale;
        applyBoxDelta(box, delta);
      }
      if (isSharedTransition && hasTransform(node2.latestValues)) {
        transformBox(box, node2.latestValues);
      }
    }
    if (treeScale.x < TREE_SCALE_SNAP_MAX && treeScale.x > TREE_SCALE_SNAP_MIN) {
      treeScale.x = 1;
    }
    if (treeScale.y < TREE_SCALE_SNAP_MAX && treeScale.y > TREE_SCALE_SNAP_MIN) {
      treeScale.y = 1;
    }
  }
  function translateAxis(axis, distance2) {
    axis.min = axis.min + distance2;
    axis.max = axis.max + distance2;
  }
  function transformAxis(axis, axisTranslate, axisScale, boxScale, axisOrigin = 0.5) {
    const originPoint = mixNumber(axis.min, axis.max, axisOrigin);
    applyAxisDelta(axis, axisTranslate, axisScale, originPoint, boxScale);
  }
  function transformBox(box, transform) {
    transformAxis(box.x, transform.x, transform.scaleX, transform.scale, transform.originX);
    transformAxis(box.y, transform.y, transform.scaleY, transform.scale, transform.originY);
  }

  // node_modules/framer-motion/dist/es/projection/utils/measure.mjs
  function measureViewportBox(instance, transformPoint2) {
    return convertBoundingBoxToBox(transformBoxPoints(instance.getBoundingClientRect(), transformPoint2));
  }
  function measurePageBox(element, rootProjectionNode2, transformPagePoint) {
    const viewportBox = measureViewportBox(element, transformPagePoint);
    const { scroll } = rootProjectionNode2;
    if (scroll) {
      translateAxis(viewportBox.x, scroll.offset.x);
      translateAxis(viewportBox.y, scroll.offset.y);
    }
    return viewportBox;
  }

  // node_modules/framer-motion/dist/es/utils/get-context-window.mjs
  var getContextWindow = ({ current }) => {
    return current ? current.ownerDocument.defaultView : null;
  };

  // node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs
  var elementDragControls = /* @__PURE__ */ new WeakMap();
  var VisualElementDragControls = class {
    constructor(visualElement) {
      this.openDragLock = null;
      this.isDragging = false;
      this.currentDirection = null;
      this.originPoint = { x: 0, y: 0 };
      this.constraints = false;
      this.hasMutatedConstraints = false;
      this.elastic = createBox();
      this.visualElement = visualElement;
    }
    start(originEvent, { snapToCursor = false } = {}) {
      const { presenceContext } = this.visualElement;
      if (presenceContext && presenceContext.isPresent === false)
        return;
      const onSessionStart = (event) => {
        const { dragSnapToOrigin: dragSnapToOrigin2 } = this.getProps();
        dragSnapToOrigin2 ? this.pauseAnimation() : this.stopAnimation();
        if (snapToCursor) {
          this.snapToCursor(extractEventInfo(event).point);
        }
      };
      const onStart = (event, info) => {
        const { drag: drag2, dragPropagation, onDragStart } = this.getProps();
        if (drag2 && !dragPropagation) {
          if (this.openDragLock)
            this.openDragLock();
          this.openDragLock = setDragLock(drag2);
          if (!this.openDragLock)
            return;
        }
        this.isDragging = true;
        this.currentDirection = null;
        this.resolveConstraints();
        if (this.visualElement.projection) {
          this.visualElement.projection.isAnimationBlocked = true;
          this.visualElement.projection.target = void 0;
        }
        eachAxis((axis) => {
          let current = this.getAxisMotionValue(axis).get() || 0;
          if (percent.test(current)) {
            const { projection } = this.visualElement;
            if (projection && projection.layout) {
              const measuredAxis = projection.layout.layoutBox[axis];
              if (measuredAxis) {
                const length2 = calcLength(measuredAxis);
                current = length2 * (parseFloat(current) / 100);
              }
            }
          }
          this.originPoint[axis] = current;
        });
        if (onDragStart) {
          frame.postRender(() => onDragStart(event, info));
        }
        addValueToWillChange(this.visualElement, "transform");
        const { animationState } = this.visualElement;
        animationState && animationState.setActive("whileDrag", true);
      };
      const onMove = (event, info) => {
        const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag } = this.getProps();
        if (!dragPropagation && !this.openDragLock)
          return;
        const { offset: offset5 } = info;
        if (dragDirectionLock && this.currentDirection === null) {
          this.currentDirection = getCurrentDirection(offset5);
          if (this.currentDirection !== null) {
            onDirectionLock && onDirectionLock(this.currentDirection);
          }
          return;
        }
        this.updateAxis("x", info.point, offset5);
        this.updateAxis("y", info.point, offset5);
        this.visualElement.render();
        onDrag && onDrag(event, info);
      };
      const onSessionEnd = (event, info) => this.stop(event, info);
      const resumeAnimation = () => eachAxis((axis) => {
        var _a;
        return this.getAnimationState(axis) === "paused" && ((_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.play());
      });
      const { dragSnapToOrigin } = this.getProps();
      this.panSession = new PanSession(originEvent, {
        onSessionStart,
        onStart,
        onMove,
        onSessionEnd,
        resumeAnimation
      }, {
        transformPagePoint: this.visualElement.getTransformPagePoint(),
        dragSnapToOrigin,
        contextWindow: getContextWindow(this.visualElement)
      });
    }
    stop(event, info) {
      const isDragging4 = this.isDragging;
      this.cancel();
      if (!isDragging4)
        return;
      const { velocity } = info;
      this.startAnimation(velocity);
      const { onDragEnd } = this.getProps();
      if (onDragEnd) {
        frame.postRender(() => onDragEnd(event, info));
      }
    }
    cancel() {
      this.isDragging = false;
      const { projection, animationState } = this.visualElement;
      if (projection) {
        projection.isAnimationBlocked = false;
      }
      this.panSession && this.panSession.end();
      this.panSession = void 0;
      const { dragPropagation } = this.getProps();
      if (!dragPropagation && this.openDragLock) {
        this.openDragLock();
        this.openDragLock = null;
      }
      animationState && animationState.setActive("whileDrag", false);
    }
    updateAxis(axis, _point, offset5) {
      const { drag: drag2 } = this.getProps();
      if (!offset5 || !shouldDrag(axis, drag2, this.currentDirection))
        return;
      const axisValue = this.getAxisMotionValue(axis);
      let next3 = this.originPoint[axis] + offset5[axis];
      if (this.constraints && this.constraints[axis]) {
        next3 = applyConstraints(next3, this.constraints[axis], this.elastic[axis]);
      }
      axisValue.set(next3);
    }
    resolveConstraints() {
      var _a;
      const { dragConstraints, dragElastic } = this.getProps();
      const layout2 = this.visualElement.projection && !this.visualElement.projection.layout ? this.visualElement.projection.measure(false) : (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout;
      const prevConstraints = this.constraints;
      if (dragConstraints && isRefObject(dragConstraints)) {
        if (!this.constraints) {
          this.constraints = this.resolveRefConstraints();
        }
      } else {
        if (dragConstraints && layout2) {
          this.constraints = calcRelativeConstraints(layout2.layoutBox, dragConstraints);
        } else {
          this.constraints = false;
        }
      }
      this.elastic = resolveDragElastic(dragElastic);
      if (prevConstraints !== this.constraints && layout2 && this.constraints && !this.hasMutatedConstraints) {
        eachAxis((axis) => {
          if (this.constraints !== false && this.getAxisMotionValue(axis)) {
            this.constraints[axis] = rebaseAxisConstraints(layout2.layoutBox[axis], this.constraints[axis]);
          }
        });
      }
    }
    resolveRefConstraints() {
      const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();
      if (!constraints || !isRefObject(constraints))
        return false;
      const constraintsElement = constraints.current;
      invariant2(constraintsElement !== null, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
      const { projection } = this.visualElement;
      if (!projection || !projection.layout)
        return false;
      const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());
      let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);
      if (onMeasureDragConstraints) {
        const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));
        this.hasMutatedConstraints = !!userConstraints;
        if (userConstraints) {
          measuredConstraints = convertBoundingBoxToBox(userConstraints);
        }
      }
      return measuredConstraints;
    }
    startAnimation(velocity) {
      const { drag: drag2, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd } = this.getProps();
      const constraints = this.constraints || {};
      const momentumAnimations = eachAxis((axis) => {
        if (!shouldDrag(axis, drag2, this.currentDirection)) {
          return;
        }
        let transition = constraints && constraints[axis] || {};
        if (dragSnapToOrigin)
          transition = { min: 0, max: 0 };
        const bounceStiffness = dragElastic ? 200 : 1e6;
        const bounceDamping = dragElastic ? 40 : 1e7;
        const inertia2 = {
          type: "inertia",
          velocity: dragMomentum ? velocity[axis] : 0,
          bounceStiffness,
          bounceDamping,
          timeConstant: 750,
          restDelta: 1,
          restSpeed: 10,
          ...dragTransition,
          ...transition
        };
        return this.startAxisValueAnimation(axis, inertia2);
      });
      return Promise.all(momentumAnimations).then(onDragTransitionEnd);
    }
    startAxisValueAnimation(axis, transition) {
      const axisValue = this.getAxisMotionValue(axis);
      addValueToWillChange(this.visualElement, axis);
      return axisValue.start(animateMotionValue(axis, axisValue, 0, transition, this.visualElement, false));
    }
    stopAnimation() {
      eachAxis((axis) => this.getAxisMotionValue(axis).stop());
    }
    pauseAnimation() {
      eachAxis((axis) => {
        var _a;
        return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.pause();
      });
    }
    getAnimationState(axis) {
      var _a;
      return (_a = this.getAxisMotionValue(axis).animation) === null || _a === void 0 ? void 0 : _a.state;
    }
    /**
     * Drag works differently depending on which props are provided.
     *
     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.
     * - Otherwise, we apply the delta to the x/y motion values.
     */
    getAxisMotionValue(axis) {
      const dragKey = `_drag${axis.toUpperCase()}`;
      const props = this.visualElement.getProps();
      const externalMotionValue = props[dragKey];
      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : void 0) || 0);
    }
    snapToCursor(point) {
      eachAxis((axis) => {
        const { drag: drag2 } = this.getProps();
        if (!shouldDrag(axis, drag2, this.currentDirection))
          return;
        const { projection } = this.visualElement;
        const axisValue = this.getAxisMotionValue(axis);
        if (projection && projection.layout) {
          const { min: min2, max: max2 } = projection.layout.layoutBox[axis];
          axisValue.set(point[axis] - mixNumber(min2, max2, 0.5));
        }
      });
    }
    /**
     * When the viewport resizes we want to check if the measured constraints
     * have changed and, if so, reposition the element within those new constraints
     * relative to where it was before the resize.
     */
    scalePositionWithinConstraints() {
      if (!this.visualElement.current)
        return;
      const { drag: drag2, dragConstraints } = this.getProps();
      const { projection } = this.visualElement;
      if (!isRefObject(dragConstraints) || !projection || !this.constraints)
        return;
      this.stopAnimation();
      const boxProgress = { x: 0, y: 0 };
      eachAxis((axis) => {
        const axisValue = this.getAxisMotionValue(axis);
        if (axisValue && this.constraints !== false) {
          const latest = axisValue.get();
          boxProgress[axis] = calcOrigin2({ min: latest, max: latest }, this.constraints[axis]);
        }
      });
      const { transformTemplate } = this.visualElement.getProps();
      this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, "") : "none";
      projection.root && projection.root.updateScroll();
      projection.updateLayout();
      this.resolveConstraints();
      eachAxis((axis) => {
        if (!shouldDrag(axis, drag2, null))
          return;
        const axisValue = this.getAxisMotionValue(axis);
        const { min: min2, max: max2 } = this.constraints[axis];
        axisValue.set(mixNumber(min2, max2, boxProgress[axis]));
      });
    }
    addListeners() {
      if (!this.visualElement.current)
        return;
      elementDragControls.set(this.visualElement, this);
      const element = this.visualElement.current;
      const stopPointerListener = addPointerEvent(element, "pointerdown", (event) => {
        const { drag: drag2, dragListener = true } = this.getProps();
        drag2 && dragListener && this.start(event);
      });
      const measureDragConstraints = () => {
        const { dragConstraints } = this.getProps();
        if (isRefObject(dragConstraints) && dragConstraints.current) {
          this.constraints = this.resolveRefConstraints();
        }
      };
      const { projection } = this.visualElement;
      const stopMeasureLayoutListener = projection.addEventListener("measure", measureDragConstraints);
      if (projection && !projection.layout) {
        projection.root && projection.root.updateScroll();
        projection.updateLayout();
      }
      frame.read(measureDragConstraints);
      const stopResizeListener = addDomEvent(window, "resize", () => this.scalePositionWithinConstraints());
      const stopLayoutUpdateListener = projection.addEventListener("didUpdate", ({ delta, hasLayoutChanged }) => {
        if (this.isDragging && hasLayoutChanged) {
          eachAxis((axis) => {
            const motionValue2 = this.getAxisMotionValue(axis);
            if (!motionValue2)
              return;
            this.originPoint[axis] += delta[axis].translate;
            motionValue2.set(motionValue2.get() + delta[axis].translate);
          });
          this.visualElement.render();
        }
      });
      return () => {
        stopResizeListener();
        stopPointerListener();
        stopMeasureLayoutListener();
        stopLayoutUpdateListener && stopLayoutUpdateListener();
      };
    }
    getProps() {
      const props = this.visualElement.getProps();
      const { drag: drag2 = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true } = props;
      return {
        ...props,
        drag: drag2,
        dragDirectionLock,
        dragPropagation,
        dragConstraints,
        dragElastic,
        dragMomentum
      };
    }
  };
  function shouldDrag(direction, drag2, currentDirection) {
    return (drag2 === true || drag2 === direction) && (currentDirection === null || currentDirection === direction);
  }
  function getCurrentDirection(offset5, lockThreshold = 10) {
    let direction = null;
    if (Math.abs(offset5.y) > lockThreshold) {
      direction = "y";
    } else if (Math.abs(offset5.x) > lockThreshold) {
      direction = "x";
    }
    return direction;
  }

  // node_modules/framer-motion/dist/es/gestures/drag/index.mjs
  var DragGesture = class extends Feature {
    constructor(node2) {
      super(node2);
      this.removeGroupControls = noop3;
      this.removeListeners = noop3;
      this.controls = new VisualElementDragControls(node2);
    }
    mount() {
      const { dragControls } = this.node.getProps();
      if (dragControls) {
        this.removeGroupControls = dragControls.subscribe(this.controls);
      }
      this.removeListeners = this.controls.addListeners() || noop3;
    }
    unmount() {
      this.removeGroupControls();
      this.removeListeners();
    }
  };

  // node_modules/framer-motion/dist/es/gestures/pan/index.mjs
  var asyncHandler = (handler) => (event, info) => {
    if (handler) {
      frame.postRender(() => handler(event, info));
    }
  };
  var PanGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.removePointerDownListener = noop3;
    }
    onPointerDown(pointerDownEvent) {
      this.session = new PanSession(pointerDownEvent, this.createPanHandlers(), {
        transformPagePoint: this.node.getTransformPagePoint(),
        contextWindow: getContextWindow(this.node)
      });
    }
    createPanHandlers() {
      const { onPanSessionStart, onPanStart, onPan, onPanEnd } = this.node.getProps();
      return {
        onSessionStart: asyncHandler(onPanSessionStart),
        onStart: asyncHandler(onPanStart),
        onMove: onPan,
        onEnd: (event, info) => {
          delete this.session;
          if (onPanEnd) {
            frame.postRender(() => onPanEnd(event, info));
          }
        }
      };
    }
    mount() {
      this.removePointerDownListener = addPointerEvent(this.node.current, "pointerdown", (event) => this.onPointerDown(event));
    }
    update() {
      this.session && this.session.updateHandlers(this.createPanHandlers());
    }
    unmount() {
      this.removePointerDownListener();
      this.session && this.session.end();
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
  var import_react76 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/projection/node/state.mjs
  var globalProjectionState = {
    /**
     * Global flag as to whether the tree has animated since the last time
     * we resized the window
     */
    hasAnimatedSinceResize: true,
    /**
     * We set this to true once, on the first update. Any nodes added to the tree beyond that
     * update will be given a `data-projection-id` attribute.
     */
    hasEverUpdated: false
  };

  // node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.mjs
  function pixelsToPercent(pixels, axis) {
    if (axis.max === axis.min)
      return 0;
    return pixels / (axis.max - axis.min) * 100;
  }
  var correctBorderRadius = {
    correct: (latest, node2) => {
      if (!node2.target)
        return latest;
      if (typeof latest === "string") {
        if (px.test(latest)) {
          latest = parseFloat(latest);
        } else {
          return latest;
        }
      }
      const x2 = pixelsToPercent(latest, node2.target.x);
      const y2 = pixelsToPercent(latest, node2.target.y);
      return `${x2}% ${y2}%`;
    }
  };

  // node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs
  var correctBoxShadow = {
    correct: (latest, { treeScale, projectionDelta }) => {
      const original = latest;
      const shadow = complex.parse(latest);
      if (shadow.length > 5)
        return original;
      const template2 = complex.createTransformer(latest);
      const offset5 = typeof shadow[0] !== "number" ? 1 : 0;
      const xScale = projectionDelta.x.scale * treeScale.x;
      const yScale = projectionDelta.y.scale * treeScale.y;
      shadow[0 + offset5] /= xScale;
      shadow[1 + offset5] /= yScale;
      const averageScale = mixNumber(xScale, yScale, 0.5);
      if (typeof shadow[2 + offset5] === "number")
        shadow[2 + offset5] /= averageScale;
      if (typeof shadow[3 + offset5] === "number")
        shadow[3 + offset5] /= averageScale;
      return template2(shadow);
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs
  var MeasureLayoutWithContext = class extends import_react76.Component {
    /**
     * This only mounts projection nodes for components that
     * need measuring, we might want to do it for all components
     * in order to incorporate transforms
     */
    componentDidMount() {
      const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;
      const { projection } = visualElement;
      addScaleCorrector(defaultScaleCorrectors);
      if (projection) {
        if (layoutGroup.group)
          layoutGroup.group.add(projection);
        if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {
          switchLayoutGroup.register(projection);
        }
        projection.root.didUpdate();
        projection.addEventListener("animationComplete", () => {
          this.safeToRemove();
        });
        projection.setOptions({
          ...projection.options,
          onExitComplete: () => this.safeToRemove()
        });
      }
      globalProjectionState.hasEverUpdated = true;
    }
    getSnapshotBeforeUpdate(prevProps) {
      const { layoutDependency, visualElement, drag: drag2, isPresent } = this.props;
      const projection = visualElement.projection;
      if (!projection)
        return null;
      projection.isPresent = isPresent;
      if (drag2 || prevProps.layoutDependency !== layoutDependency || layoutDependency === void 0) {
        projection.willUpdate();
      } else {
        this.safeToRemove();
      }
      if (prevProps.isPresent !== isPresent) {
        if (isPresent) {
          projection.promote();
        } else if (!projection.relegate()) {
          frame.postRender(() => {
            const stack2 = projection.getStack();
            if (!stack2 || !stack2.members.length) {
              this.safeToRemove();
            }
          });
        }
      }
      return null;
    }
    componentDidUpdate() {
      const { projection } = this.props.visualElement;
      if (projection) {
        projection.root.didUpdate();
        microtask.postRender(() => {
          if (!projection.currentAnimation && projection.isLead()) {
            this.safeToRemove();
          }
        });
      }
    }
    componentWillUnmount() {
      const { visualElement, layoutGroup, switchLayoutGroup: promoteContext } = this.props;
      const { projection } = visualElement;
      if (projection) {
        projection.scheduleCheckAfterUnmount();
        if (layoutGroup && layoutGroup.group)
          layoutGroup.group.remove(projection);
        if (promoteContext && promoteContext.deregister)
          promoteContext.deregister(projection);
      }
    }
    safeToRemove() {
      const { safeToRemove } = this.props;
      safeToRemove && safeToRemove();
    }
    render() {
      return null;
    }
  };
  function MeasureLayout(props) {
    const [isPresent, safeToRemove] = usePresence();
    const layoutGroup = (0, import_react76.useContext)(LayoutGroupContext);
    return (0, import_jsx_runtime34.jsx)(MeasureLayoutWithContext, { ...props, layoutGroup, switchLayoutGroup: (0, import_react76.useContext)(SwitchLayoutGroupContext), isPresent, safeToRemove });
  }
  var defaultScaleCorrectors = {
    borderRadius: {
      ...correctBorderRadius,
      applyTo: [
        "borderTopLeftRadius",
        "borderTopRightRadius",
        "borderBottomLeftRadius",
        "borderBottomRightRadius"
      ]
    },
    borderTopLeftRadius: correctBorderRadius,
    borderTopRightRadius: correctBorderRadius,
    borderBottomLeftRadius: correctBorderRadius,
    borderBottomRightRadius: correctBorderRadius,
    boxShadow: correctBoxShadow
  };

  // node_modules/framer-motion/dist/es/animation/animate/single-value.mjs
  function animateSingleValue(value, keyframes4, options) {
    const motionValue$1 = isMotionValue(value) ? value : motionValue(value);
    motionValue$1.start(animateMotionValue("", motionValue$1, keyframes4, options));
    return motionValue$1.animation;
  }

  // node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.mjs
  function isSVGElement(element) {
    return element instanceof SVGElement && element.tagName !== "svg";
  }

  // node_modules/framer-motion/dist/es/render/utils/compare-by-depth.mjs
  var compareByDepth = (a2, b2) => a2.depth - b2.depth;

  // node_modules/framer-motion/dist/es/render/utils/flat-tree.mjs
  var FlatTree = class {
    constructor() {
      this.children = [];
      this.isDirty = false;
    }
    add(child) {
      addUniqueItem(this.children, child);
      this.isDirty = true;
    }
    remove(child) {
      removeItem(this.children, child);
      this.isDirty = true;
    }
    forEach(callback) {
      this.isDirty && this.children.sort(compareByDepth);
      this.isDirty = false;
      this.children.forEach(callback);
    }
  };

  // node_modules/framer-motion/dist/es/utils/delay.mjs
  function delay(callback, timeout) {
    const start2 = time.now();
    const checkElapsed = ({ timestamp }) => {
      const elapsed = timestamp - start2;
      if (elapsed >= timeout) {
        cancelFrame(checkElapsed);
        callback(elapsed - timeout);
      }
    };
    frame.read(checkElapsed, true);
    return () => cancelFrame(checkElapsed);
  }

  // node_modules/framer-motion/dist/es/projection/animation/mix-values.mjs
  var borders = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
  var numBorders = borders.length;
  var asNumber = (value) => typeof value === "string" ? parseFloat(value) : value;
  var isPx = (value) => typeof value === "number" || px.test(value);
  function mixValues(target, follow, lead, progress2, shouldCrossfadeOpacity, isOnlyMember) {
    if (shouldCrossfadeOpacity) {
      target.opacity = mixNumber(
        0,
        // TODO Reinstate this if only child
        lead.opacity !== void 0 ? lead.opacity : 1,
        easeCrossfadeIn(progress2)
      );
      target.opacityExit = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, 0, easeCrossfadeOut(progress2));
    } else if (isOnlyMember) {
      target.opacity = mixNumber(follow.opacity !== void 0 ? follow.opacity : 1, lead.opacity !== void 0 ? lead.opacity : 1, progress2);
    }
    for (let i3 = 0; i3 < numBorders; i3++) {
      const borderLabel = `border${borders[i3]}Radius`;
      let followRadius = getRadius(follow, borderLabel);
      let leadRadius = getRadius(lead, borderLabel);
      if (followRadius === void 0 && leadRadius === void 0)
        continue;
      followRadius || (followRadius = 0);
      leadRadius || (leadRadius = 0);
      const canMix = followRadius === 0 || leadRadius === 0 || isPx(followRadius) === isPx(leadRadius);
      if (canMix) {
        target[borderLabel] = Math.max(mixNumber(asNumber(followRadius), asNumber(leadRadius), progress2), 0);
        if (percent.test(leadRadius) || percent.test(followRadius)) {
          target[borderLabel] += "%";
        }
      } else {
        target[borderLabel] = leadRadius;
      }
    }
    if (follow.rotate || lead.rotate) {
      target.rotate = mixNumber(follow.rotate || 0, lead.rotate || 0, progress2);
    }
  }
  function getRadius(values, radiusName) {
    return values[radiusName] !== void 0 ? values[radiusName] : values.borderRadius;
  }
  var easeCrossfadeIn = /* @__PURE__ */ compress(0, 0.5, circOut);
  var easeCrossfadeOut = /* @__PURE__ */ compress(0.5, 0.95, noop3);
  function compress(min2, max2, easing) {
    return (p2) => {
      if (p2 < min2)
        return 0;
      if (p2 > max2)
        return 1;
      return easing(progress(min2, max2, p2));
    };
  }

  // node_modules/framer-motion/dist/es/projection/geometry/copy.mjs
  function copyAxisInto(axis, originAxis) {
    axis.min = originAxis.min;
    axis.max = originAxis.max;
  }
  function copyBoxInto(box, originBox) {
    copyAxisInto(box.x, originBox.x);
    copyAxisInto(box.y, originBox.y);
  }
  function copyAxisDeltaInto(delta, originDelta) {
    delta.translate = originDelta.translate;
    delta.scale = originDelta.scale;
    delta.originPoint = originDelta.originPoint;
    delta.origin = originDelta.origin;
  }

  // node_modules/framer-motion/dist/es/projection/geometry/delta-remove.mjs
  function removePointDelta(point, translate, scale2, originPoint, boxScale) {
    point -= translate;
    point = scalePoint(point, 1 / scale2, originPoint);
    if (boxScale !== void 0) {
      point = scalePoint(point, 1 / boxScale, originPoint);
    }
    return point;
  }
  function removeAxisDelta(axis, translate = 0, scale2 = 1, origin2 = 0.5, boxScale, originAxis = axis, sourceAxis = axis) {
    if (percent.test(translate)) {
      translate = parseFloat(translate);
      const relativeProgress = mixNumber(sourceAxis.min, sourceAxis.max, translate / 100);
      translate = relativeProgress - sourceAxis.min;
    }
    if (typeof translate !== "number")
      return;
    let originPoint = mixNumber(originAxis.min, originAxis.max, origin2);
    if (axis === originAxis)
      originPoint -= translate;
    axis.min = removePointDelta(axis.min, translate, scale2, originPoint, boxScale);
    axis.max = removePointDelta(axis.max, translate, scale2, originPoint, boxScale);
  }
  function removeAxisTransforms(axis, transforms, [key, scaleKey, originKey], origin2, sourceAxis) {
    removeAxisDelta(axis, transforms[key], transforms[scaleKey], transforms[originKey], transforms.scale, origin2, sourceAxis);
  }
  var xKeys = ["x", "scaleX", "originX"];
  var yKeys = ["y", "scaleY", "originY"];
  function removeBoxTransforms(box, transforms, originBox, sourceBox) {
    removeAxisTransforms(box.x, transforms, xKeys, originBox ? originBox.x : void 0, sourceBox ? sourceBox.x : void 0);
    removeAxisTransforms(box.y, transforms, yKeys, originBox ? originBox.y : void 0, sourceBox ? sourceBox.y : void 0);
  }

  // node_modules/framer-motion/dist/es/projection/geometry/utils.mjs
  function isAxisDeltaZero(delta) {
    return delta.translate === 0 && delta.scale === 1;
  }
  function isDeltaZero(delta) {
    return isAxisDeltaZero(delta.x) && isAxisDeltaZero(delta.y);
  }
  function axisEquals(a2, b2) {
    return a2.min === b2.min && a2.max === b2.max;
  }
  function boxEquals(a2, b2) {
    return axisEquals(a2.x, b2.x) && axisEquals(a2.y, b2.y);
  }
  function axisEqualsRounded(a2, b2) {
    return Math.round(a2.min) === Math.round(b2.min) && Math.round(a2.max) === Math.round(b2.max);
  }
  function boxEqualsRounded(a2, b2) {
    return axisEqualsRounded(a2.x, b2.x) && axisEqualsRounded(a2.y, b2.y);
  }
  function aspectRatio(box) {
    return calcLength(box.x) / calcLength(box.y);
  }
  function axisDeltaEquals(a2, b2) {
    return a2.translate === b2.translate && a2.scale === b2.scale && a2.originPoint === b2.originPoint;
  }

  // node_modules/framer-motion/dist/es/projection/shared/stack.mjs
  var NodeStack = class {
    constructor() {
      this.members = [];
    }
    add(node2) {
      addUniqueItem(this.members, node2);
      node2.scheduleRender();
    }
    remove(node2) {
      removeItem(this.members, node2);
      if (node2 === this.prevLead) {
        this.prevLead = void 0;
      }
      if (node2 === this.lead) {
        const prevLead = this.members[this.members.length - 1];
        if (prevLead) {
          this.promote(prevLead);
        }
      }
    }
    relegate(node2) {
      const indexOfNode = this.members.findIndex((member) => node2 === member);
      if (indexOfNode === 0)
        return false;
      let prevLead;
      for (let i3 = indexOfNode; i3 >= 0; i3--) {
        const member = this.members[i3];
        if (member.isPresent !== false) {
          prevLead = member;
          break;
        }
      }
      if (prevLead) {
        this.promote(prevLead);
        return true;
      } else {
        return false;
      }
    }
    promote(node2, preserveFollowOpacity) {
      const prevLead = this.lead;
      if (node2 === prevLead)
        return;
      this.prevLead = prevLead;
      this.lead = node2;
      node2.show();
      if (prevLead) {
        prevLead.instance && prevLead.scheduleRender();
        node2.scheduleRender();
        node2.resumeFrom = prevLead;
        if (preserveFollowOpacity) {
          node2.resumeFrom.preserveOpacity = true;
        }
        if (prevLead.snapshot) {
          node2.snapshot = prevLead.snapshot;
          node2.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;
        }
        if (node2.root && node2.root.isUpdating) {
          node2.isLayoutDirty = true;
        }
        const { crossfade } = node2.options;
        if (crossfade === false) {
          prevLead.hide();
        }
      }
    }
    exitAnimationComplete() {
      this.members.forEach((node2) => {
        const { options, resumingFrom } = node2;
        options.onExitComplete && options.onExitComplete();
        if (resumingFrom) {
          resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();
        }
      });
    }
    scheduleRender() {
      this.members.forEach((node2) => {
        node2.instance && node2.scheduleRender(false);
      });
    }
    /**
     * Clear any leads that have been removed this render to prevent them from being
     * used in future animations and to prevent memory leaks
     */
    removeLeadSnapshot() {
      if (this.lead && this.lead.snapshot) {
        this.lead.snapshot = void 0;
      }
    }
  };

  // node_modules/framer-motion/dist/es/projection/styles/transform.mjs
  function buildProjectionTransform(delta, treeScale, latestTransform) {
    let transform = "";
    const xTranslate = delta.x.translate / treeScale.x;
    const yTranslate = delta.y.translate / treeScale.y;
    const zTranslate = (latestTransform === null || latestTransform === void 0 ? void 0 : latestTransform.z) || 0;
    if (xTranslate || yTranslate || zTranslate) {
      transform = `translate3d(${xTranslate}px, ${yTranslate}px, ${zTranslate}px) `;
    }
    if (treeScale.x !== 1 || treeScale.y !== 1) {
      transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;
    }
    if (latestTransform) {
      const { transformPerspective, rotate, rotateX, rotateY, skewX, skewY } = latestTransform;
      if (transformPerspective)
        transform = `perspective(${transformPerspective}px) ${transform}`;
      if (rotate)
        transform += `rotate(${rotate}deg) `;
      if (rotateX)
        transform += `rotateX(${rotateX}deg) `;
      if (rotateY)
        transform += `rotateY(${rotateY}deg) `;
      if (skewX)
        transform += `skewX(${skewX}deg) `;
      if (skewY)
        transform += `skewY(${skewY}deg) `;
    }
    const elementScaleX = delta.x.scale * treeScale.x;
    const elementScaleY = delta.y.scale * treeScale.y;
    if (elementScaleX !== 1 || elementScaleY !== 1) {
      transform += `scale(${elementScaleX}, ${elementScaleY})`;
    }
    return transform || "none";
  }

  // node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs
  var metrics = {
    type: "projectionFrame",
    totalNodes: 0,
    resolvedTargetDeltas: 0,
    recalculatedProjection: 0
  };
  var isDebug = typeof window !== "undefined" && window.MotionDebug !== void 0;
  var transformAxes = ["", "X", "Y", "Z"];
  var hiddenVisibility = { visibility: "hidden" };
  var animationTarget = 1e3;
  var id2 = 0;
  function resetDistortingTransform(key, visualElement, values, sharedAnimationValues) {
    const { latestValues } = visualElement;
    if (latestValues[key]) {
      values[key] = latestValues[key];
      visualElement.setStaticValue(key, 0);
      if (sharedAnimationValues) {
        sharedAnimationValues[key] = 0;
      }
    }
  }
  function cancelTreeOptimisedTransformAnimations(projectionNode) {
    projectionNode.hasCheckedOptimisedAppear = true;
    if (projectionNode.root === projectionNode)
      return;
    const { visualElement } = projectionNode.options;
    if (!visualElement)
      return;
    const appearId = getOptimisedAppearId(visualElement);
    if (window.MotionHasOptimisedAnimation(appearId, "transform")) {
      const { layout: layout2, layoutId } = projectionNode.options;
      window.MotionCancelOptimisedAnimation(appearId, "transform", frame, !(layout2 || layoutId));
    }
    const { parent } = projectionNode;
    if (parent && !parent.hasCheckedOptimisedAppear) {
      cancelTreeOptimisedTransformAnimations(parent);
    }
  }
  function createProjectionNode2({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform }) {
    return class ProjectionNode {
      constructor(latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {
        this.id = id2++;
        this.animationId = 0;
        this.children = /* @__PURE__ */ new Set();
        this.options = {};
        this.isTreeAnimating = false;
        this.isAnimationBlocked = false;
        this.isLayoutDirty = false;
        this.isProjectionDirty = false;
        this.isSharedProjectionDirty = false;
        this.isTransformDirty = false;
        this.updateManuallyBlocked = false;
        this.updateBlockedByResize = false;
        this.isUpdating = false;
        this.isSVG = false;
        this.needsReset = false;
        this.shouldResetTransform = false;
        this.hasCheckedOptimisedAppear = false;
        this.treeScale = { x: 1, y: 1 };
        this.eventHandlers = /* @__PURE__ */ new Map();
        this.hasTreeAnimated = false;
        this.updateScheduled = false;
        this.scheduleUpdate = () => this.update();
        this.projectionUpdateScheduled = false;
        this.checkUpdateFailed = () => {
          if (this.isUpdating) {
            this.isUpdating = false;
            this.clearAllSnapshots();
          }
        };
        this.updateProjection = () => {
          this.projectionUpdateScheduled = false;
          if (isDebug) {
            metrics.totalNodes = metrics.resolvedTargetDeltas = metrics.recalculatedProjection = 0;
          }
          this.nodes.forEach(propagateDirtyNodes);
          this.nodes.forEach(resolveTargetDelta);
          this.nodes.forEach(calcProjection);
          this.nodes.forEach(cleanDirtyNodes);
          if (isDebug) {
            window.MotionDebug.record(metrics);
          }
        };
        this.resolvedRelativeTargetAt = 0;
        this.hasProjected = false;
        this.isVisible = true;
        this.animationProgress = 0;
        this.sharedNodes = /* @__PURE__ */ new Map();
        this.latestValues = latestValues;
        this.root = parent ? parent.root || parent : this;
        this.path = parent ? [...parent.path, parent] : [];
        this.parent = parent;
        this.depth = parent ? parent.depth + 1 : 0;
        for (let i3 = 0; i3 < this.path.length; i3++) {
          this.path[i3].shouldResetTransform = true;
        }
        if (this.root === this)
          this.nodes = new FlatTree();
      }
      addEventListener(name, handler) {
        if (!this.eventHandlers.has(name)) {
          this.eventHandlers.set(name, new SubscriptionManager());
        }
        return this.eventHandlers.get(name).add(handler);
      }
      notifyListeners(name, ...args) {
        const subscriptionManager = this.eventHandlers.get(name);
        subscriptionManager && subscriptionManager.notify(...args);
      }
      hasListeners(name) {
        return this.eventHandlers.has(name);
      }
      /**
       * Lifecycles
       */
      mount(instance, isLayoutDirty = this.root.hasTreeAnimated) {
        if (this.instance)
          return;
        this.isSVG = isSVGElement(instance);
        this.instance = instance;
        const { layoutId, layout: layout2, visualElement } = this.options;
        if (visualElement && !visualElement.current) {
          visualElement.mount(instance);
        }
        this.root.nodes.add(this);
        this.parent && this.parent.children.add(this);
        if (isLayoutDirty && (layout2 || layoutId)) {
          this.isLayoutDirty = true;
        }
        if (attachResizeListener) {
          let cancelDelay;
          const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;
          attachResizeListener(instance, () => {
            this.root.updateBlockedByResize = true;
            cancelDelay && cancelDelay();
            cancelDelay = delay(resizeUnblockUpdate, 250);
            if (globalProjectionState.hasAnimatedSinceResize) {
              globalProjectionState.hasAnimatedSinceResize = false;
              this.nodes.forEach(finishAnimation);
            }
          });
        }
        if (layoutId) {
          this.root.registerSharedNode(layoutId, this);
        }
        if (this.options.animate !== false && visualElement && (layoutId || layout2)) {
          this.addEventListener("didUpdate", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout }) => {
            if (this.isTreeAnimationBlocked()) {
              this.target = void 0;
              this.relativeTarget = void 0;
              return;
            }
            const layoutTransition = this.options.transition || visualElement.getDefaultTransition() || defaultLayoutTransition;
            const { onLayoutAnimationStart, onLayoutAnimationComplete } = visualElement.getProps();
            const targetChanged = !this.targetLayout || !boxEqualsRounded(this.targetLayout, newLayout) || hasRelativeTargetChanged;
            const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;
            if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {
              if (this.resumeFrom) {
                this.resumingFrom = this.resumeFrom;
                this.resumingFrom.resumingFrom = void 0;
              }
              this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);
              const animationOptions = {
                ...getValueTransition(layoutTransition, "layout"),
                onPlay: onLayoutAnimationStart,
                onComplete: onLayoutAnimationComplete
              };
              if (visualElement.shouldReduceMotion || this.options.layoutRoot) {
                animationOptions.delay = 0;
                animationOptions.type = false;
              }
              this.startAnimation(animationOptions);
            } else {
              if (!hasLayoutChanged) {
                finishAnimation(this);
              }
              if (this.isLead() && this.options.onExitComplete) {
                this.options.onExitComplete();
              }
            }
            this.targetLayout = newLayout;
          });
        }
      }
      unmount() {
        this.options.layoutId && this.willUpdate();
        this.root.nodes.remove(this);
        const stack2 = this.getStack();
        stack2 && stack2.remove(this);
        this.parent && this.parent.children.delete(this);
        this.instance = void 0;
        cancelFrame(this.updateProjection);
      }
      // only on the root
      blockUpdate() {
        this.updateManuallyBlocked = true;
      }
      unblockUpdate() {
        this.updateManuallyBlocked = false;
      }
      isUpdateBlocked() {
        return this.updateManuallyBlocked || this.updateBlockedByResize;
      }
      isTreeAnimationBlocked() {
        return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
      }
      // Note: currently only running on root node
      startUpdate() {
        if (this.isUpdateBlocked())
          return;
        this.isUpdating = true;
        this.nodes && this.nodes.forEach(resetSkewAndRotation);
        this.animationId++;
      }
      getTransformTemplate() {
        const { visualElement } = this.options;
        return visualElement && visualElement.getProps().transformTemplate;
      }
      willUpdate(shouldNotifyListeners = true) {
        this.root.hasTreeAnimated = true;
        if (this.root.isUpdateBlocked()) {
          this.options.onExitComplete && this.options.onExitComplete();
          return;
        }
        if (window.MotionCancelOptimisedAnimation && !this.hasCheckedOptimisedAppear) {
          cancelTreeOptimisedTransformAnimations(this);
        }
        !this.root.isUpdating && this.root.startUpdate();
        if (this.isLayoutDirty)
          return;
        this.isLayoutDirty = true;
        for (let i3 = 0; i3 < this.path.length; i3++) {
          const node2 = this.path[i3];
          node2.shouldResetTransform = true;
          node2.updateScroll("snapshot");
          if (node2.options.layoutRoot) {
            node2.willUpdate(false);
          }
        }
        const { layoutId, layout: layout2 } = this.options;
        if (layoutId === void 0 && !layout2)
          return;
        const transformTemplate = this.getTransformTemplate();
        this.prevTransformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
        this.updateSnapshot();
        shouldNotifyListeners && this.notifyListeners("willUpdate");
      }
      update() {
        this.updateScheduled = false;
        const updateWasBlocked = this.isUpdateBlocked();
        if (updateWasBlocked) {
          this.unblockUpdate();
          this.clearAllSnapshots();
          this.nodes.forEach(clearMeasurements);
          return;
        }
        if (!this.isUpdating) {
          this.nodes.forEach(clearIsLayoutDirty);
        }
        this.isUpdating = false;
        this.nodes.forEach(resetTransformStyle);
        this.nodes.forEach(updateLayout);
        this.nodes.forEach(notifyLayoutUpdate);
        this.clearAllSnapshots();
        const now2 = time.now();
        frameData.delta = clamp2(0, 1e3 / 60, now2 - frameData.timestamp);
        frameData.timestamp = now2;
        frameData.isProcessing = true;
        frameSteps.update.process(frameData);
        frameSteps.preRender.process(frameData);
        frameSteps.render.process(frameData);
        frameData.isProcessing = false;
      }
      didUpdate() {
        if (!this.updateScheduled) {
          this.updateScheduled = true;
          microtask.read(this.scheduleUpdate);
        }
      }
      clearAllSnapshots() {
        this.nodes.forEach(clearSnapshot);
        this.sharedNodes.forEach(removeLeadSnapshots);
      }
      scheduleUpdateProjection() {
        if (!this.projectionUpdateScheduled) {
          this.projectionUpdateScheduled = true;
          frame.preRender(this.updateProjection, false, true);
        }
      }
      scheduleCheckAfterUnmount() {
        frame.postRender(() => {
          if (this.isLayoutDirty) {
            this.root.didUpdate();
          } else {
            this.root.checkUpdateFailed();
          }
        });
      }
      /**
       * Update measurements
       */
      updateSnapshot() {
        if (this.snapshot || !this.instance)
          return;
        this.snapshot = this.measure();
      }
      updateLayout() {
        if (!this.instance)
          return;
        this.updateScroll();
        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {
          return;
        }
        if (this.resumeFrom && !this.resumeFrom.instance) {
          for (let i3 = 0; i3 < this.path.length; i3++) {
            const node2 = this.path[i3];
            node2.updateScroll();
          }
        }
        const prevLayout = this.layout;
        this.layout = this.measure(false);
        this.layoutCorrected = createBox();
        this.isLayoutDirty = false;
        this.projectionDelta = void 0;
        this.notifyListeners("measure", this.layout.layoutBox);
        const { visualElement } = this.options;
        visualElement && visualElement.notify("LayoutMeasure", this.layout.layoutBox, prevLayout ? prevLayout.layoutBox : void 0);
      }
      updateScroll(phase = "measure") {
        let needsMeasurement = Boolean(this.options.layoutScroll && this.instance);
        if (this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === phase) {
          needsMeasurement = false;
        }
        if (needsMeasurement) {
          const isRoot = checkIsScrollRoot(this.instance);
          this.scroll = {
            animationId: this.root.animationId,
            phase,
            isRoot,
            offset: measureScroll(this.instance),
            wasRoot: this.scroll ? this.scroll.isRoot : isRoot
          };
        }
      }
      resetTransform() {
        if (!resetTransform)
          return;
        const isResetRequested = this.isLayoutDirty || this.shouldResetTransform || this.options.alwaysMeasureLayout;
        const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);
        const transformTemplate = this.getTransformTemplate();
        const transformTemplateValue = transformTemplate ? transformTemplate(this.latestValues, "") : void 0;
        const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;
        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {
          resetTransform(this.instance, transformTemplateValue);
          this.shouldResetTransform = false;
          this.scheduleRender();
        }
      }
      measure(removeTransform = true) {
        const pageBox = this.measurePageBox();
        let layoutBox = this.removeElementScroll(pageBox);
        if (removeTransform) {
          layoutBox = this.removeTransform(layoutBox);
        }
        roundBox(layoutBox);
        return {
          animationId: this.root.animationId,
          measuredBox: pageBox,
          layoutBox,
          latestValues: {},
          source: this.id
        };
      }
      measurePageBox() {
        var _a;
        const { visualElement } = this.options;
        if (!visualElement)
          return createBox();
        const box = visualElement.measureViewportBox();
        const wasInScrollRoot = ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) || this.path.some(checkNodeWasScrollRoot);
        if (!wasInScrollRoot) {
          const { scroll } = this.root;
          if (scroll) {
            translateAxis(box.x, scroll.offset.x);
            translateAxis(box.y, scroll.offset.y);
          }
        }
        return box;
      }
      removeElementScroll(box) {
        var _a;
        const boxWithoutScroll = createBox();
        copyBoxInto(boxWithoutScroll, box);
        if ((_a = this.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot) {
          return boxWithoutScroll;
        }
        for (let i3 = 0; i3 < this.path.length; i3++) {
          const node2 = this.path[i3];
          const { scroll, options } = node2;
          if (node2 !== this.root && scroll && options.layoutScroll) {
            if (scroll.wasRoot) {
              copyBoxInto(boxWithoutScroll, box);
            }
            translateAxis(boxWithoutScroll.x, scroll.offset.x);
            translateAxis(boxWithoutScroll.y, scroll.offset.y);
          }
        }
        return boxWithoutScroll;
      }
      applyTransform(box, transformOnly = false) {
        const withTransforms = createBox();
        copyBoxInto(withTransforms, box);
        for (let i3 = 0; i3 < this.path.length; i3++) {
          const node2 = this.path[i3];
          if (!transformOnly && node2.options.layoutScroll && node2.scroll && node2 !== node2.root) {
            transformBox(withTransforms, {
              x: -node2.scroll.offset.x,
              y: -node2.scroll.offset.y
            });
          }
          if (!hasTransform(node2.latestValues))
            continue;
          transformBox(withTransforms, node2.latestValues);
        }
        if (hasTransform(this.latestValues)) {
          transformBox(withTransforms, this.latestValues);
        }
        return withTransforms;
      }
      removeTransform(box) {
        const boxWithoutTransform = createBox();
        copyBoxInto(boxWithoutTransform, box);
        for (let i3 = 0; i3 < this.path.length; i3++) {
          const node2 = this.path[i3];
          if (!node2.instance)
            continue;
          if (!hasTransform(node2.latestValues))
            continue;
          hasScale(node2.latestValues) && node2.updateSnapshot();
          const sourceBox = createBox();
          const nodeBox = node2.measurePageBox();
          copyBoxInto(sourceBox, nodeBox);
          removeBoxTransforms(boxWithoutTransform, node2.latestValues, node2.snapshot ? node2.snapshot.layoutBox : void 0, sourceBox);
        }
        if (hasTransform(this.latestValues)) {
          removeBoxTransforms(boxWithoutTransform, this.latestValues);
        }
        return boxWithoutTransform;
      }
      setTargetDelta(delta) {
        this.targetDelta = delta;
        this.root.scheduleUpdateProjection();
        this.isProjectionDirty = true;
      }
      setOptions(options) {
        this.options = {
          ...this.options,
          ...options,
          crossfade: options.crossfade !== void 0 ? options.crossfade : true
        };
      }
      clearMeasurements() {
        this.scroll = void 0;
        this.layout = void 0;
        this.snapshot = void 0;
        this.prevTransformTemplateValue = void 0;
        this.targetDelta = void 0;
        this.target = void 0;
        this.isLayoutDirty = false;
      }
      forceRelativeParentToResolveTarget() {
        if (!this.relativeParent)
          return;
        if (this.relativeParent.resolvedRelativeTargetAt !== frameData.timestamp) {
          this.relativeParent.resolveTargetDelta(true);
        }
      }
      resolveTargetDelta(forceRecalculation = false) {
        var _a;
        const lead = this.getLead();
        this.isProjectionDirty || (this.isProjectionDirty = lead.isProjectionDirty);
        this.isTransformDirty || (this.isTransformDirty = lead.isTransformDirty);
        this.isSharedProjectionDirty || (this.isSharedProjectionDirty = lead.isSharedProjectionDirty);
        const isShared = Boolean(this.resumingFrom) || this !== lead;
        const canSkip = !(forceRecalculation || isShared && this.isSharedProjectionDirty || this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty) || this.attemptToResolveRelativeTarget || this.root.updateBlockedByResize);
        if (canSkip)
          return;
        const { layout: layout2, layoutId } = this.options;
        if (!this.layout || !(layout2 || layoutId))
          return;
        this.resolvedRelativeTargetAt = frameData.timestamp;
        if (!this.targetDelta && !this.relativeTarget) {
          const relativeParent = this.getClosestProjectingParent();
          if (relativeParent && relativeParent.layout && this.animationProgress !== 1) {
            this.relativeParent = relativeParent;
            this.forceRelativeParentToResolveTarget();
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.layout.layoutBox, relativeParent.layout.layoutBox);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          } else {
            this.relativeParent = this.relativeTarget = void 0;
          }
        }
        if (!this.relativeTarget && !this.targetDelta)
          return;
        if (!this.target) {
          this.target = createBox();
          this.targetWithTransforms = createBox();
        }
        if (this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target) {
          this.forceRelativeParentToResolveTarget();
          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);
        } else if (this.targetDelta) {
          if (Boolean(this.resumingFrom)) {
            this.target = this.applyTransform(this.layout.layoutBox);
          } else {
            copyBoxInto(this.target, this.layout.layoutBox);
          }
          applyBoxDelta(this.target, this.targetDelta);
        } else {
          copyBoxInto(this.target, this.layout.layoutBox);
        }
        if (this.attemptToResolveRelativeTarget) {
          this.attemptToResolveRelativeTarget = false;
          const relativeParent = this.getClosestProjectingParent();
          if (relativeParent && Boolean(relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !relativeParent.options.layoutScroll && relativeParent.target && this.animationProgress !== 1) {
            this.relativeParent = relativeParent;
            this.forceRelativeParentToResolveTarget();
            this.relativeTarget = createBox();
            this.relativeTargetOrigin = createBox();
            calcRelativePosition(this.relativeTargetOrigin, this.target, relativeParent.target);
            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);
          } else {
            this.relativeParent = this.relativeTarget = void 0;
          }
        }
        if (isDebug) {
          metrics.resolvedTargetDeltas++;
        }
      }
      getClosestProjectingParent() {
        if (!this.parent || hasScale(this.parent.latestValues) || has2DTranslate(this.parent.latestValues)) {
          return void 0;
        }
        if (this.parent.isProjecting()) {
          return this.parent;
        } else {
          return this.parent.getClosestProjectingParent();
        }
      }
      isProjecting() {
        return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
      }
      calcProjection() {
        var _a;
        const lead = this.getLead();
        const isShared = Boolean(this.resumingFrom) || this !== lead;
        let canSkip = true;
        if (this.isProjectionDirty || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isProjectionDirty)) {
          canSkip = false;
        }
        if (isShared && (this.isSharedProjectionDirty || this.isTransformDirty)) {
          canSkip = false;
        }
        if (this.resolvedRelativeTargetAt === frameData.timestamp) {
          canSkip = false;
        }
        if (canSkip)
          return;
        const { layout: layout2, layoutId } = this.options;
        this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation);
        if (!this.isTreeAnimating) {
          this.targetDelta = this.relativeTarget = void 0;
        }
        if (!this.layout || !(layout2 || layoutId))
          return;
        copyBoxInto(this.layoutCorrected, this.layout.layoutBox);
        const prevTreeScaleX = this.treeScale.x;
        const prevTreeScaleY = this.treeScale.y;
        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, isShared);
        if (lead.layout && !lead.target && (this.treeScale.x !== 1 || this.treeScale.y !== 1)) {
          lead.target = lead.layout.layoutBox;
          lead.targetWithTransforms = createBox();
        }
        const { target } = lead;
        if (!target) {
          if (this.prevProjectionDelta) {
            this.createProjectionDeltas();
            this.scheduleRender();
          }
          return;
        }
        if (!this.projectionDelta || !this.prevProjectionDelta) {
          this.createProjectionDeltas();
        } else {
          copyAxisDeltaInto(this.prevProjectionDelta.x, this.projectionDelta.x);
          copyAxisDeltaInto(this.prevProjectionDelta.y, this.projectionDelta.y);
        }
        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);
        if (this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY || !axisDeltaEquals(this.projectionDelta.x, this.prevProjectionDelta.x) || !axisDeltaEquals(this.projectionDelta.y, this.prevProjectionDelta.y)) {
          this.hasProjected = true;
          this.scheduleRender();
          this.notifyListeners("projectionUpdate", target);
        }
        if (isDebug) {
          metrics.recalculatedProjection++;
        }
      }
      hide() {
        this.isVisible = false;
      }
      show() {
        this.isVisible = true;
      }
      scheduleRender(notifyAll = true) {
        var _a;
        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.scheduleRender();
        if (notifyAll) {
          const stack2 = this.getStack();
          stack2 && stack2.scheduleRender();
        }
        if (this.resumingFrom && !this.resumingFrom.instance) {
          this.resumingFrom = void 0;
        }
      }
      createProjectionDeltas() {
        this.prevProjectionDelta = createDelta();
        this.projectionDelta = createDelta();
        this.projectionDeltaWithTransform = createDelta();
      }
      setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {
        const snapshot = this.snapshot;
        const snapshotLatestValues = snapshot ? snapshot.latestValues : {};
        const mixedValues = { ...this.latestValues };
        const targetDelta = createDelta();
        if (!this.relativeParent || !this.relativeParent.options.layoutRoot) {
          this.relativeTarget = this.relativeTargetOrigin = void 0;
        }
        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;
        const relativeLayout = createBox();
        const snapshotSource = snapshot ? snapshot.source : void 0;
        const layoutSource = this.layout ? this.layout.source : void 0;
        const isSharedLayoutAnimation = snapshotSource !== layoutSource;
        const stack2 = this.getStack();
        const isOnlyMember = !stack2 || stack2.members.length <= 1;
        const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));
        this.animationProgress = 0;
        let prevRelativeTarget;
        this.mixTargetDelta = (latest) => {
          const progress2 = latest / 1e3;
          mixAxisDelta(targetDelta.x, delta.x, progress2);
          mixAxisDelta(targetDelta.y, delta.y, progress2);
          this.setTargetDelta(targetDelta);
          if (this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout) {
            calcRelativePosition(relativeLayout, this.layout.layoutBox, this.relativeParent.layout.layoutBox);
            mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress2);
            if (prevRelativeTarget && boxEquals(this.relativeTarget, prevRelativeTarget)) {
              this.isProjectionDirty = false;
            }
            if (!prevRelativeTarget)
              prevRelativeTarget = createBox();
            copyBoxInto(prevRelativeTarget, this.relativeTarget);
          }
          if (isSharedLayoutAnimation) {
            this.animationValues = mixedValues;
            mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress2, shouldCrossfadeOpacity, isOnlyMember);
          }
          this.root.scheduleUpdateProjection();
          this.scheduleRender();
          this.animationProgress = progress2;
        };
        this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
      }
      startAnimation(options) {
        this.notifyListeners("animationStart");
        this.currentAnimation && this.currentAnimation.stop();
        if (this.resumingFrom && this.resumingFrom.currentAnimation) {
          this.resumingFrom.currentAnimation.stop();
        }
        if (this.pendingAnimation) {
          cancelFrame(this.pendingAnimation);
          this.pendingAnimation = void 0;
        }
        this.pendingAnimation = frame.update(() => {
          globalProjectionState.hasAnimatedSinceResize = true;
          this.currentAnimation = animateSingleValue(0, animationTarget, {
            ...options,
            onUpdate: (latest) => {
              this.mixTargetDelta(latest);
              options.onUpdate && options.onUpdate(latest);
            },
            onComplete: () => {
              options.onComplete && options.onComplete();
              this.completeAnimation();
            }
          });
          if (this.resumingFrom) {
            this.resumingFrom.currentAnimation = this.currentAnimation;
          }
          this.pendingAnimation = void 0;
        });
      }
      completeAnimation() {
        if (this.resumingFrom) {
          this.resumingFrom.currentAnimation = void 0;
          this.resumingFrom.preserveOpacity = void 0;
        }
        const stack2 = this.getStack();
        stack2 && stack2.exitAnimationComplete();
        this.resumingFrom = this.currentAnimation = this.animationValues = void 0;
        this.notifyListeners("animationComplete");
      }
      finishAnimation() {
        if (this.currentAnimation) {
          this.mixTargetDelta && this.mixTargetDelta(animationTarget);
          this.currentAnimation.stop();
        }
        this.completeAnimation();
      }
      applyTransformsToTarget() {
        const lead = this.getLead();
        let { targetWithTransforms, target, layout: layout2, latestValues } = lead;
        if (!targetWithTransforms || !target || !layout2)
          return;
        if (this !== lead && this.layout && layout2 && shouldAnimatePositionOnly(this.options.animationType, this.layout.layoutBox, layout2.layoutBox)) {
          target = this.target || createBox();
          const xLength = calcLength(this.layout.layoutBox.x);
          target.x.min = lead.target.x.min;
          target.x.max = target.x.min + xLength;
          const yLength = calcLength(this.layout.layoutBox.y);
          target.y.min = lead.target.y.min;
          target.y.max = target.y.min + yLength;
        }
        copyBoxInto(targetWithTransforms, target);
        transformBox(targetWithTransforms, latestValues);
        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);
      }
      registerSharedNode(layoutId, node2) {
        if (!this.sharedNodes.has(layoutId)) {
          this.sharedNodes.set(layoutId, new NodeStack());
        }
        const stack2 = this.sharedNodes.get(layoutId);
        stack2.add(node2);
        const config2 = node2.options.initialPromotionConfig;
        node2.promote({
          transition: config2 ? config2.transition : void 0,
          preserveFollowOpacity: config2 && config2.shouldPreserveFollowOpacity ? config2.shouldPreserveFollowOpacity(node2) : void 0
        });
      }
      isLead() {
        const stack2 = this.getStack();
        return stack2 ? stack2.lead === this : true;
      }
      getLead() {
        var _a;
        const { layoutId } = this.options;
        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;
      }
      getPrevLead() {
        var _a;
        const { layoutId } = this.options;
        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : void 0;
      }
      getStack() {
        const { layoutId } = this.options;
        if (layoutId)
          return this.root.sharedNodes.get(layoutId);
      }
      promote({ needsReset, transition, preserveFollowOpacity } = {}) {
        const stack2 = this.getStack();
        if (stack2)
          stack2.promote(this, preserveFollowOpacity);
        if (needsReset) {
          this.projectionDelta = void 0;
          this.needsReset = true;
        }
        if (transition)
          this.setOptions({ transition });
      }
      relegate() {
        const stack2 = this.getStack();
        if (stack2) {
          return stack2.relegate(this);
        } else {
          return false;
        }
      }
      resetSkewAndRotation() {
        const { visualElement } = this.options;
        if (!visualElement)
          return;
        let hasDistortingTransform = false;
        const { latestValues } = visualElement;
        if (latestValues.z || latestValues.rotate || latestValues.rotateX || latestValues.rotateY || latestValues.rotateZ || latestValues.skewX || latestValues.skewY) {
          hasDistortingTransform = true;
        }
        if (!hasDistortingTransform)
          return;
        const resetValues = {};
        if (latestValues.z) {
          resetDistortingTransform("z", visualElement, resetValues, this.animationValues);
        }
        for (let i3 = 0; i3 < transformAxes.length; i3++) {
          resetDistortingTransform(`rotate${transformAxes[i3]}`, visualElement, resetValues, this.animationValues);
          resetDistortingTransform(`skew${transformAxes[i3]}`, visualElement, resetValues, this.animationValues);
        }
        visualElement.render();
        for (const key in resetValues) {
          visualElement.setStaticValue(key, resetValues[key]);
          if (this.animationValues) {
            this.animationValues[key] = resetValues[key];
          }
        }
        visualElement.scheduleRender();
      }
      getProjectionStyles(styleProp) {
        var _a, _b;
        if (!this.instance || this.isSVG)
          return void 0;
        if (!this.isVisible) {
          return hiddenVisibility;
        }
        const styles = {
          visibility: ""
        };
        const transformTemplate = this.getTransformTemplate();
        if (this.needsReset) {
          this.needsReset = false;
          styles.opacity = "";
          styles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
          styles.transform = transformTemplate ? transformTemplate(this.latestValues, "") : "none";
          return styles;
        }
        const lead = this.getLead();
        if (!this.projectionDelta || !this.layout || !lead.target) {
          const emptyStyles = {};
          if (this.options.layoutId) {
            emptyStyles.opacity = this.latestValues.opacity !== void 0 ? this.latestValues.opacity : 1;
            emptyStyles.pointerEvents = resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "";
          }
          if (this.hasProjected && !hasTransform(this.latestValues)) {
            emptyStyles.transform = transformTemplate ? transformTemplate({}, "") : "none";
            this.hasProjected = false;
          }
          return emptyStyles;
        }
        const valuesToRender = lead.animationValues || lead.latestValues;
        this.applyTransformsToTarget();
        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);
        if (transformTemplate) {
          styles.transform = transformTemplate(valuesToRender, styles.transform);
        }
        const { x: x2, y: y2 } = this.projectionDelta;
        styles.transformOrigin = `${x2.origin * 100}% ${y2.origin * 100}% 0`;
        if (lead.animationValues) {
          styles.opacity = lead === this ? (_b = (_a = valuesToRender.opacity) !== null && _a !== void 0 ? _a : this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;
        } else {
          styles.opacity = lead === this ? valuesToRender.opacity !== void 0 ? valuesToRender.opacity : "" : valuesToRender.opacityExit !== void 0 ? valuesToRender.opacityExit : 0;
        }
        for (const key in scaleCorrectors) {
          if (valuesToRender[key] === void 0)
            continue;
          const { correct, applyTo } = scaleCorrectors[key];
          const corrected = styles.transform === "none" ? valuesToRender[key] : correct(valuesToRender[key], lead);
          if (applyTo) {
            const num = applyTo.length;
            for (let i3 = 0; i3 < num; i3++) {
              styles[applyTo[i3]] = corrected;
            }
          } else {
            styles[key] = corrected;
          }
        }
        if (this.options.layoutId) {
          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp === null || styleProp === void 0 ? void 0 : styleProp.pointerEvents) || "" : "none";
        }
        return styles;
      }
      clearSnapshot() {
        this.resumeFrom = this.snapshot = void 0;
      }
      // Only run on root
      resetTree() {
        this.root.nodes.forEach((node2) => {
          var _a;
          return (_a = node2.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();
        });
        this.root.nodes.forEach(clearMeasurements);
        this.root.sharedNodes.clear();
      }
    };
  }
  function updateLayout(node2) {
    node2.updateLayout();
  }
  function notifyLayoutUpdate(node2) {
    var _a;
    const snapshot = ((_a = node2.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node2.snapshot;
    if (node2.isLead() && node2.layout && snapshot && node2.hasListeners("didUpdate")) {
      const { layoutBox: layout2, measuredBox: measuredLayout } = node2.layout;
      const { animationType } = node2.options;
      const isShared = snapshot.source !== node2.layout.source;
      if (animationType === "size") {
        eachAxis((axis) => {
          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
          const length2 = calcLength(axisSnapshot);
          axisSnapshot.min = layout2[axis].min;
          axisSnapshot.max = axisSnapshot.min + length2;
        });
      } else if (shouldAnimatePositionOnly(animationType, snapshot.layoutBox, layout2)) {
        eachAxis((axis) => {
          const axisSnapshot = isShared ? snapshot.measuredBox[axis] : snapshot.layoutBox[axis];
          const length2 = calcLength(layout2[axis]);
          axisSnapshot.max = axisSnapshot.min + length2;
          if (node2.relativeTarget && !node2.currentAnimation) {
            node2.isProjectionDirty = true;
            node2.relativeTarget[axis].max = node2.relativeTarget[axis].min + length2;
          }
        });
      }
      const layoutDelta = createDelta();
      calcBoxDelta(layoutDelta, layout2, snapshot.layoutBox);
      const visualDelta = createDelta();
      if (isShared) {
        calcBoxDelta(visualDelta, node2.applyTransform(measuredLayout, true), snapshot.measuredBox);
      } else {
        calcBoxDelta(visualDelta, layout2, snapshot.layoutBox);
      }
      const hasLayoutChanged = !isDeltaZero(layoutDelta);
      let hasRelativeTargetChanged = false;
      if (!node2.resumeFrom) {
        const relativeParent = node2.getClosestProjectingParent();
        if (relativeParent && !relativeParent.resumeFrom) {
          const { snapshot: parentSnapshot, layout: parentLayout } = relativeParent;
          if (parentSnapshot && parentLayout) {
            const relativeSnapshot = createBox();
            calcRelativePosition(relativeSnapshot, snapshot.layoutBox, parentSnapshot.layoutBox);
            const relativeLayout = createBox();
            calcRelativePosition(relativeLayout, layout2, parentLayout.layoutBox);
            if (!boxEqualsRounded(relativeSnapshot, relativeLayout)) {
              hasRelativeTargetChanged = true;
            }
            if (relativeParent.options.layoutRoot) {
              node2.relativeTarget = relativeLayout;
              node2.relativeTargetOrigin = relativeSnapshot;
              node2.relativeParent = relativeParent;
            }
          }
        }
      }
      node2.notifyListeners("didUpdate", {
        layout: layout2,
        snapshot,
        delta: visualDelta,
        layoutDelta,
        hasLayoutChanged,
        hasRelativeTargetChanged
      });
    } else if (node2.isLead()) {
      const { onExitComplete } = node2.options;
      onExitComplete && onExitComplete();
    }
    node2.options.transition = void 0;
  }
  function propagateDirtyNodes(node2) {
    if (isDebug) {
      metrics.totalNodes++;
    }
    if (!node2.parent)
      return;
    if (!node2.isProjecting()) {
      node2.isProjectionDirty = node2.parent.isProjectionDirty;
    }
    node2.isSharedProjectionDirty || (node2.isSharedProjectionDirty = Boolean(node2.isProjectionDirty || node2.parent.isProjectionDirty || node2.parent.isSharedProjectionDirty));
    node2.isTransformDirty || (node2.isTransformDirty = node2.parent.isTransformDirty);
  }
  function cleanDirtyNodes(node2) {
    node2.isProjectionDirty = node2.isSharedProjectionDirty = node2.isTransformDirty = false;
  }
  function clearSnapshot(node2) {
    node2.clearSnapshot();
  }
  function clearMeasurements(node2) {
    node2.clearMeasurements();
  }
  function clearIsLayoutDirty(node2) {
    node2.isLayoutDirty = false;
  }
  function resetTransformStyle(node2) {
    const { visualElement } = node2.options;
    if (visualElement && visualElement.getProps().onBeforeLayoutMeasure) {
      visualElement.notify("BeforeLayoutMeasure");
    }
    node2.resetTransform();
  }
  function finishAnimation(node2) {
    node2.finishAnimation();
    node2.targetDelta = node2.relativeTarget = node2.target = void 0;
    node2.isProjectionDirty = true;
  }
  function resolveTargetDelta(node2) {
    node2.resolveTargetDelta();
  }
  function calcProjection(node2) {
    node2.calcProjection();
  }
  function resetSkewAndRotation(node2) {
    node2.resetSkewAndRotation();
  }
  function removeLeadSnapshots(stack2) {
    stack2.removeLeadSnapshot();
  }
  function mixAxisDelta(output2, delta, p2) {
    output2.translate = mixNumber(delta.translate, 0, p2);
    output2.scale = mixNumber(delta.scale, 1, p2);
    output2.origin = delta.origin;
    output2.originPoint = delta.originPoint;
  }
  function mixAxis(output2, from2, to2, p2) {
    output2.min = mixNumber(from2.min, to2.min, p2);
    output2.max = mixNumber(from2.max, to2.max, p2);
  }
  function mixBox(output2, from2, to2, p2) {
    mixAxis(output2.x, from2.x, to2.x, p2);
    mixAxis(output2.y, from2.y, to2.y, p2);
  }
  function hasOpacityCrossfade(node2) {
    return node2.animationValues && node2.animationValues.opacityExit !== void 0;
  }
  var defaultLayoutTransition = {
    duration: 0.45,
    ease: [0.4, 0, 0.1, 1]
  };
  var userAgentContains = (string2) => typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().includes(string2);
  var roundPoint = userAgentContains("applewebkit/") && !userAgentContains("chrome/") ? Math.round : noop3;
  function roundAxis(axis) {
    axis.min = roundPoint(axis.min);
    axis.max = roundPoint(axis.max);
  }
  function roundBox(box) {
    roundAxis(box.x);
    roundAxis(box.y);
  }
  function shouldAnimatePositionOnly(animationType, snapshot, layout2) {
    return animationType === "position" || animationType === "preserve-aspect" && !isNear(aspectRatio(snapshot), aspectRatio(layout2), 0.2);
  }
  function checkNodeWasScrollRoot(node2) {
    var _a;
    return node2 !== node2.root && ((_a = node2.scroll) === null || _a === void 0 ? void 0 : _a.wasRoot);
  }

  // node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.mjs
  var DocumentProjectionNode = createProjectionNode2({
    attachResizeListener: (ref, notify) => addDomEvent(ref, "resize", notify),
    measureScroll: () => ({
      x: document.documentElement.scrollLeft || document.body.scrollLeft,
      y: document.documentElement.scrollTop || document.body.scrollTop
    }),
    checkIsScrollRoot: () => true
  });

  // node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.mjs
  var rootProjectionNode = {
    current: void 0
  };
  var HTMLProjectionNode = createProjectionNode2({
    measureScroll: (instance) => ({
      x: instance.scrollLeft,
      y: instance.scrollTop
    }),
    defaultParent: () => {
      if (!rootProjectionNode.current) {
        const documentNode = new DocumentProjectionNode({});
        documentNode.mount(window);
        documentNode.setOptions({ layoutScroll: true });
        rootProjectionNode.current = documentNode;
      }
      return rootProjectionNode.current;
    },
    resetTransform: (instance, value) => {
      instance.style.transform = value !== void 0 ? value : "none";
    },
    checkIsScrollRoot: (instance) => Boolean(window.getComputedStyle(instance).position === "fixed")
  });

  // node_modules/framer-motion/dist/es/motion/features/drag.mjs
  var drag = {
    pan: {
      Feature: PanGesture
    },
    drag: {
      Feature: DragGesture,
      ProjectionNode: HTMLProjectionNode,
      MeasureLayout
    }
  };

  // node_modules/framer-motion/dist/es/gestures/hover.mjs
  function handleHoverEvent(node2, event, lifecycle) {
    const { props } = node2;
    if (node2.animationState && props.whileHover) {
      node2.animationState.setActive("whileHover", lifecycle === "Start");
    }
    const eventName = "onHover" + lifecycle;
    const callback = props[eventName];
    if (callback) {
      frame.postRender(() => callback(event, extractEventInfo(event)));
    }
  }
  var HoverGesture = class extends Feature {
    mount() {
      const { current } = this.node;
      if (!current)
        return;
      this.unmount = hover(current, (startEvent) => {
        handleHoverEvent(this.node, startEvent, "Start");
        return (endEvent) => handleHoverEvent(this.node, endEvent, "End");
      });
    }
    unmount() {
    }
  };

  // node_modules/framer-motion/dist/es/gestures/focus.mjs
  var FocusGesture = class extends Feature {
    constructor() {
      super(...arguments);
      this.isActive = false;
    }
    onFocus() {
      let isFocusVisible = false;
      try {
        isFocusVisible = this.node.current.matches(":focus-visible");
      } catch (e3) {
        isFocusVisible = true;
      }
      if (!isFocusVisible || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", true);
      this.isActive = true;
    }
    onBlur() {
      if (!this.isActive || !this.node.animationState)
        return;
      this.node.animationState.setActive("whileFocus", false);
      this.isActive = false;
    }
    mount() {
      this.unmount = pipe2(addDomEvent(this.node.current, "focus", () => this.onFocus()), addDomEvent(this.node.current, "blur", () => this.onBlur()));
    }
    unmount() {
    }
  };

  // node_modules/framer-motion/dist/es/gestures/press.mjs
  function handlePressEvent(node2, event, lifecycle) {
    const { props } = node2;
    if (node2.animationState && props.whileTap) {
      node2.animationState.setActive("whileTap", lifecycle === "Start");
    }
    const eventName = "onTap" + (lifecycle === "End" ? "" : lifecycle);
    const callback = props[eventName];
    if (callback) {
      frame.postRender(() => callback(event, extractEventInfo(event)));
    }
  }
  var PressGesture = class extends Feature {
    mount() {
      const { current } = this.node;
      if (!current)
        return;
      this.unmount = press(current, (startEvent) => {
        handlePressEvent(this.node, startEvent, "Start");
        return (endEvent, { success }) => handlePressEvent(this.node, endEvent, success ? "End" : "Cancel");
      }, { useGlobalTarget: this.node.props.globalTapTarget });
    }
    unmount() {
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/viewport/observers.mjs
  var observerCallbacks = /* @__PURE__ */ new WeakMap();
  var observers = /* @__PURE__ */ new WeakMap();
  var fireObserverCallback = (entry) => {
    const callback = observerCallbacks.get(entry.target);
    callback && callback(entry);
  };
  var fireAllObserverCallbacks = (entries) => {
    entries.forEach(fireObserverCallback);
  };
  function initIntersectionObserver({ root, ...options }) {
    const lookupRoot = root || document;
    if (!observers.has(lookupRoot)) {
      observers.set(lookupRoot, {});
    }
    const rootObservers = observers.get(lookupRoot);
    const key = JSON.stringify(options);
    if (!rootObservers[key]) {
      rootObservers[key] = new IntersectionObserver(fireAllObserverCallbacks, { root, ...options });
    }
    return rootObservers[key];
  }
  function observeIntersection(element, options, callback) {
    const rootInteresectionObserver = initIntersectionObserver(options);
    observerCallbacks.set(element, callback);
    rootInteresectionObserver.observe(element);
    return () => {
      observerCallbacks.delete(element);
      rootInteresectionObserver.unobserve(element);
    };
  }

  // node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs
  var thresholdNames = {
    some: 0,
    all: 1
  };
  var InViewFeature = class extends Feature {
    constructor() {
      super(...arguments);
      this.hasEnteredView = false;
      this.isInView = false;
    }
    startObserver() {
      this.unmount();
      const { viewport = {} } = this.node.getProps();
      const { root, margin: rootMargin, amount = "some", once: once2 } = viewport;
      const options = {
        root: root ? root.current : void 0,
        rootMargin,
        threshold: typeof amount === "number" ? amount : thresholdNames[amount]
      };
      const onIntersectionUpdate = (entry) => {
        const { isIntersecting } = entry;
        if (this.isInView === isIntersecting)
          return;
        this.isInView = isIntersecting;
        if (once2 && !isIntersecting && this.hasEnteredView) {
          return;
        } else if (isIntersecting) {
          this.hasEnteredView = true;
        }
        if (this.node.animationState) {
          this.node.animationState.setActive("whileInView", isIntersecting);
        }
        const { onViewportEnter, onViewportLeave } = this.node.getProps();
        const callback = isIntersecting ? onViewportEnter : onViewportLeave;
        callback && callback(entry);
      };
      return observeIntersection(this.node.current, options, onIntersectionUpdate);
    }
    mount() {
      this.startObserver();
    }
    update() {
      if (typeof IntersectionObserver === "undefined")
        return;
      const { props, prevProps } = this.node;
      const hasOptionsChanged = ["amount", "margin", "root"].some(hasViewportOptionChanged(props, prevProps));
      if (hasOptionsChanged) {
        this.startObserver();
      }
    }
    unmount() {
    }
  };
  function hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {
    return (name) => viewport[name] !== prevViewport[name];
  }

  // node_modules/framer-motion/dist/es/motion/features/gestures.mjs
  var gestureAnimations = {
    inView: {
      Feature: InViewFeature
    },
    tap: {
      Feature: PressGesture
    },
    focus: {
      Feature: FocusGesture
    },
    hover: {
      Feature: HoverGesture
    }
  };

  // node_modules/framer-motion/dist/es/motion/features/layout.mjs
  var layout = {
    layout: {
      ProjectionNode: HTMLProjectionNode,
      MeasureLayout
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var import_react77 = __toESM(require_react(), 1);

  // node_modules/framer-motion/dist/es/utils/reduced-motion/state.mjs
  var prefersReducedMotion = { current: null };
  var hasReducedMotionListener = { current: false };

  // node_modules/framer-motion/dist/es/utils/reduced-motion/index.mjs
  function initPrefersReducedMotion() {
    hasReducedMotionListener.current = true;
    if (!isBrowser2)
      return;
    if (window.matchMedia) {
      const motionMediaQuery = window.matchMedia("(prefers-reduced-motion)");
      const setReducedMotionPreferences = () => prefersReducedMotion.current = motionMediaQuery.matches;
      motionMediaQuery.addListener(setReducedMotionPreferences);
      setReducedMotionPreferences();
    } else {
      prefersReducedMotion.current = false;
    }
  }

  // node_modules/framer-motion/dist/es/render/dom/value-types/find.mjs
  var valueTypes = [...dimensionValueTypes, color, complex];
  var findValueType = (v2) => valueTypes.find(testValueType(v2));

  // node_modules/framer-motion/dist/es/render/store.mjs
  var visualElementStore = /* @__PURE__ */ new WeakMap();

  // node_modules/framer-motion/dist/es/render/utils/motion-values.mjs
  function updateMotionValuesFromProps(element, next3, prev2) {
    for (const key in next3) {
      const nextValue = next3[key];
      const prevValue = prev2[key];
      if (isMotionValue(nextValue)) {
        element.addValue(key, nextValue);
        if (true) {
          warnOnce(nextValue.version === "11.18.2", `Attempting to mix Motion versions ${nextValue.version} with 11.18.2 may not work as expected.`);
        }
      } else if (isMotionValue(prevValue)) {
        element.addValue(key, motionValue(nextValue, { owner: element }));
      } else if (prevValue !== nextValue) {
        if (element.hasValue(key)) {
          const existingValue = element.getValue(key);
          if (existingValue.liveStyle === true) {
            existingValue.jump(nextValue);
          } else if (!existingValue.hasAnimated) {
            existingValue.set(nextValue);
          }
        } else {
          const latestValue = element.getStaticValue(key);
          element.addValue(key, motionValue(latestValue !== void 0 ? latestValue : nextValue, { owner: element }));
        }
      }
    }
    for (const key in prev2) {
      if (next3[key] === void 0)
        element.removeValue(key);
    }
    return next3;
  }

  // node_modules/framer-motion/dist/es/render/VisualElement.mjs
  var propEventHandlers = [
    "AnimationStart",
    "AnimationComplete",
    "Update",
    "BeforeLayoutMeasure",
    "LayoutMeasure",
    "LayoutAnimationStart",
    "LayoutAnimationComplete"
  ];
  var VisualElement = class {
    /**
     * This method takes React props and returns found MotionValues. For example, HTML
     * MotionValues will be found within the style prop, whereas for Three.js within attribute arrays.
     *
     * This isn't an abstract method as it needs calling in the constructor, but it is
     * intended to be one.
     */
    scrapeMotionValuesFromProps(_props, _prevProps, _visualElement) {
      return {};
    }
    constructor({ parent, props, presenceContext, reducedMotionConfig, blockInitialAnimation, visualState }, options = {}) {
      this.current = null;
      this.children = /* @__PURE__ */ new Set();
      this.isVariantNode = false;
      this.isControllingVariants = false;
      this.shouldReduceMotion = null;
      this.values = /* @__PURE__ */ new Map();
      this.KeyframeResolver = KeyframeResolver;
      this.features = {};
      this.valueSubscriptions = /* @__PURE__ */ new Map();
      this.prevMotionValues = {};
      this.events = {};
      this.propEventSubscriptions = {};
      this.notifyUpdate = () => this.notify("Update", this.latestValues);
      this.render = () => {
        if (!this.current)
          return;
        this.triggerBuild();
        this.renderInstance(this.current, this.renderState, this.props.style, this.projection);
      };
      this.renderScheduledAt = 0;
      this.scheduleRender = () => {
        const now2 = time.now();
        if (this.renderScheduledAt < now2) {
          this.renderScheduledAt = now2;
          frame.render(this.render, false, true);
        }
      };
      const { latestValues, renderState, onUpdate } = visualState;
      this.onUpdate = onUpdate;
      this.latestValues = latestValues;
      this.baseTarget = { ...latestValues };
      this.initialValues = props.initial ? { ...latestValues } : {};
      this.renderState = renderState;
      this.parent = parent;
      this.props = props;
      this.presenceContext = presenceContext;
      this.depth = parent ? parent.depth + 1 : 0;
      this.reducedMotionConfig = reducedMotionConfig;
      this.options = options;
      this.blockInitialAnimation = Boolean(blockInitialAnimation);
      this.isControllingVariants = isControllingVariants(props);
      this.isVariantNode = isVariantNode(props);
      if (this.isVariantNode) {
        this.variantChildren = /* @__PURE__ */ new Set();
      }
      this.manuallyAnimateOnMount = Boolean(parent && parent.current);
      const { willChange, ...initialMotionValues } = this.scrapeMotionValuesFromProps(props, {}, this);
      for (const key in initialMotionValues) {
        const value = initialMotionValues[key];
        if (latestValues[key] !== void 0 && isMotionValue(value)) {
          value.set(latestValues[key], false);
        }
      }
    }
    mount(instance) {
      this.current = instance;
      visualElementStore.set(instance, this);
      if (this.projection && !this.projection.instance) {
        this.projection.mount(instance);
      }
      if (this.parent && this.isVariantNode && !this.isControllingVariants) {
        this.removeFromVariantTree = this.parent.addVariantChild(this);
      }
      this.values.forEach((value, key) => this.bindToMotionValue(key, value));
      if (!hasReducedMotionListener.current) {
        initPrefersReducedMotion();
      }
      this.shouldReduceMotion = this.reducedMotionConfig === "never" ? false : this.reducedMotionConfig === "always" ? true : prefersReducedMotion.current;
      if (true) {
        warnOnce(this.shouldReduceMotion !== true, "You have Reduced Motion enabled on your device. Animations may not appear as expected.");
      }
      if (this.parent)
        this.parent.children.add(this);
      this.update(this.props, this.presenceContext);
    }
    unmount() {
      visualElementStore.delete(this.current);
      this.projection && this.projection.unmount();
      cancelFrame(this.notifyUpdate);
      cancelFrame(this.render);
      this.valueSubscriptions.forEach((remove5) => remove5());
      this.valueSubscriptions.clear();
      this.removeFromVariantTree && this.removeFromVariantTree();
      this.parent && this.parent.children.delete(this);
      for (const key in this.events) {
        this.events[key].clear();
      }
      for (const key in this.features) {
        const feature = this.features[key];
        if (feature) {
          feature.unmount();
          feature.isMounted = false;
        }
      }
      this.current = null;
    }
    bindToMotionValue(key, value) {
      if (this.valueSubscriptions.has(key)) {
        this.valueSubscriptions.get(key)();
      }
      const valueIsTransform = transformProps.has(key);
      const removeOnChange = value.on("change", (latestValue) => {
        this.latestValues[key] = latestValue;
        this.props.onUpdate && frame.preRender(this.notifyUpdate);
        if (valueIsTransform && this.projection) {
          this.projection.isTransformDirty = true;
        }
      });
      const removeOnRenderRequest = value.on("renderRequest", this.scheduleRender);
      let removeSyncCheck;
      if (window.MotionCheckAppearSync) {
        removeSyncCheck = window.MotionCheckAppearSync(this, key, value);
      }
      this.valueSubscriptions.set(key, () => {
        removeOnChange();
        removeOnRenderRequest();
        if (removeSyncCheck)
          removeSyncCheck();
        if (value.owner)
          value.stop();
      });
    }
    sortNodePosition(other) {
      if (!this.current || !this.sortInstanceNodePosition || this.type !== other.type) {
        return 0;
      }
      return this.sortInstanceNodePosition(this.current, other.current);
    }
    updateFeatures() {
      let key = "animation";
      for (key in featureDefinitions) {
        const featureDefinition = featureDefinitions[key];
        if (!featureDefinition)
          continue;
        const { isEnabled, Feature: FeatureConstructor } = featureDefinition;
        if (!this.features[key] && FeatureConstructor && isEnabled(this.props)) {
          this.features[key] = new FeatureConstructor(this);
        }
        if (this.features[key]) {
          const feature = this.features[key];
          if (feature.isMounted) {
            feature.update();
          } else {
            feature.mount();
            feature.isMounted = true;
          }
        }
      }
    }
    triggerBuild() {
      this.build(this.renderState, this.latestValues, this.props);
    }
    /**
     * Measure the current viewport box with or without transforms.
     * Only measures axis-aligned boxes, rotate and skew must be manually
     * removed with a re-render to work.
     */
    measureViewportBox() {
      return this.current ? this.measureInstanceViewportBox(this.current, this.props) : createBox();
    }
    getStaticValue(key) {
      return this.latestValues[key];
    }
    setStaticValue(key, value) {
      this.latestValues[key] = value;
    }
    /**
     * Update the provided props. Ensure any newly-added motion values are
     * added to our map, old ones removed, and listeners updated.
     */
    update(props, presenceContext) {
      if (props.transformTemplate || this.props.transformTemplate) {
        this.scheduleRender();
      }
      this.prevProps = this.props;
      this.props = props;
      this.prevPresenceContext = this.presenceContext;
      this.presenceContext = presenceContext;
      for (let i3 = 0; i3 < propEventHandlers.length; i3++) {
        const key = propEventHandlers[i3];
        if (this.propEventSubscriptions[key]) {
          this.propEventSubscriptions[key]();
          delete this.propEventSubscriptions[key];
        }
        const listenerName = "on" + key;
        const listener2 = props[listenerName];
        if (listener2) {
          this.propEventSubscriptions[key] = this.on(key, listener2);
        }
      }
      this.prevMotionValues = updateMotionValuesFromProps(this, this.scrapeMotionValuesFromProps(props, this.prevProps, this), this.prevMotionValues);
      if (this.handleChildMotionValue) {
        this.handleChildMotionValue();
      }
      this.onUpdate && this.onUpdate(this);
    }
    getProps() {
      return this.props;
    }
    /**
     * Returns the variant definition with a given name.
     */
    getVariant(name) {
      return this.props.variants ? this.props.variants[name] : void 0;
    }
    /**
     * Returns the defined default transition on this component.
     */
    getDefaultTransition() {
      return this.props.transition;
    }
    getTransformPagePoint() {
      return this.props.transformPagePoint;
    }
    getClosestVariantNode() {
      return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
    }
    /**
     * Add a child visual element to our set of children.
     */
    addVariantChild(child) {
      const closestVariantNode = this.getClosestVariantNode();
      if (closestVariantNode) {
        closestVariantNode.variantChildren && closestVariantNode.variantChildren.add(child);
        return () => closestVariantNode.variantChildren.delete(child);
      }
    }
    /**
     * Add a motion value and bind it to this visual element.
     */
    addValue(key, value) {
      const existingValue = this.values.get(key);
      if (value !== existingValue) {
        if (existingValue)
          this.removeValue(key);
        this.bindToMotionValue(key, value);
        this.values.set(key, value);
        this.latestValues[key] = value.get();
      }
    }
    /**
     * Remove a motion value and unbind any active subscriptions.
     */
    removeValue(key) {
      this.values.delete(key);
      const unsubscribe = this.valueSubscriptions.get(key);
      if (unsubscribe) {
        unsubscribe();
        this.valueSubscriptions.delete(key);
      }
      delete this.latestValues[key];
      this.removeValueFromRenderState(key, this.renderState);
    }
    /**
     * Check whether we have a motion value for this key
     */
    hasValue(key) {
      return this.values.has(key);
    }
    getValue(key, defaultValue2) {
      if (this.props.values && this.props.values[key]) {
        return this.props.values[key];
      }
      let value = this.values.get(key);
      if (value === void 0 && defaultValue2 !== void 0) {
        value = motionValue(defaultValue2 === null ? void 0 : defaultValue2, { owner: this });
        this.addValue(key, value);
      }
      return value;
    }
    /**
     * If we're trying to animate to a previously unencountered value,
     * we need to check for it in our state and as a last resort read it
     * directly from the instance (which might have performance implications).
     */
    readValue(key, target) {
      var _a;
      let value = this.latestValues[key] !== void 0 || !this.current ? this.latestValues[key] : (_a = this.getBaseTargetFromProps(this.props, key)) !== null && _a !== void 0 ? _a : this.readValueFromInstance(this.current, key, this.options);
      if (value !== void 0 && value !== null) {
        if (typeof value === "string" && (isNumericalString(value) || isZeroValueString(value))) {
          value = parseFloat(value);
        } else if (!findValueType(value) && complex.test(target)) {
          value = getAnimatableNone2(key, target);
        }
        this.setBaseTarget(key, isMotionValue(value) ? value.get() : value);
      }
      return isMotionValue(value) ? value.get() : value;
    }
    /**
     * Set the base target to later animate back to. This is currently
     * only hydrated on creation and when we first read a value.
     */
    setBaseTarget(key, value) {
      this.baseTarget[key] = value;
    }
    /**
     * Find the base target for a value thats been removed from all animation
     * props.
     */
    getBaseTarget(key) {
      var _a;
      const { initial } = this.props;
      let valueFromInitial;
      if (typeof initial === "string" || typeof initial === "object") {
        const variant = resolveVariantFromProps(this.props, initial, (_a = this.presenceContext) === null || _a === void 0 ? void 0 : _a.custom);
        if (variant) {
          valueFromInitial = variant[key];
        }
      }
      if (initial && valueFromInitial !== void 0) {
        return valueFromInitial;
      }
      const target = this.getBaseTargetFromProps(this.props, key);
      if (target !== void 0 && !isMotionValue(target))
        return target;
      return this.initialValues[key] !== void 0 && valueFromInitial === void 0 ? void 0 : this.baseTarget[key];
    }
    on(eventName, callback) {
      if (!this.events[eventName]) {
        this.events[eventName] = new SubscriptionManager();
      }
      return this.events[eventName].add(callback);
    }
    notify(eventName, ...args) {
      if (this.events[eventName]) {
        this.events[eventName].notify(...args);
      }
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.mjs
  var DOMVisualElement = class extends VisualElement {
    constructor() {
      super(...arguments);
      this.KeyframeResolver = DOMKeyframesResolver;
    }
    sortInstanceNodePosition(a2, b2) {
      return a2.compareDocumentPosition(b2) & 2 ? 1 : -1;
    }
    getBaseTargetFromProps(props, key) {
      return props.style ? props.style[key] : void 0;
    }
    removeValueFromRenderState(key, { vars, style }) {
      delete vars[key];
      delete style[key];
    }
    handleChildMotionValue() {
      if (this.childSubscription) {
        this.childSubscription();
        delete this.childSubscription;
      }
      const { children } = this.props;
      if (isMotionValue(children)) {
        this.childSubscription = children.on("change", (latest) => {
          if (this.current) {
            this.current.textContent = `${latest}`;
          }
        });
      }
    }
  };

  // node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.mjs
  function getComputedStyle4(element) {
    return window.getComputedStyle(element);
  }
  var HTMLVisualElement = class extends DOMVisualElement {
    constructor() {
      super(...arguments);
      this.type = "html";
      this.renderInstance = renderHTML;
    }
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      } else {
        const computedStyle = getComputedStyle4(instance);
        const value = (isCSSVariableName(key) ? computedStyle.getPropertyValue(key) : computedStyle[key]) || 0;
        return typeof value === "string" ? value.trim() : value;
      }
    }
    measureInstanceViewportBox(instance, { transformPagePoint }) {
      return measureViewportBox(instance, transformPagePoint);
    }
    build(renderState, latestValues, props) {
      buildHTMLStyles(renderState, latestValues, props.transformTemplate);
    }
    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
      return scrapeMotionValuesFromProps(props, prevProps, visualElement);
    }
  };

  // node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.mjs
  var SVGVisualElement = class extends DOMVisualElement {
    constructor() {
      super(...arguments);
      this.type = "svg";
      this.isSVGTag = false;
      this.measureInstanceViewportBox = createBox;
    }
    getBaseTargetFromProps(props, key) {
      return props[key];
    }
    readValueFromInstance(instance, key) {
      if (transformProps.has(key)) {
        const defaultType = getDefaultValueType(key);
        return defaultType ? defaultType.default || 0 : 0;
      }
      key = !camelCaseAttributes.has(key) ? camelToDash(key) : key;
      return instance.getAttribute(key);
    }
    scrapeMotionValuesFromProps(props, prevProps, visualElement) {
      return scrapeMotionValuesFromProps2(props, prevProps, visualElement);
    }
    build(renderState, latestValues, props) {
      buildSVGAttrs(renderState, latestValues, this.isSVGTag, props.transformTemplate);
    }
    renderInstance(instance, renderState, styleProp, projection) {
      renderSVG(instance, renderState, styleProp, projection);
    }
    mount(instance) {
      this.isSVGTag = isSVGTag(instance.tagName);
      super.mount(instance);
    }
  };

  // node_modules/framer-motion/dist/es/render/dom/create-visual-element.mjs
  var createDomVisualElement = (Component4, options) => {
    return isSVGComponent(Component4) ? new SVGVisualElement(options) : new HTMLVisualElement(options, {
      allowProjection: Component4 !== import_react77.Fragment
    });
  };

  // node_modules/framer-motion/dist/es/render/components/motion/create.mjs
  var createMotionComponent = /* @__PURE__ */ createMotionComponentFactory({
    ...animations,
    ...gestureAnimations,
    ...drag,
    ...layout
  }, createDomVisualElement);

  // node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs
  var motion = /* @__PURE__ */ createDOMMotionComponentProxy(createMotionComponent);

  // node_modules/@wordpress/components/build-module/utils/use-responsive-value.js
  var breakpoints = ["40em", "52em", "64em"];
  var useBreakpointIndex = (options = {}) => {
    const {
      defaultIndex = 0
    } = options;
    if (typeof defaultIndex !== "number") {
      throw new TypeError(`Default breakpoint index should be a number. Got: ${defaultIndex}, ${typeof defaultIndex}`);
    } else if (defaultIndex < 0 || defaultIndex > breakpoints.length - 1) {
      throw new RangeError(`Default breakpoint index out of range. Theme has ${breakpoints.length} breakpoints, got index ${defaultIndex}`);
    }
    const [value, setValue] = (0, import_react.useState)(defaultIndex);
    (0, import_react.useEffect)(() => {
      const getIndex = () => breakpoints.filter((bp) => {
        return typeof window !== "undefined" ? window.matchMedia(`screen and (min-width: ${bp})`).matches : false;
      }).length;
      const onResize2 = () => {
        const newValue = getIndex();
        if (value !== newValue) {
          setValue(newValue);
        }
      };
      onResize2();
      if (typeof window !== "undefined") {
        window.addEventListener("resize", onResize2);
      }
      return () => {
        if (typeof window !== "undefined") {
          window.removeEventListener("resize", onResize2);
        }
      };
    }, [value]);
    return value;
  };
  function useResponsiveValue(values, options = {}) {
    const index2 = useBreakpointIndex(options);
    if (!Array.isArray(values) && typeof values !== "function") {
      return values;
    }
    const array = values || [];
    return (
      /** @type {T[]} */
      array[
        /* eslint-enable jsdoc/no-undefined-types */
        index2 >= array.length ? array.length - 1 : index2
      ]
    );
  }

  // node_modules/@wordpress/components/build-module/flex/styles.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__3() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var Flex = false ? {
    name: "zjik7",
    styles: "display:flex"
  } : {
    name: "a57899-Flex",
    styles: "display:flex;label:Flex;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS3VCIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBGbGV4ID0gY3NzYFxuXHRkaXNwbGF5OiBmbGV4O1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW0gPSBjc3NgXG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRtYXgtaGVpZ2h0OiAxMDAlO1xuXHRtYXgtd2lkdGg6IDEwMCU7XG5cdG1pbi1oZWlnaHQ6IDA7XG5cdG1pbi13aWR0aDogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZmxleDogMTtcbmA7XG5cbi8qKlxuICogV29ya2Fyb3VuZCB0byBvcHRpbWl6ZSBET00gcmVuZGVyaW5nLlxuICogV2UnbGwgZW5oYW5jZSBhbGlnbm1lbnQgd2l0aCBuYWl2ZSBwYXJlbnQgZmxleCBhc3N1bXB0aW9ucy5cbiAqXG4gKiBUcmFkZS1vZmY6XG4gKiBGYXIgbGVzcyBET00gbGVzcy4gSG93ZXZlciwgVUkgcmVuZGVyaW5nIGlzIG5vdCBhcyByZWxpYWJsZS5cbiAqL1xuXG4vKipcbiAqIEltcHJvdmVzIHN0YWJpbGl0eSBvZiB3aWR0aC9oZWlnaHQgcmVuZGVyaW5nLlxuICogaHR0cHM6Ly9naXRodWIuY29tL0l0c0pvblEvZzIvcHVsbC8xNDlcbiAqL1xuZXhwb3J0IGNvbnN0IEl0ZW1zQ29sdW1uID0gY3NzYFxuXHQ+ICoge1xuXHRcdG1pbi1oZWlnaHQ6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtc1JvdyA9IGNzc2Bcblx0PiAqIHtcblx0XHRtaW4td2lkdGg6IDA7XG5cdH1cbmA7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__3
  };
  var Item = false ? {
    name: "qgaee5",
    styles: "display:block;max-height:100%;max-width:100%;min-height:0;min-width:0"
  } : {
    name: "14ac8g8-Item",
    styles: "display:block;max-height:100%;max-width:100%;min-height:0;min-width:0;label:Item;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBU3VCIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbmV4cG9ydCBjb25zdCBGbGV4ID0gY3NzYFxuXHRkaXNwbGF5OiBmbGV4O1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW0gPSBjc3NgXG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRtYXgtaGVpZ2h0OiAxMDAlO1xuXHRtYXgtd2lkdGg6IDEwMCU7XG5cdG1pbi1oZWlnaHQ6IDA7XG5cdG1pbi13aWR0aDogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZmxleDogMTtcbmA7XG5cbi8qKlxuICogV29ya2Fyb3VuZCB0byBvcHRpbWl6ZSBET00gcmVuZGVyaW5nLlxuICogV2UnbGwgZW5oYW5jZSBhbGlnbm1lbnQgd2l0aCBuYWl2ZSBwYXJlbnQgZmxleCBhc3N1bXB0aW9ucy5cbiAqXG4gKiBUcmFkZS1vZmY6XG4gKiBGYXIgbGVzcyBET00gbGVzcy4gSG93ZXZlciwgVUkgcmVuZGVyaW5nIGlzIG5vdCBhcyByZWxpYWJsZS5cbiAqL1xuXG4vKipcbiAqIEltcHJvdmVzIHN0YWJpbGl0eSBvZiB3aWR0aC9oZWlnaHQgcmVuZGVyaW5nLlxuICogaHR0cHM6Ly9naXRodWIuY29tL0l0c0pvblEvZzIvcHVsbC8xNDlcbiAqL1xuZXhwb3J0IGNvbnN0IEl0ZW1zQ29sdW1uID0gY3NzYFxuXHQ+ICoge1xuXHRcdG1pbi1oZWlnaHQ6IDA7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtc1JvdyA9IGNzc2Bcblx0PiAqIHtcblx0XHRtaW4td2lkdGg6IDA7XG5cdH1cbmA7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__3
  };
  var block = false ? {
    name: "82a6rk",
    styles: "flex:1"
  } : {
    name: "1ya6i3g-block",
    styles: "flex:1;label:block;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJ3QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2ZsZXgvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG5leHBvcnQgY29uc3QgRmxleCA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtID0gY3NzYFxuXHRkaXNwbGF5OiBibG9jaztcblx0bWF4LWhlaWdodDogMTAwJTtcblx0bWF4LXdpZHRoOiAxMDAlO1xuXHRtaW4taGVpZ2h0OiAwO1xuXHRtaW4td2lkdGg6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgYmxvY2sgPSBjc3NgXG5cdGZsZXg6IDE7XG5gO1xuXG4vKipcbiAqIFdvcmthcm91bmQgdG8gb3B0aW1pemUgRE9NIHJlbmRlcmluZy5cbiAqIFdlJ2xsIGVuaGFuY2UgYWxpZ25tZW50IHdpdGggbmFpdmUgcGFyZW50IGZsZXggYXNzdW1wdGlvbnMuXG4gKlxuICogVHJhZGUtb2ZmOlxuICogRmFyIGxlc3MgRE9NIGxlc3MuIEhvd2V2ZXIsIFVJIHJlbmRlcmluZyBpcyBub3QgYXMgcmVsaWFibGUuXG4gKi9cblxuLyoqXG4gKiBJbXByb3ZlcyBzdGFiaWxpdHkgb2Ygd2lkdGgvaGVpZ2h0IHJlbmRlcmluZy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9JdHNKb25RL2cyL3B1bGwvMTQ5XG4gKi9cbmV4cG9ydCBjb25zdCBJdGVtc0NvbHVtbiA9IGNzc2Bcblx0PiAqIHtcblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbXNSb3cgPSBjc3NgXG5cdD4gKiB7XG5cdFx0bWluLXdpZHRoOiAwO1xuXHR9XG5gO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__3
  };
  var ItemsColumn = false ? {
    name: "13nosa1",
    styles: ">*{min-height:0;}"
  } : {
    name: "9k4k7f-ItemsColumn",
    styles: ">*{min-height:0;};label:ItemsColumn;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUM4QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2ZsZXgvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG5leHBvcnQgY29uc3QgRmxleCA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtID0gY3NzYFxuXHRkaXNwbGF5OiBibG9jaztcblx0bWF4LWhlaWdodDogMTAwJTtcblx0bWF4LXdpZHRoOiAxMDAlO1xuXHRtaW4taGVpZ2h0OiAwO1xuXHRtaW4td2lkdGg6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgYmxvY2sgPSBjc3NgXG5cdGZsZXg6IDE7XG5gO1xuXG4vKipcbiAqIFdvcmthcm91bmQgdG8gb3B0aW1pemUgRE9NIHJlbmRlcmluZy5cbiAqIFdlJ2xsIGVuaGFuY2UgYWxpZ25tZW50IHdpdGggbmFpdmUgcGFyZW50IGZsZXggYXNzdW1wdGlvbnMuXG4gKlxuICogVHJhZGUtb2ZmOlxuICogRmFyIGxlc3MgRE9NIGxlc3MuIEhvd2V2ZXIsIFVJIHJlbmRlcmluZyBpcyBub3QgYXMgcmVsaWFibGUuXG4gKi9cblxuLyoqXG4gKiBJbXByb3ZlcyBzdGFiaWxpdHkgb2Ygd2lkdGgvaGVpZ2h0IHJlbmRlcmluZy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9JdHNKb25RL2cyL3B1bGwvMTQ5XG4gKi9cbmV4cG9ydCBjb25zdCBJdGVtc0NvbHVtbiA9IGNzc2Bcblx0PiAqIHtcblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbXNSb3cgPSBjc3NgXG5cdD4gKiB7XG5cdFx0bWluLXdpZHRoOiAwO1xuXHR9XG5gO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__3
  };
  var ItemsRow = false ? {
    name: "1pwxzk4",
    styles: ">*{min-width:0;}"
  } : {
    name: "1ozeagb-ItemsRow",
    styles: ">*{min-width:0;};label:ItemsRow;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUMyQiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2ZsZXgvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG5leHBvcnQgY29uc3QgRmxleCA9IGNzc2Bcblx0ZGlzcGxheTogZmxleDtcbmA7XG5cbmV4cG9ydCBjb25zdCBJdGVtID0gY3NzYFxuXHRkaXNwbGF5OiBibG9jaztcblx0bWF4LWhlaWdodDogMTAwJTtcblx0bWF4LXdpZHRoOiAxMDAlO1xuXHRtaW4taGVpZ2h0OiAwO1xuXHRtaW4td2lkdGg6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgYmxvY2sgPSBjc3NgXG5cdGZsZXg6IDE7XG5gO1xuXG4vKipcbiAqIFdvcmthcm91bmQgdG8gb3B0aW1pemUgRE9NIHJlbmRlcmluZy5cbiAqIFdlJ2xsIGVuaGFuY2UgYWxpZ25tZW50IHdpdGggbmFpdmUgcGFyZW50IGZsZXggYXNzdW1wdGlvbnMuXG4gKlxuICogVHJhZGUtb2ZmOlxuICogRmFyIGxlc3MgRE9NIGxlc3MuIEhvd2V2ZXIsIFVJIHJlbmRlcmluZyBpcyBub3QgYXMgcmVsaWFibGUuXG4gKi9cblxuLyoqXG4gKiBJbXByb3ZlcyBzdGFiaWxpdHkgb2Ygd2lkdGgvaGVpZ2h0IHJlbmRlcmluZy5cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9JdHNKb25RL2cyL3B1bGwvMTQ5XG4gKi9cbmV4cG9ydCBjb25zdCBJdGVtc0NvbHVtbiA9IGNzc2Bcblx0PiAqIHtcblx0XHRtaW4taGVpZ2h0OiAwO1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbXNSb3cgPSBjc3NgXG5cdD4gKiB7XG5cdFx0bWluLXdpZHRoOiAwO1xuXHR9XG5gO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__3
  };

  // node_modules/@wordpress/components/build-module/flex/flex/hook.js
  function useDeprecatedProps(props) {
    const {
      isReversed,
      ...otherProps
    } = props;
    if (typeof isReversed !== "undefined") {
      deprecated("Flex isReversed", {
        alternative: 'Flex direction="row-reverse" or "column-reverse"',
        since: "5.9"
      });
      return {
        ...otherProps,
        direction: isReversed ? "row-reverse" : "row"
      };
    }
    return otherProps;
  }
  function useFlex(props) {
    const {
      align,
      className,
      direction: directionProp = "row",
      expanded = true,
      gap = 2,
      justify = "space-between",
      wrap: wrap2 = false,
      ...otherProps
    } = useContextSystem(useDeprecatedProps(props), "Flex");
    const directionAsArray = Array.isArray(directionProp) ? directionProp : [directionProp];
    const direction = useResponsiveValue(directionAsArray);
    const isColumn = typeof direction === "string" && !!direction.includes("column");
    const cx3 = useCx();
    const classes = (0, import_react.useMemo)(() => {
      const base = /* @__PURE__ */ css({
        alignItems: align !== null && align !== void 0 ? align : isColumn ? "normal" : "center",
        flexDirection: direction,
        flexWrap: wrap2 ? "wrap" : void 0,
        gap: space(gap),
        justifyContent: justify,
        height: isColumn && expanded ? "100%" : void 0,
        width: !isColumn && expanded ? "100%" : void 0
      }, false ? "" : ";label:base;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9mbGV4L2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0VlIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9mbGV4L2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAnQHdvcmRwcmVzcy9lbGVtZW50JztcbmltcG9ydCBkZXByZWNhdGVkIGZyb20gJ0B3b3JkcHJlc3MvZGVwcmVjYXRlZCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi8uLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi8uLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZVJlc3BvbnNpdmVWYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWxzL3VzZS1yZXNwb25zaXZlLXZhbHVlJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDeCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgRmxleFByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5mdW5jdGlvbiB1c2VEZXByZWNhdGVkUHJvcHMoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgRmxleFByb3BzLCAnZGl2JyA+XG4pOiBPbWl0PCB0eXBlb2YgcHJvcHMsICdpc1JldmVyc2VkJyA+IHtcblx0Y29uc3QgeyBpc1JldmVyc2VkLCAuLi5vdGhlclByb3BzIH0gPSBwcm9wcztcblxuXHRpZiAoIHR5cGVvZiBpc1JldmVyc2VkICE9PSAndW5kZWZpbmVkJyApIHtcblx0XHRkZXByZWNhdGVkKCAnRmxleCBpc1JldmVyc2VkJywge1xuXHRcdFx0YWx0ZXJuYXRpdmU6ICdGbGV4IGRpcmVjdGlvbj1cInJvdy1yZXZlcnNlXCIgb3IgXCJjb2x1bW4tcmV2ZXJzZVwiJyxcblx0XHRcdHNpbmNlOiAnNS45Jyxcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHtcblx0XHRcdC4uLm90aGVyUHJvcHMsXG5cdFx0XHRkaXJlY3Rpb246IGlzUmV2ZXJzZWQgPyAncm93LXJldmVyc2UnIDogJ3JvdycsXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBvdGhlclByb3BzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmxleCggcHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPCBGbGV4UHJvcHMsICdkaXYnID4gKSB7XG5cdGNvbnN0IHtcblx0XHRhbGlnbixcblx0XHRjbGFzc05hbWUsXG5cdFx0ZGlyZWN0aW9uOiBkaXJlY3Rpb25Qcm9wID0gJ3JvdycsXG5cdFx0ZXhwYW5kZWQgPSB0cnVlLFxuXHRcdGdhcCA9IDIsXG5cdFx0anVzdGlmeSA9ICdzcGFjZS1iZXR3ZWVuJyxcblx0XHR3cmFwID0gZmFsc2UsXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggdXNlRGVwcmVjYXRlZFByb3BzKCBwcm9wcyApLCAnRmxleCcgKTtcblxuXHRjb25zdCBkaXJlY3Rpb25Bc0FycmF5ID0gQXJyYXkuaXNBcnJheSggZGlyZWN0aW9uUHJvcCApXG5cdFx0PyBkaXJlY3Rpb25Qcm9wXG5cdFx0OiBbIGRpcmVjdGlvblByb3AgXTtcblx0Y29uc3QgZGlyZWN0aW9uID0gdXNlUmVzcG9uc2l2ZVZhbHVlKCBkaXJlY3Rpb25Bc0FycmF5ICk7XG5cblx0Y29uc3QgaXNDb2x1bW4gPVxuXHRcdHR5cGVvZiBkaXJlY3Rpb24gPT09ICdzdHJpbmcnICYmICEhIGRpcmVjdGlvbi5pbmNsdWRlcyggJ2NvbHVtbicgKTtcblxuXHRjb25zdCBjeCA9IHVzZUN4KCk7XG5cblx0Y29uc3QgY2xhc3NlcyA9IHVzZU1lbW8oICgpID0+IHtcblx0XHRjb25zdCBiYXNlID0gY3NzKCB7XG5cdFx0XHRhbGlnbkl0ZW1zOiBhbGlnbiA/PyAoIGlzQ29sdW1uID8gJ25vcm1hbCcgOiAnY2VudGVyJyApLFxuXHRcdFx0ZmxleERpcmVjdGlvbjogZGlyZWN0aW9uLFxuXHRcdFx0ZmxleFdyYXA6IHdyYXAgPyAnd3JhcCcgOiB1bmRlZmluZWQsXG5cdFx0XHRnYXA6IHNwYWNlKCBnYXAgKSxcblx0XHRcdGp1c3RpZnlDb250ZW50OiBqdXN0aWZ5LFxuXHRcdFx0aGVpZ2h0OiBpc0NvbHVtbiAmJiBleHBhbmRlZCA/ICcxMDAlJyA6IHVuZGVmaW5lZCxcblx0XHRcdHdpZHRoOiAhIGlzQ29sdW1uICYmIGV4cGFuZGVkID8gJzEwMCUnIDogdW5kZWZpbmVkLFxuXHRcdH0gKTtcblxuXHRcdHJldHVybiBjeChcblx0XHRcdHN0eWxlcy5GbGV4LFxuXHRcdFx0YmFzZSxcblx0XHRcdGlzQ29sdW1uID8gc3R5bGVzLkl0ZW1zQ29sdW1uIDogc3R5bGVzLkl0ZW1zUm93LFxuXHRcdFx0Y2xhc3NOYW1lXG5cdFx0KTtcblx0fSwgW1xuXHRcdGFsaWduLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjeCxcblx0XHRkaXJlY3Rpb24sXG5cdFx0ZXhwYW5kZWQsXG5cdFx0Z2FwLFxuXHRcdGlzQ29sdW1uLFxuXHRcdGp1c3RpZnksXG5cdFx0d3JhcCxcblx0XSApO1xuXG5cdHJldHVybiB7IC4uLm90aGVyUHJvcHMsIGNsYXNzTmFtZTogY2xhc3NlcywgaXNDb2x1bW4gfTtcbn1cbiJdfQ== */");
      return cx3(Flex, base, isColumn ? ItemsColumn : ItemsRow, className);
    }, [align, className, cx3, direction, expanded, gap, isColumn, justify, wrap2]);
    return {
      ...otherProps,
      className: classes,
      isColumn
    };
  }

  // node_modules/@wordpress/components/build-module/flex/context.js
  var FlexContext = (0, import_react.createContext)({
    flexItemDisplay: void 0
  });
  var useFlexContext = () => (0, import_react.useContext)(FlexContext);

  // node_modules/@wordpress/components/build-module/flex/flex/component.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  function UnconnectedFlex(props, forwardedRef) {
    const {
      children,
      isColumn,
      ...otherProps
    } = useFlex(props);
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(FlexContext.Provider, {
      value: {
        flexItemDisplay: isColumn ? "block" : void 0
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(component_default, {
        ...otherProps,
        ref: forwardedRef,
        children
      })
    });
  }
  var Flex2 = contextConnect(UnconnectedFlex, "Flex");
  var component_default3 = Flex2;

  // node_modules/@wordpress/components/build-module/flex/flex-item/hook.js
  function useFlexItem(props) {
    const {
      className,
      display: displayProp,
      isBlock = false,
      ...otherProps
    } = useContextSystem(props, "FlexItem");
    const sx = {};
    const contextDisplay = useFlexContext().flexItemDisplay;
    sx.Base = /* @__PURE__ */ css({
      display: displayProp || contextDisplay
    }, false ? "" : ";label:sx-Base;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZmxleC9mbGV4LWl0ZW0vaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQ1ciLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9mbGV4L2ZsZXgtaXRlbS9ob29rLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBTZXJpYWxpemVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi4vLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VGbGV4Q29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gJy4uL3N0eWxlcyc7XG5pbXBvcnQgeyB1c2VDeCB9IGZyb20gJy4uLy4uL3V0aWxzL2hvb2tzL3VzZS1jeCc7XG5pbXBvcnQgdHlwZSB7IEZsZXhJdGVtUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGbGV4SXRlbShcblx0cHJvcHM6IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzPCBGbGV4SXRlbVByb3BzLCAnZGl2JyA+XG4pIHtcblx0Y29uc3Qge1xuXHRcdGNsYXNzTmFtZSxcblx0XHRkaXNwbGF5OiBkaXNwbGF5UHJvcCxcblx0XHRpc0Jsb2NrID0gZmFsc2UsXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdGbGV4SXRlbScgKTtcblxuXHRjb25zdCBzeDoge1xuXHRcdEJhc2U/OiBTZXJpYWxpemVkU3R5bGVzO1xuXHR9ID0ge307XG5cblx0Y29uc3QgY29udGV4dERpc3BsYXkgPSB1c2VGbGV4Q29udGV4dCgpLmZsZXhJdGVtRGlzcGxheTtcblxuXHRzeC5CYXNlID0gY3NzKCB7XG5cdFx0ZGlzcGxheTogZGlzcGxheVByb3AgfHwgY29udGV4dERpc3BsYXksXG5cdH0gKTtcblxuXHRjb25zdCBjeCA9IHVzZUN4KCk7XG5cblx0Y29uc3QgY2xhc3NlcyA9IGN4KFxuXHRcdHN0eWxlcy5JdGVtLFxuXHRcdHN4LkJhc2UsXG5cdFx0aXNCbG9jayAmJiBzdHlsZXMuYmxvY2ssXG5cdFx0Y2xhc3NOYW1lXG5cdCk7XG5cblx0cmV0dXJuIHtcblx0XHQuLi5vdGhlclByb3BzLFxuXHRcdGNsYXNzTmFtZTogY2xhc3Nlcyxcblx0fTtcbn1cbiJdfQ== */");
    const cx3 = useCx();
    const classes = cx3(Item, sx.Base, isBlock && block, className);
    return {
      ...otherProps,
      className: classes
    };
  }

  // node_modules/@wordpress/components/build-module/flex/flex-item/component.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  function UnconnectedFlexItem(props, forwardedRef) {
    const flexItemProps = useFlexItem(props);
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(component_default, {
      ...flexItemProps,
      ref: forwardedRef
    });
  }
  var FlexItem = contextConnect(UnconnectedFlexItem, "FlexItem");
  var component_default4 = FlexItem;

  // node_modules/@wordpress/components/build-module/spacer/hook.js
  var isDefined = (o3) => typeof o3 !== "undefined" && o3 !== null;
  function useSpacer(props) {
    const {
      className,
      margin,
      marginBottom = 2,
      marginLeft,
      marginRight,
      marginTop,
      marginX,
      marginY,
      padding,
      paddingBottom,
      paddingLeft,
      paddingRight,
      paddingTop,
      paddingX,
      paddingY,
      ...otherProps
    } = useContextSystem(props, "Spacer");
    const cx3 = useCx();
    const classes = cx3(isDefined(margin) && /* @__PURE__ */ css("margin:", space(margin), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkNNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(marginY) && /* @__PURE__ */ css("margin-bottom:", space(marginY), ";margin-top:", space(marginY), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0NNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(marginX) && /* @__PURE__ */ css("margin-left:", space(marginX), ";margin-right:", space(marginX), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0RNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(marginTop) && /* @__PURE__ */ css("margin-top:", space(marginTop), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeURNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(marginBottom) && /* @__PURE__ */ css("margin-bottom:", space(marginBottom), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkRNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(marginLeft) && rtl({
      marginLeft: space(marginLeft)
    })(), isDefined(marginRight) && rtl({
      marginRight: space(marginRight)
    })(), isDefined(padding) && /* @__PURE__ */ css("padding:", space(padding), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUVNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(paddingY) && /* @__PURE__ */ css("padding-bottom:", space(paddingY), ";padding-top:", space(paddingY), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkVNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(paddingX) && /* @__PURE__ */ css("padding-left:", space(paddingX), ";padding-right:", space(paddingX), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa0ZNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(paddingTop) && /* @__PURE__ */ css("padding-top:", space(paddingTop), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUZNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(paddingBottom) && /* @__PURE__ */ css("padding-bottom:", space(paddingBottom), ";" + (false ? "" : ";label:classes;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkZNIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc3BhY2VyL2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgV29yZFByZXNzQ29tcG9uZW50UHJvcHMgfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHVzZUNvbnRleHRTeXN0ZW0gfSBmcm9tICcuLi9jb250ZXh0JztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHsgcnRsLCB1c2VDeCB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB0eXBlIHsgU3BhY2VyUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgaXNEZWZpbmVkID0gPCBUID4oIG86IFQgKTogbyBpcyBFeGNsdWRlPCBULCBudWxsIHwgdW5kZWZpbmVkID4gPT5cblx0dHlwZW9mIG8gIT09ICd1bmRlZmluZWQnICYmIG8gIT09IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTcGFjZXIoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgU3BhY2VyUHJvcHMsICdkaXYnID5cbikge1xuXHRjb25zdCB7XG5cdFx0Y2xhc3NOYW1lLFxuXHRcdG1hcmdpbixcblx0XHRtYXJnaW5Cb3R0b20gPSAyLFxuXHRcdG1hcmdpbkxlZnQsXG5cdFx0bWFyZ2luUmlnaHQsXG5cdFx0bWFyZ2luVG9wLFxuXHRcdG1hcmdpblgsXG5cdFx0bWFyZ2luWSxcblx0XHRwYWRkaW5nLFxuXHRcdHBhZGRpbmdCb3R0b20sXG5cdFx0cGFkZGluZ0xlZnQsXG5cdFx0cGFkZGluZ1JpZ2h0LFxuXHRcdHBhZGRpbmdUb3AsXG5cdFx0cGFkZGluZ1gsXG5cdFx0cGFkZGluZ1ksXG5cdFx0Li4ub3RoZXJQcm9wc1xuXHR9ID0gdXNlQ29udGV4dFN5c3RlbSggcHJvcHMsICdTcGFjZXInICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSBjeChcblx0XHRpc0RlZmluZWQoIG1hcmdpbiApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbjogJHsgc3BhY2UoIG1hcmdpbiApIH07XG5cdFx0XHRgLFxuXHRcdGlzRGVmaW5lZCggbWFyZ2luWSApICYmXG5cdFx0XHRjc3NgXG5cdFx0XHRcdG1hcmdpbi1ib3R0b206ICR7IHNwYWNlKCBtYXJnaW5ZICkgfTtcblx0XHRcdFx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIG1hcmdpblkgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIG1hcmdpblggKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tbGVmdDogJHsgc3BhY2UoIG1hcmdpblggKSB9O1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6ICR7IHNwYWNlKCBtYXJnaW5YICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Ub3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggbWFyZ2luVG9wICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5Cb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggbWFyZ2luQm90dG9tICkgfTtcblx0XHRcdGAsXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5MZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRtYXJnaW5MZWZ0OiBzcGFjZSggbWFyZ2luTGVmdCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBtYXJnaW5SaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0bWFyZ2luUmlnaHQ6IHNwYWNlKCBtYXJnaW5SaWdodCApLFxuXHRcdFx0fSApKCksXG5cdFx0aXNEZWZpbmVkKCBwYWRkaW5nICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZzogJHsgc3BhY2UoIHBhZGRpbmcgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdZICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1ib3R0b206ICR7IHNwYWNlKCBwYWRkaW5nWSApIH07XG5cdFx0XHRcdHBhZGRpbmctdG9wOiAkeyBzcGFjZSggcGFkZGluZ1kgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdYICkgJiZcblx0XHRcdGNzc2Bcblx0XHRcdFx0cGFkZGluZy1sZWZ0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0XHRwYWRkaW5nLXJpZ2h0OiAkeyBzcGFjZSggcGFkZGluZ1ggKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdUb3AgKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLXRvcDogJHsgc3BhY2UoIHBhZGRpbmdUb3AgKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdCb3R0b20gKSAmJlxuXHRcdFx0Y3NzYFxuXHRcdFx0XHRwYWRkaW5nLWJvdHRvbTogJHsgc3BhY2UoIHBhZGRpbmdCb3R0b20gKSB9O1xuXHRcdFx0YCxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdMZWZ0ICkgJiZcblx0XHRcdHJ0bCgge1xuXHRcdFx0XHRwYWRkaW5nTGVmdDogc3BhY2UoIHBhZGRpbmdMZWZ0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRpc0RlZmluZWQoIHBhZGRpbmdSaWdodCApICYmXG5cdFx0XHRydGwoIHtcblx0XHRcdFx0cGFkZGluZ1JpZ2h0OiBzcGFjZSggcGFkZGluZ1JpZ2h0ICksXG5cdFx0XHR9ICkoKSxcblx0XHRjbGFzc05hbWVcblx0KTtcblxuXHRyZXR1cm4geyAuLi5vdGhlclByb3BzLCBjbGFzc05hbWU6IGNsYXNzZXMgfTtcbn1cbiJdfQ== */"), isDefined(paddingLeft) && rtl({
      paddingLeft: space(paddingLeft)
    })(), isDefined(paddingRight) && rtl({
      paddingRight: space(paddingRight)
    })(), className);
    return {
      ...otherProps,
      className: classes
    };
  }

  // node_modules/@wordpress/components/build-module/spacer/component.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  function UnconnectedSpacer(props, forwardedRef) {
    const spacerProps = useSpacer(props);
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(component_default, {
      ...spacerProps,
      ref: forwardedRef
    });
  }
  var Spacer = contextConnect(UnconnectedSpacer, "Spacer");
  var component_default5 = Spacer;

  // node_modules/@wordpress/icons/build-module/icon/index.js
  function Icon({
    icon,
    size: size4 = 24,
    ...props
  }, ref) {
    return (0, import_react.cloneElement)(icon, {
      width: size4,
      height: size4,
      ...props,
      ref
    });
  }
  var icon_default = (0, import_react.forwardRef)(Icon);

  // node_modules/@wordpress/icons/build-module/library/block-default.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var blockDefault = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(Path, {
      d: "M19 8h-1V6h-5v2h-2V6H6v2H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-8c0-1.1-.9-2-2-2zm.5 10c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5v-8c0-.3.2-.5.5-.5h14c.3 0 .5.2.5.5v8z"
    })
  });
  var block_default_default = blockDefault;

  // node_modules/@wordpress/icons/build-module/library/check.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var check = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(Path, {
      d: "M16.7 7.1l-6.3 8.5-3.3-2.5-.9 1.2 4.5 3.4L17.9 8z"
    })
  });
  var check_default = check;

  // node_modules/@wordpress/icons/build-module/library/chevron-down.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var chevronDown = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(SVG, {
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg",
    children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Path, {
      d: "M17.5 11.6L12 16l-5.5-4.4.9-1.2L12 14l4.5-3.6 1 1.2z"
    })
  });
  var chevron_down_default = chevronDown;

  // node_modules/@wordpress/icons/build-module/library/chevron-right-small.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var chevronRightSmall = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Path, {
      d: "M10.8622 8.04053L14.2805 12.0286L10.8622 16.0167L9.72327 15.0405L12.3049 12.0286L9.72327 9.01672L10.8622 8.04053Z"
    })
  });
  var chevron_right_small_default = chevronRightSmall;

  // node_modules/@wordpress/icons/build-module/library/close.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var close = /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Path, {
      d: "m13.06 12 6.47-6.47-1.06-1.06L12 10.94 5.53 4.47 4.47 5.53 10.94 12l-6.47 6.47 1.06 1.06L12 13.06l6.47 6.47 1.06-1.06L13.06 12Z"
    })
  });
  var close_default = close;

  // node_modules/@wordpress/icons/build-module/library/menu.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var menu2 = /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Path, {
      d: "M5 5v1.5h14V5H5zm0 7.8h14v-1.5H5v1.5zM5 19h14v-1.5H5V19z"
    })
  });
  var menu_default = menu2;

  // node_modules/@wordpress/icons/build-module/library/page.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var page = /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: [/* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Path, {
      d: "M15.5 7.5h-7V9h7V7.5Zm-7 3.5h7v1.5h-7V11Zm7 3.5h-7V16h7v-1.5Z"
    }), /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Path, {
      d: "M17 4H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2ZM7 5.5h10a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V6a.5.5 0 0 1 .5-.5Z"
    })]
  });
  var page_default = page;

  // node_modules/@wordpress/icons/build-module/library/post.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var post = /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(Path, {
      d: "m7.3 9.7 1.4 1.4c.2-.2.3-.3.4-.5 0 0 0-.1.1-.1.3-.5.4-1.1.3-1.6L12 7 9 4 7.2 6.5c-.6-.1-1.1 0-1.6.3 0 0-.1 0-.1.1-.3.1-.4.2-.6.4l1.4 1.4L4 11v1h1l2.3-2.3zM4 20h9v-1.5H4V20zm0-5.5V16h16v-1.5H4z"
    })
  });
  var post_default = post;

  // node_modules/@wordpress/icons/build-module/library/symbol.js
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var symbol4 = /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(Path, {
      d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z"
    })
  });
  var symbol_default = symbol4;

  // node_modules/@wordpress/components/build-module/truncate/styles.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__4() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var Truncate = false ? {
    name: "hdknak",
    styles: "display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap"
  } : {
    name: "abxxyf-Truncate",
    styles: "display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;label:Truncate;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdHJ1bmNhdGUvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUsyQiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RydW5jYXRlL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuZXhwb3J0IGNvbnN0IFRydW5jYXRlID0gY3NzYFxuXHRkaXNwbGF5OiBibG9jaztcblx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5gO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__4
  };

  // node_modules/@wordpress/components/build-module/truncate/utils.js
  var TRUNCATE_ELLIPSIS = "\u2026";
  var TRUNCATE_TYPE = {
    auto: "auto",
    head: "head",
    middle: "middle",
    tail: "tail",
    none: "none"
  };
  var TRUNCATE_DEFAULT_PROPS = {
    ellipsis: TRUNCATE_ELLIPSIS,
    ellipsizeMode: TRUNCATE_TYPE.auto,
    limit: 0,
    numberOfLines: 0
  };
  function truncateMiddle(word, headLength, tailLength, ellipsis) {
    if (typeof word !== "string") {
      return "";
    }
    const wordLength = word.length;
    const frontLength = ~~headLength;
    const backLength = ~~tailLength;
    const truncateStr = isValueDefined(ellipsis) ? ellipsis : TRUNCATE_ELLIPSIS;
    if (frontLength === 0 && backLength === 0 || frontLength >= wordLength || backLength >= wordLength || frontLength + backLength >= wordLength) {
      return word;
    } else if (backLength === 0) {
      return word.slice(0, frontLength) + truncateStr;
    }
    return word.slice(0, frontLength) + truncateStr + word.slice(wordLength - backLength);
  }
  function truncateContent(words = "", props) {
    const mergedProps = {
      ...TRUNCATE_DEFAULT_PROPS,
      ...props
    };
    const {
      ellipsis,
      ellipsizeMode,
      limit
    } = mergedProps;
    if (ellipsizeMode === TRUNCATE_TYPE.none) {
      return words;
    }
    let truncateHead;
    let truncateTail;
    switch (ellipsizeMode) {
      case TRUNCATE_TYPE.head:
        truncateHead = 0;
        truncateTail = limit;
        break;
      case TRUNCATE_TYPE.middle:
        truncateHead = Math.floor(limit / 2);
        truncateTail = Math.floor(limit / 2);
        break;
      default:
        truncateHead = limit;
        truncateTail = 0;
    }
    const truncatedContent = ellipsizeMode !== TRUNCATE_TYPE.auto ? truncateMiddle(words, truncateHead, truncateTail, ellipsis) : words;
    return truncatedContent;
  }

  // node_modules/@wordpress/components/build-module/truncate/hook.js
  function useTruncate(props) {
    const {
      className,
      children,
      ellipsis = TRUNCATE_ELLIPSIS,
      ellipsizeMode = TRUNCATE_TYPE.auto,
      limit = 0,
      numberOfLines = 0,
      ...otherProps
    } = useContextSystem(props, "Truncate");
    const cx3 = useCx();
    let childrenAsText;
    if (typeof children === "string") {
      childrenAsText = children;
    } else if (typeof children === "number") {
      childrenAsText = children.toString();
    }
    const truncatedContent = childrenAsText ? truncateContent(childrenAsText, {
      ellipsis,
      ellipsizeMode,
      limit,
      numberOfLines
    }) : children;
    const shouldTruncate = !!childrenAsText && ellipsizeMode === TRUNCATE_TYPE.auto;
    const classes = (0, import_react.useMemo)(() => {
      const truncateLines = /* @__PURE__ */ css(numberOfLines === 1 ? "word-break: break-all;" : "", " -webkit-box-orient:vertical;-webkit-line-clamp:", numberOfLines, ";display:-webkit-box;overflow:hidden;" + (false ? "" : ";label:truncateLines;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdHJ1bmNhdGUvaG9vay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwRDJCIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdHJ1bmNhdGUvaG9vay50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdAd29yZHByZXNzL2VsZW1lbnQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgKiBhcyBzdHlsZXMgZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IHsgVFJVTkNBVEVfRUxMSVBTSVMsIFRSVU5DQVRFX1RZUEUsIHRydW5jYXRlQ29udGVudCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgdXNlQ3ggfSBmcm9tICcuLi91dGlscy9ob29rcy91c2UtY3gnO1xuaW1wb3J0IHR5cGUgeyBUcnVuY2F0ZVByb3BzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRydW5jYXRlKFxuXHRwcm9wczogV29yZFByZXNzQ29tcG9uZW50UHJvcHM8IFRydW5jYXRlUHJvcHMsICdzcGFuJyA+XG4pIHtcblx0Y29uc3Qge1xuXHRcdGNsYXNzTmFtZSxcblx0XHRjaGlsZHJlbixcblx0XHRlbGxpcHNpcyA9IFRSVU5DQVRFX0VMTElQU0lTLFxuXHRcdGVsbGlwc2l6ZU1vZGUgPSBUUlVOQ0FURV9UWVBFLmF1dG8sXG5cdFx0bGltaXQgPSAwLFxuXHRcdG51bWJlck9mTGluZXMgPSAwLFxuXHRcdC4uLm90aGVyUHJvcHNcblx0fSA9IHVzZUNvbnRleHRTeXN0ZW0oIHByb3BzLCAnVHJ1bmNhdGUnICk7XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGxldCBjaGlsZHJlbkFzVGV4dDtcblx0aWYgKCB0eXBlb2YgY2hpbGRyZW4gPT09ICdzdHJpbmcnICkge1xuXHRcdGNoaWxkcmVuQXNUZXh0ID0gY2hpbGRyZW47XG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ251bWJlcicgKSB7XG5cdFx0Y2hpbGRyZW5Bc1RleHQgPSBjaGlsZHJlbi50b1N0cmluZygpO1xuXHR9XG5cblx0Y29uc3QgdHJ1bmNhdGVkQ29udGVudCA9IGNoaWxkcmVuQXNUZXh0XG5cdFx0PyB0cnVuY2F0ZUNvbnRlbnQoIGNoaWxkcmVuQXNUZXh0LCB7XG5cdFx0XHRcdGVsbGlwc2lzLFxuXHRcdFx0XHRlbGxpcHNpemVNb2RlLFxuXHRcdFx0XHRsaW1pdCxcblx0XHRcdFx0bnVtYmVyT2ZMaW5lcyxcblx0XHQgIH0gKVxuXHRcdDogY2hpbGRyZW47XG5cblx0Y29uc3Qgc2hvdWxkVHJ1bmNhdGUgPVxuXHRcdCEhIGNoaWxkcmVuQXNUZXh0ICYmIGVsbGlwc2l6ZU1vZGUgPT09IFRSVU5DQVRFX1RZUEUuYXV0bztcblxuXHRjb25zdCBjbGFzc2VzID0gdXNlTWVtbyggKCkgPT4ge1xuXHRcdC8vIFRoZSBgd29yZC1icmVhazogYnJlYWstYWxsYCBwcm9wZXJ0eSBmaXJzdCBtYWtlcyBzdXJlIGEgdGV4dCBsaW5lXG5cdFx0Ly8gYnJlYWtzIGV2ZW4gd2hlbiBpdCBjb250YWlucyAndW5icmVha2FibGUnIGNvbnRlbnQgc3VjaCBhcyBsb25nIFVSTHMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy82MDg2MC5cblx0XHRjb25zdCB0cnVuY2F0ZUxpbmVzID0gY3NzYFxuXHRcdFx0JHsgbnVtYmVyT2ZMaW5lcyA9PT0gMSA/ICd3b3JkLWJyZWFrOiBicmVhay1hbGw7JyA6ICcnIH1cblx0XHRcdC13ZWJraXQtYm94LW9yaWVudDogdmVydGljYWw7XG5cdFx0XHQtd2Via2l0LWxpbmUtY2xhbXA6ICR7IG51bWJlck9mTGluZXMgfTtcblx0XHRcdGRpc3BsYXk6IC13ZWJraXQtYm94O1xuXHRcdFx0b3ZlcmZsb3c6IGhpZGRlbjtcblx0XHRgO1xuXG5cdFx0cmV0dXJuIGN4KFxuXHRcdFx0c2hvdWxkVHJ1bmNhdGUgJiYgISBudW1iZXJPZkxpbmVzICYmIHN0eWxlcy5UcnVuY2F0ZSxcblx0XHRcdHNob3VsZFRydW5jYXRlICYmICEhIG51bWJlck9mTGluZXMgJiYgdHJ1bmNhdGVMaW5lcyxcblx0XHRcdGNsYXNzTmFtZVxuXHRcdCk7XG5cdH0sIFsgY2xhc3NOYW1lLCBjeCwgbnVtYmVyT2ZMaW5lcywgc2hvdWxkVHJ1bmNhdGUgXSApO1xuXG5cdHJldHVybiB7IC4uLm90aGVyUHJvcHMsIGNsYXNzTmFtZTogY2xhc3NlcywgY2hpbGRyZW46IHRydW5jYXRlZENvbnRlbnQgfTtcbn1cbiJdfQ== */");
      return cx3(shouldTruncate && !numberOfLines && Truncate, shouldTruncate && !!numberOfLines && truncateLines, className);
    }, [className, cx3, numberOfLines, shouldTruncate]);
    return {
      ...otherProps,
      className: classes,
      children: truncatedContent
    };
  }

  // node_modules/@wordpress/components/build-module/truncate/component.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  function UnconnectedTruncate(props, forwardedRef) {
    const truncateProps = useTruncate(props);
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(component_default, {
      as: "span",
      ...truncateProps,
      ref: forwardedRef
    });
  }
  var Truncate2 = contextConnect(UnconnectedTruncate, "Truncate");
  var component_default6 = Truncate2;

  // node_modules/@wordpress/components/build-module/text/styles.js
  var styles_exports3 = {};
  __export(styles_exports3, {
    Text: () => Text,
    block: () => block2,
    destructive: () => destructive,
    highlighterText: () => highlighterText,
    muted: () => muted,
    positive: () => positive,
    upperCase: () => upperCase
  });
  function _EMOTION_STRINGIFIED_CSS_ERROR__5() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var Text = /* @__PURE__ */ css("color:", COLORS.gray[900], ";line-height:", config_values_default.fontLineHeightBase, ";margin:0;text-wrap:pretty;" + (false ? "" : ";label:Text;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVXVCIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUywgQ09ORklHIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgVGV4dCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRsaW5lLWhlaWdodDogJHsgQ09ORklHLmZvbnRMaW5lSGVpZ2h0QmFzZSB9O1xuXHRtYXJnaW46IDA7XG5cdHRleHQtd3JhcDogcHJldHR5O1xuYDtcblxuZXhwb3J0IGNvbnN0IGJsb2NrID0gY3NzYFxuXHRkaXNwbGF5OiBibG9jaztcbmA7XG5cbmV4cG9ydCBjb25zdCBwb3NpdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5ncmVlbiB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGRlc3RydWN0aXZlID0gY3NzYFxuXHRjb2xvcjogJHsgQ09MT1JTLmFsZXJ0LnJlZCB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IG11dGVkID0gY3NzYFxuXHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDcwMCBdIH07XG5gO1xuXG5leHBvcnQgY29uc3QgaGlnaGxpZ2h0ZXJUZXh0ID0gY3NzYFxuXHRtYXJrIHtcblx0XHRiYWNrZ3JvdW5kOiAkeyBDT0xPUlMuYWxlcnQueWVsbG93IH07XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJveC1zaGFkb3c6XG5cdFx0XHQwIDAgMCAxcHggcmdiYSggMCwgMCwgMCwgMC4wNSApIGluc2V0LFxuXHRcdFx0MCAtMXB4IDAgcmdiYSggMCwgMCwgMCwgMC4xICkgaW5zZXQ7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCB1cHBlckNhc2UgPSBjc3NgXG5cdHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG5gO1xuIl19 */");
  var block2 = false ? {
    name: "4zleql",
    styles: "display:block"
  } : {
    name: "14aceuy-block",
    styles: "display:block;label:block;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJ3QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__5
  };
  var positive = /* @__PURE__ */ css("color:", COLORS.alert.green, ";" + (false ? "" : ";label:positive;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcUIyQiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */");
  var destructive = /* @__PURE__ */ css("color:", COLORS.alert.red, ";" + (false ? "" : ";label:destructive;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUI4QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */");
  var muted = /* @__PURE__ */ css("color:", COLORS.gray[700], ";" + (false ? "" : ";label:muted;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkJ3QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */");
  var highlighterText = /* @__PURE__ */ css("mark{background:", COLORS.alert.yellow, ";border-radius:2px;box-shadow:0 0 0 1px rgba( 0, 0, 0, 0.05 ) inset,0 -1px 0 rgba( 0, 0, 0, 0.1 ) inset;}" + (false ? "" : ";label:highlighterText;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUNrQyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */");
  var upperCase = false ? {
    name: "50zrmy",
    styles: "text-transform:uppercase"
  } : {
    name: "1mrt3zt-upperCase",
    styles: "text-transform:uppercase;label:upperCase;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkM0QiIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IFRleHQgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0bGluZS1oZWlnaHQ6ICR7IENPTkZJRy5mb250TGluZUhlaWdodEJhc2UgfTtcblx0bWFyZ2luOiAwO1xuXHR0ZXh0LXdyYXA6IHByZXR0eTtcbmA7XG5cbmV4cG9ydCBjb25zdCBibG9jayA9IGNzc2Bcblx0ZGlzcGxheTogYmxvY2s7XG5gO1xuXG5leHBvcnQgY29uc3QgcG9zaXRpdmUgPSBjc3NgXG5cdGNvbG9yOiAkeyBDT0xPUlMuYWxlcnQuZ3JlZW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBkZXN0cnVjdGl2ZSA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5hbGVydC5yZWQgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBtdXRlZCA9IGNzc2Bcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IGhpZ2hsaWdodGVyVGV4dCA9IGNzc2Bcblx0bWFyayB7XG5cdFx0YmFja2dyb3VuZDogJHsgQ09MT1JTLmFsZXJ0LnllbGxvdyB9O1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OlxuXHRcdFx0MCAwIDAgMXB4IHJnYmEoIDAsIDAsIDAsIDAuMDUgKSBpbnNldCxcblx0XHRcdDAgLTFweCAwIHJnYmEoIDAsIDAsIDAsIDAuMSApIGluc2V0O1xuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgdXBwZXJDYXNlID0gY3NzYFxuXHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuYDtcbiJdfQ== */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__5
  };

  // node_modules/@wordpress/components/build-module/text/utils.js
  var import_highlight_words_core = __toESM(require_dist2());
  var lowercaseProps = (object) => {
    const mapped = {};
    for (const key in object) {
      mapped[key.toLowerCase()] = object[key];
    }
    return mapped;
  };
  var memoizedLowercaseProps = memize(lowercaseProps);
  function createHighlighterText({
    activeClassName = "",
    activeIndex = -1,
    activeStyle,
    autoEscape,
    caseSensitive = false,
    children,
    findChunks,
    highlightClassName = "",
    highlightStyle = {},
    highlightTag = "mark",
    sanitize: sanitize2,
    searchWords = [],
    unhighlightClassName = "",
    unhighlightStyle
  }) {
    if (!children) {
      return null;
    }
    if (typeof children !== "string") {
      return children;
    }
    const textToHighlight = children;
    const chunks = (0, import_highlight_words_core.findAll)({
      autoEscape,
      caseSensitive,
      findChunks,
      sanitize: sanitize2,
      searchWords,
      textToHighlight
    });
    const HighlightTag = highlightTag;
    let highlightIndex = -1;
    let highlightClassNames = "";
    let highlightStyles;
    const textContent = chunks.map((chunk, index2) => {
      const text2 = textToHighlight.substr(chunk.start, chunk.end - chunk.start);
      if (chunk.highlight) {
        highlightIndex++;
        let highlightClass;
        if (typeof highlightClassName === "object") {
          if (!caseSensitive) {
            highlightClassName = memoizedLowercaseProps(highlightClassName);
            highlightClass = highlightClassName[text2.toLowerCase()];
          } else {
            highlightClass = highlightClassName[text2];
          }
        } else {
          highlightClass = highlightClassName;
        }
        const isActive = highlightIndex === +activeIndex;
        highlightClassNames = `${highlightClass} ${isActive ? activeClassName : ""}`;
        highlightStyles = isActive === true && activeStyle !== null ? Object.assign({}, highlightStyle, activeStyle) : highlightStyle;
        const props = {
          children: text2,
          className: highlightClassNames,
          key: index2,
          style: highlightStyles
        };
        if (typeof HighlightTag !== "string") {
          props.highlightIndex = highlightIndex;
        }
        return (0, import_react.createElement)(HighlightTag, props);
      }
      return (0, import_react.createElement)("span", {
        children: text2,
        className: unhighlightClassName,
        key: index2,
        style: unhighlightStyle
      });
    });
    return textContent;
  }

  // node_modules/@wordpress/components/build-module/utils/font-size.js
  var BASE_FONT_SIZE = 13;
  var PRESET_FONT_SIZES = {
    body: BASE_FONT_SIZE,
    caption: 10,
    footnote: 11,
    largeTitle: 28,
    subheadline: 12,
    title: 20
  };
  var HEADING_FONT_SIZES = [1, 2, 3, 4, 5, 6].flatMap((n3) => [n3, n3.toString()]);
  function getFontSize(size4 = BASE_FONT_SIZE) {
    if (size4 in PRESET_FONT_SIZES) {
      return getFontSize(PRESET_FONT_SIZES[size4]);
    }
    if (typeof size4 !== "number") {
      const parsed = parseFloat(size4);
      if (Number.isNaN(parsed)) {
        return size4;
      }
      size4 = parsed;
    }
    const ratio = `(${size4} / ${BASE_FONT_SIZE})`;
    return `calc(${ratio} * ${config_values_default.fontSize})`;
  }

  // node_modules/@wordpress/components/build-module/text/get-line-height.js
  function getLineHeight(adjustLineHeightForInnerControls, lineHeight) {
    if (lineHeight) {
      return lineHeight;
    }
    if (!adjustLineHeightForInnerControls) {
      return;
    }
    let value = `calc(${config_values_default.controlHeight} + ${space(2)})`;
    switch (adjustLineHeightForInnerControls) {
      case "large":
        value = `calc(${config_values_default.controlHeightLarge} + ${space(2)})`;
        break;
      case "small":
        value = `calc(${config_values_default.controlHeightSmall} + ${space(2)})`;
        break;
      case "xSmall":
        value = `calc(${config_values_default.controlHeightXSmall} + ${space(2)})`;
        break;
      default:
        break;
    }
    return value;
  }

  // node_modules/@wordpress/components/build-module/text/hook.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__6() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var _ref = false ? {
    name: "50zrmy",
    styles: "text-transform:uppercase"
  } : {
    name: "18bqwxz-sx-upperCase",
    styles: "text-transform:uppercase;label:sx-upperCase;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWtHaUIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy90ZXh0L2hvb2sudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFNlcmlhbGl6ZWRTdHlsZXMgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogV29yZFByZXNzIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyB1c2VNZW1vLCBDaGlsZHJlbiwgY2xvbmVFbGVtZW50IH0gZnJvbSAnQHdvcmRwcmVzcy9lbGVtZW50JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBXb3JkUHJlc3NDb21wb25lbnRQcm9wcyB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHsgaGFzQ29ubmVjdE5hbWVzcGFjZSwgdXNlQ29udGV4dFN5c3RlbSB9IGZyb20gJy4uL2NvbnRleHQnO1xuaW1wb3J0IHsgdXNlVHJ1bmNhdGUgfSBmcm9tICcuLi90cnVuY2F0ZSc7XG5pbXBvcnQgeyBnZXRPcHRpbWFsVGV4dFNoYWRlIH0gZnJvbSAnLi4vdXRpbHMvY29sb3JzJztcbmltcG9ydCAqIGFzIHN0eWxlcyBmcm9tICcuL3N0eWxlcyc7XG5pbXBvcnQgeyBjcmVhdGVIaWdobGlnaHRlclRleHQgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGdldEZvbnRTaXplIH0gZnJvbSAnLi4vdXRpbHMvZm9udC1zaXplJztcbmltcG9ydCB7IENPTkZJRywgQ09MT1JTIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgZ2V0TGluZUhlaWdodCB9IGZyb20gJy4vZ2V0LWxpbmUtaGVpZ2h0JztcbmltcG9ydCB7IHVzZUN4IH0gZnJvbSAnLi4vdXRpbHMvaG9va3MvdXNlLWN4JztcbmltcG9ydCB0eXBlIHsgUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB0eXBlIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLyoqXG4gKiBAcGFyYW0ge2ltcG9ydCgnLi4vY29udGV4dCcpLldvcmRQcmVzc0NvbXBvbmVudFByb3BzPGltcG9ydCgnLi90eXBlcycpLlByb3BzLCAnc3Bhbic+fSBwcm9wc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VUZXh0KFxuXHRwcm9wczogV29yZFByZXNzQ29tcG9uZW50UHJvcHM8IFByb3BzLCAnc3BhbicgPlxuKSB7XG5cdGNvbnN0IHtcblx0XHRhZGp1c3RMaW5lSGVpZ2h0Rm9ySW5uZXJDb250cm9scyxcblx0XHRhbGlnbixcblx0XHRjaGlsZHJlbixcblx0XHRjbGFzc05hbWUsXG5cdFx0Y29sb3IsXG5cdFx0ZWxsaXBzaXplTW9kZSxcblx0XHRpc0Rlc3RydWN0aXZlID0gZmFsc2UsXG5cdFx0ZGlzcGxheSxcblx0XHRoaWdobGlnaHRFc2NhcGUgPSBmYWxzZSxcblx0XHRoaWdobGlnaHRDYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG5cdFx0aGlnaGxpZ2h0V29yZHMsXG5cdFx0aGlnaGxpZ2h0U2FuaXRpemUsXG5cdFx0aXNCbG9jayA9IGZhbHNlLFxuXHRcdGxldHRlclNwYWNpbmcsXG5cdFx0bGluZUhlaWdodDogbGluZUhlaWdodFByb3AsXG5cdFx0b3B0aW1pemVSZWFkYWJpbGl0eUZvcixcblx0XHRzaXplLFxuXHRcdHRydW5jYXRlID0gZmFsc2UsXG5cdFx0dXBwZXJDYXNlID0gZmFsc2UsXG5cdFx0dmFyaWFudCxcblx0XHR3ZWlnaHQgPSBDT05GSUcuZm9udFdlaWdodCxcblx0XHQuLi5vdGhlclByb3BzXG5cdH0gPSB1c2VDb250ZXh0U3lzdGVtKCBwcm9wcywgJ1RleHQnICk7XG5cblx0bGV0IGNvbnRlbnQ6IFJlYWN0LlJlYWN0Tm9kZSA9IGNoaWxkcmVuO1xuXHRjb25zdCBpc0hpZ2hsaWdodGVyID0gQXJyYXkuaXNBcnJheSggaGlnaGxpZ2h0V29yZHMgKTtcblx0Y29uc3QgaXNDYXB0aW9uID0gc2l6ZSA9PT0gJ2NhcHRpb24nO1xuXG5cdGlmICggaXNIaWdobGlnaHRlciApIHtcblx0XHRpZiAoIHR5cGVvZiBjaGlsZHJlbiAhPT0gJ3N0cmluZycgKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFxuXHRcdFx0XHQnYGNoaWxkcmVuYCBvZiBgVGV4dGAgbXVzdCBvbmx5IGJlIGBzdHJpbmdgIHR5cGVzIHdoZW4gYGhpZ2hsaWdodFdvcmRzYCBpcyBkZWZpbmVkJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRjb250ZW50ID0gY3JlYXRlSGlnaGxpZ2h0ZXJUZXh0KCB7XG5cdFx0XHRhdXRvRXNjYXBlOiBoaWdobGlnaHRFc2NhcGUsXG5cdFx0XHRjaGlsZHJlbixcblx0XHRcdGNhc2VTZW5zaXRpdmU6IGhpZ2hsaWdodENhc2VTZW5zaXRpdmUsXG5cdFx0XHRzZWFyY2hXb3JkczogaGlnaGxpZ2h0V29yZHMsXG5cdFx0XHRzYW5pdGl6ZTogaGlnaGxpZ2h0U2FuaXRpemUsXG5cdFx0fSApO1xuXHR9XG5cblx0Y29uc3QgY3ggPSB1c2VDeCgpO1xuXG5cdGNvbnN0IGNsYXNzZXMgPSB1c2VNZW1vKCAoKSA9PiB7XG5cdFx0Y29uc3Qgc3g6IFJlY29yZDwgc3RyaW5nLCBTZXJpYWxpemVkU3R5bGVzIHwgbnVsbCA+ID0ge307XG5cblx0XHRjb25zdCBsaW5lSGVpZ2h0ID0gZ2V0TGluZUhlaWdodChcblx0XHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdFx0bGluZUhlaWdodFByb3Bcblx0XHQpO1xuXG5cdFx0c3guQmFzZSA9IGNzcygge1xuXHRcdFx0Y29sb3IsXG5cdFx0XHRkaXNwbGF5LFxuXHRcdFx0Zm9udFNpemU6IGdldEZvbnRTaXplKCBzaXplICksXG5cdFx0XHRmb250V2VpZ2h0OiB3ZWlnaHQsXG5cdFx0XHRsaW5lSGVpZ2h0LFxuXHRcdFx0bGV0dGVyU3BhY2luZyxcblx0XHRcdHRleHRBbGlnbjogYWxpZ24sXG5cdFx0fSApO1xuXG5cdFx0c3gudXBwZXJDYXNlID0gY3NzKCB7IHRleHRUcmFuc2Zvcm06ICd1cHBlcmNhc2UnIH0gKTtcblxuXHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IgPSBudWxsO1xuXG5cdFx0aWYgKCBvcHRpbWl6ZVJlYWRhYmlsaXR5Rm9yICkge1xuXHRcdFx0Y29uc3QgaXNPcHRpbWFsVGV4dENvbG9yRGFyayA9XG5cdFx0XHRcdGdldE9wdGltYWxUZXh0U2hhZGUoIG9wdGltaXplUmVhZGFiaWxpdHlGb3IgKSA9PT0gJ2RhcmsnO1xuXG5cdFx0XHRzeC5vcHRpbWFsVGV4dENvbG9yID0gaXNPcHRpbWFsVGV4dENvbG9yRGFya1xuXHRcdFx0XHQ/IGNzcyggeyBjb2xvcjogQ09MT1JTLmdyYXlbIDkwMCBdIH0gKVxuXHRcdFx0XHQ6IGNzcyggeyBjb2xvcjogQ09MT1JTLndoaXRlIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY3goXG5cdFx0XHRzdHlsZXMuVGV4dCxcblx0XHRcdHN4LkJhc2UsXG5cdFx0XHRzeC5vcHRpbWFsVGV4dENvbG9yLFxuXHRcdFx0aXNEZXN0cnVjdGl2ZSAmJiBzdHlsZXMuZGVzdHJ1Y3RpdmUsXG5cdFx0XHQhISBpc0hpZ2hsaWdodGVyICYmIHN0eWxlcy5oaWdobGlnaHRlclRleHQsXG5cdFx0XHRpc0Jsb2NrICYmIHN0eWxlcy5ibG9jayxcblx0XHRcdGlzQ2FwdGlvbiAmJiBzdHlsZXMubXV0ZWQsXG5cdFx0XHR2YXJpYW50ICYmIHN0eWxlc1sgdmFyaWFudCBdLFxuXHRcdFx0dXBwZXJDYXNlICYmIHN4LnVwcGVyQ2FzZSxcblx0XHRcdGNsYXNzTmFtZVxuXHRcdCk7XG5cdH0sIFtcblx0XHRhZGp1c3RMaW5lSGVpZ2h0Rm9ySW5uZXJDb250cm9scyxcblx0XHRhbGlnbixcblx0XHRjbGFzc05hbWUsXG5cdFx0Y29sb3IsXG5cdFx0Y3gsXG5cdFx0ZGlzcGxheSxcblx0XHRpc0Jsb2NrLFxuXHRcdGlzQ2FwdGlvbixcblx0XHRpc0Rlc3RydWN0aXZlLFxuXHRcdGlzSGlnaGxpZ2h0ZXIsXG5cdFx0bGV0dGVyU3BhY2luZyxcblx0XHRsaW5lSGVpZ2h0UHJvcCxcblx0XHRvcHRpbWl6ZVJlYWRhYmlsaXR5Rm9yLFxuXHRcdHNpemUsXG5cdFx0dXBwZXJDYXNlLFxuXHRcdHZhcmlhbnQsXG5cdFx0d2VpZ2h0LFxuXHRdICk7XG5cblx0bGV0IGZpbmFsRWxsaXBzaXplTW9kZTogdW5kZWZpbmVkIHwgJ2F1dG8nIHwgJ25vbmUnO1xuXHRpZiAoIHRydW5jYXRlID09PSB0cnVlICkge1xuXHRcdGZpbmFsRWxsaXBzaXplTW9kZSA9ICdhdXRvJztcblx0fVxuXHRpZiAoIHRydW5jYXRlID09PSBmYWxzZSApIHtcblx0XHRmaW5hbEVsbGlwc2l6ZU1vZGUgPSAnbm9uZSc7XG5cdH1cblxuXHRjb25zdCBmaW5hbENvbXBvbmVudFByb3BzID0ge1xuXHRcdC4uLm90aGVyUHJvcHMsXG5cdFx0Y2xhc3NOYW1lOiBjbGFzc2VzLFxuXHRcdGNoaWxkcmVuLFxuXHRcdGVsbGlwc2l6ZU1vZGU6IGVsbGlwc2l6ZU1vZGUgfHwgZmluYWxFbGxpcHNpemVNb2RlLFxuXHR9O1xuXG5cdGNvbnN0IHRydW5jYXRlUHJvcHMgPSB1c2VUcnVuY2F0ZSggZmluYWxDb21wb25lbnRQcm9wcyApO1xuXG5cdC8qKlxuXHQgKiBFbmhhbmNlIGNoaWxkIGA8TGluayAvPmAgY29tcG9uZW50cyB0byBpbmhlcml0IGZvbnQgc2l6ZS5cblx0ICovXG5cdGlmICggISB0cnVuY2F0ZSAmJiBBcnJheS5pc0FycmF5KCBjaGlsZHJlbiApICkge1xuXHRcdGNvbnRlbnQgPSBDaGlsZHJlbi5tYXAoIGNoaWxkcmVuLCAoIGNoaWxkICkgPT4ge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHR0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnIHx8XG5cdFx0XHRcdGNoaWxkID09PSBudWxsIHx8XG5cdFx0XHRcdCEgKCAncHJvcHMnIGluIGNoaWxkIClcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGlzTGluayA9IGhhc0Nvbm5lY3ROYW1lc3BhY2UoIGNoaWxkLCBbICdMaW5rJyBdICk7XG5cdFx0XHRpZiAoIGlzTGluayApIHtcblx0XHRcdFx0cmV0dXJuIGNsb25lRWxlbWVudCggY2hpbGQsIHtcblx0XHRcdFx0XHRzaXplOiBjaGlsZC5wcm9wcy5zaXplIHx8ICdpbmhlcml0Jyxcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY2hpbGQ7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHQuLi50cnVuY2F0ZVByb3BzLFxuXHRcdGNoaWxkcmVuOiB0cnVuY2F0ZSA/IHRydW5jYXRlUHJvcHMuY2hpbGRyZW4gOiBjb250ZW50LFxuXHR9O1xufVxuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__6
  };
  function useText(props) {
    const {
      adjustLineHeightForInnerControls,
      align,
      children,
      className,
      color: color2,
      ellipsizeMode,
      isDestructive = false,
      display,
      highlightEscape = false,
      highlightCaseSensitive = false,
      highlightWords,
      highlightSanitize,
      isBlock = false,
      letterSpacing,
      lineHeight: lineHeightProp,
      optimizeReadabilityFor,
      size: size4,
      truncate = false,
      upperCase: upperCase2 = false,
      variant,
      weight = config_values_default.fontWeight,
      ...otherProps
    } = useContextSystem(props, "Text");
    let content = children;
    const isHighlighter = Array.isArray(highlightWords);
    const isCaption = size4 === "caption";
    if (isHighlighter) {
      if (typeof children !== "string") {
        throw new TypeError("`children` of `Text` must only be `string` types when `highlightWords` is defined");
      }
      content = createHighlighterText({
        autoEscape: highlightEscape,
        children,
        caseSensitive: highlightCaseSensitive,
        searchWords: highlightWords,
        sanitize: highlightSanitize
      });
    }
    const cx3 = useCx();
    const classes = (0, import_react.useMemo)(() => {
      const sx = {};
      const lineHeight = getLineHeight(adjustLineHeightForInnerControls, lineHeightProp);
      sx.Base = /* @__PURE__ */ css({
        color: color2,
        display,
        fontSize: getFontSize(size4),
        fontWeight: weight,
        lineHeight,
        letterSpacing,
        textAlign: align
      }, false ? "" : ";label:sx-Base;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdGWSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvaG9vay50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IHVzZU1lbW8sIENoaWxkcmVuLCBjbG9uZUVsZW1lbnQgfSBmcm9tICdAd29yZHByZXNzL2VsZW1lbnQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyBoYXNDb25uZWN0TmFtZXNwYWNlLCB1c2VDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB7IGdldE9wdGltYWxUZXh0U2hhZGUgfSBmcm9tICcuLi91dGlscy9jb2xvcnMnO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCB7IGNyZWF0ZUhpZ2hsaWdodGVyVGV4dCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZ2V0Rm9udFNpemUgfSBmcm9tICcuLi91dGlscy9mb250LXNpemUnO1xuaW1wb3J0IHsgQ09ORklHLCBDT0xPUlMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRMaW5lSGVpZ2h0IH0gZnJvbSAnLi9nZXQtbGluZS1oZWlnaHQnO1xuaW1wb3J0IHsgdXNlQ3ggfSBmcm9tICcuLi91dGlscy9ob29rcy91c2UtY3gnO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9jb250ZXh0JykuV29yZFByZXNzQ29tcG9uZW50UHJvcHM8aW1wb3J0KCcuL3R5cGVzJykuUHJvcHMsICdzcGFuJz59IHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRleHQoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgUHJvcHMsICdzcGFuJyA+XG4pIHtcblx0Y29uc3Qge1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNoaWxkcmVuLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRlbGxpcHNpemVNb2RlLFxuXHRcdGlzRGVzdHJ1Y3RpdmUgPSBmYWxzZSxcblx0XHRkaXNwbGF5LFxuXHRcdGhpZ2hsaWdodEVzY2FwZSA9IGZhbHNlLFxuXHRcdGhpZ2hsaWdodENhc2VTZW5zaXRpdmUgPSBmYWxzZSxcblx0XHRoaWdobGlnaHRXb3Jkcyxcblx0XHRoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHRpc0Jsb2NrID0gZmFsc2UsXG5cdFx0bGV0dGVyU3BhY2luZyxcblx0XHRsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0UHJvcCxcblx0XHRvcHRpbWl6ZVJlYWRhYmlsaXR5Rm9yLFxuXHRcdHNpemUsXG5cdFx0dHJ1bmNhdGUgPSBmYWxzZSxcblx0XHR1cHBlckNhc2UgPSBmYWxzZSxcblx0XHR2YXJpYW50LFxuXHRcdHdlaWdodCA9IENPTkZJRy5mb250V2VpZ2h0LFxuXHRcdC4uLm90aGVyUHJvcHNcblx0fSA9IHVzZUNvbnRleHRTeXN0ZW0oIHByb3BzLCAnVGV4dCcgKTtcblxuXHRsZXQgY29udGVudDogUmVhY3QuUmVhY3ROb2RlID0gY2hpbGRyZW47XG5cdGNvbnN0IGlzSGlnaGxpZ2h0ZXIgPSBBcnJheS5pc0FycmF5KCBoaWdobGlnaHRXb3JkcyApO1xuXHRjb25zdCBpc0NhcHRpb24gPSBzaXplID09PSAnY2FwdGlvbic7XG5cblx0aWYgKCBpc0hpZ2hsaWdodGVyICkge1xuXHRcdGlmICggdHlwZW9mIGNoaWxkcmVuICE9PSAnc3RyaW5nJyApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdFx0XHRcdCdgY2hpbGRyZW5gIG9mIGBUZXh0YCBtdXN0IG9ubHkgYmUgYHN0cmluZ2AgdHlwZXMgd2hlbiBgaGlnaGxpZ2h0V29yZHNgIGlzIGRlZmluZWQnXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGNvbnRlbnQgPSBjcmVhdGVIaWdobGlnaHRlclRleHQoIHtcblx0XHRcdGF1dG9Fc2NhcGU6IGhpZ2hsaWdodEVzY2FwZSxcblx0XHRcdGNoaWxkcmVuLFxuXHRcdFx0Y2FzZVNlbnNpdGl2ZTogaGlnaGxpZ2h0Q2FzZVNlbnNpdGl2ZSxcblx0XHRcdHNlYXJjaFdvcmRzOiBoaWdobGlnaHRXb3Jkcyxcblx0XHRcdHNhbml0aXplOiBoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHR9ICk7XG5cdH1cblxuXHRjb25zdCBjeCA9IHVzZUN4KCk7XG5cblx0Y29uc3QgY2xhc3NlcyA9IHVzZU1lbW8oICgpID0+IHtcblx0XHRjb25zdCBzeDogUmVjb3JkPCBzdHJpbmcsIFNlcmlhbGl6ZWRTdHlsZXMgfCBudWxsID4gPSB7fTtcblxuXHRcdGNvbnN0IGxpbmVIZWlnaHQgPSBnZXRMaW5lSGVpZ2h0KFxuXHRcdFx0YWRqdXN0TGluZUhlaWdodEZvcklubmVyQ29udHJvbHMsXG5cdFx0XHRsaW5lSGVpZ2h0UHJvcFxuXHRcdCk7XG5cblx0XHRzeC5CYXNlID0gY3NzKCB7XG5cdFx0XHRjb2xvcixcblx0XHRcdGRpc3BsYXksXG5cdFx0XHRmb250U2l6ZTogZ2V0Rm9udFNpemUoIHNpemUgKSxcblx0XHRcdGZvbnRXZWlnaHQ6IHdlaWdodCxcblx0XHRcdGxpbmVIZWlnaHQsXG5cdFx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdFx0dGV4dEFsaWduOiBhbGlnbixcblx0XHR9ICk7XG5cblx0XHRzeC51cHBlckNhc2UgPSBjc3MoIHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSApO1xuXG5cdFx0c3gub3B0aW1hbFRleHRDb2xvciA9IG51bGw7XG5cblx0XHRpZiAoIG9wdGltaXplUmVhZGFiaWxpdHlGb3IgKSB7XG5cdFx0XHRjb25zdCBpc09wdGltYWxUZXh0Q29sb3JEYXJrID1cblx0XHRcdFx0Z2V0T3B0aW1hbFRleHRTaGFkZSggb3B0aW1pemVSZWFkYWJpbGl0eUZvciApID09PSAnZGFyayc7XG5cblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IgPSBpc09wdGltYWxUZXh0Q29sb3JEYXJrXG5cdFx0XHRcdD8gY3NzKCB7IGNvbG9yOiBDT0xPUlMuZ3JheVsgOTAwIF0gfSApXG5cdFx0XHRcdDogY3NzKCB7IGNvbG9yOiBDT0xPUlMud2hpdGUgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBjeChcblx0XHRcdHN0eWxlcy5UZXh0LFxuXHRcdFx0c3guQmFzZSxcblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IsXG5cdFx0XHRpc0Rlc3RydWN0aXZlICYmIHN0eWxlcy5kZXN0cnVjdGl2ZSxcblx0XHRcdCEhIGlzSGlnaGxpZ2h0ZXIgJiYgc3R5bGVzLmhpZ2hsaWdodGVyVGV4dCxcblx0XHRcdGlzQmxvY2sgJiYgc3R5bGVzLmJsb2NrLFxuXHRcdFx0aXNDYXB0aW9uICYmIHN0eWxlcy5tdXRlZCxcblx0XHRcdHZhcmlhbnQgJiYgc3R5bGVzWyB2YXJpYW50IF0sXG5cdFx0XHR1cHBlckNhc2UgJiYgc3gudXBwZXJDYXNlLFxuXHRcdFx0Y2xhc3NOYW1lXG5cdFx0KTtcblx0fSwgW1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRjeCxcblx0XHRkaXNwbGF5LFxuXHRcdGlzQmxvY2ssXG5cdFx0aXNDYXB0aW9uLFxuXHRcdGlzRGVzdHJ1Y3RpdmUsXG5cdFx0aXNIaWdobGlnaHRlcixcblx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdGxpbmVIZWlnaHRQcm9wLFxuXHRcdG9wdGltaXplUmVhZGFiaWxpdHlGb3IsXG5cdFx0c2l6ZSxcblx0XHR1cHBlckNhc2UsXG5cdFx0dmFyaWFudCxcblx0XHR3ZWlnaHQsXG5cdF0gKTtcblxuXHRsZXQgZmluYWxFbGxpcHNpemVNb2RlOiB1bmRlZmluZWQgfCAnYXV0bycgfCAnbm9uZSc7XG5cdGlmICggdHJ1bmNhdGUgPT09IHRydWUgKSB7XG5cdFx0ZmluYWxFbGxpcHNpemVNb2RlID0gJ2F1dG8nO1xuXHR9XG5cdGlmICggdHJ1bmNhdGUgPT09IGZhbHNlICkge1xuXHRcdGZpbmFsRWxsaXBzaXplTW9kZSA9ICdub25lJztcblx0fVxuXG5cdGNvbnN0IGZpbmFsQ29tcG9uZW50UHJvcHMgPSB7XG5cdFx0Li4ub3RoZXJQcm9wcyxcblx0XHRjbGFzc05hbWU6IGNsYXNzZXMsXG5cdFx0Y2hpbGRyZW4sXG5cdFx0ZWxsaXBzaXplTW9kZTogZWxsaXBzaXplTW9kZSB8fCBmaW5hbEVsbGlwc2l6ZU1vZGUsXG5cdH07XG5cblx0Y29uc3QgdHJ1bmNhdGVQcm9wcyA9IHVzZVRydW5jYXRlKCBmaW5hbENvbXBvbmVudFByb3BzICk7XG5cblx0LyoqXG5cdCAqIEVuaGFuY2UgY2hpbGQgYDxMaW5rIC8+YCBjb21wb25lbnRzIHRvIGluaGVyaXQgZm9udCBzaXplLlxuXHQgKi9cblx0aWYgKCAhIHRydW5jYXRlICYmIEFycmF5LmlzQXJyYXkoIGNoaWxkcmVuICkgKSB7XG5cdFx0Y29udGVudCA9IENoaWxkcmVuLm1hcCggY2hpbGRyZW4sICggY2hpbGQgKSA9PiB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcgfHxcblx0XHRcdFx0Y2hpbGQgPT09IG51bGwgfHxcblx0XHRcdFx0ISAoICdwcm9wcycgaW4gY2hpbGQgKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBjaGlsZDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaXNMaW5rID0gaGFzQ29ubmVjdE5hbWVzcGFjZSggY2hpbGQsIFsgJ0xpbmsnIF0gKTtcblx0XHRcdGlmICggaXNMaW5rICkge1xuXHRcdFx0XHRyZXR1cm4gY2xvbmVFbGVtZW50KCBjaGlsZCwge1xuXHRcdFx0XHRcdHNpemU6IGNoaWxkLnByb3BzLnNpemUgfHwgJ2luaGVyaXQnLFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdC4uLnRydW5jYXRlUHJvcHMsXG5cdFx0Y2hpbGRyZW46IHRydW5jYXRlID8gdHJ1bmNhdGVQcm9wcy5jaGlsZHJlbiA6IGNvbnRlbnQsXG5cdH07XG59XG4iXX0= */");
      sx.upperCase = _ref;
      sx.optimalTextColor = null;
      if (optimizeReadabilityFor) {
        const isOptimalTextColorDark = getOptimalTextShade(optimizeReadabilityFor) === "dark";
        sx.optimalTextColor = isOptimalTextColorDark ? /* @__PURE__ */ css({
          color: COLORS.gray[900]
        }, false ? "" : ";label:sx-optimalTextColor;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTJHTSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvaG9vay50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IHVzZU1lbW8sIENoaWxkcmVuLCBjbG9uZUVsZW1lbnQgfSBmcm9tICdAd29yZHByZXNzL2VsZW1lbnQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyBoYXNDb25uZWN0TmFtZXNwYWNlLCB1c2VDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB7IGdldE9wdGltYWxUZXh0U2hhZGUgfSBmcm9tICcuLi91dGlscy9jb2xvcnMnO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCB7IGNyZWF0ZUhpZ2hsaWdodGVyVGV4dCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZ2V0Rm9udFNpemUgfSBmcm9tICcuLi91dGlscy9mb250LXNpemUnO1xuaW1wb3J0IHsgQ09ORklHLCBDT0xPUlMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRMaW5lSGVpZ2h0IH0gZnJvbSAnLi9nZXQtbGluZS1oZWlnaHQnO1xuaW1wb3J0IHsgdXNlQ3ggfSBmcm9tICcuLi91dGlscy9ob29rcy91c2UtY3gnO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9jb250ZXh0JykuV29yZFByZXNzQ29tcG9uZW50UHJvcHM8aW1wb3J0KCcuL3R5cGVzJykuUHJvcHMsICdzcGFuJz59IHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRleHQoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgUHJvcHMsICdzcGFuJyA+XG4pIHtcblx0Y29uc3Qge1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNoaWxkcmVuLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRlbGxpcHNpemVNb2RlLFxuXHRcdGlzRGVzdHJ1Y3RpdmUgPSBmYWxzZSxcblx0XHRkaXNwbGF5LFxuXHRcdGhpZ2hsaWdodEVzY2FwZSA9IGZhbHNlLFxuXHRcdGhpZ2hsaWdodENhc2VTZW5zaXRpdmUgPSBmYWxzZSxcblx0XHRoaWdobGlnaHRXb3Jkcyxcblx0XHRoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHRpc0Jsb2NrID0gZmFsc2UsXG5cdFx0bGV0dGVyU3BhY2luZyxcblx0XHRsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0UHJvcCxcblx0XHRvcHRpbWl6ZVJlYWRhYmlsaXR5Rm9yLFxuXHRcdHNpemUsXG5cdFx0dHJ1bmNhdGUgPSBmYWxzZSxcblx0XHR1cHBlckNhc2UgPSBmYWxzZSxcblx0XHR2YXJpYW50LFxuXHRcdHdlaWdodCA9IENPTkZJRy5mb250V2VpZ2h0LFxuXHRcdC4uLm90aGVyUHJvcHNcblx0fSA9IHVzZUNvbnRleHRTeXN0ZW0oIHByb3BzLCAnVGV4dCcgKTtcblxuXHRsZXQgY29udGVudDogUmVhY3QuUmVhY3ROb2RlID0gY2hpbGRyZW47XG5cdGNvbnN0IGlzSGlnaGxpZ2h0ZXIgPSBBcnJheS5pc0FycmF5KCBoaWdobGlnaHRXb3JkcyApO1xuXHRjb25zdCBpc0NhcHRpb24gPSBzaXplID09PSAnY2FwdGlvbic7XG5cblx0aWYgKCBpc0hpZ2hsaWdodGVyICkge1xuXHRcdGlmICggdHlwZW9mIGNoaWxkcmVuICE9PSAnc3RyaW5nJyApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdFx0XHRcdCdgY2hpbGRyZW5gIG9mIGBUZXh0YCBtdXN0IG9ubHkgYmUgYHN0cmluZ2AgdHlwZXMgd2hlbiBgaGlnaGxpZ2h0V29yZHNgIGlzIGRlZmluZWQnXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGNvbnRlbnQgPSBjcmVhdGVIaWdobGlnaHRlclRleHQoIHtcblx0XHRcdGF1dG9Fc2NhcGU6IGhpZ2hsaWdodEVzY2FwZSxcblx0XHRcdGNoaWxkcmVuLFxuXHRcdFx0Y2FzZVNlbnNpdGl2ZTogaGlnaGxpZ2h0Q2FzZVNlbnNpdGl2ZSxcblx0XHRcdHNlYXJjaFdvcmRzOiBoaWdobGlnaHRXb3Jkcyxcblx0XHRcdHNhbml0aXplOiBoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHR9ICk7XG5cdH1cblxuXHRjb25zdCBjeCA9IHVzZUN4KCk7XG5cblx0Y29uc3QgY2xhc3NlcyA9IHVzZU1lbW8oICgpID0+IHtcblx0XHRjb25zdCBzeDogUmVjb3JkPCBzdHJpbmcsIFNlcmlhbGl6ZWRTdHlsZXMgfCBudWxsID4gPSB7fTtcblxuXHRcdGNvbnN0IGxpbmVIZWlnaHQgPSBnZXRMaW5lSGVpZ2h0KFxuXHRcdFx0YWRqdXN0TGluZUhlaWdodEZvcklubmVyQ29udHJvbHMsXG5cdFx0XHRsaW5lSGVpZ2h0UHJvcFxuXHRcdCk7XG5cblx0XHRzeC5CYXNlID0gY3NzKCB7XG5cdFx0XHRjb2xvcixcblx0XHRcdGRpc3BsYXksXG5cdFx0XHRmb250U2l6ZTogZ2V0Rm9udFNpemUoIHNpemUgKSxcblx0XHRcdGZvbnRXZWlnaHQ6IHdlaWdodCxcblx0XHRcdGxpbmVIZWlnaHQsXG5cdFx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdFx0dGV4dEFsaWduOiBhbGlnbixcblx0XHR9ICk7XG5cblx0XHRzeC51cHBlckNhc2UgPSBjc3MoIHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSApO1xuXG5cdFx0c3gub3B0aW1hbFRleHRDb2xvciA9IG51bGw7XG5cblx0XHRpZiAoIG9wdGltaXplUmVhZGFiaWxpdHlGb3IgKSB7XG5cdFx0XHRjb25zdCBpc09wdGltYWxUZXh0Q29sb3JEYXJrID1cblx0XHRcdFx0Z2V0T3B0aW1hbFRleHRTaGFkZSggb3B0aW1pemVSZWFkYWJpbGl0eUZvciApID09PSAnZGFyayc7XG5cblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IgPSBpc09wdGltYWxUZXh0Q29sb3JEYXJrXG5cdFx0XHRcdD8gY3NzKCB7IGNvbG9yOiBDT0xPUlMuZ3JheVsgOTAwIF0gfSApXG5cdFx0XHRcdDogY3NzKCB7IGNvbG9yOiBDT0xPUlMud2hpdGUgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBjeChcblx0XHRcdHN0eWxlcy5UZXh0LFxuXHRcdFx0c3guQmFzZSxcblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IsXG5cdFx0XHRpc0Rlc3RydWN0aXZlICYmIHN0eWxlcy5kZXN0cnVjdGl2ZSxcblx0XHRcdCEhIGlzSGlnaGxpZ2h0ZXIgJiYgc3R5bGVzLmhpZ2hsaWdodGVyVGV4dCxcblx0XHRcdGlzQmxvY2sgJiYgc3R5bGVzLmJsb2NrLFxuXHRcdFx0aXNDYXB0aW9uICYmIHN0eWxlcy5tdXRlZCxcblx0XHRcdHZhcmlhbnQgJiYgc3R5bGVzWyB2YXJpYW50IF0sXG5cdFx0XHR1cHBlckNhc2UgJiYgc3gudXBwZXJDYXNlLFxuXHRcdFx0Y2xhc3NOYW1lXG5cdFx0KTtcblx0fSwgW1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRjeCxcblx0XHRkaXNwbGF5LFxuXHRcdGlzQmxvY2ssXG5cdFx0aXNDYXB0aW9uLFxuXHRcdGlzRGVzdHJ1Y3RpdmUsXG5cdFx0aXNIaWdobGlnaHRlcixcblx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdGxpbmVIZWlnaHRQcm9wLFxuXHRcdG9wdGltaXplUmVhZGFiaWxpdHlGb3IsXG5cdFx0c2l6ZSxcblx0XHR1cHBlckNhc2UsXG5cdFx0dmFyaWFudCxcblx0XHR3ZWlnaHQsXG5cdF0gKTtcblxuXHRsZXQgZmluYWxFbGxpcHNpemVNb2RlOiB1bmRlZmluZWQgfCAnYXV0bycgfCAnbm9uZSc7XG5cdGlmICggdHJ1bmNhdGUgPT09IHRydWUgKSB7XG5cdFx0ZmluYWxFbGxpcHNpemVNb2RlID0gJ2F1dG8nO1xuXHR9XG5cdGlmICggdHJ1bmNhdGUgPT09IGZhbHNlICkge1xuXHRcdGZpbmFsRWxsaXBzaXplTW9kZSA9ICdub25lJztcblx0fVxuXG5cdGNvbnN0IGZpbmFsQ29tcG9uZW50UHJvcHMgPSB7XG5cdFx0Li4ub3RoZXJQcm9wcyxcblx0XHRjbGFzc05hbWU6IGNsYXNzZXMsXG5cdFx0Y2hpbGRyZW4sXG5cdFx0ZWxsaXBzaXplTW9kZTogZWxsaXBzaXplTW9kZSB8fCBmaW5hbEVsbGlwc2l6ZU1vZGUsXG5cdH07XG5cblx0Y29uc3QgdHJ1bmNhdGVQcm9wcyA9IHVzZVRydW5jYXRlKCBmaW5hbENvbXBvbmVudFByb3BzICk7XG5cblx0LyoqXG5cdCAqIEVuaGFuY2UgY2hpbGQgYDxMaW5rIC8+YCBjb21wb25lbnRzIHRvIGluaGVyaXQgZm9udCBzaXplLlxuXHQgKi9cblx0aWYgKCAhIHRydW5jYXRlICYmIEFycmF5LmlzQXJyYXkoIGNoaWxkcmVuICkgKSB7XG5cdFx0Y29udGVudCA9IENoaWxkcmVuLm1hcCggY2hpbGRyZW4sICggY2hpbGQgKSA9PiB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcgfHxcblx0XHRcdFx0Y2hpbGQgPT09IG51bGwgfHxcblx0XHRcdFx0ISAoICdwcm9wcycgaW4gY2hpbGQgKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBjaGlsZDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaXNMaW5rID0gaGFzQ29ubmVjdE5hbWVzcGFjZSggY2hpbGQsIFsgJ0xpbmsnIF0gKTtcblx0XHRcdGlmICggaXNMaW5rICkge1xuXHRcdFx0XHRyZXR1cm4gY2xvbmVFbGVtZW50KCBjaGlsZCwge1xuXHRcdFx0XHRcdHNpemU6IGNoaWxkLnByb3BzLnNpemUgfHwgJ2luaGVyaXQnLFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdC4uLnRydW5jYXRlUHJvcHMsXG5cdFx0Y2hpbGRyZW46IHRydW5jYXRlID8gdHJ1bmNhdGVQcm9wcy5jaGlsZHJlbiA6IGNvbnRlbnQsXG5cdH07XG59XG4iXX0= */") : /* @__PURE__ */ css({
          color: COLORS.white
        }, false ? "" : ";label:sx-optimalTextColor;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGV4dC9ob29rLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRHTSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RleHQvaG9vay50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBXb3JkUHJlc3MgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IHVzZU1lbW8sIENoaWxkcmVuLCBjbG9uZUVsZW1lbnQgfSBmcm9tICdAd29yZHByZXNzL2VsZW1lbnQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgdHlwZSB7IFdvcmRQcmVzc0NvbXBvbmVudFByb3BzIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyBoYXNDb25uZWN0TmFtZXNwYWNlLCB1c2VDb250ZXh0U3lzdGVtIH0gZnJvbSAnLi4vY29udGV4dCc7XG5pbXBvcnQgeyB1c2VUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB7IGdldE9wdGltYWxUZXh0U2hhZGUgfSBmcm9tICcuLi91dGlscy9jb2xvcnMnO1xuaW1wb3J0ICogYXMgc3R5bGVzIGZyb20gJy4vc3R5bGVzJztcbmltcG9ydCB7IGNyZWF0ZUhpZ2hsaWdodGVyVGV4dCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZ2V0Rm9udFNpemUgfSBmcm9tICcuLi91dGlscy9mb250LXNpemUnO1xuaW1wb3J0IHsgQ09ORklHLCBDT0xPUlMgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRMaW5lSGVpZ2h0IH0gZnJvbSAnLi9nZXQtbGluZS1oZWlnaHQnO1xuaW1wb3J0IHsgdXNlQ3ggfSBmcm9tICcuLi91dGlscy9ob29rcy91c2UtY3gnO1xuaW1wb3J0IHR5cGUgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHR5cGUgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBwYXJhbSB7aW1wb3J0KCcuLi9jb250ZXh0JykuV29yZFByZXNzQ29tcG9uZW50UHJvcHM8aW1wb3J0KCcuL3R5cGVzJykuUHJvcHMsICdzcGFuJz59IHByb3BzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZVRleHQoXG5cdHByb3BzOiBXb3JkUHJlc3NDb21wb25lbnRQcm9wczwgUHJvcHMsICdzcGFuJyA+XG4pIHtcblx0Y29uc3Qge1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNoaWxkcmVuLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRlbGxpcHNpemVNb2RlLFxuXHRcdGlzRGVzdHJ1Y3RpdmUgPSBmYWxzZSxcblx0XHRkaXNwbGF5LFxuXHRcdGhpZ2hsaWdodEVzY2FwZSA9IGZhbHNlLFxuXHRcdGhpZ2hsaWdodENhc2VTZW5zaXRpdmUgPSBmYWxzZSxcblx0XHRoaWdobGlnaHRXb3Jkcyxcblx0XHRoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHRpc0Jsb2NrID0gZmFsc2UsXG5cdFx0bGV0dGVyU3BhY2luZyxcblx0XHRsaW5lSGVpZ2h0OiBsaW5lSGVpZ2h0UHJvcCxcblx0XHRvcHRpbWl6ZVJlYWRhYmlsaXR5Rm9yLFxuXHRcdHNpemUsXG5cdFx0dHJ1bmNhdGUgPSBmYWxzZSxcblx0XHR1cHBlckNhc2UgPSBmYWxzZSxcblx0XHR2YXJpYW50LFxuXHRcdHdlaWdodCA9IENPTkZJRy5mb250V2VpZ2h0LFxuXHRcdC4uLm90aGVyUHJvcHNcblx0fSA9IHVzZUNvbnRleHRTeXN0ZW0oIHByb3BzLCAnVGV4dCcgKTtcblxuXHRsZXQgY29udGVudDogUmVhY3QuUmVhY3ROb2RlID0gY2hpbGRyZW47XG5cdGNvbnN0IGlzSGlnaGxpZ2h0ZXIgPSBBcnJheS5pc0FycmF5KCBoaWdobGlnaHRXb3JkcyApO1xuXHRjb25zdCBpc0NhcHRpb24gPSBzaXplID09PSAnY2FwdGlvbic7XG5cblx0aWYgKCBpc0hpZ2hsaWdodGVyICkge1xuXHRcdGlmICggdHlwZW9mIGNoaWxkcmVuICE9PSAnc3RyaW5nJyApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXG5cdFx0XHRcdCdgY2hpbGRyZW5gIG9mIGBUZXh0YCBtdXN0IG9ubHkgYmUgYHN0cmluZ2AgdHlwZXMgd2hlbiBgaGlnaGxpZ2h0V29yZHNgIGlzIGRlZmluZWQnXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdGNvbnRlbnQgPSBjcmVhdGVIaWdobGlnaHRlclRleHQoIHtcblx0XHRcdGF1dG9Fc2NhcGU6IGhpZ2hsaWdodEVzY2FwZSxcblx0XHRcdGNoaWxkcmVuLFxuXHRcdFx0Y2FzZVNlbnNpdGl2ZTogaGlnaGxpZ2h0Q2FzZVNlbnNpdGl2ZSxcblx0XHRcdHNlYXJjaFdvcmRzOiBoaWdobGlnaHRXb3Jkcyxcblx0XHRcdHNhbml0aXplOiBoaWdobGlnaHRTYW5pdGl6ZSxcblx0XHR9ICk7XG5cdH1cblxuXHRjb25zdCBjeCA9IHVzZUN4KCk7XG5cblx0Y29uc3QgY2xhc3NlcyA9IHVzZU1lbW8oICgpID0+IHtcblx0XHRjb25zdCBzeDogUmVjb3JkPCBzdHJpbmcsIFNlcmlhbGl6ZWRTdHlsZXMgfCBudWxsID4gPSB7fTtcblxuXHRcdGNvbnN0IGxpbmVIZWlnaHQgPSBnZXRMaW5lSGVpZ2h0KFxuXHRcdFx0YWRqdXN0TGluZUhlaWdodEZvcklubmVyQ29udHJvbHMsXG5cdFx0XHRsaW5lSGVpZ2h0UHJvcFxuXHRcdCk7XG5cblx0XHRzeC5CYXNlID0gY3NzKCB7XG5cdFx0XHRjb2xvcixcblx0XHRcdGRpc3BsYXksXG5cdFx0XHRmb250U2l6ZTogZ2V0Rm9udFNpemUoIHNpemUgKSxcblx0XHRcdGZvbnRXZWlnaHQ6IHdlaWdodCxcblx0XHRcdGxpbmVIZWlnaHQsXG5cdFx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdFx0dGV4dEFsaWduOiBhbGlnbixcblx0XHR9ICk7XG5cblx0XHRzeC51cHBlckNhc2UgPSBjc3MoIHsgdGV4dFRyYW5zZm9ybTogJ3VwcGVyY2FzZScgfSApO1xuXG5cdFx0c3gub3B0aW1hbFRleHRDb2xvciA9IG51bGw7XG5cblx0XHRpZiAoIG9wdGltaXplUmVhZGFiaWxpdHlGb3IgKSB7XG5cdFx0XHRjb25zdCBpc09wdGltYWxUZXh0Q29sb3JEYXJrID1cblx0XHRcdFx0Z2V0T3B0aW1hbFRleHRTaGFkZSggb3B0aW1pemVSZWFkYWJpbGl0eUZvciApID09PSAnZGFyayc7XG5cblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IgPSBpc09wdGltYWxUZXh0Q29sb3JEYXJrXG5cdFx0XHRcdD8gY3NzKCB7IGNvbG9yOiBDT0xPUlMuZ3JheVsgOTAwIF0gfSApXG5cdFx0XHRcdDogY3NzKCB7IGNvbG9yOiBDT0xPUlMud2hpdGUgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBjeChcblx0XHRcdHN0eWxlcy5UZXh0LFxuXHRcdFx0c3guQmFzZSxcblx0XHRcdHN4Lm9wdGltYWxUZXh0Q29sb3IsXG5cdFx0XHRpc0Rlc3RydWN0aXZlICYmIHN0eWxlcy5kZXN0cnVjdGl2ZSxcblx0XHRcdCEhIGlzSGlnaGxpZ2h0ZXIgJiYgc3R5bGVzLmhpZ2hsaWdodGVyVGV4dCxcblx0XHRcdGlzQmxvY2sgJiYgc3R5bGVzLmJsb2NrLFxuXHRcdFx0aXNDYXB0aW9uICYmIHN0eWxlcy5tdXRlZCxcblx0XHRcdHZhcmlhbnQgJiYgc3R5bGVzWyB2YXJpYW50IF0sXG5cdFx0XHR1cHBlckNhc2UgJiYgc3gudXBwZXJDYXNlLFxuXHRcdFx0Y2xhc3NOYW1lXG5cdFx0KTtcblx0fSwgW1xuXHRcdGFkanVzdExpbmVIZWlnaHRGb3JJbm5lckNvbnRyb2xzLFxuXHRcdGFsaWduLFxuXHRcdGNsYXNzTmFtZSxcblx0XHRjb2xvcixcblx0XHRjeCxcblx0XHRkaXNwbGF5LFxuXHRcdGlzQmxvY2ssXG5cdFx0aXNDYXB0aW9uLFxuXHRcdGlzRGVzdHJ1Y3RpdmUsXG5cdFx0aXNIaWdobGlnaHRlcixcblx0XHRsZXR0ZXJTcGFjaW5nLFxuXHRcdGxpbmVIZWlnaHRQcm9wLFxuXHRcdG9wdGltaXplUmVhZGFiaWxpdHlGb3IsXG5cdFx0c2l6ZSxcblx0XHR1cHBlckNhc2UsXG5cdFx0dmFyaWFudCxcblx0XHR3ZWlnaHQsXG5cdF0gKTtcblxuXHRsZXQgZmluYWxFbGxpcHNpemVNb2RlOiB1bmRlZmluZWQgfCAnYXV0bycgfCAnbm9uZSc7XG5cdGlmICggdHJ1bmNhdGUgPT09IHRydWUgKSB7XG5cdFx0ZmluYWxFbGxpcHNpemVNb2RlID0gJ2F1dG8nO1xuXHR9XG5cdGlmICggdHJ1bmNhdGUgPT09IGZhbHNlICkge1xuXHRcdGZpbmFsRWxsaXBzaXplTW9kZSA9ICdub25lJztcblx0fVxuXG5cdGNvbnN0IGZpbmFsQ29tcG9uZW50UHJvcHMgPSB7XG5cdFx0Li4ub3RoZXJQcm9wcyxcblx0XHRjbGFzc05hbWU6IGNsYXNzZXMsXG5cdFx0Y2hpbGRyZW4sXG5cdFx0ZWxsaXBzaXplTW9kZTogZWxsaXBzaXplTW9kZSB8fCBmaW5hbEVsbGlwc2l6ZU1vZGUsXG5cdH07XG5cblx0Y29uc3QgdHJ1bmNhdGVQcm9wcyA9IHVzZVRydW5jYXRlKCBmaW5hbENvbXBvbmVudFByb3BzICk7XG5cblx0LyoqXG5cdCAqIEVuaGFuY2UgY2hpbGQgYDxMaW5rIC8+YCBjb21wb25lbnRzIHRvIGluaGVyaXQgZm9udCBzaXplLlxuXHQgKi9cblx0aWYgKCAhIHRydW5jYXRlICYmIEFycmF5LmlzQXJyYXkoIGNoaWxkcmVuICkgKSB7XG5cdFx0Y29udGVudCA9IENoaWxkcmVuLm1hcCggY2hpbGRyZW4sICggY2hpbGQgKSA9PiB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHR5cGVvZiBjaGlsZCAhPT0gJ29iamVjdCcgfHxcblx0XHRcdFx0Y2hpbGQgPT09IG51bGwgfHxcblx0XHRcdFx0ISAoICdwcm9wcycgaW4gY2hpbGQgKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBjaGlsZDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgaXNMaW5rID0gaGFzQ29ubmVjdE5hbWVzcGFjZSggY2hpbGQsIFsgJ0xpbmsnIF0gKTtcblx0XHRcdGlmICggaXNMaW5rICkge1xuXHRcdFx0XHRyZXR1cm4gY2xvbmVFbGVtZW50KCBjaGlsZCwge1xuXHRcdFx0XHRcdHNpemU6IGNoaWxkLnByb3BzLnNpemUgfHwgJ2luaGVyaXQnLFxuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBjaGlsZDtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdC4uLnRydW5jYXRlUHJvcHMsXG5cdFx0Y2hpbGRyZW46IHRydW5jYXRlID8gdHJ1bmNhdGVQcm9wcy5jaGlsZHJlbiA6IGNvbnRlbnQsXG5cdH07XG59XG4iXX0= */");
      }
      return cx3(Text, sx.Base, sx.optimalTextColor, isDestructive && destructive, !!isHighlighter && highlighterText, isBlock && block2, isCaption && muted, variant && styles_exports3[variant], upperCase2 && sx.upperCase, className);
    }, [adjustLineHeightForInnerControls, align, className, color2, cx3, display, isBlock, isCaption, isDestructive, isHighlighter, letterSpacing, lineHeightProp, optimizeReadabilityFor, size4, upperCase2, variant, weight]);
    let finalEllipsizeMode;
    if (truncate === true) {
      finalEllipsizeMode = "auto";
    }
    if (truncate === false) {
      finalEllipsizeMode = "none";
    }
    const finalComponentProps = {
      ...otherProps,
      className: classes,
      children,
      ellipsizeMode: ellipsizeMode || finalEllipsizeMode
    };
    const truncateProps = useTruncate(finalComponentProps);
    if (!truncate && Array.isArray(children)) {
      content = import_react.Children.map(children, (child) => {
        if (typeof child !== "object" || child === null || !("props" in child)) {
          return child;
        }
        const isLink = hasConnectNamespace(child, ["Link"]);
        if (isLink) {
          return (0, import_react.cloneElement)(child, {
            size: child.props.size || "inherit"
          });
        }
        return child;
      });
    }
    return {
      ...truncateProps,
      children: truncate ? truncateProps.children : content
    };
  }

  // node_modules/@wordpress/components/build-module/text/component.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  function UnconnectedText(props, forwardedRef) {
    const textProps = useText(props);
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(component_default, {
      as: "span",
      ...textProps,
      ref: forwardedRef
    });
  }
  var Text2 = contextConnect(UnconnectedText, "Text");
  var component_default7 = Text2;

  // node_modules/@wordpress/components/build-module/input-control/styles/input-control-styles.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  function _EMOTION_STRINGIFIED_CSS_ERROR__7() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var Prefix = /* @__PURE__ */ createStyled("span", false ? {
    target: "em5sgkm7"
  } : {
    target: "em5sgkm7",
    label: "Prefix"
  })(false ? {
    name: "pvvbxf",
    styles: "box-sizing:border-box;display:block"
  } : {
    name: "pvvbxf",
    styles: "box-sizing:border-box;display:block",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__7
  });
  var Suffix = /* @__PURE__ */ createStyled("span", false ? {
    target: "em5sgkm6"
  } : {
    target: "em5sgkm6",
    label: "Suffix"
  })(false ? {
    name: "jgf79h",
    styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex"
  } : {
    name: "jgf79h",
    styles: "align-items:center;align-self:stretch;box-sizing:border-box;display:flex",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__7
  });
  var backdropBorderColor = ({
    disabled,
    isBorderless
  }) => {
    if (isBorderless) {
      return "transparent";
    }
    if (disabled) {
      return COLORS.ui.borderDisabled;
    }
    return COLORS.ui.border;
  };
  var BackdropUI = /* @__PURE__ */ createStyled("div", false ? {
    target: "em5sgkm5"
  } : {
    target: "em5sgkm5",
    label: "BackdropUI"
  })("&&&{box-sizing:border-box;border-color:", backdropBorderColor, ";border-radius:inherit;border-style:solid;border-width:1px;bottom:0;left:0;margin:0;padding:0;pointer-events:none;position:absolute;right:0;top:0;", rtl({
    paddingLeft: 2
  }), ";}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var Root = /* @__PURE__ */ createStyled(component_default3, false ? {
    target: "em5sgkm4"
  } : {
    target: "em5sgkm4",
    label: "Root"
  })("box-sizing:border-box;position:relative;border-radius:2px;padding-top:0;&:focus-within:not( :has( :is( ", Prefix, ", ", Suffix, " ):focus-within ) ){", BackdropUI, "{border-color:", COLORS.ui.borderFocus, ";box-shadow:", config_values_default.controlBoxShadowFocus, ";outline:2px solid transparent;outline-offset:-2px;}}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var containerDisabledStyles = ({
    disabled
  }) => {
    const backgroundColor = disabled ? COLORS.ui.backgroundDisabled : COLORS.ui.background;
    return /* @__PURE__ */ css({
      backgroundColor
    }, false ? "" : ";label:containerDisabledStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var _ref2 = false ? {
    name: "1d3w5wq",
    styles: "width:100%"
  } : {
    name: "uo2pd2-containerWidthStyles",
    styles: "width:100%;label:containerWidthStyles;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__7
  };
  var containerWidthStyles = ({
    __unstableInputWidth,
    labelPosition
  }) => {
    if (!__unstableInputWidth) {
      return _ref2;
    }
    if (labelPosition === "side") {
      return "";
    }
    if (labelPosition === "edge") {
      return /* @__PURE__ */ css({
        flex: `0 0 ${__unstableInputWidth}`
      }, false ? "" : ";label:containerWidthStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    }
    return /* @__PURE__ */ css({
      width: __unstableInputWidth
    }, false ? "" : ";label:containerWidthStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var Container = /* @__PURE__ */ createStyled("div", false ? {
    target: "em5sgkm3"
  } : {
    target: "em5sgkm3",
    label: "Container"
  })("align-items:center;box-sizing:border-box;border-radius:inherit;display:flex;flex:1;position:relative;", containerDisabledStyles, " ", containerWidthStyles, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var disabledStyles = ({
    disabled
  }) => {
    if (!disabled) {
      return "";
    }
    return /* @__PURE__ */ css({
      color: COLORS.ui.textDisabled
    }, false ? "" : ";label:disabledStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var fontSizeStyles = ({
    inputSize: size4
  }) => {
    const sizes = {
      default: "13px",
      small: "11px",
      compact: "13px",
      "__unstable-large": "13px"
    };
    const fontSize = sizes[size4] || sizes.default;
    const fontSizeMobile = "16px";
    if (!fontSize) {
      return "";
    }
    return /* @__PURE__ */ css("font-size:", fontSizeMobile, ";@media ( min-width: 600px ){font-size:", fontSize, ";}" + (false ? "" : ";label:fontSizeStyles;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var getSizeConfig = ({
    inputSize: size4,
    __next40pxDefaultSize
  }) => {
    const sizes = {
      default: {
        height: 40,
        lineHeight: 1,
        minHeight: 40,
        paddingLeft: space(4),
        paddingRight: space(4)
      },
      small: {
        height: 24,
        lineHeight: 1,
        minHeight: 24,
        paddingLeft: space(2),
        paddingRight: space(2)
      },
      compact: {
        height: 32,
        lineHeight: 1,
        minHeight: 32,
        paddingLeft: space(2),
        paddingRight: space(2)
      },
      "__unstable-large": {
        height: 40,
        lineHeight: 1,
        minHeight: 40,
        paddingLeft: space(4),
        paddingRight: space(4)
      }
    };
    if (!__next40pxDefaultSize) {
      sizes.default = sizes.compact;
    }
    return sizes[size4] || sizes.default;
  };
  var sizeStyles = (props) => {
    return /* @__PURE__ */ css(getSizeConfig(props), false ? "" : ";label:sizeStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var customPaddings = ({
    paddingInlineStart,
    paddingInlineEnd
  }) => {
    return /* @__PURE__ */ css({
      paddingInlineStart,
      paddingInlineEnd
    }, false ? "" : ";label:customPaddings;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var dragStyles = ({
    isDragging: isDragging4,
    dragCursor
  }) => {
    let defaultArrowStyles;
    let activeDragCursorStyles;
    if (isDragging4) {
      defaultArrowStyles = /* @__PURE__ */ css("cursor:", dragCursor, ";user-select:none;&::-webkit-outer-spin-button,&::-webkit-inner-spin-button{-webkit-appearance:none!important;margin:0!important;}" + (false ? "" : ";label:defaultArrowStyles;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    }
    if (isDragging4 && dragCursor) {
      activeDragCursorStyles = /* @__PURE__ */ css("&:active{cursor:", dragCursor, ";}" + (false ? "" : ";label:activeDragCursorStyles;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
    }
    return /* @__PURE__ */ css(defaultArrowStyles, " ", activeDragCursorStyles, ";" + (false ? "" : ";label:dragStyles;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  };
  var Input = /* @__PURE__ */ createStyled("input", false ? {
    target: "em5sgkm2"
  } : {
    target: "em5sgkm2",
    label: "Input"
  })("&&&{background-color:transparent;box-sizing:border-box;border:none;box-shadow:none!important;color:", COLORS.theme.foreground, ";display:block;font-family:inherit;margin:0;outline:none;width:100%;", dragStyles, " ", disabledStyles, " ", fontSizeStyles, " ", sizeStyles, " ", customPaddings, " &::-webkit-input-placeholder{line-height:normal;}}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var BaseLabel = /* @__PURE__ */ createStyled(component_default7, false ? {
    target: "em5sgkm1"
  } : {
    target: "em5sgkm1",
    label: "BaseLabel"
  })("&&&{", baseLabelTypography, ";box-sizing:border-box;display:block;padding-top:0;padding-bottom:0;max-width:100%;z-index:1;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var Label = (props) => /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(BaseLabel, {
    ...props,
    as: "label"
  });
  var LabelWrapper = /* @__PURE__ */ createStyled(component_default4, false ? {
    target: "em5sgkm0"
  } : {
    target: "em5sgkm0",
    label: "LabelWrapper"
  })(false ? {
    name: "1b6uupn",
    styles: "max-width:calc( 100% - 10px )"
  } : {
    name: "1b6uupn",
    styles: "max-width:calc( 100% - 10px )",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__7
  });

  // node_modules/@wordpress/components/build-module/input-control/backdrop.js
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  function Backdrop({
    disabled = false,
    isBorderless = false
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(BackdropUI, {
      "aria-hidden": "true",
      className: "components-input-control__backdrop",
      disabled,
      isBorderless
    });
  }
  var MemoizedBackdrop = (0, import_react.memo)(Backdrop);
  var backdrop_default = MemoizedBackdrop;

  // node_modules/@wordpress/components/build-module/input-control/label.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  function Label2({
    children,
    hideLabelFromVision,
    htmlFor,
    ...props
  }) {
    if (!children) {
      return null;
    }
    if (hideLabelFromVision) {
      return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(component_default2, {
        as: "label",
        htmlFor,
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(LabelWrapper, {
      children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Label, {
        htmlFor,
        ...props,
        children
      })
    });
  }

  // node_modules/@wordpress/components/build-module/utils/use-deprecated-props.js
  function useDeprecated36pxDefaultSizeProp(props) {
    const {
      __next36pxDefaultSize,
      __next40pxDefaultSize,
      ...otherProps
    } = props;
    return {
      ...otherProps,
      __next40pxDefaultSize: __next40pxDefaultSize !== null && __next40pxDefaultSize !== void 0 ? __next40pxDefaultSize : __next36pxDefaultSize
    };
  }

  // node_modules/@wordpress/components/build-module/input-control/input-base.js
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  function useUniqueId(idProp) {
    const instanceId = use_instance_id_default(InputBase);
    const id3 = `input-base-control-${instanceId}`;
    return idProp || id3;
  }
  function getUIFlexProps(labelPosition) {
    const props = {};
    switch (labelPosition) {
      case "top":
        props.direction = "column";
        props.expanded = false;
        props.gap = 0;
        break;
      case "bottom":
        props.direction = "column-reverse";
        props.expanded = false;
        props.gap = 0;
        break;
      case "edge":
        props.justify = "space-between";
        break;
    }
    return props;
  }
  function InputBase(props, ref) {
    const {
      __next40pxDefaultSize,
      __unstableInputWidth,
      children,
      className,
      disabled = false,
      hideLabelFromVision = false,
      labelPosition,
      id: idProp,
      isBorderless = false,
      label,
      prefix: prefix3,
      size: size4 = "default",
      suffix,
      ...restProps
    } = useDeprecated36pxDefaultSizeProp(useContextSystem(props, "InputBase"));
    const id3 = useUniqueId(idProp);
    const hideLabel = hideLabelFromVision || !label;
    const {
      paddingLeft,
      paddingRight
    } = getSizeConfig({
      inputSize: size4,
      __next40pxDefaultSize
    });
    const prefixSuffixContextValue = (0, import_react.useMemo)(() => {
      return {
        InputControlPrefixWrapper: {
          paddingLeft
        },
        InputControlSuffixWrapper: {
          paddingRight
        }
      };
    }, [paddingLeft, paddingRight]);
    return (
      // @ts-expect-error The `direction` prop from Flex (FlexDirection) conflicts with legacy SVGAttributes `direction` (string) that come from React intrinsic prop definitions.
      /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Root, {
        ...restProps,
        ...getUIFlexProps(labelPosition),
        className,
        gap: 2,
        ref,
        children: [/* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Label2, {
          className: "components-input-control__label",
          hideLabelFromVision,
          labelPosition,
          htmlFor: id3,
          children: label
        }), /* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(Container, {
          __unstableInputWidth,
          className: "components-input-control__container",
          disabled,
          hideLabel,
          labelPosition,
          children: [/* @__PURE__ */ (0, import_jsx_runtime53.jsxs)(ContextSystemProvider, {
            value: prefixSuffixContextValue,
            children: [prefix3 && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Prefix, {
              className: "components-input-control__prefix",
              children: prefix3
            }), children, suffix && /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Suffix, {
              className: "components-input-control__suffix",
              children: suffix
            })]
          }), /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(backdrop_default, {
            disabled,
            isBorderless
          })]
        })]
      })
    );
  }
  var input_base_default = contextConnect(InputBase, "InputBase");

  // node_modules/@wordpress/components/build-module/utils/with-ignore-ime-events.js
  function withIgnoreIMEEvents(keydownHandler) {
    return (event) => {
      const {
        isComposing
      } = "nativeEvent" in event ? event.nativeEvent : event;
      if (isComposing || // Workaround for Mac Safari where the final Enter/Backspace of an IME composition
      // is `isComposing=false`, even though it's technically still part of the composition.
      // These can only be detected by keyCode.
      event.keyCode === 229) {
        return;
      }
      keydownHandler(event);
    };
  }

  // node_modules/@wordpress/components/build-module/base-control/styles/base-control-styles.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__8() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var Wrapper = /* @__PURE__ */ createStyled("div", false ? {
    target: "ej5x27r4"
  } : {
    target: "ej5x27r4",
    label: "Wrapper"
  })("font-family:", font("default.fontFamily"), ";font-size:", font("default.fontSize"), ";", boxSizingReset, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVlpQyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgYmFzZUxhYmVsVHlwb2dyYXBoeSwgYm94U2l6aW5nUmVzZXQsIGZvbnQsIENPTE9SUyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdGZvbnQtZmFtaWx5OiAkeyBmb250KCAnZGVmYXVsdC5mb250RmFtaWx5JyApIH07XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2RlZmF1bHQuZm9udFNpemUnICkgfTtcblxuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luRmllbGQgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEZpZWxkID0gc3R5bGVkLmRpdmBcblx0JHsgZGVwcmVjYXRlZE1hcmdpbkZpZWxkIH1cblxuXHQuY29tcG9uZW50cy1wYW5lbF9fcm93ICYge1xuXHRcdG1hcmdpbi1ib3R0b206IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmNvbnN0IGxhYmVsU3R5bGVzID0gY3NzYFxuXHQkeyBiYXNlTGFiZWxUeXBvZ3JhcGh5IH07XG5cblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdC8qKlxuXHQgKiBSZW1vdmVzIENocm9tZS9TYWZhcmkvRmlyZWZveCB1c2VyIGFnZW50IHN0eWxlc2hlZXQgcGFkZGluZyBmcm9tXG5cdCAqIFN0eWxlZExhYmVsIHdoZW4gaXQgaXMgcmVuZGVyZWQgYXMgYSBsZWdlbmQuXG5cdCAqL1xuXHRwYWRkaW5nOiAwO1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZExhYmVsID0gc3R5bGVkLmxhYmVsYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luSGVscCA9ICggeyBfX25leHRIYXNOb01hcmdpbkJvdHRvbSA9IGZhbHNlIH0gKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0ISBfX25leHRIYXNOb01hcmdpbkJvdHRvbSAmJlxuXHRcdGNzc2Bcblx0XHRcdG1hcmdpbi1ib3R0b206IHJldmVydDtcblx0XHRgXG5cdCk7XG59O1xuXG5leHBvcnQgY29uc3QgU3R5bGVkSGVscCA9IHN0eWxlZC5wYFxuXHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1ib3R0b206IDA7XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5IZWxwIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRWaXN1YWxMYWJlbCA9IHN0eWxlZC5zcGFuYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuIl19 */"));
  var deprecatedMarginField = ({
    __nextHasNoMarginBottom = false
  }) => {
    return !__nextHasNoMarginBottom && /* @__PURE__ */ css("margin-bottom:", space(2), ";" + (false ? "" : ";label:deprecatedMarginField;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXNCSyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgYmFzZUxhYmVsVHlwb2dyYXBoeSwgYm94U2l6aW5nUmVzZXQsIGZvbnQsIENPTE9SUyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdGZvbnQtZmFtaWx5OiAkeyBmb250KCAnZGVmYXVsdC5mb250RmFtaWx5JyApIH07XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2RlZmF1bHQuZm9udFNpemUnICkgfTtcblxuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luRmllbGQgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEZpZWxkID0gc3R5bGVkLmRpdmBcblx0JHsgZGVwcmVjYXRlZE1hcmdpbkZpZWxkIH1cblxuXHQuY29tcG9uZW50cy1wYW5lbF9fcm93ICYge1xuXHRcdG1hcmdpbi1ib3R0b206IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmNvbnN0IGxhYmVsU3R5bGVzID0gY3NzYFxuXHQkeyBiYXNlTGFiZWxUeXBvZ3JhcGh5IH07XG5cblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdC8qKlxuXHQgKiBSZW1vdmVzIENocm9tZS9TYWZhcmkvRmlyZWZveCB1c2VyIGFnZW50IHN0eWxlc2hlZXQgcGFkZGluZyBmcm9tXG5cdCAqIFN0eWxlZExhYmVsIHdoZW4gaXQgaXMgcmVuZGVyZWQgYXMgYSBsZWdlbmQuXG5cdCAqL1xuXHRwYWRkaW5nOiAwO1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZExhYmVsID0gc3R5bGVkLmxhYmVsYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luSGVscCA9ICggeyBfX25leHRIYXNOb01hcmdpbkJvdHRvbSA9IGZhbHNlIH0gKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0ISBfX25leHRIYXNOb01hcmdpbkJvdHRvbSAmJlxuXHRcdGNzc2Bcblx0XHRcdG1hcmdpbi1ib3R0b206IHJldmVydDtcblx0XHRgXG5cdCk7XG59O1xuXG5leHBvcnQgY29uc3QgU3R5bGVkSGVscCA9IHN0eWxlZC5wYFxuXHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1ib3R0b206IDA7XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5IZWxwIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRWaXN1YWxMYWJlbCA9IHN0eWxlZC5zcGFuYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuIl19 */");
  };
  var StyledField = /* @__PURE__ */ createStyled("div", false ? {
    target: "ej5x27r3"
  } : {
    target: "ej5x27r3",
    label: "StyledField"
  })(deprecatedMarginField, " .components-panel__row &{margin-bottom:inherit;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTRCcUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIGJveFNpemluZ1Jlc2V0LCBmb250LCBDT0xPUlMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmb250LWZhbWlseTogJHsgZm9udCggJ2RlZmF1bHQuZm9udEZhbWlseScgKSB9O1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkZpZWxkID0gKCB7IF9fbmV4dEhhc05vTWFyZ2luQm90dG9tID0gZmFsc2UgfSApID0+IHtcblx0cmV0dXJuIChcblx0XHQhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICYmXG5cdFx0Y3NzYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdGBcblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRGaWVsZCA9IHN0eWxlZC5kaXZgXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5GaWVsZCB9XG5cblx0LmNvbXBvbmVudHMtcGFuZWxfX3JvdyAmIHtcblx0XHRtYXJnaW4tYm90dG9tOiBpbmhlcml0O1xuXHR9XG5gO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHQvKipcblx0ICogUmVtb3ZlcyBDaHJvbWUvU2FmYXJpL0ZpcmVmb3ggdXNlciBhZ2VudCBzdHlsZXNoZWV0IHBhZGRpbmcgZnJvbVxuXHQgKiBTdHlsZWRMYWJlbCB3aGVuIGl0IGlzIHJlbmRlcmVkIGFzIGEgbGVnZW5kLlxuXHQgKi9cblx0cGFkZGluZzogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZC5sYWJlbGBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkhlbHAgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiByZXZlcnQ7XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlbHAgPSBzdHlsZWQucGBcblx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4tYm90dG9tOiAwO1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQkeyBkZXByZWNhdGVkTWFyZ2luSGVscCB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVmlzdWFsTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcbiJdfQ== */"));
  var labelStyles = /* @__PURE__ */ css(baseLabelTypography, ";display:inline-block;margin-bottom:", space(2), ";padding:0;" + (false ? "" : ";label:labelStyles;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9DdUIiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIGJveFNpemluZ1Jlc2V0LCBmb250LCBDT0xPUlMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmb250LWZhbWlseTogJHsgZm9udCggJ2RlZmF1bHQuZm9udEZhbWlseScgKSB9O1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkZpZWxkID0gKCB7IF9fbmV4dEhhc05vTWFyZ2luQm90dG9tID0gZmFsc2UgfSApID0+IHtcblx0cmV0dXJuIChcblx0XHQhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICYmXG5cdFx0Y3NzYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdGBcblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRGaWVsZCA9IHN0eWxlZC5kaXZgXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5GaWVsZCB9XG5cblx0LmNvbXBvbmVudHMtcGFuZWxfX3JvdyAmIHtcblx0XHRtYXJnaW4tYm90dG9tOiBpbmhlcml0O1xuXHR9XG5gO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHQvKipcblx0ICogUmVtb3ZlcyBDaHJvbWUvU2FmYXJpL0ZpcmVmb3ggdXNlciBhZ2VudCBzdHlsZXNoZWV0IHBhZGRpbmcgZnJvbVxuXHQgKiBTdHlsZWRMYWJlbCB3aGVuIGl0IGlzIHJlbmRlcmVkIGFzIGEgbGVnZW5kLlxuXHQgKi9cblx0cGFkZGluZzogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZC5sYWJlbGBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkhlbHAgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiByZXZlcnQ7XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlbHAgPSBzdHlsZWQucGBcblx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4tYm90dG9tOiAwO1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQkeyBkZXByZWNhdGVkTWFyZ2luSGVscCB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVmlzdWFsTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcbiJdfQ== */");
  var StyledLabel = /* @__PURE__ */ createStyled("label", false ? {
    target: "ej5x27r2"
  } : {
    target: "ej5x27r2",
    label: "StyledLabel"
  })(labelStyles, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdEdUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIGJveFNpemluZ1Jlc2V0LCBmb250LCBDT0xPUlMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmb250LWZhbWlseTogJHsgZm9udCggJ2RlZmF1bHQuZm9udEZhbWlseScgKSB9O1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkZpZWxkID0gKCB7IF9fbmV4dEhhc05vTWFyZ2luQm90dG9tID0gZmFsc2UgfSApID0+IHtcblx0cmV0dXJuIChcblx0XHQhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICYmXG5cdFx0Y3NzYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdGBcblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRGaWVsZCA9IHN0eWxlZC5kaXZgXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5GaWVsZCB9XG5cblx0LmNvbXBvbmVudHMtcGFuZWxfX3JvdyAmIHtcblx0XHRtYXJnaW4tYm90dG9tOiBpbmhlcml0O1xuXHR9XG5gO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHQvKipcblx0ICogUmVtb3ZlcyBDaHJvbWUvU2FmYXJpL0ZpcmVmb3ggdXNlciBhZ2VudCBzdHlsZXNoZWV0IHBhZGRpbmcgZnJvbVxuXHQgKiBTdHlsZWRMYWJlbCB3aGVuIGl0IGlzIHJlbmRlcmVkIGFzIGEgbGVnZW5kLlxuXHQgKi9cblx0cGFkZGluZzogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZC5sYWJlbGBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkhlbHAgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiByZXZlcnQ7XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlbHAgPSBzdHlsZWQucGBcblx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4tYm90dG9tOiAwO1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQkeyBkZXByZWNhdGVkTWFyZ2luSGVscCB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVmlzdWFsTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcbiJdfQ== */"));
  var _ref3 = false ? {
    name: "11yad0w",
    styles: "margin-bottom:revert"
  } : {
    name: "1xen9ob-deprecatedMarginHelp",
    styles: "margin-bottom:revert;label:deprecatedMarginHelp;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVESyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Jhc2UtY29udHJvbC9zdHlsZXMvYmFzZS1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgYmFzZUxhYmVsVHlwb2dyYXBoeSwgYm94U2l6aW5nUmVzZXQsIGZvbnQsIENPTE9SUyB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdGZvbnQtZmFtaWx5OiAkeyBmb250KCAnZGVmYXVsdC5mb250RmFtaWx5JyApIH07XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2RlZmF1bHQuZm9udFNpemUnICkgfTtcblxuXHQkeyBib3hTaXppbmdSZXNldCB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luRmllbGQgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEZpZWxkID0gc3R5bGVkLmRpdmBcblx0JHsgZGVwcmVjYXRlZE1hcmdpbkZpZWxkIH1cblxuXHQuY29tcG9uZW50cy1wYW5lbF9fcm93ICYge1xuXHRcdG1hcmdpbi1ib3R0b206IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmNvbnN0IGxhYmVsU3R5bGVzID0gY3NzYFxuXHQkeyBiYXNlTGFiZWxUeXBvZ3JhcGh5IH07XG5cblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRtYXJnaW4tYm90dG9tOiAkeyBzcGFjZSggMiApIH07XG5cdC8qKlxuXHQgKiBSZW1vdmVzIENocm9tZS9TYWZhcmkvRmlyZWZveCB1c2VyIGFnZW50IHN0eWxlc2hlZXQgcGFkZGluZyBmcm9tXG5cdCAqIFN0eWxlZExhYmVsIHdoZW4gaXQgaXMgcmVuZGVyZWQgYXMgYSBsZWdlbmQuXG5cdCAqL1xuXHRwYWRkaW5nOiAwO1xuYDtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZExhYmVsID0gc3R5bGVkLmxhYmVsYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuXG5jb25zdCBkZXByZWNhdGVkTWFyZ2luSGVscCA9ICggeyBfX25leHRIYXNOb01hcmdpbkJvdHRvbSA9IGZhbHNlIH0gKSA9PiB7XG5cdHJldHVybiAoXG5cdFx0ISBfX25leHRIYXNOb01hcmdpbkJvdHRvbSAmJlxuXHRcdGNzc2Bcblx0XHRcdG1hcmdpbi1ib3R0b206IHJldmVydDtcblx0XHRgXG5cdCk7XG59O1xuXG5leHBvcnQgY29uc3QgU3R5bGVkSGVscCA9IHN0eWxlZC5wYFxuXHRtYXJnaW4tdG9wOiAkeyBzcGFjZSggMiApIH07XG5cdG1hcmdpbi1ib3R0b206IDA7XG5cdGZvbnQtc2l6ZTogJHsgZm9udCggJ2hlbHBUZXh0LmZvbnRTaXplJyApIH07XG5cdGZvbnQtc3R5bGU6IG5vcm1hbDtcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA3MDAgXSB9O1xuXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5IZWxwIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRWaXN1YWxMYWJlbCA9IHN0eWxlZC5zcGFuYFxuXHQkeyBsYWJlbFN0eWxlcyB9XG5gO1xuIl19 */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__8
  };
  var deprecatedMarginHelp = ({
    __nextHasNoMarginBottom = false
  }) => {
    return !__nextHasNoMarginBottom && _ref3;
  };
  var StyledHelp = /* @__PURE__ */ createStyled("p", false ? {
    target: "ej5x27r1"
  } : {
    target: "ej5x27r1",
    label: "StyledHelp"
  })("margin-top:", space(2), ";margin-bottom:0;font-size:", font("helpText.fontSize"), ";font-style:normal;color:", COLORS.gray[700], ";", deprecatedMarginHelp, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQTZEa0MiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIGJveFNpemluZ1Jlc2V0LCBmb250LCBDT0xPUlMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmb250LWZhbWlseTogJHsgZm9udCggJ2RlZmF1bHQuZm9udEZhbWlseScgKSB9O1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkZpZWxkID0gKCB7IF9fbmV4dEhhc05vTWFyZ2luQm90dG9tID0gZmFsc2UgfSApID0+IHtcblx0cmV0dXJuIChcblx0XHQhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICYmXG5cdFx0Y3NzYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdGBcblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRGaWVsZCA9IHN0eWxlZC5kaXZgXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5GaWVsZCB9XG5cblx0LmNvbXBvbmVudHMtcGFuZWxfX3JvdyAmIHtcblx0XHRtYXJnaW4tYm90dG9tOiBpbmhlcml0O1xuXHR9XG5gO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHQvKipcblx0ICogUmVtb3ZlcyBDaHJvbWUvU2FmYXJpL0ZpcmVmb3ggdXNlciBhZ2VudCBzdHlsZXNoZWV0IHBhZGRpbmcgZnJvbVxuXHQgKiBTdHlsZWRMYWJlbCB3aGVuIGl0IGlzIHJlbmRlcmVkIGFzIGEgbGVnZW5kLlxuXHQgKi9cblx0cGFkZGluZzogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZC5sYWJlbGBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkhlbHAgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiByZXZlcnQ7XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlbHAgPSBzdHlsZWQucGBcblx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4tYm90dG9tOiAwO1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQkeyBkZXByZWNhdGVkTWFyZ2luSGVscCB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVmlzdWFsTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcbiJdfQ== */"));
  var StyledVisualLabel = /* @__PURE__ */ createStyled("span", false ? {
    target: "ej5x27r0"
  } : {
    target: "ej5x27r0",
    label: "StyledVisualLabel"
  })(labelStyles, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvYmFzZS1jb250cm9sL3N0eWxlcy9iYXNlLWNvbnRyb2wtc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVFNEMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9iYXNlLWNvbnRyb2wvc3R5bGVzL2Jhc2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGJhc2VMYWJlbFR5cG9ncmFwaHksIGJveFNpemluZ1Jlc2V0LCBmb250LCBDT0xPUlMgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRmb250LWZhbWlseTogJHsgZm9udCggJ2RlZmF1bHQuZm9udEZhbWlseScgKSB9O1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdkZWZhdWx0LmZvbnRTaXplJyApIH07XG5cblx0JHsgYm94U2l6aW5nUmVzZXQgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkZpZWxkID0gKCB7IF9fbmV4dEhhc05vTWFyZ2luQm90dG9tID0gZmFsc2UgfSApID0+IHtcblx0cmV0dXJuIChcblx0XHQhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICYmXG5cdFx0Y3NzYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHRcdGBcblx0KTtcbn07XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRGaWVsZCA9IHN0eWxlZC5kaXZgXG5cdCR7IGRlcHJlY2F0ZWRNYXJnaW5GaWVsZCB9XG5cblx0LmNvbXBvbmVudHMtcGFuZWxfX3JvdyAmIHtcblx0XHRtYXJnaW4tYm90dG9tOiBpbmhlcml0O1xuXHR9XG5gO1xuXG5jb25zdCBsYWJlbFN0eWxlcyA9IGNzc2Bcblx0JHsgYmFzZUxhYmVsVHlwb2dyYXBoeSB9O1xuXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0bWFyZ2luLWJvdHRvbTogJHsgc3BhY2UoIDIgKSB9O1xuXHQvKipcblx0ICogUmVtb3ZlcyBDaHJvbWUvU2FmYXJpL0ZpcmVmb3ggdXNlciBhZ2VudCBzdHlsZXNoZWV0IHBhZGRpbmcgZnJvbVxuXHQgKiBTdHlsZWRMYWJlbCB3aGVuIGl0IGlzIHJlbmRlcmVkIGFzIGEgbGVnZW5kLlxuXHQgKi9cblx0cGFkZGluZzogMDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdHlsZWRMYWJlbCA9IHN0eWxlZC5sYWJlbGBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcblxuY29uc3QgZGVwcmVjYXRlZE1hcmdpbkhlbHAgPSAoIHsgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gPSBmYWxzZSB9ICkgPT4ge1xuXHRyZXR1cm4gKFxuXHRcdCEgX19uZXh0SGFzTm9NYXJnaW5Cb3R0b20gJiZcblx0XHRjc3NgXG5cdFx0XHRtYXJnaW4tYm90dG9tOiByZXZlcnQ7XG5cdFx0YFxuXHQpO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0eWxlZEhlbHAgPSBzdHlsZWQucGBcblx0bWFyZ2luLXRvcDogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4tYm90dG9tOiAwO1xuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRmb250LXN0eWxlOiBub3JtYWw7XG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNzAwIF0gfTtcblxuXHQkeyBkZXByZWNhdGVkTWFyZ2luSGVscCB9XG5gO1xuXG5leHBvcnQgY29uc3QgU3R5bGVkVmlzdWFsTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0JHsgbGFiZWxTdHlsZXMgfVxuYDtcbiJdfQ== */"));

  // node_modules/@wordpress/components/build-module/dashicon/index.js
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  function Dashicon({
    icon,
    className,
    size: size4 = 20,
    style = {},
    ...extraProps
  }) {
    const iconClass = ["dashicon", "dashicons", "dashicons-" + icon, className].filter(Boolean).join(" ");
    const sizeStyles3 = (
      // using `!=` to catch both 20 and "20"
      // eslint-disable-next-line eqeqeq
      20 != size4 ? {
        fontSize: `${size4}px`,
        width: `${size4}px`,
        height: `${size4}px`
      } : {}
    );
    const styles = {
      ...sizeStyles3,
      ...style
    };
    return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", {
      className: iconClass,
      style: styles,
      ...extraProps
    });
  }
  var dashicon_default = Dashicon;

  // node_modules/@wordpress/components/build-module/icon/index.js
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  function Icon2({
    icon = null,
    size: size4 = "string" === typeof icon ? 20 : 24,
    ...additionalProps
  }) {
    if ("string" === typeof icon) {
      return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(dashicon_default, {
        icon,
        size: size4,
        ...additionalProps
      });
    }
    if ((0, import_react.isValidElement)(icon) && dashicon_default === icon.type) {
      return (0, import_react.cloneElement)(icon, {
        ...additionalProps
      });
    }
    if ("function" === typeof icon) {
      return (0, import_react.createElement)(icon, {
        size: size4,
        ...additionalProps
      });
    }
    if (icon && (icon.type === "svg" || icon.type === SVG)) {
      const appliedProps = {
        ...icon.props,
        width: size4,
        height: size4,
        ...additionalProps
      };
      return /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(SVG, {
        ...appliedProps
      });
    }
    if ((0, import_react.isValidElement)(icon)) {
      return (0, import_react.cloneElement)(icon, {
        // @ts-ignore Just forwarding the size prop along
        size: size4,
        ...additionalProps
      });
    }
    return icon;
  }
  var icon_default2 = Icon2;

  // node_modules/@wordpress/components/build-module/button/index.js
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var disabledEventsOnDisabledButton = ["onMouseDown", "onClick"];
  function useDeprecatedProps2({
    isDefault,
    isPrimary,
    isSecondary,
    isTertiary,
    isLink,
    isPressed,
    isSmall,
    size: size4,
    variant,
    ...otherProps
  }) {
    let computedSize = size4;
    let computedVariant = variant;
    const newProps = {
      // @todo Mark `isPressed` as deprecated
      "aria-pressed": isPressed
    };
    if (isSmall) {
      var _computedSize;
      (_computedSize = computedSize) !== null && _computedSize !== void 0 ? _computedSize : computedSize = "small";
    }
    if (isPrimary) {
      var _computedVariant;
      (_computedVariant = computedVariant) !== null && _computedVariant !== void 0 ? _computedVariant : computedVariant = "primary";
    }
    if (isTertiary) {
      var _computedVariant2;
      (_computedVariant2 = computedVariant) !== null && _computedVariant2 !== void 0 ? _computedVariant2 : computedVariant = "tertiary";
    }
    if (isSecondary) {
      var _computedVariant3;
      (_computedVariant3 = computedVariant) !== null && _computedVariant3 !== void 0 ? _computedVariant3 : computedVariant = "secondary";
    }
    if (isDefault) {
      var _computedVariant4;
      deprecated("wp.components.Button `isDefault` prop", {
        since: "5.4",
        alternative: 'variant="secondary"'
      });
      (_computedVariant4 = computedVariant) !== null && _computedVariant4 !== void 0 ? _computedVariant4 : computedVariant = "secondary";
    }
    if (isLink) {
      var _computedVariant5;
      (_computedVariant5 = computedVariant) !== null && _computedVariant5 !== void 0 ? _computedVariant5 : computedVariant = "link";
    }
    return {
      ...newProps,
      ...otherProps,
      size: computedSize,
      variant: computedVariant
    };
  }
  function UnforwardedButton(props, ref) {
    const {
      __next40pxDefaultSize,
      isBusy,
      isDestructive,
      className,
      disabled,
      icon,
      iconPosition = "left",
      iconSize,
      showTooltip,
      tooltipPosition,
      shortcut,
      label,
      children,
      size: size4 = "default",
      text: text2,
      variant,
      __experimentalIsFocusable: isFocusable2,
      describedBy,
      ...buttonOrAnchorProps
    } = useDeprecatedProps2(props);
    const {
      href,
      target,
      "aria-checked": ariaChecked,
      "aria-pressed": ariaPressed,
      "aria-selected": ariaSelected,
      ...additionalProps
    } = "href" in buttonOrAnchorProps ? buttonOrAnchorProps : {
      href: void 0,
      target: void 0,
      ...buttonOrAnchorProps
    };
    const instanceId = use_instance_id_default(Button2, "components-button__description");
    const hasChildren = "string" === typeof children && !!children || Array.isArray(children) && children?.[0] && children[0] !== null && // Tooltip should not considered as a child
    children?.[0]?.props?.className !== "components-tooltip";
    const truthyAriaPressedValues = [true, "true", "mixed"];
    const classes = clsx_default("components-button", className, {
      "is-next-40px-default-size": __next40pxDefaultSize,
      "is-secondary": variant === "secondary",
      "is-primary": variant === "primary",
      "is-small": size4 === "small",
      "is-compact": size4 === "compact",
      "is-tertiary": variant === "tertiary",
      "is-pressed": truthyAriaPressedValues.includes(ariaPressed),
      "is-pressed-mixed": ariaPressed === "mixed",
      "is-busy": isBusy,
      "is-link": variant === "link",
      "is-destructive": isDestructive,
      "has-text": !!icon && (hasChildren || text2),
      "has-icon": !!icon
    });
    const trulyDisabled = disabled && !isFocusable2;
    const Tag = href !== void 0 && !trulyDisabled ? "a" : "button";
    const buttonProps = Tag === "button" ? {
      type: "button",
      disabled: trulyDisabled,
      "aria-checked": ariaChecked,
      "aria-pressed": ariaPressed,
      "aria-selected": ariaSelected
    } : {};
    const anchorProps = Tag === "a" ? {
      href,
      target
    } : {};
    const disableEventProps = {};
    if (disabled && isFocusable2) {
      buttonProps["aria-disabled"] = true;
      anchorProps["aria-disabled"] = true;
      for (const disabledEvent of disabledEventsOnDisabledButton) {
        disableEventProps[disabledEvent] = (event) => {
          if (event) {
            event.stopPropagation();
            event.preventDefault();
          }
        };
      }
    }
    const shouldShowTooltip = !trulyDisabled && // An explicit tooltip is passed or...
    (showTooltip && !!label || // There's a shortcut or...
    !!shortcut || // There's a label and...
    !!label && // The children are empty and...
    !children?.length && // The tooltip is not explicitly disabled.
    false !== showTooltip);
    const descriptionId = describedBy ? instanceId : void 0;
    const describedById = additionalProps["aria-describedby"] || descriptionId;
    const commonProps = {
      className: classes,
      "aria-label": additionalProps["aria-label"] || label,
      "aria-describedby": describedById,
      ref
    };
    const elementChildren = /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_jsx_runtime57.Fragment, {
      children: [icon && iconPosition === "left" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(icon_default2, {
        icon,
        size: iconSize
      }), text2 && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(import_jsx_runtime57.Fragment, {
        children: text2
      }), children, icon && iconPosition === "right" && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(icon_default2, {
        icon,
        size: iconSize
      })]
    });
    const element = Tag === "a" ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("a", {
      ...anchorProps,
      ...additionalProps,
      ...disableEventProps,
      ...commonProps,
      children: elementChildren
    }) : /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("button", {
      ...buttonProps,
      ...additionalProps,
      ...disableEventProps,
      ...commonProps,
      children: elementChildren
    });
    const tooltipProps = shouldShowTooltip ? {
      text: children?.length && describedBy ? describedBy : label,
      shortcut,
      placement: tooltipPosition && // Convert legacy `position` values to be used with the new `placement` prop
      positionToPlacement(tooltipPosition)
    } : {};
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsxs)(import_jsx_runtime57.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(tooltip_default, {
        ...tooltipProps,
        children: element
      }), describedBy && /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(component_default2, {
        children: /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", {
          id: descriptionId,
          children: describedBy
        })
      })]
    });
  }
  var Button2 = (0, import_react.forwardRef)(UnforwardedButton);
  var button_default = Button2;

  // node_modules/@wordpress/components/build-module/autocomplete/index.js
  var import_remove_accents4 = __toESM(require_remove_accents());

  // node_modules/@wordpress/components/build-module/autocomplete/get-default-use-items.js
  var import_remove_accents3 = __toESM(require_remove_accents());

  // node_modules/@wordpress/components/build-module/utils/strings.js
  var import_remove_accents2 = __toESM(require_remove_accents());
  var ALL_UNICODE_DASH_CHARACTERS = new RegExp(/[\u007e\u00ad\u2053\u207b\u208b\u2212\p{Pd}]/gu);
  function kebabCase(str) {
    var _str$toString;
    let input = (_str$toString = str?.toString?.()) !== null && _str$toString !== void 0 ? _str$toString : "";
    input = input.replace(/['\u2019]/, "");
    return paramCase(input, {
      splitRegexp: [
        /(?!(?:1ST|2ND|3RD|[4-9]TH)(?![a-z]))([a-z0-9])([A-Z])/g,
        // fooBar => foo-bar, 3Bar => 3-bar
        /(?!(?:1st|2nd|3rd|[4-9]th)(?![a-z]))([0-9])([a-z])/g,
        // 3bar => 3-bar
        /([A-Za-z])([0-9])/g,
        // Foo3 => foo-3, foo3 => foo-3
        /([A-Z])([A-Z][a-z])/g
        // FOOBar => foo-bar
      ]
    });
  }
  function escapeRegExp(string2) {
    return string2.replace(/[\\^$.*+?()[\]{}|]/g, "\\$&");
  }

  // node_modules/@wordpress/components/build-module/autocomplete/get-default-use-items.js
  function filterOptions(search, options = [], maxResults = 10) {
    const filtered = [];
    for (let i3 = 0; i3 < options.length; i3++) {
      const option = options[i3];
      let {
        keywords = []
      } = option;
      if ("string" === typeof option.label) {
        keywords = [...keywords, option.label];
      }
      const isMatch = keywords.some((keyword) => search.test((0, import_remove_accents3.default)(keyword)));
      if (!isMatch) {
        continue;
      }
      filtered.push(option);
      if (filtered.length === maxResults) {
        break;
      }
    }
    return filtered;
  }
  function getDefaultUseItems(autocompleter) {
    return (filterValue) => {
      const [items, setItems] = (0, import_react.useState)([]);
      (0, import_react.useLayoutEffect)(() => {
        const {
          options,
          isDebounced
        } = autocompleter;
        const loadOptions = debounce(() => {
          const promise2 = Promise.resolve(typeof options === "function" ? options(filterValue) : options).then((optionsData) => {
            if (promise2.canceled) {
              return;
            }
            const keyedOptions = optionsData.map((optionData, optionIndex) => ({
              key: `${autocompleter.name}-${optionIndex}`,
              value: optionData,
              label: autocompleter.getOptionLabel(optionData),
              keywords: autocompleter.getOptionKeywords ? autocompleter.getOptionKeywords(optionData) : [],
              isDisabled: autocompleter.isOptionDisabled ? autocompleter.isOptionDisabled(optionData) : false
            }));
            const search = new RegExp("(?:\\b|\\s|^)" + escapeRegExp(filterValue), "i");
            setItems(filterOptions(search, keyedOptions));
          });
          return promise2;
        }, isDebounced ? 250 : 0);
        const promise = loadOptions();
        return () => {
          loadOptions.cancel();
          if (promise) {
            promise.canceled = true;
          }
        };
      }, [filterValue]);
      return [items];
    };
  }

  // node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
  var React9 = __toESM(require_react(), 1);
  var import_react86 = __toESM(require_react(), 1);
  var ReactDOM = __toESM(require_react_dom(), 1);
  var index = typeof document !== "undefined" ? import_react86.useLayoutEffect : import_react86.useEffect;
  function deepEqual(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (typeof a2 !== typeof b2) {
      return false;
    }
    if (typeof a2 === "function" && a2.toString() === b2.toString()) {
      return true;
    }
    let length2;
    let i3;
    let keys;
    if (a2 && b2 && typeof a2 === "object") {
      if (Array.isArray(a2)) {
        length2 = a2.length;
        if (length2 !== b2.length) return false;
        for (i3 = length2; i3-- !== 0; ) {
          if (!deepEqual(a2[i3], b2[i3])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a2);
      length2 = keys.length;
      if (length2 !== Object.keys(b2).length) {
        return false;
      }
      for (i3 = length2; i3-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b2, keys[i3])) {
          return false;
        }
      }
      for (i3 = length2; i3-- !== 0; ) {
        const key = keys[i3];
        if (key === "_owner" && a2.$$typeof) {
          continue;
        }
        if (!deepEqual(a2[key], b2[key])) {
          return false;
        }
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR2(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useLatestRef(value) {
    const ref = React9.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React9.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React9.useState(middleware2);
    if (!deepEqual(latestMiddleware, middleware2)) {
      setLatestMiddleware(middleware2);
    }
    const [_reference, _setReference] = React9.useState(null);
    const [_floating, _setFloating] = React9.useState(null);
    const setReference = React9.useCallback((node2) => {
      if (node2 !== referenceRef.current) {
        referenceRef.current = node2;
        _setReference(node2);
      }
    }, []);
    const setFloating = React9.useCallback((node2) => {
      if (node2 !== floatingRef.current) {
        floatingRef.current = node2;
        _setFloating(node2);
      }
    }, []);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React9.useRef(null);
    const floatingRef = React9.useRef(null);
    const dataRef = React9.useRef(data);
    const hasWhileElementsMounted = whileElementsMounted != null;
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const openRef = useLatestRef(open);
    const update3 = React9.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config2 = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config2.platform = platformRef.current;
      }
      computePosition2(referenceRef.current, floatingRef.current, config2).then((data2) => {
        const fullData = {
          ...data2,
          // The floating element's position may be recomputed while it's closed
          // but still mounted (such as when transitioning out). To ensure
          // `isPositioned` will be `false` initially on the next open, avoid
          // setting it to `true` when `open === false` (must be specified).
          isPositioned: openRef.current !== false
        };
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef, openRef]);
    index(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => ({
          ...data2,
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React9.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index(() => {
      if (referenceEl) referenceRef.current = referenceEl;
      if (floatingEl) floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update3);
        }
        update3();
      }
    }, [referenceEl, floatingEl, update3, whileElementsMountedRef, hasWhileElementsMounted]);
    const refs = React9.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements2 = React9.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React9.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements2.floating) {
        return initialStyles;
      }
      const x2 = roundByDPR2(elements2.floating, data.x);
      const y2 = roundByDPR2(elements2.floating, data.y);
      if (transform) {
        return {
          ...initialStyles,
          transform: "translate(" + x2 + "px, " + y2 + "px)",
          ...getDPR(elements2.floating) >= 1.5 && {
            willChange: "transform"
          }
        };
      }
      return {
        position: strategy,
        left: x2,
        top: y2
      };
    }, [strategy, transform, elements2.floating, data.x, data.y]);
    return React9.useMemo(() => ({
      ...data,
      update: update3,
      refs,
      elements: elements2,
      floatingStyles
    }), [data, update3, refs, elements2, floatingStyles]);
  }
  var arrow$1 = (options) => {
    function isRef2(value) {
      return {}.hasOwnProperty.call(value, "current");
    }
    return {
      name: "arrow",
      options,
      fn(state) {
        const {
          element,
          padding
        } = typeof options === "function" ? options(state) : options;
        if (element && isRef2(element)) {
          if (element.current != null) {
            return arrow2({
              element: element.current,
              padding
            }).fn(state);
          }
          return {};
        }
        if (element) {
          return arrow2({
            element,
            padding
          }).fn(state);
        }
        return {};
      }
    };
  };
  var offset4 = (options, deps) => ({
    ...offset3(options),
    options: [options, deps]
  });
  var shift3 = (options, deps) => ({
    ...shift2(options),
    options: [options, deps]
  });
  var limitShift3 = (options, deps) => ({
    ...limitShift2(options),
    options: [options, deps]
  });
  var flip3 = (options, deps) => ({
    ...flip2(options),
    options: [options, deps]
  });
  var size3 = (options, deps) => ({
    ...size2(options),
    options: [options, deps]
  });
  var arrow3 = (options, deps) => ({
    ...arrow$1(options),
    options: [options, deps]
  });

  // node_modules/@wordpress/components/build-module/scroll-lock/index.js
  var previousScrollTop = 0;
  function setLocked(locked) {
    const scrollingElement = document.scrollingElement || document.body;
    if (locked) {
      previousScrollTop = scrollingElement.scrollTop;
    }
    const methodName = locked ? "add" : "remove";
    scrollingElement.classList[methodName]("lockscroll");
    document.documentElement.classList[methodName]("lockscroll");
    if (!locked) {
      scrollingElement.scrollTop = previousScrollTop;
    }
  }
  var lockCounter = 0;
  function ScrollLock() {
    (0, import_react.useEffect)(() => {
      if (lockCounter === 0) {
        setLocked(true);
      }
      ++lockCounter;
      return () => {
        if (lockCounter === 1) {
          setLocked(false);
        }
        --lockCounter;
      };
    }, []);
    return null;
  }
  var scroll_lock_default = ScrollLock;

  // node_modules/@wordpress/components/build-module/slot-fill/context.js
  var initialValue = {
    registerSlot: () => {
    },
    unregisterSlot: () => {
    },
    registerFill: () => {
    },
    unregisterFill: () => {
    },
    getSlot: () => void 0,
    getFills: () => [],
    subscribe: () => () => {
    }
  };
  var SlotFillContext = (0, import_react.createContext)(initialValue);
  var context_default2 = SlotFillContext;

  // node_modules/@wordpress/components/build-module/slot-fill/use-slot.js
  var useSlot = (name) => {
    const {
      getSlot,
      subscribe: subscribe4
    } = (0, import_react.useContext)(context_default2);
    return (0, import_react.useSyncExternalStore)(subscribe4, () => getSlot(name), () => getSlot(name));
  };
  var use_slot_default = useSlot;

  // node_modules/@wordpress/components/build-module/slot-fill/fill.js
  function Fill({
    name,
    children
  }) {
    const {
      registerFill,
      unregisterFill
    } = (0, import_react.useContext)(context_default2);
    const slot = use_slot_default(name);
    const ref = (0, import_react.useRef)({
      name,
      children
    });
    (0, import_react.useLayoutEffect)(() => {
      const refValue = ref.current;
      registerFill(name, refValue);
      return () => unregisterFill(name, refValue);
    }, []);
    (0, import_react.useLayoutEffect)(() => {
      ref.current.children = children;
      if (slot) {
        slot.forceUpdate();
      }
    }, [children]);
    (0, import_react.useLayoutEffect)(() => {
      if (name === ref.current.name) {
        return;
      }
      unregisterFill(ref.current.name, ref.current);
      ref.current.name = name;
      registerFill(name, ref.current);
    }, [name]);
    return null;
  }

  // node_modules/@wordpress/components/build-module/slot-fill/slot.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  function isFunction(maybeFunc) {
    return typeof maybeFunc === "function";
  }
  var SlotComponent = class extends import_react.Component {
    constructor(props) {
      super(props);
      this.isUnmounted = false;
    }
    componentDidMount() {
      const {
        registerSlot
      } = this.props;
      this.isUnmounted = false;
      registerSlot(this.props.name, this);
    }
    componentWillUnmount() {
      const {
        unregisterSlot
      } = this.props;
      this.isUnmounted = true;
      unregisterSlot(this.props.name, this);
    }
    componentDidUpdate(prevProps) {
      const {
        name,
        unregisterSlot,
        registerSlot
      } = this.props;
      if (prevProps.name !== name) {
        unregisterSlot(prevProps.name, this);
        registerSlot(name, this);
      }
    }
    forceUpdate() {
      if (this.isUnmounted) {
        return;
      }
      super.forceUpdate();
    }
    render() {
      var _getFills;
      const {
        children,
        name,
        fillProps = {},
        getFills
      } = this.props;
      const fills = ((_getFills = getFills(name, this)) !== null && _getFills !== void 0 ? _getFills : []).map((fill) => {
        const fillChildren = isFunction(fill.children) ? fill.children(fillProps) : fill.children;
        return import_react.Children.map(fillChildren, (child, childIndex) => {
          if (!child || typeof child === "string") {
            return child;
          }
          let childKey = childIndex;
          if (typeof child === "object" && "key" in child && child?.key) {
            childKey = child.key;
          }
          return (0, import_react.cloneElement)(child, {
            key: childKey
          });
        });
      }).filter(
        // In some cases fills are rendered only when some conditions apply.
        // This ensures that we only use non-empty fills when rendering, i.e.,
        // it allows us to render wrappers only when the fills are actually present.
        (element) => !isEmptyElement(element)
      );
      return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(import_jsx_runtime59.Fragment, {
        children: isFunction(children) ? children(fills) : fills
      });
    }
  };
  var Slot = (props) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(context_default2.Consumer, {
    children: ({
      registerSlot,
      unregisterSlot,
      getFills
    }) => /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(SlotComponent, {
      ...props,
      registerSlot,
      unregisterSlot,
      getFills
    })
  });
  var slot_default = Slot;

  // node_modules/@wordpress/components/build-module/slot-fill/bubbles-virtually/slot-fill-context.js
  var initialContextValue = {
    slots: observableMap(),
    fills: observableMap(),
    registerSlot: () => {
      globalThis.SCRIPT_DEBUG === true ? warning("Components must be wrapped within `SlotFillProvider`. See https://developer.wordpress.org/block-editor/components/slot-fill/") : void 0;
    },
    updateSlot: () => {
    },
    unregisterSlot: () => {
    },
    registerFill: () => {
    },
    unregisterFill: () => {
    },
    // This helps the provider know if it's using the default context value or not.
    isDefault: true
  };
  var SlotFillContext2 = (0, import_react.createContext)(initialContextValue);
  var slot_fill_context_default = SlotFillContext2;

  // node_modules/@wordpress/components/build-module/slot-fill/bubbles-virtually/use-slot.js
  function useSlot2(name) {
    const registry = (0, import_react.useContext)(slot_fill_context_default);
    const slot = useObservableValue(registry.slots, name);
    const api = (0, import_react.useMemo)(() => ({
      updateSlot: (fillProps) => registry.updateSlot(name, fillProps),
      unregisterSlot: (ref) => registry.unregisterSlot(name, ref),
      registerFill: (ref) => registry.registerFill(name, ref),
      unregisterFill: (ref) => registry.unregisterFill(name, ref)
    }), [name, registry]);
    return {
      ...slot,
      ...api
    };
  }

  // node_modules/@wordpress/components/build-module/style-provider/index.js
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var uuidCache = /* @__PURE__ */ new Set();
  var containerCacheMap = /* @__PURE__ */ new WeakMap();
  var memoizedCreateCacheWithContainer = (container) => {
    if (containerCacheMap.has(container)) {
      return containerCacheMap.get(container);
    }
    let key = v4_default().replace(/[0-9]/g, "");
    while (uuidCache.has(key)) {
      key = v4_default().replace(/[0-9]/g, "");
    }
    uuidCache.add(key);
    const cache3 = createCache2({
      container,
      key
    });
    containerCacheMap.set(container, cache3);
    return cache3;
  };
  function StyleProvider(props) {
    const {
      children,
      document: document3
    } = props;
    if (!document3) {
      return null;
    }
    const cache3 = memoizedCreateCacheWithContainer(document3.head);
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(CacheProvider, {
      value: cache3,
      children
    });
  }
  var style_provider_default = StyleProvider;

  // node_modules/@wordpress/components/build-module/slot-fill/bubbles-virtually/fill.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  function useForceUpdate2() {
    const [, setState] = (0, import_react.useState)({});
    const mounted = (0, import_react.useRef)(true);
    (0, import_react.useEffect)(() => {
      mounted.current = true;
      return () => {
        mounted.current = false;
      };
    }, []);
    return () => {
      if (mounted.current) {
        setState({});
      }
    };
  }
  function Fill2(props) {
    var _slot$fillProps;
    const {
      name,
      children
    } = props;
    const {
      registerFill,
      unregisterFill,
      ...slot
    } = useSlot2(name);
    const rerender = useForceUpdate2();
    const ref = (0, import_react.useRef)({
      rerender
    });
    (0, import_react.useEffect)(() => {
      registerFill(ref);
      return () => {
        unregisterFill(ref);
      };
    }, [registerFill, unregisterFill]);
    if (!slot.ref || !slot.ref.current) {
      return null;
    }
    const wrappedChildren = /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(style_provider_default, {
      document: slot.ref.current.ownerDocument,
      children: typeof children === "function" ? children((_slot$fillProps = slot.fillProps) !== null && _slot$fillProps !== void 0 ? _slot$fillProps : {}) : children
    });
    return (0, import_react_dom.createPortal)(wrappedChildren, slot.ref.current);
  }

  // node_modules/@wordpress/components/build-module/slot-fill/bubbles-virtually/slot.js
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  function Slot2(props, forwardedRef) {
    const {
      name,
      fillProps = {},
      as,
      // `children` is not allowed. However, if it is passed,
      // it will be displayed as is, so remove `children`.
      // @ts-ignore
      children,
      ...restProps
    } = props;
    const {
      registerSlot,
      unregisterSlot,
      ...registry
    } = (0, import_react.useContext)(slot_fill_context_default);
    const ref = (0, import_react.useRef)(null);
    (0, import_react.useLayoutEffect)(() => {
      registerSlot(name, ref, fillProps);
      return () => {
        unregisterSlot(name, ref);
      };
    }, [registerSlot, unregisterSlot, name]);
    (0, import_react.useLayoutEffect)(() => {
      registry.updateSlot(name, fillProps);
    });
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(component_default, {
      as,
      ref: useMergeRefs([forwardedRef, ref]),
      ...restProps
    });
  }
  var slot_default2 = (0, import_react.forwardRef)(Slot2);

  // node_modules/@wordpress/components/build-module/slot-fill/index.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());

  // node_modules/@wordpress/components/build-module/slot-fill/bubbles-virtually/use-slot-fills.js
  function useSlotFills(name) {
    const registry = (0, import_react.useContext)(slot_fill_context_default);
    return useObservableValue(registry.fills, name);
  }

  // node_modules/@wordpress/components/build-module/slot-fill/index.js
  function Fill3(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsxs)(import_jsx_runtime65.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Fill, {
        ...props
      }), /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Fill2, {
        ...props
      })]
    });
  }
  function UnforwardedSlot(props, ref) {
    const {
      bubblesVirtually,
      ...restProps
    } = props;
    if (bubblesVirtually) {
      return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(slot_default2, {
        ...restProps,
        ref
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(slot_default, {
      ...restProps
    });
  }
  var Slot3 = (0, import_react.forwardRef)(UnforwardedSlot);
  function createSlotFill(key) {
    const baseName = typeof key === "symbol" ? key.description : key;
    const FillComponent = (props) => /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Fill3, {
      name: key,
      ...props
    });
    FillComponent.displayName = `${baseName}Fill`;
    const SlotComponent2 = (props) => /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(Slot3, {
      name: key,
      ...props
    });
    SlotComponent2.displayName = `${baseName}Slot`;
    SlotComponent2.__unstableName = key;
    return {
      Fill: FillComponent,
      Slot: SlotComponent2
    };
  }
  var createPrivateSlotFill = (name) => {
    const privateKey = Symbol(name);
    const privateSlotFill = createSlotFill(privateKey);
    return {
      privateKey,
      ...privateSlotFill
    };
  };

  // node_modules/@wordpress/components/build-module/popover/overlay-middlewares.js
  function overlayMiddlewares() {
    return [{
      name: "overlay",
      fn({
        rects
      }) {
        return rects.reference;
      }
    }, size3({
      apply({
        rects,
        elements: elements2
      }) {
        var _elements$floating;
        const {
          firstElementChild
        } = (_elements$floating = elements2.floating) !== null && _elements$floating !== void 0 ? _elements$floating : {};
        if (!(firstElementChild instanceof HTMLElement)) {
          return;
        }
        Object.assign(firstElementChild.style, {
          width: `${rects.reference.width}px`,
          height: `${rects.reference.height}px`
        });
      }
    })];
  }

  // node_modules/@wordpress/components/build-module/popover/index.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var SLOT_NAME = "Popover";
  var ArrowTriangle = () => /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 100 100",
    className: "components-popover__triangle",
    role: "presentation",
    children: [/* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Path, {
      className: "components-popover__triangle-bg",
      d: "M 0 0 L 50 50 L 100 0"
    }), /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Path, {
      className: "components-popover__triangle-border",
      d: "M 0 0 L 50 50 L 100 0",
      vectorEffect: "non-scaling-stroke"
    })]
  });
  var slotNameContext = (0, import_react.createContext)(void 0);
  var fallbackContainerClassname = "components-popover__fallback-container";
  var getPopoverFallbackContainer = () => {
    let container = document.body.querySelector("." + fallbackContainerClassname);
    if (!container) {
      container = document.createElement("div");
      container.className = fallbackContainerClassname;
      document.body.append(container);
    }
    return container;
  };
  var UnforwardedPopover = (props, forwardedRef) => {
    const {
      animate = true,
      headerTitle,
      constrainTabbing,
      onClose,
      children,
      className,
      noArrow = true,
      position: position2,
      placement: placementProp = "bottom-start",
      offset: offsetProp = 0,
      focusOnMount = "firstElement",
      anchor,
      expandOnMobile,
      onFocusOutside,
      __unstableSlotName = SLOT_NAME,
      flip: flip4 = true,
      resize = true,
      shift: shift4 = false,
      inline: inline3 = false,
      variant,
      // Deprecated props
      __unstableForcePosition,
      anchorRef,
      anchorRect,
      getAnchorRect,
      isAlternate,
      // Rest
      ...contentProps
    } = useContextSystem(props, "Popover");
    let computedFlipProp = flip4;
    let computedResizeProp = resize;
    if (__unstableForcePosition !== void 0) {
      deprecated("`__unstableForcePosition` prop in wp.components.Popover", {
        since: "6.1",
        version: "6.3",
        alternative: "`flip={ false }` and  `resize={ false }`"
      });
      computedFlipProp = !__unstableForcePosition;
      computedResizeProp = !__unstableForcePosition;
    }
    if (anchorRef !== void 0) {
      deprecated("`anchorRef` prop in wp.components.Popover", {
        since: "6.1",
        alternative: "`anchor` prop"
      });
    }
    if (anchorRect !== void 0) {
      deprecated("`anchorRect` prop in wp.components.Popover", {
        since: "6.1",
        alternative: "`anchor` prop"
      });
    }
    if (getAnchorRect !== void 0) {
      deprecated("`getAnchorRect` prop in wp.components.Popover", {
        since: "6.1",
        alternative: "`anchor` prop"
      });
    }
    const computedVariant = isAlternate ? "toolbar" : variant;
    if (isAlternate !== void 0) {
      deprecated("`isAlternate` prop in wp.components.Popover", {
        since: "6.2",
        alternative: "`variant` prop with the `'toolbar'` value"
      });
    }
    const arrowRef = (0, import_react.useRef)(null);
    const [fallbackReferenceElement, setFallbackReferenceElement] = (0, import_react.useState)(null);
    const anchorRefFallback = (0, import_react.useCallback)((node2) => {
      setFallbackReferenceElement(node2);
    }, []);
    const isMobileViewport = use_viewport_match_default("medium", "<");
    const isExpanded = expandOnMobile && isMobileViewport;
    const hasArrow = !isExpanded && !noArrow;
    const normalizedPlacementFromProps = position2 ? positionToPlacement(position2) : placementProp;
    const middleware2 = [...placementProp === "overlay" ? overlayMiddlewares() : [], offset4(offsetProp), computedFlipProp && flip3(), computedResizeProp && size3({
      apply(sizeProps) {
        var _refs$floating$curren;
        const {
          firstElementChild
        } = (_refs$floating$curren = refs.floating.current) !== null && _refs$floating$curren !== void 0 ? _refs$floating$curren : {};
        if (!(firstElementChild instanceof HTMLElement)) {
          return;
        }
        Object.assign(firstElementChild.style, {
          maxHeight: `${sizeProps.availableHeight}px`,
          overflow: "auto"
        });
      }
    }), shift4 && shift3({
      crossAxis: true,
      limiter: limitShift3(),
      padding: 1
      // Necessary to avoid flickering at the edge of the viewport.
    }), arrow3({
      element: arrowRef
    })];
    const slotName = (0, import_react.useContext)(slotNameContext) || __unstableSlotName;
    const slot = useSlot2(slotName);
    let onDialogClose;
    if (onClose || onFocusOutside) {
      onDialogClose = (type, event) => {
        if (type === "focus-outside" && onFocusOutside) {
          onFocusOutside(event);
        } else if (onClose) {
          onClose();
        }
      };
    }
    const [dialogRef, dialogProps] = use_dialog_default({
      constrainTabbing,
      focusOnMount,
      __unstableOnClose: onDialogClose,
      // @ts-expect-error The __unstableOnClose property needs to be deprecated first (see https://github.com/WordPress/gutenberg/pull/27675)
      onClose: onDialogClose
    });
    const {
      // Positioning coordinates
      x: x2,
      y: y2,
      // Object with "regular" refs to both "reference" and "floating"
      refs,
      // Type of CSS position property to use (absolute or fixed)
      strategy,
      update: update3,
      placement: computedPlacement,
      middlewareData: {
        arrow: arrowData
      }
    } = useFloating({
      placement: normalizedPlacementFromProps === "overlay" ? void 0 : normalizedPlacementFromProps,
      middleware: middleware2,
      whileElementsMounted: (referenceParam, floatingParam, updateParam) => autoUpdate(referenceParam, floatingParam, updateParam, {
        layoutShift: false,
        animationFrame: true
      })
    });
    const arrowCallbackRef = (0, import_react.useCallback)((node2) => {
      arrowRef.current = node2;
      update3();
    }, [update3]);
    const anchorRefTop = anchorRef?.top;
    const anchorRefBottom = anchorRef?.bottom;
    const anchorRefStartContainer = anchorRef?.startContainer;
    const anchorRefCurrent = anchorRef?.current;
    (0, import_react.useLayoutEffect)(() => {
      const resultingReferenceElement = getReferenceElement({
        anchor,
        anchorRef,
        anchorRect,
        getAnchorRect,
        fallbackReferenceElement
      });
      refs.setReference(resultingReferenceElement);
    }, [anchor, anchorRef, anchorRefTop, anchorRefBottom, anchorRefStartContainer, anchorRefCurrent, anchorRect, getAnchorRect, fallbackReferenceElement, refs]);
    const mergedFloatingRef = useMergeRefs([refs.setFloating, dialogRef, forwardedRef]);
    const style = isExpanded ? void 0 : {
      position: strategy,
      top: 0,
      left: 0,
      // `x` and `y` are framer-motion specific props and are shorthands
      // for `translateX` and `translateY`. Currently it is not possible
      // to use `translateX` and `translateY` because those values would
      // be overridden by the return value of the
      // `placementToMotionAnimationProps` function.
      x: computePopoverPosition(x2),
      y: computePopoverPosition(y2)
    };
    const shouldReduceMotion = use_reduced_motion_default();
    const shouldAnimate = animate && !isExpanded && !shouldReduceMotion;
    const [animationFinished, setAnimationFinished] = (0, import_react.useState)(false);
    const {
      style: motionInlineStyles,
      ...otherMotionProps
    } = (0, import_react.useMemo)(() => placementToMotionAnimationProps(computedPlacement), [computedPlacement]);
    const animationProps = shouldAnimate ? {
      style: {
        ...motionInlineStyles,
        ...style
      },
      onAnimationComplete: () => setAnimationFinished(true),
      ...otherMotionProps
    } : {
      animate: false,
      style
    };
    const isPositioned = (!shouldAnimate || animationFinished) && x2 !== null && y2 !== null;
    let content = /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(motion.div, {
      className: clsx_default(className, {
        "is-expanded": isExpanded,
        "is-positioned": isPositioned,
        // Use the 'alternate' classname for 'toolbar' variant for back compat.
        [`is-${computedVariant === "toolbar" ? "alternate" : computedVariant}`]: computedVariant
      }),
      ...animationProps,
      ...contentProps,
      ref: mergedFloatingRef,
      ...dialogProps,
      tabIndex: -1,
      children: [isExpanded && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(scroll_lock_default, {}), isExpanded && /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)("div", {
        className: "components-popover__header",
        children: [/* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {
          className: "components-popover__header-title",
          children: headerTitle
        }), /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(button_default, {
          className: "components-popover__close",
          icon: close_default,
          onClick: onClose
        })]
      }), /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", {
        className: "components-popover__content",
        children
      }), hasArrow && /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("div", {
        ref: arrowCallbackRef,
        className: ["components-popover__arrow", `is-${computedPlacement.split("-")[0]}`].join(" "),
        style: {
          left: typeof arrowData?.x !== "undefined" && Number.isFinite(arrowData.x) ? `${arrowData.x}px` : "",
          top: typeof arrowData?.y !== "undefined" && Number.isFinite(arrowData.y) ? `${arrowData.y}px` : ""
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(ArrowTriangle, {})
      })]
    });
    const shouldRenderWithinSlot = slot.ref && !inline3;
    const hasAnchor = anchorRef || anchorRect || anchor;
    if (shouldRenderWithinSlot) {
      content = /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Fill3, {
        name: slotName,
        children: content
      });
    } else if (!inline3) {
      content = (0, import_react_dom.createPortal)(/* @__PURE__ */ (0, import_jsx_runtime67.jsx)(StyleProvider, {
        document,
        children: content
      }), getPopoverFallbackContainer());
    }
    if (hasAnchor) {
      return content;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_jsx_runtime69.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {
        ref: anchorRefFallback
      }), content]
    });
  };
  var Popover2 = contextConnect(UnforwardedPopover, "Popover");
  function PopoverSlot({
    name = SLOT_NAME
  }, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(Slot3, {
      bubblesVirtually: true,
      name,
      className: "popover-slot",
      ref
    });
  }
  Popover2.Slot = (0, import_react.forwardRef)(PopoverSlot);
  Popover2.__unstableSlotNameProvider = slotNameContext.Provider;
  var popover_default = Popover2;

  // node_modules/@wordpress/components/build-module/autocomplete/autocompleter-ui.js
  var import_react_dom6 = __toESM(require_react_dom());
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  function ListBox({
    items,
    onSelect,
    selectedIndex,
    instanceId,
    listBoxId,
    className,
    Component: Component4 = "div"
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(Component4, {
      id: listBoxId,
      role: "listbox",
      className: "components-autocomplete__results",
      children: items.map((option, index2) => /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(button_default, {
        id: `components-autocomplete-item-${instanceId}-${option.key}`,
        role: "option",
        "aria-selected": index2 === selectedIndex,
        disabled: option.isDisabled,
        className: clsx_default("components-autocomplete__result", className, {
          "is-selected": index2 === selectedIndex
        }),
        onClick: () => onSelect(option),
        children: option.label
      }, option.key))
    });
  }
  function getAutoCompleterUI(autocompleter) {
    var _autocompleter$useIte;
    const useItems = (_autocompleter$useIte = autocompleter.useItems) !== null && _autocompleter$useIte !== void 0 ? _autocompleter$useIte : getDefaultUseItems(autocompleter);
    function AutocompleterUI({
      filterValue,
      instanceId,
      listBoxId,
      className,
      selectedIndex,
      onChangeOptions,
      onSelect,
      onReset,
      reset,
      contentRef
    }) {
      const [items] = useItems(filterValue);
      const popoverAnchor = useAnchor({
        editableContentElement: contentRef.current
      });
      const [needsA11yCompat, setNeedsA11yCompat] = (0, import_react.useState)(false);
      const popoverRef = (0, import_react.useRef)(null);
      const popoverRefs = useMergeRefs([popoverRef, useRefEffect((node2) => {
        if (!contentRef.current) {
          return;
        }
        setNeedsA11yCompat(node2.ownerDocument !== contentRef.current.ownerDocument);
      }, [contentRef])]);
      useOnClickOutside(popoverRef, reset);
      const debouncedSpeak = useDebounce(speak, 500);
      function announce(options) {
        if (!debouncedSpeak) {
          return;
        }
        if (!!options.length) {
          if (filterValue) {
            debouncedSpeak(sprintf(
              /* translators: %d: number of results. */
              _n("%d result found, use up and down arrow keys to navigate.", "%d results found, use up and down arrow keys to navigate.", options.length),
              options.length
            ), "assertive");
          } else {
            debouncedSpeak(sprintf(
              /* translators: %d: number of results. */
              _n("Initial %d result loaded. Type to filter all available results. Use up and down arrow keys to navigate.", "Initial %d results loaded. Type to filter all available results. Use up and down arrow keys to navigate.", options.length),
              options.length
            ), "assertive");
          }
        } else {
          debouncedSpeak(__("No results."), "assertive");
        }
      }
      (0, import_react.useLayoutEffect)(() => {
        onChangeOptions(items);
        announce(items);
      }, [items]);
      if (items.length === 0) {
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(import_jsx_runtime71.Fragment, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime70.jsx)(popover_default, {
          focusOnMount: false,
          onClose: onReset,
          placement: "top-start",
          className: "components-autocomplete__popover",
          anchor: popoverAnchor,
          ref: popoverRefs,
          children: /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(ListBox, {
            items,
            onSelect,
            selectedIndex,
            instanceId,
            listBoxId,
            className
          })
        }), contentRef.current && needsA11yCompat && (0, import_react_dom6.createPortal)(/* @__PURE__ */ (0, import_jsx_runtime70.jsx)(ListBox, {
          items,
          onSelect,
          selectedIndex,
          instanceId,
          listBoxId,
          className,
          Component: component_default2
        }), contentRef.current.ownerDocument.body)]
      });
    }
    return AutocompleterUI;
  }
  function useOnClickOutside(ref, handler) {
    (0, import_react.useEffect)(() => {
      const listener2 = (event) => {
        if (!ref.current || ref.current.contains(event.target)) {
          return;
        }
        handler(event);
      };
      document.addEventListener("mousedown", listener2);
      document.addEventListener("touchstart", listener2);
      return () => {
        document.removeEventListener("mousedown", listener2);
        document.removeEventListener("touchstart", listener2);
      };
    }, [handler]);
  }

  // node_modules/@wordpress/components/build-module/autocomplete/index.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var getNodeText = (node2) => {
    if (node2 === null) {
      return "";
    }
    switch (typeof node2) {
      case "string":
      case "number":
        return node2.toString();
        break;
      case "boolean":
        return "";
        break;
      case "object": {
        if (node2 instanceof Array) {
          return node2.map(getNodeText).join("");
        }
        if ("props" in node2) {
          return getNodeText(node2.props.children);
        }
        break;
      }
      default:
        return "";
    }
    return "";
  };
  var EMPTY_FILTERED_OPTIONS = [];
  function useAutocomplete({
    record,
    onChange,
    onReplace,
    completers,
    contentRef
  }) {
    const instanceId = use_instance_id_default(useAutocomplete);
    const [selectedIndex, setSelectedIndex] = (0, import_react.useState)(0);
    const [filteredOptions, setFilteredOptions] = (0, import_react.useState)(EMPTY_FILTERED_OPTIONS);
    const [filterValue, setFilterValue] = (0, import_react.useState)("");
    const [autocompleter, setAutocompleter] = (0, import_react.useState)(null);
    const [AutocompleterUI, setAutocompleterUI] = (0, import_react.useState)(null);
    const backspacing = (0, import_react.useRef)(false);
    function insertCompletion(replacement) {
      if (autocompleter === null) {
        return;
      }
      const end = record.start;
      const start2 = end - autocompleter.triggerPrefix.length - filterValue.length;
      const toInsert = create2({
        html: serialize_default(replacement)
      });
      onChange(insert(record, toInsert, start2, end));
    }
    function select2(option) {
      const {
        getOptionCompletion
      } = autocompleter || {};
      if (option.isDisabled) {
        return;
      }
      if (getOptionCompletion) {
        const completion = getOptionCompletion(option.value, filterValue);
        const isCompletionObject = (obj) => {
          return obj !== null && typeof obj === "object" && "action" in obj && obj.action !== void 0 && "value" in obj && obj.value !== void 0;
        };
        const completionObject = isCompletionObject(completion) ? completion : {
          action: "insert-at-caret",
          value: completion
        };
        if ("replace" === completionObject.action) {
          onReplace([completionObject.value]);
          return;
        } else if ("insert-at-caret" === completionObject.action) {
          insertCompletion(completionObject.value);
        }
      }
      reset();
    }
    function reset() {
      setSelectedIndex(0);
      setFilteredOptions(EMPTY_FILTERED_OPTIONS);
      setFilterValue("");
      setAutocompleter(null);
      setAutocompleterUI(null);
    }
    function onChangeOptions(options) {
      setSelectedIndex(options.length === filteredOptions.length ? selectedIndex : 0);
      setFilteredOptions(options);
    }
    function handleKeyDown(event) {
      backspacing.current = event.key === "Backspace";
      if (!autocompleter) {
        return;
      }
      if (filteredOptions.length === 0) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      switch (event.key) {
        case "ArrowUp": {
          const newIndex = (selectedIndex === 0 ? filteredOptions.length : selectedIndex) - 1;
          setSelectedIndex(newIndex);
          if (isAppleOS()) {
            speak(getNodeText(filteredOptions[newIndex].label), "assertive");
          }
          break;
        }
        case "ArrowDown": {
          const newIndex = (selectedIndex + 1) % filteredOptions.length;
          setSelectedIndex(newIndex);
          if (isAppleOS()) {
            speak(getNodeText(filteredOptions[newIndex].label), "assertive");
          }
          break;
        }
        case "Escape":
          setAutocompleter(null);
          setAutocompleterUI(null);
          event.preventDefault();
          break;
        case "Enter":
          select2(filteredOptions[selectedIndex]);
          break;
        case "ArrowLeft":
        case "ArrowRight":
          reset();
          return;
        default:
          return;
      }
      event.preventDefault();
    }
    const textContent = (0, import_react.useMemo)(() => {
      if (isCollapsed(record)) {
        return getTextContent(slice(record, 0));
      }
      return "";
    }, [record]);
    (0, import_react.useEffect)(() => {
      if (!textContent) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      const completer = completers.reduce((lastTrigger, currentCompleter) => {
        const triggerIndex2 = textContent.lastIndexOf(currentCompleter.triggerPrefix);
        const lastTriggerIndex = lastTrigger !== null ? textContent.lastIndexOf(lastTrigger.triggerPrefix) : -1;
        return triggerIndex2 > lastTriggerIndex ? currentCompleter : lastTrigger;
      }, null);
      if (!completer) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      const {
        allowContext,
        triggerPrefix
      } = completer;
      const triggerIndex = textContent.lastIndexOf(triggerPrefix);
      const textWithoutTrigger = textContent.slice(triggerIndex + triggerPrefix.length);
      const tooDistantFromTrigger = textWithoutTrigger.length > 50;
      if (tooDistantFromTrigger) {
        return;
      }
      const mismatch = filteredOptions.length === 0;
      const wordsFromTrigger = textWithoutTrigger.split(/\s/);
      const hasOneTriggerWord = wordsFromTrigger.length === 1;
      const matchingWhileBackspacing = backspacing.current && wordsFromTrigger.length <= 3;
      if (mismatch && !(matchingWhileBackspacing || hasOneTriggerWord)) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      const textAfterSelection = getTextContent(slice(record, void 0, getTextContent(record).length));
      if (allowContext && !allowContext(textContent.slice(0, triggerIndex), textAfterSelection)) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      if (/^\s/.test(textWithoutTrigger) || /\s\s+$/.test(textWithoutTrigger)) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      if (!/[\u0000-\uFFFF]*$/.test(textWithoutTrigger)) {
        if (autocompleter) {
          reset();
        }
        return;
      }
      const safeTrigger = escapeRegExp(completer.triggerPrefix);
      const text2 = (0, import_remove_accents4.default)(textContent);
      const match2 = text2.slice(text2.lastIndexOf(completer.triggerPrefix)).match(new RegExp(`${safeTrigger}([\0-\uFFFF]*)$`));
      const query2 = match2 && match2[1];
      setAutocompleter(completer);
      setAutocompleterUI(() => completer !== autocompleter ? getAutoCompleterUI(completer) : AutocompleterUI);
      setFilterValue(query2 === null ? "" : query2);
    }, [textContent]);
    const {
      key: selectedKey = ""
    } = filteredOptions[selectedIndex] || {};
    const {
      className
    } = autocompleter || {};
    const isExpanded = !!autocompleter && filteredOptions.length > 0;
    const listBoxId = isExpanded ? `components-autocomplete-listbox-${instanceId}` : void 0;
    const activeId = isExpanded ? `components-autocomplete-item-${instanceId}-${selectedKey}` : null;
    const hasSelection = record.start !== void 0;
    return {
      listBoxId,
      activeId,
      onKeyDown: withIgnoreIMEEvents(handleKeyDown),
      popover: hasSelection && AutocompleterUI && /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(AutocompleterUI, {
        className,
        filterValue,
        instanceId,
        listBoxId,
        selectedIndex,
        onChangeOptions,
        onSelect: select2,
        value: record,
        contentRef,
        reset
      })
    };
  }
  function useLastDifferentValue(value) {
    const history = (0, import_react.useRef)(/* @__PURE__ */ new Set());
    history.current.add(value);
    if (history.current.size > 2) {
      history.current.delete(Array.from(history.current)[0]);
    }
    return Array.from(history.current)[0];
  }
  function useAutocompleteProps(options) {
    const ref = (0, import_react.useRef)(null);
    const onKeyDownRef = (0, import_react.useRef)();
    const {
      record
    } = options;
    const previousRecord = useLastDifferentValue(record);
    const {
      popover,
      listBoxId,
      activeId,
      onKeyDown
    } = useAutocomplete({
      ...options,
      contentRef: ref
    });
    onKeyDownRef.current = onKeyDown;
    const mergedRefs = useMergeRefs([ref, useRefEffect((element) => {
      function _onKeyDown(event) {
        onKeyDownRef.current?.(event);
      }
      element.addEventListener("keydown", _onKeyDown);
      return () => {
        element.removeEventListener("keydown", _onKeyDown);
      };
    }, [])]);
    const didUserInput = record.text !== previousRecord?.text;
    if (!didUserInput) {
      return {
        ref: mergedRefs
      };
    }
    return {
      ref: mergedRefs,
      children: popover,
      "aria-autocomplete": listBoxId ? "list" : void 0,
      "aria-owns": listBoxId,
      "aria-activedescendant": activeId
    };
  }

  // node_modules/@wordpress/components/build-module/dropdown/index.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var UnconnectedDropdown = (props, forwardedRef) => {
    const {
      renderContent,
      renderToggle,
      className,
      contentClassName,
      expandOnMobile,
      headerTitle,
      focusOnMount,
      popoverProps,
      onClose,
      onToggle,
      style,
      open,
      defaultOpen,
      // Deprecated props
      position: position2,
      // From context system
      variant
    } = useContextSystem(props, "Dropdown");
    if (position2 !== void 0) {
      deprecated("`position` prop in wp.components.Dropdown", {
        since: "6.2",
        alternative: "`popoverProps.placement` prop",
        hint: "Note that the `position` prop will override any values passed through the `popoverProps.placement` prop."
      });
    }
    const [fallbackPopoverAnchor, setFallbackPopoverAnchor] = (0, import_react.useState)(null);
    const containerRef = (0, import_react.useRef)();
    const [isOpen, setIsOpen] = useControlledValue({
      defaultValue: defaultOpen,
      value: open,
      onChange: onToggle
    });
    function closeIfFocusOutside() {
      if (!containerRef.current) {
        return;
      }
      const {
        ownerDocument
      } = containerRef.current;
      const dialog = ownerDocument?.activeElement?.closest('[role="dialog"]');
      if (!containerRef.current.contains(ownerDocument.activeElement) && (!dialog || dialog.contains(containerRef.current))) {
        close2();
      }
    }
    function close2() {
      onClose?.();
      setIsOpen(false);
    }
    const args = {
      isOpen: !!isOpen,
      onToggle: () => setIsOpen(!isOpen),
      onClose: close2
    };
    const popoverPropsHaveAnchor = !!popoverProps?.anchor || // Note: `anchorRef`, `getAnchorRect` and `anchorRect` are deprecated and
    // be removed from `Popover` from WordPress 6.3
    !!popoverProps?.anchorRef || !!popoverProps?.getAnchorRect || !!popoverProps?.anchorRect;
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("div", {
      className,
      ref: useMergeRefs([containerRef, forwardedRef, setFallbackPopoverAnchor]),
      tabIndex: -1,
      style,
      children: [renderToggle(args), isOpen && /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(popover_default, {
        position: position2,
        onClose: close2,
        onFocusOutside: closeIfFocusOutside,
        expandOnMobile,
        headerTitle,
        focusOnMount,
        offset: 13,
        anchor: !popoverPropsHaveAnchor ? fallbackPopoverAnchor : void 0,
        variant,
        ...popoverProps,
        className: clsx_default("components-dropdown__content", popoverProps?.className, contentClassName),
        children: renderContent(args)
      })]
    });
  };
  var Dropdown = contextConnect(UnconnectedDropdown, "Dropdown");
  var dropdown_default = Dropdown;

  // node_modules/@wordpress/components/build-module/input-control/input-suffix-wrapper.js
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  function UnconnectedInputControlSuffixWrapper(props, forwardedRef) {
    const derivedProps = useContextSystem(props, "InputControlSuffixWrapper");
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(component_default5, {
      marginBottom: 0,
      ...derivedProps,
      ref: forwardedRef
    });
  }
  var InputControlSuffixWrapper = contextConnect(UnconnectedInputControlSuffixWrapper, "InputControlSuffixWrapper");
  var input_suffix_wrapper_default = InputControlSuffixWrapper;

  // node_modules/@wordpress/components/build-module/select-control/styles/select-control-styles.js
  var disabledStyles2 = ({
    disabled
  }) => {
    if (!disabled) {
      return "";
    }
    return /* @__PURE__ */ css({
      color: COLORS.ui.textDisabled
    }, false ? "" : ";label:disabledStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE4QlEiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9zZWxlY3QtY29udHJvbC9zdHlsZXMvc2VsZWN0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RDb250cm9sUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlciBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL2lucHV0LXN1ZmZpeC13cmFwcGVyJztcbmltcG9ydCB7IGZvbnRTaXplU3R5bGVzIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbnRlcmZhY2UgU2VsZWN0UHJvcHNcblx0ZXh0ZW5kcyBQaWNrPFxuXHRcdFNlbGVjdENvbnRyb2xQcm9wcyxcblx0XHQnX19uZXh0NDBweERlZmF1bHRTaXplJyB8ICdkaXNhYmxlZCcgfCAnbXVsdGlwbGUnXG5cdD4ge1xuXHQvLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG5cdC8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cblx0c2VsZWN0U2l6ZT86IFNlbGVjdENvbnRyb2xQcm9wc1sgJ3NpemUnIF07XG59XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0aWYgKCBtdWx0aXBsZSApIHtcblx0XHQvLyBXaGVuIGBtdWx0aXBsZWAsIGp1c3QgdXNlIHRoZSBuYXRpdmUgYnJvd3NlciBzdHlsZXNcblx0XHQvLyB3aXRob3V0IHNldHRpbmcgZXhwbGljaXQgaGVpZ2h0LlxuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdG1pbkhlaWdodDogMjQsXG5cdFx0XHRwYWRkaW5nVG9wOiAwLFxuXHRcdFx0cGFkZGluZ0JvdHRvbTogMCxcblx0XHR9LFxuXHRcdGNvbXBhY3Q6IHtcblx0XHRcdGhlaWdodDogMzIsXG5cdFx0XHRtaW5IZWlnaHQ6IDMyLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0fTtcblxuXHRpZiAoICEgX19uZXh0NDBweERlZmF1bHRTaXplICkge1xuXHRcdHNpemVzLmRlZmF1bHQgPSBzaXplcy5jb21wYWN0O1xuXHR9XG5cblx0Y29uc3Qgc3R5bGUgPSBzaXplc1sgc2VsZWN0U2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG5cblx0cmV0dXJuIGNzcyggc3R5bGUgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGV2cm9uSWNvblNpemUgPSAxODtcblxuY29uc3Qgc2l6ZVBhZGRpbmdzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3QgcGFkZGluZyA9IHtcblx0XHRkZWZhdWx0OiAxNixcblx0XHRzbWFsbDogOCxcblx0XHRjb21wYWN0OiA4LFxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogMTYsXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSApIHtcblx0XHRwYWRkaW5nLmRlZmF1bHQgPSBwYWRkaW5nLmNvbXBhY3Q7XG5cdH1cblxuXHRjb25zdCBzZWxlY3RlZFBhZGRpbmcgPSBwYWRkaW5nWyBzZWxlY3RTaXplIF0gfHwgcGFkZGluZy5kZWZhdWx0O1xuXG5cdHJldHVybiBydGwoIHtcblx0XHRwYWRkaW5nTGVmdDogc2VsZWN0ZWRQYWRkaW5nLFxuXHRcdHBhZGRpbmdSaWdodDogc2VsZWN0ZWRQYWRkaW5nICsgY2hldnJvbkljb25TaXplLFxuXHRcdC4uLiggbXVsdGlwbGVcblx0XHRcdD8ge1xuXHRcdFx0XHRcdHBhZGRpbmdUb3A6IHNlbGVjdGVkUGFkZGluZyxcblx0XHRcdFx0XHRwYWRkaW5nQm90dG9tOiBzZWxlY3RlZFBhZGRpbmcsXG5cdFx0XHQgIH1cblx0XHRcdDoge30gKSxcblx0fSApO1xufTtcblxuY29uc3Qgb3ZlcmZsb3dTdHlsZXMgPSAoIHsgbXVsdGlwbGUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0b3ZlcmZsb3c6IG11bHRpcGxlID8gJ2F1dG8nIDogJ2hpZGRlbicsXG5cdH07XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfTtcblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9O1xuXHRcdCR7IHNpemVTdHlsZXMgfTtcblx0XHQkeyBzaXplUGFkZGluZ3MgfTtcblx0XHQkeyBvdmVyZmxvd1N0eWxlcyB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEb3duQXJyb3dXcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAtMSApIH07IC8vIG9wdGljYWxseSBhZGp1c3QgdGhlIGljb25cblx0bGluZS1oZWlnaHQ6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlcldpdGhDbGlja1Rocm91Z2ggPSBzdHlsZWQoXG5cdElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXJcbilgXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0JHsgcnRsKCB7IHJpZ2h0OiAwIH0gKSB9XG5gO1xuIl19 */");
  };
  var sizeStyles2 = ({
    __next40pxDefaultSize,
    multiple,
    selectSize = "default"
  }) => {
    if (multiple) {
      return;
    }
    const sizes = {
      default: {
        height: 40,
        minHeight: 40,
        paddingTop: 0,
        paddingBottom: 0
      },
      small: {
        height: 24,
        minHeight: 24,
        paddingTop: 0,
        paddingBottom: 0
      },
      compact: {
        height: 32,
        minHeight: 32,
        paddingTop: 0,
        paddingBottom: 0
      },
      "__unstable-large": {
        height: 40,
        minHeight: 40,
        paddingTop: 0,
        paddingBottom: 0
      }
    };
    if (!__next40pxDefaultSize) {
      sizes.default = sizes.compact;
    }
    const style = sizes[selectSize] || sizes.default;
    return /* @__PURE__ */ css(style, false ? "" : ";label:sizeStyles;", false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUErRVEiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9zZWxlY3QtY29udHJvbC9zdHlsZXMvc2VsZWN0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RDb250cm9sUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlciBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL2lucHV0LXN1ZmZpeC13cmFwcGVyJztcbmltcG9ydCB7IGZvbnRTaXplU3R5bGVzIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbnRlcmZhY2UgU2VsZWN0UHJvcHNcblx0ZXh0ZW5kcyBQaWNrPFxuXHRcdFNlbGVjdENvbnRyb2xQcm9wcyxcblx0XHQnX19uZXh0NDBweERlZmF1bHRTaXplJyB8ICdkaXNhYmxlZCcgfCAnbXVsdGlwbGUnXG5cdD4ge1xuXHQvLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG5cdC8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cblx0c2VsZWN0U2l6ZT86IFNlbGVjdENvbnRyb2xQcm9wc1sgJ3NpemUnIF07XG59XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0aWYgKCBtdWx0aXBsZSApIHtcblx0XHQvLyBXaGVuIGBtdWx0aXBsZWAsIGp1c3QgdXNlIHRoZSBuYXRpdmUgYnJvd3NlciBzdHlsZXNcblx0XHQvLyB3aXRob3V0IHNldHRpbmcgZXhwbGljaXQgaGVpZ2h0LlxuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdG1pbkhlaWdodDogMjQsXG5cdFx0XHRwYWRkaW5nVG9wOiAwLFxuXHRcdFx0cGFkZGluZ0JvdHRvbTogMCxcblx0XHR9LFxuXHRcdGNvbXBhY3Q6IHtcblx0XHRcdGhlaWdodDogMzIsXG5cdFx0XHRtaW5IZWlnaHQ6IDMyLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0fTtcblxuXHRpZiAoICEgX19uZXh0NDBweERlZmF1bHRTaXplICkge1xuXHRcdHNpemVzLmRlZmF1bHQgPSBzaXplcy5jb21wYWN0O1xuXHR9XG5cblx0Y29uc3Qgc3R5bGUgPSBzaXplc1sgc2VsZWN0U2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG5cblx0cmV0dXJuIGNzcyggc3R5bGUgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGV2cm9uSWNvblNpemUgPSAxODtcblxuY29uc3Qgc2l6ZVBhZGRpbmdzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3QgcGFkZGluZyA9IHtcblx0XHRkZWZhdWx0OiAxNixcblx0XHRzbWFsbDogOCxcblx0XHRjb21wYWN0OiA4LFxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogMTYsXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSApIHtcblx0XHRwYWRkaW5nLmRlZmF1bHQgPSBwYWRkaW5nLmNvbXBhY3Q7XG5cdH1cblxuXHRjb25zdCBzZWxlY3RlZFBhZGRpbmcgPSBwYWRkaW5nWyBzZWxlY3RTaXplIF0gfHwgcGFkZGluZy5kZWZhdWx0O1xuXG5cdHJldHVybiBydGwoIHtcblx0XHRwYWRkaW5nTGVmdDogc2VsZWN0ZWRQYWRkaW5nLFxuXHRcdHBhZGRpbmdSaWdodDogc2VsZWN0ZWRQYWRkaW5nICsgY2hldnJvbkljb25TaXplLFxuXHRcdC4uLiggbXVsdGlwbGVcblx0XHRcdD8ge1xuXHRcdFx0XHRcdHBhZGRpbmdUb3A6IHNlbGVjdGVkUGFkZGluZyxcblx0XHRcdFx0XHRwYWRkaW5nQm90dG9tOiBzZWxlY3RlZFBhZGRpbmcsXG5cdFx0XHQgIH1cblx0XHRcdDoge30gKSxcblx0fSApO1xufTtcblxuY29uc3Qgb3ZlcmZsb3dTdHlsZXMgPSAoIHsgbXVsdGlwbGUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0b3ZlcmZsb3c6IG11bHRpcGxlID8gJ2F1dG8nIDogJ2hpZGRlbicsXG5cdH07XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfTtcblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9O1xuXHRcdCR7IHNpemVTdHlsZXMgfTtcblx0XHQkeyBzaXplUGFkZGluZ3MgfTtcblx0XHQkeyBvdmVyZmxvd1N0eWxlcyB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEb3duQXJyb3dXcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAtMSApIH07IC8vIG9wdGljYWxseSBhZGp1c3QgdGhlIGljb25cblx0bGluZS1oZWlnaHQ6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlcldpdGhDbGlja1Rocm91Z2ggPSBzdHlsZWQoXG5cdElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXJcbilgXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0JHsgcnRsKCB7IHJpZ2h0OiAwIH0gKSB9XG5gO1xuIl19 */");
  };
  var chevronIconSize = 18;
  var sizePaddings = ({
    __next40pxDefaultSize,
    multiple,
    selectSize = "default"
  }) => {
    const padding = {
      default: 16,
      small: 8,
      compact: 8,
      "__unstable-large": 16
    };
    if (!__next40pxDefaultSize) {
      padding.default = padding.compact;
    }
    const selectedPadding = padding[selectSize] || padding.default;
    return rtl({
      paddingLeft: selectedPadding,
      paddingRight: selectedPadding + chevronIconSize,
      ...multiple ? {
        paddingTop: selectedPadding,
        paddingBottom: selectedPadding
      } : {}
    });
  };
  var overflowStyles = ({
    multiple
  }) => {
    return {
      overflow: multiple ? "auto" : "hidden"
    };
  };
  var Select = /* @__PURE__ */ createStyled("select", false ? {
    target: "e1mv6sxx2"
  } : {
    target: "e1mv6sxx2",
    label: "Select"
  })("&&&{appearance:none;background:transparent;box-sizing:border-box;border:none;box-shadow:none!important;color:", COLORS.gray[900], ";display:block;font-family:inherit;margin:0;width:100%;max-width:none;cursor:pointer;white-space:nowrap;text-overflow:ellipsis;", disabledStyles2, ";", fontSizeStyles, ";", sizeStyles2, ";", sizePaddings, ";", overflowStyles, ";}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEySGtEIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0Q29udHJvbFByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXIgZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9pbnB1dC1zdWZmaXgtd3JhcHBlcic7XG5pbXBvcnQgeyBmb250U2l6ZVN0eWxlcyB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcblxuaW50ZXJmYWNlIFNlbGVjdFByb3BzXG5cdGV4dGVuZHMgUGljazxcblx0XHRTZWxlY3RDb250cm9sUHJvcHMsXG5cdFx0J19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgfCAnZGlzYWJsZWQnIHwgJ211bHRpcGxlJ1xuXHQ+IHtcblx0Ly8gVXNpbmcgYHNlbGVjdFNpemVgIGluc3RlYWQgb2YgYHNpemVgIHRvIGF2b2lkIGEgdHlwZSBjb25mbGljdCB3aXRoIHRoZVxuXHQvLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG5cdHNlbGVjdFNpemU/OiBTZWxlY3RDb250cm9sUHJvcHNbICdzaXplJyBdO1xufVxuXG5jb25zdCBkaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0aWYgKCAhIGRpc2FibGVkICkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogQ09MT1JTLnVpLnRleHREaXNhYmxlZCxcblx0fSApO1xufTtcblxuY29uc3Qgc2l6ZVN0eWxlcyA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG5cdG11bHRpcGxlLFxuXHRzZWxlY3RTaXplID0gJ2RlZmF1bHQnLFxufTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGlmICggbXVsdGlwbGUgKSB7XG5cdFx0Ly8gV2hlbiBgbXVsdGlwbGVgLCBqdXN0IHVzZSB0aGUgbmF0aXZlIGJyb3dzZXIgc3R5bGVzXG5cdFx0Ly8gd2l0aG91dCBzZXR0aW5nIGV4cGxpY2l0IGhlaWdodC5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBzaXplcyA9IHtcblx0XHRkZWZhdWx0OiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHRjb21wYWN0OiB7XG5cdFx0XHRoZWlnaHQ6IDMyLFxuXHRcdFx0bWluSGVpZ2h0OiAzMixcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSApIHtcblx0XHRzaXplcy5kZWZhdWx0ID0gc2l6ZXMuY29tcGFjdDtcblx0fVxuXG5cdGNvbnN0IHN0eWxlID0gc2l6ZXNbIHNlbGVjdFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5leHBvcnQgY29uc3QgY2hldnJvbkljb25TaXplID0gMTg7XG5cbmNvbnN0IHNpemVQYWRkaW5ncyA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG5cdG11bHRpcGxlLFxuXHRzZWxlY3RTaXplID0gJ2RlZmF1bHQnLFxufTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHBhZGRpbmcgPSB7XG5cdFx0ZGVmYXVsdDogMTYsXG5cdFx0c21hbGw6IDgsXG5cdFx0Y29tcGFjdDogOCxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IDE2LFxuXHR9O1xuXG5cdGlmICggISBfX25leHQ0MHB4RGVmYXVsdFNpemUgKSB7XG5cdFx0cGFkZGluZy5kZWZhdWx0ID0gcGFkZGluZy5jb21wYWN0O1xuXHR9XG5cblx0Y29uc3Qgc2VsZWN0ZWRQYWRkaW5nID0gcGFkZGluZ1sgc2VsZWN0U2l6ZSBdIHx8IHBhZGRpbmcuZGVmYXVsdDtcblxuXHRyZXR1cm4gcnRsKCB7XG5cdFx0cGFkZGluZ0xlZnQ6IHNlbGVjdGVkUGFkZGluZyxcblx0XHRwYWRkaW5nUmlnaHQ6IHNlbGVjdGVkUGFkZGluZyArIGNoZXZyb25JY29uU2l6ZSxcblx0XHQuLi4oIG11bHRpcGxlXG5cdFx0XHQ/IHtcblx0XHRcdFx0XHRwYWRkaW5nVG9wOiBzZWxlY3RlZFBhZGRpbmcsXG5cdFx0XHRcdFx0cGFkZGluZ0JvdHRvbTogc2VsZWN0ZWRQYWRkaW5nLFxuXHRcdFx0ICB9XG5cdFx0XHQ6IHt9ICksXG5cdH0gKTtcbn07XG5cbmNvbnN0IG92ZXJmbG93U3R5bGVzID0gKCB7IG11bHRpcGxlIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdG92ZXJmbG93OiBtdWx0aXBsZSA/ICdhdXRvJyA6ICdoaWRkZW4nLFxuXHR9O1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgU2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogbm9uZTtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH07XG5cdFx0JHsgZm9udFNpemVTdHlsZXMgfTtcblx0XHQkeyBzaXplU3R5bGVzIH07XG5cdFx0JHsgc2l6ZVBhZGRpbmdzIH07XG5cdFx0JHsgb3ZlcmZsb3dTdHlsZXMgfVxuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgRG93bkFycm93V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggLTEgKSB9OyAvLyBvcHRpY2FsbHkgYWRqdXN0IHRoZSBpY29uXG5cdGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXJXaXRoQ2xpY2tUaHJvdWdoID0gc3R5bGVkKFxuXHRJbnB1dENvbnRyb2xTdWZmaXhXcmFwcGVyXG4pYFxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdCR7IHJ0bCggeyByaWdodDogMCB9ICkgfVxuYDtcbiJdfQ== */"));
  var DownArrowWrapper = /* @__PURE__ */ createStyled("div", false ? {
    target: "e1mv6sxx1"
  } : {
    target: "e1mv6sxx1",
    label: "DownArrowWrapper"
  })("margin-inline-end:", space(-1), ";line-height:0;" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFvSjBDIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3V0aWxzL3NwYWNlJztcbmltcG9ydCB0eXBlIHsgU2VsZWN0Q29udHJvbFByb3BzIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXIgZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9pbnB1dC1zdWZmaXgtd3JhcHBlcic7XG5pbXBvcnQgeyBmb250U2l6ZVN0eWxlcyB9IGZyb20gJy4uLy4uL2lucHV0LWNvbnRyb2wvc3R5bGVzL2lucHV0LWNvbnRyb2wtc3R5bGVzJztcblxuaW50ZXJmYWNlIFNlbGVjdFByb3BzXG5cdGV4dGVuZHMgUGljazxcblx0XHRTZWxlY3RDb250cm9sUHJvcHMsXG5cdFx0J19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgfCAnZGlzYWJsZWQnIHwgJ211bHRpcGxlJ1xuXHQ+IHtcblx0Ly8gVXNpbmcgYHNlbGVjdFNpemVgIGluc3RlYWQgb2YgYHNpemVgIHRvIGF2b2lkIGEgdHlwZSBjb25mbGljdCB3aXRoIHRoZVxuXHQvLyBgc2l6ZWAgSFRNTCBhdHRyaWJ1dGUgb2YgdGhlIGBzZWxlY3RgIGVsZW1lbnQuXG5cdHNlbGVjdFNpemU/OiBTZWxlY3RDb250cm9sUHJvcHNbICdzaXplJyBdO1xufVxuXG5jb25zdCBkaXNhYmxlZFN0eWxlcyA9ICggeyBkaXNhYmxlZCB9OiBTZWxlY3RQcm9wcyApID0+IHtcblx0aWYgKCAhIGRpc2FibGVkICkge1xuXHRcdHJldHVybiAnJztcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogQ09MT1JTLnVpLnRleHREaXNhYmxlZCxcblx0fSApO1xufTtcblxuY29uc3Qgc2l6ZVN0eWxlcyA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG5cdG11bHRpcGxlLFxuXHRzZWxlY3RTaXplID0gJ2RlZmF1bHQnLFxufTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGlmICggbXVsdGlwbGUgKSB7XG5cdFx0Ly8gV2hlbiBgbXVsdGlwbGVgLCBqdXN0IHVzZSB0aGUgbmF0aXZlIGJyb3dzZXIgc3R5bGVzXG5cdFx0Ly8gd2l0aG91dCBzZXR0aW5nIGV4cGxpY2l0IGhlaWdodC5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRjb25zdCBzaXplcyA9IHtcblx0XHRkZWZhdWx0OiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdFx0c21hbGw6IHtcblx0XHRcdGhlaWdodDogMjQsXG5cdFx0XHRtaW5IZWlnaHQ6IDI0LFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHRjb21wYWN0OiB7XG5cdFx0XHRoZWlnaHQ6IDMyLFxuXHRcdFx0bWluSGVpZ2h0OiAzMixcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdFx0J19fdW5zdGFibGUtbGFyZ2UnOiB7XG5cdFx0XHRoZWlnaHQ6IDQwLFxuXHRcdFx0bWluSGVpZ2h0OiA0MCxcblx0XHRcdHBhZGRpbmdUb3A6IDAsXG5cdFx0XHRwYWRkaW5nQm90dG9tOiAwLFxuXHRcdH0sXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSApIHtcblx0XHRzaXplcy5kZWZhdWx0ID0gc2l6ZXMuY29tcGFjdDtcblx0fVxuXG5cdGNvbnN0IHN0eWxlID0gc2l6ZXNbIHNlbGVjdFNpemUgXSB8fCBzaXplcy5kZWZhdWx0O1xuXG5cdHJldHVybiBjc3MoIHN0eWxlICk7XG59O1xuXG5leHBvcnQgY29uc3QgY2hldnJvbkljb25TaXplID0gMTg7XG5cbmNvbnN0IHNpemVQYWRkaW5ncyA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG5cdG11bHRpcGxlLFxuXHRzZWxlY3RTaXplID0gJ2RlZmF1bHQnLFxufTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdGNvbnN0IHBhZGRpbmcgPSB7XG5cdFx0ZGVmYXVsdDogMTYsXG5cdFx0c21hbGw6IDgsXG5cdFx0Y29tcGFjdDogOCxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IDE2LFxuXHR9O1xuXG5cdGlmICggISBfX25leHQ0MHB4RGVmYXVsdFNpemUgKSB7XG5cdFx0cGFkZGluZy5kZWZhdWx0ID0gcGFkZGluZy5jb21wYWN0O1xuXHR9XG5cblx0Y29uc3Qgc2VsZWN0ZWRQYWRkaW5nID0gcGFkZGluZ1sgc2VsZWN0U2l6ZSBdIHx8IHBhZGRpbmcuZGVmYXVsdDtcblxuXHRyZXR1cm4gcnRsKCB7XG5cdFx0cGFkZGluZ0xlZnQ6IHNlbGVjdGVkUGFkZGluZyxcblx0XHRwYWRkaW5nUmlnaHQ6IHNlbGVjdGVkUGFkZGluZyArIGNoZXZyb25JY29uU2l6ZSxcblx0XHQuLi4oIG11bHRpcGxlXG5cdFx0XHQ/IHtcblx0XHRcdFx0XHRwYWRkaW5nVG9wOiBzZWxlY3RlZFBhZGRpbmcsXG5cdFx0XHRcdFx0cGFkZGluZ0JvdHRvbTogc2VsZWN0ZWRQYWRkaW5nLFxuXHRcdFx0ICB9XG5cdFx0XHQ6IHt9ICksXG5cdH0gKTtcbn07XG5cbmNvbnN0IG92ZXJmbG93U3R5bGVzID0gKCB7IG11bHRpcGxlIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRyZXR1cm4ge1xuXHRcdG92ZXJmbG93OiBtdWx0aXBsZSA/ICdhdXRvJyA6ICdoaWRkZW4nLFxuXHR9O1xufTtcblxuLy8gVE9ETzogUmVzb2x2ZSBuZWVkIHRvIHVzZSAmJiYgdG8gaW5jcmVhc2Ugc3BlY2lmaWNpdHlcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Xb3JkUHJlc3MvZ3V0ZW5iZXJnL2lzc3Vlcy8xODQ4M1xuXG5leHBvcnQgY29uc3QgU2VsZWN0ID0gc3R5bGVkLnNlbGVjdDwgU2VsZWN0UHJvcHMgPmBcblx0JiYmIHtcblx0XHRhcHBlYXJhbmNlOiBub25lO1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDtcblx0XHRjb2xvcjogJHsgQ09MT1JTLmdyYXlbIDkwMCBdIH07XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdFx0Zm9udC1mYW1pbHk6IGluaGVyaXQ7XG5cdFx0bWFyZ2luOiAwO1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogbm9uZTtcblx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblx0XHR0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcblxuXHRcdCR7IGRpc2FibGVkU3R5bGVzIH07XG5cdFx0JHsgZm9udFNpemVTdHlsZXMgfTtcblx0XHQkeyBzaXplU3R5bGVzIH07XG5cdFx0JHsgc2l6ZVBhZGRpbmdzIH07XG5cdFx0JHsgb3ZlcmZsb3dTdHlsZXMgfVxuXHR9XG5gO1xuXG5leHBvcnQgY29uc3QgRG93bkFycm93V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdG1hcmdpbi1pbmxpbmUtZW5kOiAkeyBzcGFjZSggLTEgKSB9OyAvLyBvcHRpY2FsbHkgYWRqdXN0IHRoZSBpY29uXG5cdGxpbmUtaGVpZ2h0OiAwO1xuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXJXaXRoQ2xpY2tUaHJvdWdoID0gc3R5bGVkKFxuXHRJbnB1dENvbnRyb2xTdWZmaXhXcmFwcGVyXG4pYFxuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdCR7IHJ0bCggeyByaWdodDogMCB9ICkgfVxuYDtcbiJdfQ== */"));
  var InputControlSuffixWrapperWithClickThrough = /* @__PURE__ */ createStyled(input_suffix_wrapper_default, false ? {
    target: "e1mv6sxx0"
  } : {
    target: "e1mv6sxx0",
    label: "InputControlSuffixWrapperWithClickThrough"
  })("position:absolute;pointer-events:none;", rtl({
    right: 0
  }), ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvc2VsZWN0LWNvbnRyb2wvc3R5bGVzL3NlbGVjdC1jb250cm9sLXN0eWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEySkMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy9zZWxlY3QtY29udHJvbC9zdHlsZXMvc2VsZWN0LWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBDT0xPUlMsIHJ0bCB9IGZyb20gJy4uLy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IHR5cGUgeyBTZWxlY3RDb250cm9sUHJvcHMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlciBmcm9tICcuLi8uLi9pbnB1dC1jb250cm9sL2lucHV0LXN1ZmZpeC13cmFwcGVyJztcbmltcG9ydCB7IGZvbnRTaXplU3R5bGVzIH0gZnJvbSAnLi4vLi4vaW5wdXQtY29udHJvbC9zdHlsZXMvaW5wdXQtY29udHJvbC1zdHlsZXMnO1xuXG5pbnRlcmZhY2UgU2VsZWN0UHJvcHNcblx0ZXh0ZW5kcyBQaWNrPFxuXHRcdFNlbGVjdENvbnRyb2xQcm9wcyxcblx0XHQnX19uZXh0NDBweERlZmF1bHRTaXplJyB8ICdkaXNhYmxlZCcgfCAnbXVsdGlwbGUnXG5cdD4ge1xuXHQvLyBVc2luZyBgc2VsZWN0U2l6ZWAgaW5zdGVhZCBvZiBgc2l6ZWAgdG8gYXZvaWQgYSB0eXBlIGNvbmZsaWN0IHdpdGggdGhlXG5cdC8vIGBzaXplYCBIVE1MIGF0dHJpYnV0ZSBvZiB0aGUgYHNlbGVjdGAgZWxlbWVudC5cblx0c2VsZWN0U2l6ZT86IFNlbGVjdENvbnRyb2xQcm9wc1sgJ3NpemUnIF07XG59XG5cbmNvbnN0IGRpc2FibGVkU3R5bGVzID0gKCB7IGRpc2FibGVkIH06IFNlbGVjdFByb3BzICkgPT4ge1xuXHRpZiAoICEgZGlzYWJsZWQgKSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0cmV0dXJuIGNzcygge1xuXHRcdGNvbG9yOiBDT0xPUlMudWkudGV4dERpc2FibGVkLFxuXHR9ICk7XG59O1xuXG5jb25zdCBzaXplU3R5bGVzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0aWYgKCBtdWx0aXBsZSApIHtcblx0XHQvLyBXaGVuIGBtdWx0aXBsZWAsIGp1c3QgdXNlIHRoZSBuYXRpdmUgYnJvd3NlciBzdHlsZXNcblx0XHQvLyB3aXRob3V0IHNldHRpbmcgZXhwbGljaXQgaGVpZ2h0LlxuXHRcdHJldHVybjtcblx0fVxuXG5cdGNvbnN0IHNpemVzID0ge1xuXHRcdGRlZmF1bHQ6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHRzbWFsbDoge1xuXHRcdFx0aGVpZ2h0OiAyNCxcblx0XHRcdG1pbkhlaWdodDogMjQsXG5cdFx0XHRwYWRkaW5nVG9wOiAwLFxuXHRcdFx0cGFkZGluZ0JvdHRvbTogMCxcblx0XHR9LFxuXHRcdGNvbXBhY3Q6IHtcblx0XHRcdGhlaWdodDogMzIsXG5cdFx0XHRtaW5IZWlnaHQ6IDMyLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0XHQnX191bnN0YWJsZS1sYXJnZSc6IHtcblx0XHRcdGhlaWdodDogNDAsXG5cdFx0XHRtaW5IZWlnaHQ6IDQwLFxuXHRcdFx0cGFkZGluZ1RvcDogMCxcblx0XHRcdHBhZGRpbmdCb3R0b206IDAsXG5cdFx0fSxcblx0fTtcblxuXHRpZiAoICEgX19uZXh0NDBweERlZmF1bHRTaXplICkge1xuXHRcdHNpemVzLmRlZmF1bHQgPSBzaXplcy5jb21wYWN0O1xuXHR9XG5cblx0Y29uc3Qgc3R5bGUgPSBzaXplc1sgc2VsZWN0U2l6ZSBdIHx8IHNpemVzLmRlZmF1bHQ7XG5cblx0cmV0dXJuIGNzcyggc3R5bGUgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGV2cm9uSWNvblNpemUgPSAxODtcblxuY29uc3Qgc2l6ZVBhZGRpbmdzID0gKCB7XG5cdF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSxcblx0bXVsdGlwbGUsXG5cdHNlbGVjdFNpemUgPSAnZGVmYXVsdCcsXG59OiBTZWxlY3RQcm9wcyApID0+IHtcblx0Y29uc3QgcGFkZGluZyA9IHtcblx0XHRkZWZhdWx0OiAxNixcblx0XHRzbWFsbDogOCxcblx0XHRjb21wYWN0OiA4LFxuXHRcdCdfX3Vuc3RhYmxlLWxhcmdlJzogMTYsXG5cdH07XG5cblx0aWYgKCAhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSApIHtcblx0XHRwYWRkaW5nLmRlZmF1bHQgPSBwYWRkaW5nLmNvbXBhY3Q7XG5cdH1cblxuXHRjb25zdCBzZWxlY3RlZFBhZGRpbmcgPSBwYWRkaW5nWyBzZWxlY3RTaXplIF0gfHwgcGFkZGluZy5kZWZhdWx0O1xuXG5cdHJldHVybiBydGwoIHtcblx0XHRwYWRkaW5nTGVmdDogc2VsZWN0ZWRQYWRkaW5nLFxuXHRcdHBhZGRpbmdSaWdodDogc2VsZWN0ZWRQYWRkaW5nICsgY2hldnJvbkljb25TaXplLFxuXHRcdC4uLiggbXVsdGlwbGVcblx0XHRcdD8ge1xuXHRcdFx0XHRcdHBhZGRpbmdUb3A6IHNlbGVjdGVkUGFkZGluZyxcblx0XHRcdFx0XHRwYWRkaW5nQm90dG9tOiBzZWxlY3RlZFBhZGRpbmcsXG5cdFx0XHQgIH1cblx0XHRcdDoge30gKSxcblx0fSApO1xufTtcblxuY29uc3Qgb3ZlcmZsb3dTdHlsZXMgPSAoIHsgbXVsdGlwbGUgfTogU2VsZWN0UHJvcHMgKSA9PiB7XG5cdHJldHVybiB7XG5cdFx0b3ZlcmZsb3c6IG11bHRpcGxlID8gJ2F1dG8nIDogJ2hpZGRlbicsXG5cdH07XG59O1xuXG4vLyBUT0RPOiBSZXNvbHZlIG5lZWQgdG8gdXNlICYmJiB0byBpbmNyZWFzZSBzcGVjaWZpY2l0eVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvaXNzdWVzLzE4NDgzXG5cbmV4cG9ydCBjb25zdCBTZWxlY3QgPSBzdHlsZWQuc2VsZWN0PCBTZWxlY3RQcm9wcyA+YFxuXHQmJiYge1xuXHRcdGFwcGVhcmFuY2U6IG5vbmU7XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0XHRib3JkZXI6IG5vbmU7XG5cdFx0Ym94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50O1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgOTAwIF0gfTtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0XHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0XHRtYXJnaW46IDA7XG5cdFx0d2lkdGg6IDEwMCU7XG5cdFx0bWF4LXdpZHRoOiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHR3aGl0ZS1zcGFjZTogbm93cmFwO1xuXHRcdHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuXG5cdFx0JHsgZGlzYWJsZWRTdHlsZXMgfTtcblx0XHQkeyBmb250U2l6ZVN0eWxlcyB9O1xuXHRcdCR7IHNpemVTdHlsZXMgfTtcblx0XHQkeyBzaXplUGFkZGluZ3MgfTtcblx0XHQkeyBvdmVyZmxvd1N0eWxlcyB9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEb3duQXJyb3dXcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAtMSApIH07IC8vIG9wdGljYWxseSBhZGp1c3QgdGhlIGljb25cblx0bGluZS1oZWlnaHQ6IDA7XG5gO1xuXG5leHBvcnQgY29uc3QgSW5wdXRDb250cm9sU3VmZml4V3JhcHBlcldpdGhDbGlja1Rocm91Z2ggPSBzdHlsZWQoXG5cdElucHV0Q29udHJvbFN1ZmZpeFdyYXBwZXJcbilgXG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0JHsgcnRsKCB7IHJpZ2h0OiAwIH0gKSB9XG5gO1xuIl19 */"));

  // node_modules/@wordpress/components/build-module/select-control/chevron-down.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var SelectControlChevronDown = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(InputControlSuffixWrapperWithClickThrough, {
      children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(DownArrowWrapper, {
        children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(icon_default, {
          icon: chevron_down_default,
          size: chevronIconSize
        })
      })
    });
  };
  var chevron_down_default2 = SelectControlChevronDown;

  // node_modules/@wordpress/components/build-module/navigable-container/container.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var noop4 = () => {
  };
  var MENU_ITEM_ROLES = ["menuitem", "menuitemradio", "menuitemcheckbox"];
  function cycleValue(value, total, offset5) {
    const nextValue = value + offset5;
    if (nextValue < 0) {
      return total + nextValue;
    } else if (nextValue >= total) {
      return nextValue - total;
    }
    return nextValue;
  }
  var NavigableContainer = class extends import_react.Component {
    constructor(args) {
      super(args);
      this.onKeyDown = this.onKeyDown.bind(this);
      this.bindContainer = this.bindContainer.bind(this);
      this.getFocusableContext = this.getFocusableContext.bind(this);
      this.getFocusableIndex = this.getFocusableIndex.bind(this);
    }
    componentDidMount() {
      if (!this.container) {
        return;
      }
      this.container.addEventListener("keydown", this.onKeyDown);
    }
    componentWillUnmount() {
      if (!this.container) {
        return;
      }
      this.container.removeEventListener("keydown", this.onKeyDown);
    }
    bindContainer(ref) {
      const {
        forwardedRef
      } = this.props;
      this.container = ref;
      if (typeof forwardedRef === "function") {
        forwardedRef(ref);
      } else if (forwardedRef && "current" in forwardedRef) {
        forwardedRef.current = ref;
      }
    }
    getFocusableContext(target) {
      if (!this.container) {
        return null;
      }
      const {
        onlyBrowserTabstops
      } = this.props;
      const finder = onlyBrowserTabstops ? focus.tabbable : focus.focusable;
      const focusables = finder.find(this.container);
      const index2 = this.getFocusableIndex(focusables, target);
      if (index2 > -1 && target) {
        return {
          index: index2,
          target,
          focusables
        };
      }
      return null;
    }
    getFocusableIndex(focusables, target) {
      return focusables.indexOf(target);
    }
    onKeyDown(event) {
      if (this.props.onKeyDown) {
        this.props.onKeyDown(event);
      }
      const {
        getFocusableContext
      } = this;
      const {
        cycle = true,
        eventToOffset,
        onNavigate = noop4,
        stopNavigationEvents
      } = this.props;
      const offset5 = eventToOffset(event);
      if (offset5 !== void 0 && stopNavigationEvents) {
        event.stopImmediatePropagation();
        const targetRole = event.target?.getAttribute("role");
        const targetHasMenuItemRole = !!targetRole && MENU_ITEM_ROLES.includes(targetRole);
        if (targetHasMenuItemRole) {
          event.preventDefault();
        }
      }
      if (!offset5) {
        return;
      }
      const activeElement = event.target?.ownerDocument?.activeElement;
      if (!activeElement) {
        return;
      }
      const context2 = getFocusableContext(activeElement);
      if (!context2) {
        return;
      }
      const {
        index: index2,
        focusables
      } = context2;
      const nextIndex = cycle ? cycleValue(index2, focusables.length, offset5) : index2 + offset5;
      if (nextIndex >= 0 && nextIndex < focusables.length) {
        focusables[nextIndex].focus();
        onNavigate(nextIndex, focusables[nextIndex]);
        if (event.code === "Tab") {
          event.preventDefault();
        }
      }
    }
    render() {
      const {
        children,
        stopNavigationEvents,
        eventToOffset,
        onNavigate,
        onKeyDown,
        cycle,
        onlyBrowserTabstops,
        forwardedRef,
        ...restProps
      } = this.props;
      return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)("div", {
        ref: this.bindContainer,
        ...restProps,
        children
      });
    }
  };
  var forwardedNavigableContainer = (props, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(NavigableContainer, {
      ...props,
      forwardedRef: ref
    });
  };
  forwardedNavigableContainer.displayName = "NavigableContainer";
  var container_default = (0, import_react.forwardRef)(forwardedNavigableContainer);

  // node_modules/@wordpress/components/build-module/navigable-container/menu.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  function UnforwardedNavigableMenu({
    role = "menu",
    orientation = "vertical",
    ...rest
  }, ref) {
    const eventToOffset = (evt) => {
      const {
        code
      } = evt;
      let next3 = ["ArrowDown"];
      let previous = ["ArrowUp"];
      if (orientation === "horizontal") {
        next3 = ["ArrowRight"];
        previous = ["ArrowLeft"];
      }
      if (orientation === "both") {
        next3 = ["ArrowRight", "ArrowDown"];
        previous = ["ArrowLeft", "ArrowUp"];
      }
      if (next3.includes(code)) {
        return 1;
      } else if (previous.includes(code)) {
        return -1;
      } else if (["ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"].includes(code)) {
        return 0;
      }
      return void 0;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(container_default, {
      ref,
      stopNavigationEvents: true,
      onlyBrowserTabstops: false,
      role,
      "aria-orientation": role !== "presentation" && (orientation === "vertical" || orientation === "horizontal") ? orientation : void 0,
      eventToOffset,
      ...rest
    });
  }
  var NavigableMenu = (0, import_react.forwardRef)(UnforwardedNavigableMenu);
  var menu_default2 = NavigableMenu;

  // node_modules/@wordpress/components/build-module/dropdown-menu/index.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  function mergeProps2(defaultProps2 = {}, props = {}) {
    const mergedProps = {
      ...defaultProps2,
      ...props
    };
    if (props.className && defaultProps2.className) {
      mergedProps.className = clsx_default(props.className, defaultProps2.className);
    }
    return mergedProps;
  }
  function isFunction2(maybeFunc) {
    return typeof maybeFunc === "function";
  }
  function UnconnectedDropdownMenu(dropdownMenuProps) {
    const {
      children,
      className,
      controls,
      icon = menu_default,
      label,
      popoverProps,
      toggleProps,
      menuProps,
      disableOpenOnArrowDown = false,
      text: text2,
      noIcons,
      open,
      defaultOpen,
      onToggle: onToggleProp,
      // Context
      variant
    } = useContextSystem(dropdownMenuProps, "DropdownMenu");
    if (!controls?.length && !isFunction2(children)) {
      return null;
    }
    let controlSets;
    if (controls?.length) {
      controlSets = controls;
      if (!Array.isArray(controlSets[0])) {
        controlSets = [controls];
      }
    }
    const mergedPopoverProps = mergeProps2({
      className: "components-dropdown-menu__popover",
      variant
    }, popoverProps);
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(dropdown_default, {
      className,
      popoverProps: mergedPopoverProps,
      renderToggle: ({
        isOpen,
        onToggle
      }) => {
        var _toggleProps$showTool;
        const openOnArrowDown = (event) => {
          if (disableOpenOnArrowDown) {
            return;
          }
          if (!isOpen && event.code === "ArrowDown") {
            event.preventDefault();
            onToggle();
          }
        };
        const {
          as: Toggle = button_default,
          ...restToggleProps
        } = toggleProps !== null && toggleProps !== void 0 ? toggleProps : {};
        const mergedToggleProps = mergeProps2({
          className: clsx_default("components-dropdown-menu__toggle", {
            "is-opened": isOpen
          })
        }, restToggleProps);
        return /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Toggle, {
          ...mergedToggleProps,
          icon,
          onClick: (event) => {
            onToggle();
            if (mergedToggleProps.onClick) {
              mergedToggleProps.onClick(event);
            }
          },
          onKeyDown: (event) => {
            openOnArrowDown(event);
            if (mergedToggleProps.onKeyDown) {
              mergedToggleProps.onKeyDown(event);
            }
          },
          "aria-haspopup": "true",
          "aria-expanded": isOpen,
          label,
          text: text2,
          showTooltip: (_toggleProps$showTool = toggleProps?.showTooltip) !== null && _toggleProps$showTool !== void 0 ? _toggleProps$showTool : true,
          children: mergedToggleProps.children
        });
      },
      renderContent: (props) => {
        const mergedMenuProps = mergeProps2({
          "aria-label": label,
          className: clsx_default("components-dropdown-menu__menu", {
            "no-icons": noIcons
          })
        }, menuProps);
        return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(menu_default2, {
          ...mergedMenuProps,
          role: "menu",
          children: [isFunction2(children) ? children(props) : null, controlSets?.flatMap((controlSet, indexOfSet) => controlSet.map((control, indexOfControl) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(button_default, {
            onClick: (event) => {
              event.stopPropagation();
              props.onClose();
              if (control.onClick) {
                control.onClick();
              }
            },
            className: clsx_default("components-dropdown-menu__menu-item", {
              "has-separator": indexOfSet > 0 && indexOfControl === 0,
              "is-active": control.isActive,
              "is-icon-only": !control.title
            }),
            icon: control.icon,
            label: control.label,
            "aria-checked": control.role === "menuitemcheckbox" || control.role === "menuitemradio" ? control.isActive : void 0,
            role: control.role === "menuitemcheckbox" || control.role === "menuitemradio" ? control.role : "menuitem",
            disabled: control.isDisabled,
            children: control.title
          }, [indexOfSet, indexOfControl].join())))]
        });
      },
      open,
      defaultOpen,
      onToggle: onToggleProp
    });
  }
  var DropdownMenu = contextConnectWithoutRef(UnconnectedDropdownMenu, "DropdownMenu");
  var dropdown_menu_default = DropdownMenu;

  // node_modules/downshift/dist/downshift.esm.js
  var import_prop_types = __toESM(require_prop_types());
  var import_react89 = __toESM(require_react());
  var import_react_is2 = __toESM(require_react_is4());

  // node_modules/compute-scroll-into-view/dist/index.mjs
  function t3(t4) {
    return "object" == typeof t4 && null != t4 && 1 === t4.nodeType;
  }
  function e2(t4, e3) {
    return (!e3 || "hidden" !== t4) && "visible" !== t4 && "clip" !== t4;
  }
  function n2(t4, n3) {
    if (t4.clientHeight < t4.scrollHeight || t4.clientWidth < t4.scrollWidth) {
      var r4 = getComputedStyle(t4, null);
      return e2(r4.overflowY, n3) || e2(r4.overflowX, n3) || function(t5) {
        var e3 = function(t6) {
          if (!t6.ownerDocument || !t6.ownerDocument.defaultView) return null;
          try {
            return t6.ownerDocument.defaultView.frameElement;
          } catch (t7) {
            return null;
          }
        }(t5);
        return !!e3 && (e3.clientHeight < t5.scrollHeight || e3.clientWidth < t5.scrollWidth);
      }(t4);
    }
    return false;
  }
  function r3(t4, e3, n3, r4, i3, o3, l2, d2) {
    return o3 < t4 && l2 > e3 || o3 > t4 && l2 < e3 ? 0 : o3 <= t4 && d2 <= n3 || l2 >= e3 && d2 >= n3 ? o3 - t4 - r4 : l2 > e3 && d2 < n3 || o3 < t4 && d2 > n3 ? l2 - e3 + i3 : 0;
  }
  var i2 = function(e3, i3) {
    var o3 = window, l2 = i3.scrollMode, d2 = i3.block, f2 = i3.inline, h2 = i3.boundary, u2 = i3.skipOverflowHiddenElements, s2 = "function" == typeof h2 ? h2 : function(t4) {
      return t4 !== h2;
    };
    if (!t3(e3)) throw new TypeError("Invalid target");
    for (var a2, c6, g2 = document.scrollingElement || document.documentElement, p2 = [], m2 = e3; t3(m2) && s2(m2); ) {
      if ((m2 = null == (c6 = (a2 = m2).parentElement) ? a2.getRootNode().host || null : c6) === g2) {
        p2.push(m2);
        break;
      }
      null != m2 && m2 === document.body && n2(m2) && !n2(document.documentElement) || null != m2 && n2(m2, u2) && p2.push(m2);
    }
    for (var w2 = o3.visualViewport ? o3.visualViewport.width : innerWidth, v2 = o3.visualViewport ? o3.visualViewport.height : innerHeight, W = window.scrollX || pageXOffset, H2 = window.scrollY || pageYOffset, b2 = e3.getBoundingClientRect(), y2 = b2.height, E = b2.width, M2 = b2.top, V = b2.right, x2 = b2.bottom, I = b2.left, C = "start" === d2 || "nearest" === d2 ? M2 : "end" === d2 ? x2 : M2 + y2 / 2, R = "center" === f2 ? I + E / 2 : "end" === f2 ? V : I, T = [], k2 = 0; k2 < p2.length; k2++) {
      var B = p2[k2], D = B.getBoundingClientRect(), O = D.height, X = D.width, Y = D.top, L = D.right, S2 = D.bottom, j2 = D.left;
      if ("if-needed" === l2 && M2 >= 0 && I >= 0 && x2 <= v2 && V <= w2 && M2 >= Y && x2 <= S2 && I >= j2 && V <= L) return T;
      var N2 = getComputedStyle(B), q = parseInt(N2.borderLeftWidth, 10), z = parseInt(N2.borderTopWidth, 10), A = parseInt(N2.borderRightWidth, 10), F = parseInt(N2.borderBottomWidth, 10), G = 0, J = 0, K = "offsetWidth" in B ? B.offsetWidth - B.clientWidth - q - A : 0, P = "offsetHeight" in B ? B.offsetHeight - B.clientHeight - z - F : 0, Q = "offsetWidth" in B ? 0 === B.offsetWidth ? 0 : X / B.offsetWidth : 0, U = "offsetHeight" in B ? 0 === B.offsetHeight ? 0 : O / B.offsetHeight : 0;
      if (g2 === B) G = "start" === d2 ? C : "end" === d2 ? C - v2 : "nearest" === d2 ? r3(H2, H2 + v2, v2, z, F, H2 + C, H2 + C + y2, y2) : C - v2 / 2, J = "start" === f2 ? R : "center" === f2 ? R - w2 / 2 : "end" === f2 ? R - w2 : r3(W, W + w2, w2, q, A, W + R, W + R + E, E), G = Math.max(0, G + H2), J = Math.max(0, J + W);
      else {
        G = "start" === d2 ? C - Y - z : "end" === d2 ? C - S2 + F + P : "nearest" === d2 ? r3(Y, S2, O, z, F + P, C, C + y2, y2) : C - (Y + O / 2) + P / 2, J = "start" === f2 ? R - j2 - q : "center" === f2 ? R - (j2 + X / 2) + K / 2 : "end" === f2 ? R - L + A + K : r3(j2, L, X, q, A + K, R, R + E, E);
        var Z = B.scrollLeft, $2 = B.scrollTop;
        C += $2 - (G = Math.max(0, Math.min($2 + G / U, B.scrollHeight - O / U + P))), R += Z - (J = Math.max(0, Math.min(Z + J / Q, B.scrollWidth - X / Q + K)));
      }
      T.push({ el: B, top: G, left: J });
    }
    return T;
  };

  // node_modules/downshift/dist/downshift.esm.js
  var idCounter = 0;
  function cbToCb(cb) {
    return typeof cb === "function" ? cb : noop5;
  }
  function noop5() {
  }
  function scrollIntoView(node2, menuNode) {
    if (!node2) {
      return;
    }
    const actions2 = i2(node2, {
      boundary: menuNode,
      block: "nearest",
      scrollMode: "if-needed"
    });
    actions2.forEach((_ref4) => {
      let {
        el,
        top,
        left
      } = _ref4;
      el.scrollTop = top;
      el.scrollLeft = left;
    });
  }
  function isOrContainsNode(parent, child, environment) {
    const result = parent === child || child instanceof environment.Node && parent.contains && parent.contains(child);
    return result;
  }
  function debounce2(fn, time2) {
    let timeoutId;
    function cancel() {
      if (timeoutId) {
        clearTimeout(timeoutId);
      }
    }
    function wrapper() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      cancel();
      timeoutId = setTimeout(() => {
        timeoutId = null;
        fn(...args);
      }, time2);
    }
    wrapper.cancel = cancel;
    return wrapper;
  }
  function callAllEventHandlers() {
    for (var _len2 = arguments.length, fns = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      fns[_key2] = arguments[_key2];
    }
    return function(event) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return fns.some((fn) => {
        if (fn) {
          fn(event, ...args);
        }
        return event.preventDownshiftDefault || event.hasOwnProperty("nativeEvent") && event.nativeEvent.preventDownshiftDefault;
      });
    };
  }
  function handleRefs() {
    for (var _len4 = arguments.length, refs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      refs[_key4] = arguments[_key4];
    }
    return (node2) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(node2);
        } else if (ref) {
          ref.current = node2;
        }
      });
    };
  }
  function generateId() {
    return String(idCounter++);
  }
  function getA11yStatusMessage$1(_ref22) {
    let {
      isOpen,
      resultCount,
      previousResultCount
    } = _ref22;
    if (!isOpen) {
      return "";
    }
    if (!resultCount) {
      return "No results are available.";
    }
    if (resultCount !== previousResultCount) {
      return `${resultCount} result${resultCount === 1 ? " is" : "s are"} available, use up and down arrow keys to navigate. Press Enter key to select.`;
    }
    return "";
  }
  function unwrapArray(arg, defaultValue2) {
    arg = Array.isArray(arg) ? (
      /* istanbul ignore next (preact) */
      arg[0]
    ) : arg;
    if (!arg && defaultValue2) {
      return defaultValue2;
    } else {
      return arg;
    }
  }
  function isDOMElement(element) {
    return typeof element.type === "string";
  }
  function getElementProps(element) {
    return element.props;
  }
  function requiredProp(fnName, propName) {
    console.error(`The property "${propName}" is required in "${fnName}"`);
  }
  var stateKeys = ["highlightedIndex", "inputValue", "isOpen", "selectedItem", "type"];
  function pickState(state) {
    if (state === void 0) {
      state = {};
    }
    const result = {};
    stateKeys.forEach((k2) => {
      if (state.hasOwnProperty(k2)) {
        result[k2] = state[k2];
      }
    });
    return result;
  }
  function getState(state, props) {
    return Object.keys(state).reduce((prevState, key) => {
      prevState[key] = isControlledProp(props, key) ? props[key] : state[key];
      return prevState;
    }, {});
  }
  function isControlledProp(props, key) {
    return props[key] !== void 0;
  }
  function normalizeArrowKey(event) {
    const {
      key,
      keyCode
    } = event;
    if (keyCode >= 37 && keyCode <= 40 && key.indexOf("Arrow") !== 0) {
      return `Arrow${key}`;
    }
    return key;
  }
  function isPlainObject3(obj) {
    return Object.prototype.toString.call(obj) === "[object Object]";
  }
  function getNextWrappingIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
    if (circular === void 0) {
      circular = true;
    }
    if (itemCount === 0) {
      return -1;
    }
    const itemsLastIndex = itemCount - 1;
    if (typeof baseIndex !== "number" || baseIndex < 0 || baseIndex >= itemCount) {
      baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1;
    }
    let newIndex = baseIndex + moveAmount;
    if (newIndex < 0) {
      newIndex = circular ? itemsLastIndex : 0;
    } else if (newIndex > itemsLastIndex) {
      newIndex = circular ? 0 : itemsLastIndex;
    }
    const nonDisabledNewIndex = getNextNonDisabledIndex(moveAmount, newIndex, itemCount, getItemNodeFromIndex, circular);
    if (nonDisabledNewIndex === -1) {
      return baseIndex >= itemCount ? -1 : baseIndex;
    }
    return nonDisabledNewIndex;
  }
  function getNextNonDisabledIndex(moveAmount, baseIndex, itemCount, getItemNodeFromIndex, circular) {
    const currentElementNode = getItemNodeFromIndex(baseIndex);
    if (!currentElementNode || !currentElementNode.hasAttribute("disabled")) {
      return baseIndex;
    }
    if (moveAmount > 0) {
      for (let index2 = baseIndex + 1; index2 < itemCount; index2++) {
        if (!getItemNodeFromIndex(index2).hasAttribute("disabled")) {
          return index2;
        }
      }
    } else {
      for (let index2 = baseIndex - 1; index2 >= 0; index2--) {
        if (!getItemNodeFromIndex(index2).hasAttribute("disabled")) {
          return index2;
        }
      }
    }
    if (circular) {
      return moveAmount > 0 ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false) : getNextNonDisabledIndex(-1, itemCount - 1, itemCount, getItemNodeFromIndex, false);
    }
    return -1;
  }
  function targetWithinDownshift(target, downshiftElements, environment, checkActiveElement) {
    if (checkActiveElement === void 0) {
      checkActiveElement = true;
    }
    return downshiftElements.some((contextNode) => contextNode && (isOrContainsNode(contextNode, target, environment) || checkActiveElement && isOrContainsNode(contextNode, environment.document.activeElement, environment)));
  }
  var validateControlledUnchanged = noop5;
  if (true) {
    validateControlledUnchanged = (state, prevProps, nextProps) => {
      const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`;
      Object.keys(state).forEach((propKey) => {
        if (prevProps[propKey] !== void 0 && nextProps[propKey] === void 0) {
          console.error(`downshift: A component has changed the controlled prop "${propKey}" to be uncontrolled. ${warningDescription}`);
        } else if (prevProps[propKey] === void 0 && nextProps[propKey] !== void 0) {
          console.error(`downshift: A component has changed the uncontrolled prop "${propKey}" to be controlled. ${warningDescription}`);
        }
      });
    };
  }
  var cleanupStatus = debounce2((documentProp) => {
    getStatusDiv(documentProp).textContent = "";
  }, 500);
  function setStatus(status, documentProp) {
    const div = getStatusDiv(documentProp);
    if (!status) {
      return;
    }
    div.textContent = status;
    cleanupStatus(documentProp);
  }
  function getStatusDiv(documentProp) {
    if (documentProp === void 0) {
      documentProp = document;
    }
    let statusDiv = documentProp.getElementById("a11y-status-message");
    if (statusDiv) {
      return statusDiv;
    }
    statusDiv = documentProp.createElement("div");
    statusDiv.setAttribute("id", "a11y-status-message");
    statusDiv.setAttribute("role", "status");
    statusDiv.setAttribute("aria-live", "polite");
    statusDiv.setAttribute("aria-relevant", "additions text");
    Object.assign(statusDiv.style, {
      border: "0",
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: "0",
      position: "absolute",
      width: "1px"
    });
    documentProp.body.appendChild(statusDiv);
    return statusDiv;
  }
  var unknown = true ? "__autocomplete_unknown__" : 0;
  var mouseUp = true ? "__autocomplete_mouseup__" : 1;
  var itemMouseEnter = true ? "__autocomplete_item_mouseenter__" : 2;
  var keyDownArrowUp = true ? "__autocomplete_keydown_arrow_up__" : 3;
  var keyDownArrowDown = true ? "__autocomplete_keydown_arrow_down__" : 4;
  var keyDownEscape = true ? "__autocomplete_keydown_escape__" : 5;
  var keyDownEnter = true ? "__autocomplete_keydown_enter__" : 6;
  var keyDownHome = true ? "__autocomplete_keydown_home__" : 7;
  var keyDownEnd = true ? "__autocomplete_keydown_end__" : 8;
  var clickItem = true ? "__autocomplete_click_item__" : 9;
  var blurInput = true ? "__autocomplete_blur_input__" : 10;
  var changeInput = true ? "__autocomplete_change_input__" : 11;
  var keyDownSpaceButton = true ? "__autocomplete_keydown_space_button__" : 12;
  var clickButton = true ? "__autocomplete_click_button__" : 13;
  var blurButton = true ? "__autocomplete_blur_button__" : 14;
  var controlledPropUpdatedSelectedItem = true ? "__autocomplete_controlled_prop_updated_selected_item__" : 15;
  var touchEnd = true ? "__autocomplete_touchend__" : 16;
  var stateChangeTypes$3 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    unknown,
    mouseUp,
    itemMouseEnter,
    keyDownArrowUp,
    keyDownArrowDown,
    keyDownEscape,
    keyDownEnter,
    keyDownHome,
    keyDownEnd,
    clickItem,
    blurInput,
    changeInput,
    keyDownSpaceButton,
    clickButton,
    blurButton,
    controlledPropUpdatedSelectedItem,
    touchEnd
  });
  var Downshift = /* @__PURE__ */ (() => {
    class Downshift2 extends import_react89.Component {
      constructor(_props) {
        var _this;
        super(_props);
        _this = this;
        this.id = this.props.id || `downshift-${generateId()}`;
        this.menuId = this.props.menuId || `${this.id}-menu`;
        this.labelId = this.props.labelId || `${this.id}-label`;
        this.inputId = this.props.inputId || `${this.id}-input`;
        this.getItemId = this.props.getItemId || ((index2) => `${this.id}-item-${index2}`);
        this.input = null;
        this.items = [];
        this.itemCount = null;
        this.previousResultCount = 0;
        this.timeoutIds = [];
        this.internalSetTimeout = (fn, time2) => {
          const id3 = setTimeout(() => {
            this.timeoutIds = this.timeoutIds.filter((i3) => i3 !== id3);
            fn();
          }, time2);
          this.timeoutIds.push(id3);
        };
        this.setItemCount = (count) => {
          this.itemCount = count;
        };
        this.unsetItemCount = () => {
          this.itemCount = null;
        };
        this.setHighlightedIndex = function(highlightedIndex, otherStateToSet) {
          if (highlightedIndex === void 0) {
            highlightedIndex = _this.props.defaultHighlightedIndex;
          }
          if (otherStateToSet === void 0) {
            otherStateToSet = {};
          }
          otherStateToSet = pickState(otherStateToSet);
          _this.internalSetState({
            highlightedIndex,
            ...otherStateToSet
          });
        };
        this.clearSelection = (cb) => {
          this.internalSetState({
            selectedItem: null,
            inputValue: "",
            highlightedIndex: this.props.defaultHighlightedIndex,
            isOpen: this.props.defaultIsOpen
          }, cb);
        };
        this.selectItem = (item, otherStateToSet, cb) => {
          otherStateToSet = pickState(otherStateToSet);
          this.internalSetState({
            isOpen: this.props.defaultIsOpen,
            highlightedIndex: this.props.defaultHighlightedIndex,
            selectedItem: item,
            inputValue: this.props.itemToString(item),
            ...otherStateToSet
          }, cb);
        };
        this.selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {
          const item = this.items[itemIndex];
          if (item == null) {
            return;
          }
          this.selectItem(item, otherStateToSet, cb);
        };
        this.selectHighlightedItem = (otherStateToSet, cb) => {
          return this.selectItemAtIndex(this.getState().highlightedIndex, otherStateToSet, cb);
        };
        this.internalSetState = (stateToSet, cb) => {
          let isItemSelected, onChangeArg;
          const onStateChangeArg = {};
          const isStateToSetFunction = typeof stateToSet === "function";
          if (!isStateToSetFunction && stateToSet.hasOwnProperty("inputValue")) {
            this.props.onInputValueChange(stateToSet.inputValue, {
              ...this.getStateAndHelpers(),
              ...stateToSet
            });
          }
          return this.setState((state) => {
            state = this.getState(state);
            let newStateToSet = isStateToSetFunction ? stateToSet(state) : stateToSet;
            newStateToSet = this.props.stateReducer(state, newStateToSet);
            isItemSelected = newStateToSet.hasOwnProperty("selectedItem");
            const nextState = {};
            if (isItemSelected && newStateToSet.selectedItem !== state.selectedItem) {
              onChangeArg = newStateToSet.selectedItem;
            }
            newStateToSet.type = newStateToSet.type || unknown;
            Object.keys(newStateToSet).forEach((key) => {
              if (state[key] !== newStateToSet[key]) {
                onStateChangeArg[key] = newStateToSet[key];
              }
              if (key === "type") {
                return;
              }
              newStateToSet[key];
              if (!isControlledProp(this.props, key)) {
                nextState[key] = newStateToSet[key];
              }
            });
            if (isStateToSetFunction && newStateToSet.hasOwnProperty("inputValue")) {
              this.props.onInputValueChange(newStateToSet.inputValue, {
                ...this.getStateAndHelpers(),
                ...newStateToSet
              });
            }
            return nextState;
          }, () => {
            cbToCb(cb)();
            const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1;
            if (hasMoreStateThanType) {
              this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers());
            }
            if (isItemSelected) {
              this.props.onSelect(stateToSet.selectedItem, this.getStateAndHelpers());
            }
            if (onChangeArg !== void 0) {
              this.props.onChange(onChangeArg, this.getStateAndHelpers());
            }
            this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers());
          });
        };
        this.rootRef = (node2) => this._rootNode = node2;
        this.getRootProps = function(_temp, _temp2) {
          let {
            refKey = "ref",
            ref,
            ...rest
          } = _temp === void 0 ? {} : _temp;
          let {
            suppressRefError = false
          } = _temp2 === void 0 ? {} : _temp2;
          _this.getRootProps.called = true;
          _this.getRootProps.refKey = refKey;
          _this.getRootProps.suppressRefError = suppressRefError;
          const {
            isOpen
          } = _this.getState();
          return {
            [refKey]: handleRefs(ref, _this.rootRef),
            role: "combobox",
            "aria-expanded": isOpen,
            "aria-haspopup": "listbox",
            "aria-owns": isOpen ? _this.menuId : null,
            "aria-labelledby": _this.labelId,
            ...rest
          };
        };
        this.keyDownHandlers = {
          ArrowDown(event) {
            event.preventDefault();
            if (this.getState().isOpen) {
              const amount = event.shiftKey ? 5 : 1;
              this.moveHighlightedIndex(amount, {
                type: keyDownArrowDown
              });
            } else {
              this.internalSetState({
                isOpen: true,
                type: keyDownArrowDown
              }, () => {
                const itemCount = this.getItemCount();
                if (itemCount > 0) {
                  const {
                    highlightedIndex
                  } = this.getState();
                  const nextHighlightedIndex = getNextWrappingIndex(1, highlightedIndex, itemCount, (index2) => this.getItemNodeFromIndex(index2));
                  this.setHighlightedIndex(nextHighlightedIndex, {
                    type: keyDownArrowDown
                  });
                }
              });
            }
          },
          ArrowUp(event) {
            event.preventDefault();
            if (this.getState().isOpen) {
              const amount = event.shiftKey ? -5 : -1;
              this.moveHighlightedIndex(amount, {
                type: keyDownArrowUp
              });
            } else {
              this.internalSetState({
                isOpen: true,
                type: keyDownArrowUp
              }, () => {
                const itemCount = this.getItemCount();
                if (itemCount > 0) {
                  const {
                    highlightedIndex
                  } = this.getState();
                  const nextHighlightedIndex = getNextWrappingIndex(-1, highlightedIndex, itemCount, (index2) => this.getItemNodeFromIndex(index2));
                  this.setHighlightedIndex(nextHighlightedIndex, {
                    type: keyDownArrowUp
                  });
                }
              });
            }
          },
          Enter(event) {
            if (event.which === 229) {
              return;
            }
            const {
              isOpen,
              highlightedIndex
            } = this.getState();
            if (isOpen && highlightedIndex != null) {
              event.preventDefault();
              const item = this.items[highlightedIndex];
              const itemNode = this.getItemNodeFromIndex(highlightedIndex);
              if (item == null || itemNode && itemNode.hasAttribute("disabled")) {
                return;
              }
              this.selectHighlightedItem({
                type: keyDownEnter
              });
            }
          },
          Escape(event) {
            event.preventDefault();
            this.reset({
              type: keyDownEscape,
              ...!this.state.isOpen && {
                selectedItem: null,
                inputValue: ""
              }
            });
          }
        };
        this.buttonKeyDownHandlers = {
          ...this.keyDownHandlers,
          " "(event) {
            event.preventDefault();
            this.toggleMenu({
              type: keyDownSpaceButton
            });
          }
        };
        this.inputKeyDownHandlers = {
          ...this.keyDownHandlers,
          Home(event) {
            const {
              isOpen
            } = this.getState();
            if (!isOpen) {
              return;
            }
            event.preventDefault();
            const itemCount = this.getItemCount();
            if (itemCount <= 0 || !isOpen) {
              return;
            }
            const newHighlightedIndex = getNextNonDisabledIndex(1, 0, itemCount, (index2) => this.getItemNodeFromIndex(index2), false);
            this.setHighlightedIndex(newHighlightedIndex, {
              type: keyDownHome
            });
          },
          End(event) {
            const {
              isOpen
            } = this.getState();
            if (!isOpen) {
              return;
            }
            event.preventDefault();
            const itemCount = this.getItemCount();
            if (itemCount <= 0 || !isOpen) {
              return;
            }
            const newHighlightedIndex = getNextNonDisabledIndex(-1, itemCount - 1, itemCount, (index2) => this.getItemNodeFromIndex(index2), false);
            this.setHighlightedIndex(newHighlightedIndex, {
              type: keyDownEnd
            });
          }
        };
        this.getToggleButtonProps = function(_temp3) {
          let {
            onClick,
            onPress,
            onKeyDown,
            onKeyUp,
            onBlur,
            ...rest
          } = _temp3 === void 0 ? {} : _temp3;
          const {
            isOpen
          } = _this.getState();
          const enabledEventHandlers = {
            onClick: callAllEventHandlers(onClick, _this.buttonHandleClick),
            onKeyDown: callAllEventHandlers(onKeyDown, _this.buttonHandleKeyDown),
            onKeyUp: callAllEventHandlers(onKeyUp, _this.buttonHandleKeyUp),
            onBlur: callAllEventHandlers(onBlur, _this.buttonHandleBlur)
          };
          const eventHandlers = rest.disabled ? {} : enabledEventHandlers;
          return {
            type: "button",
            role: "button",
            "aria-label": isOpen ? "close menu" : "open menu",
            "aria-haspopup": true,
            "data-toggle": true,
            ...eventHandlers,
            ...rest
          };
        };
        this.buttonHandleKeyUp = (event) => {
          event.preventDefault();
        };
        this.buttonHandleKeyDown = (event) => {
          const key = normalizeArrowKey(event);
          if (this.buttonKeyDownHandlers[key]) {
            this.buttonKeyDownHandlers[key].call(this, event);
          }
        };
        this.buttonHandleClick = (event) => {
          event.preventDefault();
          if (this.props.environment.document.activeElement === this.props.environment.document.body) {
            event.target.focus();
          }
          if (false) {
            this.toggleMenu({
              type: clickButton
            });
          } else {
            this.internalSetTimeout(() => this.toggleMenu({
              type: clickButton
            }));
          }
        };
        this.buttonHandleBlur = (event) => {
          const blurTarget = event.target;
          this.internalSetTimeout(() => {
            if (!this.isMouseDown && (this.props.environment.document.activeElement == null || this.props.environment.document.activeElement.id !== this.inputId) && this.props.environment.document.activeElement !== blurTarget) {
              this.reset({
                type: blurButton
              });
            }
          });
        };
        this.getLabelProps = (props) => {
          return {
            htmlFor: this.inputId,
            id: this.labelId,
            ...props
          };
        };
        this.getInputProps = function(_temp4) {
          let {
            onKeyDown,
            onBlur,
            onChange,
            onInput,
            onChangeText,
            ...rest
          } = _temp4 === void 0 ? {} : _temp4;
          let onChangeKey;
          let eventHandlers = {};
          {
            onChangeKey = "onChange";
          }
          const {
            inputValue,
            isOpen,
            highlightedIndex
          } = _this.getState();
          if (!rest.disabled) {
            eventHandlers = {
              [onChangeKey]: callAllEventHandlers(onChange, onInput, _this.inputHandleChange),
              onKeyDown: callAllEventHandlers(onKeyDown, _this.inputHandleKeyDown),
              onBlur: callAllEventHandlers(onBlur, _this.inputHandleBlur)
            };
          }
          return {
            "aria-autocomplete": "list",
            "aria-activedescendant": isOpen && typeof highlightedIndex === "number" && highlightedIndex >= 0 ? _this.getItemId(highlightedIndex) : null,
            "aria-controls": isOpen ? _this.menuId : null,
            "aria-labelledby": _this.labelId,
            // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
            // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
            autoComplete: "off",
            value: inputValue,
            id: _this.inputId,
            ...eventHandlers,
            ...rest
          };
        };
        this.inputHandleKeyDown = (event) => {
          const key = normalizeArrowKey(event);
          if (key && this.inputKeyDownHandlers[key]) {
            this.inputKeyDownHandlers[key].call(this, event);
          }
        };
        this.inputHandleChange = (event) => {
          this.internalSetState({
            type: changeInput,
            isOpen: true,
            inputValue: event.target.value,
            highlightedIndex: this.props.defaultHighlightedIndex
          });
        };
        this.inputHandleBlur = () => {
          this.internalSetTimeout(() => {
            const downshiftButtonIsActive = this.props.environment.document && !!this.props.environment.document.activeElement && !!this.props.environment.document.activeElement.dataset && this.props.environment.document.activeElement.dataset.toggle && this._rootNode && this._rootNode.contains(this.props.environment.document.activeElement);
            if (!this.isMouseDown && !downshiftButtonIsActive) {
              this.reset({
                type: blurInput
              });
            }
          });
        };
        this.menuRef = (node2) => {
          this._menuNode = node2;
        };
        this.getMenuProps = function(_temp5, _temp6) {
          let {
            refKey = "ref",
            ref,
            ...props
          } = _temp5 === void 0 ? {} : _temp5;
          let {
            suppressRefError = false
          } = _temp6 === void 0 ? {} : _temp6;
          _this.getMenuProps.called = true;
          _this.getMenuProps.refKey = refKey;
          _this.getMenuProps.suppressRefError = suppressRefError;
          return {
            [refKey]: handleRefs(ref, _this.menuRef),
            role: "listbox",
            "aria-labelledby": props && props["aria-label"] ? null : _this.labelId,
            id: _this.menuId,
            ...props
          };
        };
        this.getItemProps = function(_temp7) {
          let {
            onMouseMove,
            onMouseDown,
            onClick,
            onPress,
            index: index2,
            item = false ? (
              /* istanbul ignore next */
              void 0
            ) : requiredProp("getItemProps", "item"),
            ...rest
          } = _temp7 === void 0 ? {} : _temp7;
          if (index2 === void 0) {
            _this.items.push(item);
            index2 = _this.items.indexOf(item);
          } else {
            _this.items[index2] = item;
          }
          const onSelectKey = "onClick";
          const customClickHandler = onClick;
          const enabledEventHandlers = {
            // onMouseMove is used over onMouseEnter here. onMouseMove
            // is only triggered on actual mouse movement while onMouseEnter
            // can fire on DOM changes, interrupting keyboard navigation
            onMouseMove: callAllEventHandlers(onMouseMove, () => {
              if (index2 === _this.getState().highlightedIndex) {
                return;
              }
              _this.setHighlightedIndex(index2, {
                type: itemMouseEnter
              });
              _this.avoidScrolling = true;
              _this.internalSetTimeout(() => _this.avoidScrolling = false, 250);
            }),
            onMouseDown: callAllEventHandlers(onMouseDown, (event) => {
              event.preventDefault();
            }),
            [onSelectKey]: callAllEventHandlers(customClickHandler, () => {
              _this.selectItemAtIndex(index2, {
                type: clickItem
              });
            })
          };
          const eventHandlers = rest.disabled ? {
            onMouseDown: enabledEventHandlers.onMouseDown
          } : enabledEventHandlers;
          return {
            id: _this.getItemId(index2),
            role: "option",
            "aria-selected": _this.getState().highlightedIndex === index2,
            ...eventHandlers,
            ...rest
          };
        };
        this.clearItems = () => {
          this.items = [];
        };
        this.reset = function(otherStateToSet, cb) {
          if (otherStateToSet === void 0) {
            otherStateToSet = {};
          }
          otherStateToSet = pickState(otherStateToSet);
          _this.internalSetState((_ref4) => {
            let {
              selectedItem
            } = _ref4;
            return {
              isOpen: _this.props.defaultIsOpen,
              highlightedIndex: _this.props.defaultHighlightedIndex,
              inputValue: _this.props.itemToString(selectedItem),
              ...otherStateToSet
            };
          }, cb);
        };
        this.toggleMenu = function(otherStateToSet, cb) {
          if (otherStateToSet === void 0) {
            otherStateToSet = {};
          }
          otherStateToSet = pickState(otherStateToSet);
          _this.internalSetState((_ref22) => {
            let {
              isOpen
            } = _ref22;
            return {
              isOpen: !isOpen,
              ...isOpen && {
                highlightedIndex: _this.props.defaultHighlightedIndex
              },
              ...otherStateToSet
            };
          }, () => {
            const {
              isOpen,
              highlightedIndex
            } = _this.getState();
            if (isOpen) {
              if (_this.getItemCount() > 0 && typeof highlightedIndex === "number") {
                _this.setHighlightedIndex(highlightedIndex, otherStateToSet);
              }
            }
            cbToCb(cb)();
          });
        };
        this.openMenu = (cb) => {
          this.internalSetState({
            isOpen: true
          }, cb);
        };
        this.closeMenu = (cb) => {
          this.internalSetState({
            isOpen: false
          }, cb);
        };
        this.updateStatus = debounce2(() => {
          const state = this.getState();
          const item = this.items[state.highlightedIndex];
          const resultCount = this.getItemCount();
          const status = this.props.getA11yStatusMessage({
            itemToString: this.props.itemToString,
            previousResultCount: this.previousResultCount,
            resultCount,
            highlightedItem: item,
            ...state
          });
          this.previousResultCount = resultCount;
          setStatus(status, this.props.environment.document);
        }, 200);
        const {
          defaultHighlightedIndex,
          initialHighlightedIndex: _highlightedIndex = defaultHighlightedIndex,
          defaultIsOpen,
          initialIsOpen: _isOpen = defaultIsOpen,
          initialInputValue: _inputValue = "",
          initialSelectedItem: _selectedItem = null
        } = this.props;
        const _state = this.getState({
          highlightedIndex: _highlightedIndex,
          isOpen: _isOpen,
          inputValue: _inputValue,
          selectedItem: _selectedItem
        });
        if (_state.selectedItem != null && this.props.initialInputValue === void 0) {
          _state.inputValue = this.props.itemToString(_state.selectedItem);
        }
        this.state = _state;
      }
      /**
       * Clear all running timeouts
       */
      internalClearTimeouts() {
        this.timeoutIds.forEach((id3) => {
          clearTimeout(id3);
        });
        this.timeoutIds = [];
      }
      /**
       * Gets the state based on internal state or props
       * If a state value is passed via props, then that
       * is the value given, otherwise it's retrieved from
       * stateToMerge
       *
       * @param {Object} stateToMerge defaults to this.state
       * @return {Object} the state
       */
      getState(stateToMerge) {
        if (stateToMerge === void 0) {
          stateToMerge = this.state;
        }
        return getState(stateToMerge, this.props);
      }
      getItemCount() {
        let itemCount = this.items.length;
        if (this.itemCount != null) {
          itemCount = this.itemCount;
        } else if (this.props.itemCount !== void 0) {
          itemCount = this.props.itemCount;
        }
        return itemCount;
      }
      getItemNodeFromIndex(index2) {
        return this.props.environment.document.getElementById(this.getItemId(index2));
      }
      scrollHighlightedItemIntoView() {
        {
          const node2 = this.getItemNodeFromIndex(this.getState().highlightedIndex);
          this.props.scrollIntoView(node2, this._menuNode);
        }
      }
      moveHighlightedIndex(amount, otherStateToSet) {
        const itemCount = this.getItemCount();
        const {
          highlightedIndex
        } = this.getState();
        if (itemCount > 0) {
          const nextHighlightedIndex = getNextWrappingIndex(amount, highlightedIndex, itemCount, (index2) => this.getItemNodeFromIndex(index2));
          this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet);
        }
      }
      getStateAndHelpers() {
        const {
          highlightedIndex,
          inputValue,
          selectedItem,
          isOpen
        } = this.getState();
        const {
          itemToString: itemToString3
        } = this.props;
        const {
          id: id3
        } = this;
        const {
          getRootProps,
          getToggleButtonProps,
          getLabelProps,
          getMenuProps,
          getInputProps,
          getItemProps,
          openMenu,
          closeMenu,
          toggleMenu,
          selectItem,
          selectItemAtIndex,
          selectHighlightedItem,
          setHighlightedIndex,
          clearSelection,
          clearItems,
          reset,
          setItemCount,
          unsetItemCount,
          internalSetState: setState
        } = this;
        return {
          // prop getters
          getRootProps,
          getToggleButtonProps,
          getLabelProps,
          getMenuProps,
          getInputProps,
          getItemProps,
          // actions
          reset,
          openMenu,
          closeMenu,
          toggleMenu,
          selectItem,
          selectItemAtIndex,
          selectHighlightedItem,
          setHighlightedIndex,
          clearSelection,
          clearItems,
          setItemCount,
          unsetItemCount,
          setState,
          // props
          itemToString: itemToString3,
          // derived
          id: id3,
          // state
          highlightedIndex,
          inputValue,
          isOpen,
          selectedItem
        };
      }
      //////////////////////////// ROOT
      componentDidMount() {
        if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
          validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
        }
        {
          const onMouseDown = () => {
            this.isMouseDown = true;
          };
          const onMouseUp = (event) => {
            this.isMouseDown = false;
            const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment);
            if (!contextWithinDownshift && this.getState().isOpen) {
              this.reset({
                type: mouseUp
              }, () => this.props.onOuterClick(this.getStateAndHelpers()));
            }
          };
          const onTouchStart = () => {
            this.isTouchMove = false;
          };
          const onTouchMove = () => {
            this.isTouchMove = true;
          };
          const onTouchEnd = (event) => {
            const contextWithinDownshift = targetWithinDownshift(event.target, [this._rootNode, this._menuNode], this.props.environment, false);
            if (!this.isTouchMove && !contextWithinDownshift && this.getState().isOpen) {
              this.reset({
                type: touchEnd
              }, () => this.props.onOuterClick(this.getStateAndHelpers()));
            }
          };
          const {
            environment
          } = this.props;
          environment.addEventListener("mousedown", onMouseDown);
          environment.addEventListener("mouseup", onMouseUp);
          environment.addEventListener("touchstart", onTouchStart);
          environment.addEventListener("touchmove", onTouchMove);
          environment.addEventListener("touchend", onTouchEnd);
          this.cleanup = () => {
            this.internalClearTimeouts();
            this.updateStatus.cancel();
            environment.removeEventListener("mousedown", onMouseDown);
            environment.removeEventListener("mouseup", onMouseUp);
            environment.removeEventListener("touchstart", onTouchStart);
            environment.removeEventListener("touchmove", onTouchMove);
            environment.removeEventListener("touchend", onTouchEnd);
          };
        }
      }
      shouldScroll(prevState, prevProps) {
        const {
          highlightedIndex: currentHighlightedIndex
        } = this.props.highlightedIndex === void 0 ? this.getState() : this.props;
        const {
          highlightedIndex: prevHighlightedIndex
        } = prevProps.highlightedIndex === void 0 ? prevState : prevProps;
        const scrollWhenOpen = currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen;
        const scrollWhenNavigating = currentHighlightedIndex !== prevHighlightedIndex;
        return scrollWhenOpen || scrollWhenNavigating;
      }
      componentDidUpdate(prevProps, prevState) {
        if (true) {
          validateControlledUnchanged(this.state, prevProps, this.props);
          if (this.getMenuProps.called && !this.getMenuProps.suppressRefError) {
            validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps);
          }
        }
        if (isControlledProp(this.props, "selectedItem") && this.props.selectedItemChanged(prevProps.selectedItem, this.props.selectedItem)) {
          this.internalSetState({
            type: controlledPropUpdatedSelectedItem,
            inputValue: this.props.itemToString(this.props.selectedItem)
          });
        }
        if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {
          this.scrollHighlightedItemIntoView();
        }
        {
          this.updateStatus();
        }
      }
      componentWillUnmount() {
        this.cleanup();
      }
      render() {
        const children = unwrapArray(this.props.children, noop5);
        this.clearItems();
        this.getRootProps.called = false;
        this.getRootProps.refKey = void 0;
        this.getRootProps.suppressRefError = void 0;
        this.getMenuProps.called = false;
        this.getMenuProps.refKey = void 0;
        this.getMenuProps.suppressRefError = void 0;
        this.getLabelProps.called = false;
        this.getInputProps.called = false;
        const element = unwrapArray(children(this.getStateAndHelpers()));
        if (!element) {
          return null;
        }
        if (this.getRootProps.called || this.props.suppressRefError) {
          if (!this.getRootProps.suppressRefError && !this.props.suppressRefError) {
            validateGetRootPropsCalledCorrectly(element, this.getRootProps);
          }
          return element;
        } else if (isDOMElement(element)) {
          return /* @__PURE__ */ (0, import_react89.cloneElement)(element, this.getRootProps(getElementProps(element)));
        }
        if (true) {
          throw new Error("downshift: If you return a non-DOM element, you must apply the getRootProps function");
        }
        return void 0;
      }
    }
    Downshift2.defaultProps = {
      defaultHighlightedIndex: null,
      defaultIsOpen: false,
      getA11yStatusMessage: getA11yStatusMessage$1,
      itemToString: (i3) => {
        if (i3 == null) {
          return "";
        }
        if (isPlainObject3(i3) && !i3.hasOwnProperty("toString")) {
          console.warn("downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.", "The object that was passed:", i3);
        }
        return String(i3);
      },
      onStateChange: noop5,
      onInputValueChange: noop5,
      onUserAction: noop5,
      onChange: noop5,
      onSelect: noop5,
      onOuterClick: noop5,
      selectedItemChanged: (prevItem, item) => prevItem !== item,
      environment: (
        /* istanbul ignore next (ssr) */
        typeof window === "undefined" ? {} : window
      ),
      stateReducer: (state, stateToSet) => stateToSet,
      suppressRefError: false,
      scrollIntoView
    };
    Downshift2.stateChangeTypes = stateChangeTypes$3;
    return Downshift2;
  })();
  true ? Downshift.propTypes = {
    children: import_prop_types.default.func,
    defaultHighlightedIndex: import_prop_types.default.number,
    defaultIsOpen: import_prop_types.default.bool,
    initialHighlightedIndex: import_prop_types.default.number,
    initialSelectedItem: import_prop_types.default.any,
    initialInputValue: import_prop_types.default.string,
    initialIsOpen: import_prop_types.default.bool,
    getA11yStatusMessage: import_prop_types.default.func,
    itemToString: import_prop_types.default.func,
    onChange: import_prop_types.default.func,
    onSelect: import_prop_types.default.func,
    onStateChange: import_prop_types.default.func,
    onInputValueChange: import_prop_types.default.func,
    onUserAction: import_prop_types.default.func,
    onOuterClick: import_prop_types.default.func,
    selectedItemChanged: import_prop_types.default.func,
    stateReducer: import_prop_types.default.func,
    itemCount: import_prop_types.default.number,
    id: import_prop_types.default.string,
    environment: import_prop_types.default.shape({
      addEventListener: import_prop_types.default.func,
      removeEventListener: import_prop_types.default.func,
      document: import_prop_types.default.shape({
        getElementById: import_prop_types.default.func,
        activeElement: import_prop_types.default.any,
        body: import_prop_types.default.any
      })
    }),
    suppressRefError: import_prop_types.default.bool,
    scrollIntoView: import_prop_types.default.func,
    // things we keep in state for uncontrolled components
    // but can accept as props for controlled components
    /* eslint-disable react/no-unused-prop-types */
    selectedItem: import_prop_types.default.any,
    isOpen: import_prop_types.default.bool,
    inputValue: import_prop_types.default.string,
    highlightedIndex: import_prop_types.default.number,
    labelId: import_prop_types.default.string,
    inputId: import_prop_types.default.string,
    menuId: import_prop_types.default.string,
    getItemId: import_prop_types.default.func
    /* eslint-enable react/no-unused-prop-types */
  } : void 0;
  function validateGetMenuPropsCalledCorrectly(node2, _ref32) {
    let {
      refKey
    } = _ref32;
    if (!node2) {
      console.error(`downshift: The ref prop "${refKey}" from getMenuProps was not applied correctly on your menu element.`);
    }
  }
  function validateGetRootPropsCalledCorrectly(element, _ref4) {
    let {
      refKey
    } = _ref4;
    const refKeySpecified = refKey !== "ref";
    const isComposite = !isDOMElement(element);
    if (isComposite && !refKeySpecified && !(0, import_react_is2.isForwardRef)(element)) {
      console.error("downshift: You returned a non-DOM element. You must specify a refKey in getRootProps");
    } else if (!isComposite && refKeySpecified) {
      console.error(`downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified "${refKey}"`);
    }
    if (!(0, import_react_is2.isForwardRef)(element) && !getElementProps(element)[refKey]) {
      console.error(`downshift: You must apply the ref prop "${refKey}" from getRootProps onto your root element.`);
    }
  }
  var dropdownDefaultStateValues = {
    highlightedIndex: -1,
    isOpen: false,
    selectedItem: null,
    inputValue: ""
  };
  function callOnChangeProps(action, state, newState) {
    const {
      props,
      type
    } = action;
    const changes = {};
    Object.keys(state).forEach((key) => {
      invokeOnChangeHandler(key, action, state, newState);
      if (newState[key] !== state[key]) {
        changes[key] = newState[key];
      }
    });
    if (props.onStateChange && Object.keys(changes).length) {
      props.onStateChange({
        type,
        ...changes
      });
    }
  }
  function invokeOnChangeHandler(key, action, state, newState) {
    const {
      props,
      type
    } = action;
    const handler = `on${capitalizeString(key)}Change`;
    if (props[handler] && newState[key] !== void 0 && newState[key] !== state[key]) {
      props[handler]({
        type,
        ...newState
      });
    }
  }
  function stateReducer(s2, a2) {
    return a2.changes;
  }
  function getA11ySelectionMessage(selectionParameters) {
    const {
      selectedItem,
      itemToString: itemToStringLocal
    } = selectionParameters;
    return selectedItem ? `${itemToStringLocal(selectedItem)} has been selected.` : "";
  }
  var updateA11yStatus = debounce2((getA11yMessage, document3) => {
    setStatus(getA11yMessage(), document3);
  }, 200);
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react89.useLayoutEffect : import_react89.useEffect;
  function useElementIds(_ref4) {
    let {
      id: id3 = `downshift-${generateId()}`,
      labelId,
      menuId,
      getItemId,
      toggleButtonId,
      inputId
    } = _ref4;
    const elementIdsRef = (0, import_react89.useRef)({
      labelId: labelId || `${id3}-label`,
      menuId: menuId || `${id3}-menu`,
      getItemId: getItemId || ((index2) => `${id3}-item-${index2}`),
      toggleButtonId: toggleButtonId || `${id3}-toggle-button`,
      inputId: inputId || `${id3}-input`
    });
    return elementIdsRef.current;
  }
  function getItemIndex(index2, item, items) {
    if (index2 !== void 0) {
      return index2;
    }
    if (items.length === 0) {
      return -1;
    }
    return items.indexOf(item);
  }
  function itemToString(item) {
    return item ? String(item) : "";
  }
  function isAcceptedCharacterKey(key) {
    return /^\S{1}$/.test(key);
  }
  function capitalizeString(string2) {
    return `${string2.slice(0, 1).toUpperCase()}${string2.slice(1)}`;
  }
  function useLatestRef2(val) {
    const ref = (0, import_react89.useRef)(val);
    ref.current = val;
    return ref;
  }
  function useEnhancedReducer(reducer2, initialState, props) {
    const prevStateRef = (0, import_react89.useRef)();
    const actionRef = (0, import_react89.useRef)();
    const enhancedReducer = (0, import_react89.useCallback)((state2, action2) => {
      actionRef.current = action2;
      state2 = getState(state2, action2.props);
      const changes = reducer2(state2, action2);
      const newState = action2.props.stateReducer(state2, {
        ...action2,
        changes
      });
      return newState;
    }, [reducer2]);
    const [state, dispatch2] = (0, import_react89.useReducer)(enhancedReducer, initialState);
    const propsRef = useLatestRef2(props);
    const dispatchWithProps = (0, import_react89.useCallback)((action2) => dispatch2({
      props: propsRef.current,
      ...action2
    }), [propsRef]);
    const action = actionRef.current;
    (0, import_react89.useEffect)(() => {
      if (action && prevStateRef.current && prevStateRef.current !== state) {
        callOnChangeProps(action, getState(prevStateRef.current, action.props), state);
      }
      prevStateRef.current = state;
    }, [state, props, action]);
    return [state, dispatchWithProps];
  }
  function useControlledReducer$1(reducer2, initialState, props) {
    const [state, dispatch2] = useEnhancedReducer(reducer2, initialState, props);
    return [getState(state, props), dispatch2];
  }
  var defaultProps$3 = {
    itemToString,
    stateReducer,
    getA11ySelectionMessage,
    scrollIntoView,
    circularNavigation: false,
    environment: (
      /* istanbul ignore next (ssr) */
      typeof window === "undefined" ? {} : window
    )
  };
  function getDefaultValue$1(props, propKey, defaultStateValues2) {
    if (defaultStateValues2 === void 0) {
      defaultStateValues2 = dropdownDefaultStateValues;
    }
    const defaultValue2 = props[`default${capitalizeString(propKey)}`];
    if (defaultValue2 !== void 0) {
      return defaultValue2;
    }
    return defaultStateValues2[propKey];
  }
  function getInitialValue$1(props, propKey, defaultStateValues2) {
    if (defaultStateValues2 === void 0) {
      defaultStateValues2 = dropdownDefaultStateValues;
    }
    const value = props[propKey];
    if (value !== void 0) {
      return value;
    }
    const initialValue2 = props[`initial${capitalizeString(propKey)}`];
    if (initialValue2 !== void 0) {
      return initialValue2;
    }
    return getDefaultValue$1(props, propKey, defaultStateValues2);
  }
  function getInitialState$2(props) {
    const selectedItem = getInitialValue$1(props, "selectedItem");
    const isOpen = getInitialValue$1(props, "isOpen");
    const highlightedIndex = getInitialValue$1(props, "highlightedIndex");
    const inputValue = getInitialValue$1(props, "inputValue");
    return {
      highlightedIndex: highlightedIndex < 0 && selectedItem && isOpen ? props.items.indexOf(selectedItem) : highlightedIndex,
      isOpen,
      selectedItem,
      inputValue
    };
  }
  function getHighlightedIndexOnOpen(props, state, offset5, getItemNodeFromIndex) {
    const {
      items,
      initialHighlightedIndex,
      defaultHighlightedIndex
    } = props;
    const {
      selectedItem,
      highlightedIndex
    } = state;
    if (items.length === 0) {
      return -1;
    }
    if (initialHighlightedIndex !== void 0 && highlightedIndex === initialHighlightedIndex) {
      return initialHighlightedIndex;
    }
    if (defaultHighlightedIndex !== void 0) {
      return defaultHighlightedIndex;
    }
    if (selectedItem) {
      if (offset5 === 0) {
        return items.indexOf(selectedItem);
      }
      return getNextWrappingIndex(offset5, items.indexOf(selectedItem), items.length, getItemNodeFromIndex, false);
    }
    if (offset5 === 0) {
      return -1;
    }
    return offset5 < 0 ? items.length - 1 : 0;
  }
  function useMouseAndTouchTracker(isOpen, downshiftElementRefs, environment, handleBlur) {
    const mouseAndTouchTrackersRef = (0, import_react89.useRef)({
      isMouseDown: false,
      isTouchMove: false
    });
    (0, import_react89.useEffect)(() => {
      const onMouseDown = () => {
        mouseAndTouchTrackersRef.current.isMouseDown = true;
      };
      const onMouseUp = (event) => {
        mouseAndTouchTrackersRef.current.isMouseDown = false;
        if (isOpen && !targetWithinDownshift(event.target, downshiftElementRefs.map((ref) => ref.current), environment)) {
          handleBlur();
        }
      };
      const onTouchStart = () => {
        mouseAndTouchTrackersRef.current.isTouchMove = false;
      };
      const onTouchMove = () => {
        mouseAndTouchTrackersRef.current.isTouchMove = true;
      };
      const onTouchEnd = (event) => {
        if (isOpen && !mouseAndTouchTrackersRef.current.isTouchMove && !targetWithinDownshift(event.target, downshiftElementRefs.map((ref) => ref.current), environment, false)) {
          handleBlur();
        }
      };
      environment.addEventListener("mousedown", onMouseDown);
      environment.addEventListener("mouseup", onMouseUp);
      environment.addEventListener("touchstart", onTouchStart);
      environment.addEventListener("touchmove", onTouchMove);
      environment.addEventListener("touchend", onTouchEnd);
      return function cleanup() {
        environment.removeEventListener("mousedown", onMouseDown);
        environment.removeEventListener("mouseup", onMouseUp);
        environment.removeEventListener("touchstart", onTouchStart);
        environment.removeEventListener("touchmove", onTouchMove);
        environment.removeEventListener("touchend", onTouchEnd);
      };
    }, [isOpen, environment]);
    return mouseAndTouchTrackersRef;
  }
  var useGetterPropsCalledChecker = () => noop5;
  if (true) {
    useGetterPropsCalledChecker = function() {
      const isInitialMountRef = (0, import_react89.useRef)(true);
      for (var _len = arguments.length, propKeys = new Array(_len), _key = 0; _key < _len; _key++) {
        propKeys[_key] = arguments[_key];
      }
      const getterPropsCalledRef = (0, import_react89.useRef)(propKeys.reduce((acc, propKey) => {
        acc[propKey] = {};
        return acc;
      }, {}));
      (0, import_react89.useEffect)(() => {
        Object.keys(getterPropsCalledRef.current).forEach((propKey) => {
          const propCallInfo = getterPropsCalledRef.current[propKey];
          if (isInitialMountRef.current) {
            if (!Object.keys(propCallInfo).length) {
              console.error(`downshift: You forgot to call the ${propKey} getter function on your component / element.`);
              return;
            }
          }
          const {
            suppressRefError,
            refKey,
            elementRef
          } = propCallInfo;
          if ((!elementRef || !elementRef.current) && !suppressRefError) {
            console.error(`downshift: The ref prop "${refKey}" from ${propKey} was not applied correctly on your element.`);
          }
        });
        isInitialMountRef.current = false;
      });
      const setGetterPropCallInfo = (0, import_react89.useCallback)((propKey, suppressRefError, refKey, elementRef) => {
        getterPropsCalledRef.current[propKey] = {
          suppressRefError,
          refKey,
          elementRef
        };
      }, []);
      return setGetterPropCallInfo;
    };
  }
  function useA11yMessageSetter(getA11yMessage, dependencyArray, _ref22) {
    let {
      isInitialMount,
      highlightedIndex,
      items,
      environment,
      ...rest
    } = _ref22;
    (0, import_react89.useEffect)(() => {
      if (isInitialMount || false) {
        return;
      }
      updateA11yStatus(() => getA11yMessage({
        highlightedIndex,
        highlightedItem: items[highlightedIndex],
        resultCount: items.length,
        ...rest
      }), environment.document);
    }, dependencyArray);
  }
  function useScrollIntoView(_ref32) {
    let {
      highlightedIndex,
      isOpen,
      itemRefs,
      getItemNodeFromIndex,
      menuElement,
      scrollIntoView: scrollIntoViewProp
    } = _ref32;
    const shouldScrollRef = (0, import_react89.useRef)(true);
    useIsomorphicLayoutEffect2(() => {
      if (highlightedIndex < 0 || !isOpen || !Object.keys(itemRefs.current).length) {
        return;
      }
      if (shouldScrollRef.current === false) {
        shouldScrollRef.current = true;
      } else {
        scrollIntoViewProp(getItemNodeFromIndex(highlightedIndex), menuElement);
      }
    }, [highlightedIndex]);
    return shouldScrollRef;
  }
  var useControlPropsValidator = noop5;
  if (true) {
    useControlPropsValidator = (_ref4) => {
      let {
        isInitialMount,
        props,
        state
      } = _ref4;
      const prevPropsRef = (0, import_react89.useRef)(props);
      (0, import_react89.useEffect)(() => {
        if (isInitialMount) {
          return;
        }
        validateControlledUnchanged(state, prevPropsRef.current, props);
        prevPropsRef.current = props;
      }, [state, props, isInitialMount]);
    };
  }
  function downshiftCommonReducer(state, action, stateChangeTypes2) {
    const {
      type,
      props
    } = action;
    let changes;
    switch (type) {
      case stateChangeTypes2.ItemMouseMove:
        changes = {
          highlightedIndex: action.disabled ? -1 : action.index
        };
        break;
      case stateChangeTypes2.MenuMouseLeave:
        changes = {
          highlightedIndex: -1
        };
        break;
      case stateChangeTypes2.ToggleButtonClick:
      case stateChangeTypes2.FunctionToggleMenu:
        changes = {
          isOpen: !state.isOpen,
          highlightedIndex: state.isOpen ? -1 : getHighlightedIndexOnOpen(props, state, 0)
        };
        break;
      case stateChangeTypes2.FunctionOpenMenu:
        changes = {
          isOpen: true,
          highlightedIndex: getHighlightedIndexOnOpen(props, state, 0)
        };
        break;
      case stateChangeTypes2.FunctionCloseMenu:
        changes = {
          isOpen: false
        };
        break;
      case stateChangeTypes2.FunctionSetHighlightedIndex:
        changes = {
          highlightedIndex: action.highlightedIndex
        };
        break;
      case stateChangeTypes2.FunctionSetInputValue:
        changes = {
          inputValue: action.inputValue
        };
        break;
      case stateChangeTypes2.FunctionReset:
        changes = {
          highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
          isOpen: getDefaultValue$1(props, "isOpen"),
          selectedItem: getDefaultValue$1(props, "selectedItem"),
          inputValue: getDefaultValue$1(props, "inputValue")
        };
        break;
      default:
        throw new Error("Reducer called without proper action type.");
    }
    return {
      ...state,
      ...changes
    };
  }
  function getItemIndexByCharacterKey(_a) {
    var keysSoFar = _a.keysSoFar, highlightedIndex = _a.highlightedIndex, items = _a.items, itemToString3 = _a.itemToString, getItemNodeFromIndex = _a.getItemNodeFromIndex;
    var lowerCasedKeysSoFar = keysSoFar.toLowerCase();
    for (var index2 = 0; index2 < items.length; index2++) {
      var offsetIndex = (index2 + highlightedIndex + 1) % items.length;
      var item = items[offsetIndex];
      if (item !== void 0 && itemToString3(item).toLowerCase().startsWith(lowerCasedKeysSoFar)) {
        var element = getItemNodeFromIndex(offsetIndex);
        if (!(element === null || element === void 0 ? void 0 : element.hasAttribute("disabled"))) {
          return offsetIndex;
        }
      }
    }
    return highlightedIndex;
  }
  var propTypes$2 = {
    items: import_prop_types.default.array.isRequired,
    itemToString: import_prop_types.default.func,
    getA11yStatusMessage: import_prop_types.default.func,
    getA11ySelectionMessage: import_prop_types.default.func,
    circularNavigation: import_prop_types.default.bool,
    highlightedIndex: import_prop_types.default.number,
    defaultHighlightedIndex: import_prop_types.default.number,
    initialHighlightedIndex: import_prop_types.default.number,
    isOpen: import_prop_types.default.bool,
    defaultIsOpen: import_prop_types.default.bool,
    initialIsOpen: import_prop_types.default.bool,
    selectedItem: import_prop_types.default.any,
    initialSelectedItem: import_prop_types.default.any,
    defaultSelectedItem: import_prop_types.default.any,
    id: import_prop_types.default.string,
    labelId: import_prop_types.default.string,
    menuId: import_prop_types.default.string,
    getItemId: import_prop_types.default.func,
    toggleButtonId: import_prop_types.default.string,
    stateReducer: import_prop_types.default.func,
    onSelectedItemChange: import_prop_types.default.func,
    onHighlightedIndexChange: import_prop_types.default.func,
    onStateChange: import_prop_types.default.func,
    onIsOpenChange: import_prop_types.default.func,
    environment: import_prop_types.default.shape({
      addEventListener: import_prop_types.default.func,
      removeEventListener: import_prop_types.default.func,
      document: import_prop_types.default.shape({
        getElementById: import_prop_types.default.func,
        activeElement: import_prop_types.default.any,
        body: import_prop_types.default.any
      })
    })
  };
  function getA11yStatusMessage(_a) {
    var isOpen = _a.isOpen, resultCount = _a.resultCount, previousResultCount = _a.previousResultCount;
    if (!isOpen) {
      return "";
    }
    if (!resultCount) {
      return "No results are available.";
    }
    if (resultCount !== previousResultCount) {
      return "".concat(resultCount, " result").concat(resultCount === 1 ? " is" : "s are", " available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.");
    }
    return "";
  }
  var defaultProps$2 = __assign(__assign({}, defaultProps$3), { getA11yStatusMessage });
  var validatePropTypes$2 = noop5;
  if (true) {
    validatePropTypes$2 = function(options, caller) {
      import_prop_types.default.checkPropTypes(propTypes$2, options, "prop", caller.name);
    };
  }
  var MenuKeyDownArrowDown = true ? "__menu_keydown_arrow_down__" : 0;
  var MenuKeyDownArrowUp = true ? "__menu_keydown_arrow_up__" : 1;
  var MenuKeyDownEscape = true ? "__menu_keydown_escape__" : 2;
  var MenuKeyDownHome = true ? "__menu_keydown_home__" : 3;
  var MenuKeyDownEnd = true ? "__menu_keydown_end__" : 4;
  var MenuKeyDownEnter = true ? "__menu_keydown_enter__" : 5;
  var MenuKeyDownSpaceButton = true ? "__menu_keydown_space_button__" : 6;
  var MenuKeyDownCharacter = true ? "__menu_keydown_character__" : 7;
  var MenuBlur = true ? "__menu_blur__" : 8;
  var MenuMouseLeave$1 = true ? "__menu_mouse_leave__" : 9;
  var ItemMouseMove$1 = true ? "__item_mouse_move__" : 10;
  var ItemClick$1 = true ? "__item_click__" : 11;
  var ToggleButtonClick$1 = true ? "__togglebutton_click__" : 12;
  var ToggleButtonKeyDownArrowDown = true ? "__togglebutton_keydown_arrow_down__" : 13;
  var ToggleButtonKeyDownArrowUp = true ? "__togglebutton_keydown_arrow_up__" : 14;
  var ToggleButtonKeyDownCharacter = true ? "__togglebutton_keydown_character__" : 15;
  var FunctionToggleMenu$1 = true ? "__function_toggle_menu__" : 16;
  var FunctionOpenMenu$1 = true ? "__function_open_menu__" : 17;
  var FunctionCloseMenu$1 = true ? "__function_close_menu__" : 18;
  var FunctionSetHighlightedIndex$1 = true ? "__function_set_highlighted_index__" : 19;
  var FunctionSelectItem$1 = true ? "__function_select_item__" : 20;
  var FunctionSetInputValue$1 = true ? "__function_set_input_value__" : 21;
  var FunctionReset$2 = true ? "__function_reset__" : 22;
  var stateChangeTypes$2 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    MenuKeyDownArrowDown,
    MenuKeyDownArrowUp,
    MenuKeyDownEscape,
    MenuKeyDownHome,
    MenuKeyDownEnd,
    MenuKeyDownEnter,
    MenuKeyDownSpaceButton,
    MenuKeyDownCharacter,
    MenuBlur,
    MenuMouseLeave: MenuMouseLeave$1,
    ItemMouseMove: ItemMouseMove$1,
    ItemClick: ItemClick$1,
    ToggleButtonClick: ToggleButtonClick$1,
    ToggleButtonKeyDownArrowDown,
    ToggleButtonKeyDownArrowUp,
    ToggleButtonKeyDownCharacter,
    FunctionToggleMenu: FunctionToggleMenu$1,
    FunctionOpenMenu: FunctionOpenMenu$1,
    FunctionCloseMenu: FunctionCloseMenu$1,
    FunctionSetHighlightedIndex: FunctionSetHighlightedIndex$1,
    FunctionSelectItem: FunctionSelectItem$1,
    FunctionSetInputValue: FunctionSetInputValue$1,
    FunctionReset: FunctionReset$2
  });
  function downshiftSelectReducer(state, action) {
    const {
      type,
      props,
      shiftKey
    } = action;
    let changes;
    switch (type) {
      case ItemClick$1:
        changes = {
          isOpen: getDefaultValue$1(props, "isOpen"),
          highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
          selectedItem: props.items[action.index]
        };
        break;
      case ToggleButtonKeyDownCharacter:
        {
          const lowercasedKey = action.key;
          const inputValue = `${state.inputValue}${lowercasedKey}`;
          const itemIndex = getItemIndexByCharacterKey({
            keysSoFar: inputValue,
            highlightedIndex: state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,
            items: props.items,
            itemToString: props.itemToString,
            getItemNodeFromIndex: action.getItemNodeFromIndex
          });
          changes = {
            inputValue,
            ...itemIndex >= 0 && {
              selectedItem: props.items[itemIndex]
            }
          };
        }
        break;
      case ToggleButtonKeyDownArrowDown:
        changes = {
          highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),
          isOpen: true
        };
        break;
      case ToggleButtonKeyDownArrowUp:
        changes = {
          highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),
          isOpen: true
        };
        break;
      case MenuKeyDownEnter:
      case MenuKeyDownSpaceButton:
        changes = {
          isOpen: getDefaultValue$1(props, "isOpen"),
          highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
          ...state.highlightedIndex >= 0 && {
            selectedItem: props.items[state.highlightedIndex]
          }
        };
        break;
      case MenuKeyDownHome:
        changes = {
          highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)
        };
        break;
      case MenuKeyDownEnd:
        changes = {
          highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)
        };
        break;
      case MenuKeyDownEscape:
        changes = {
          isOpen: false,
          highlightedIndex: -1
        };
        break;
      case MenuBlur:
        changes = {
          isOpen: false,
          highlightedIndex: -1
        };
        break;
      case MenuKeyDownCharacter:
        {
          const lowercasedKey = action.key;
          const inputValue = `${state.inputValue}${lowercasedKey}`;
          const highlightedIndex = getItemIndexByCharacterKey({
            keysSoFar: inputValue,
            highlightedIndex: state.highlightedIndex,
            items: props.items,
            itemToString: props.itemToString,
            getItemNodeFromIndex: action.getItemNodeFromIndex
          });
          changes = {
            inputValue,
            ...highlightedIndex >= 0 && {
              highlightedIndex
            }
          };
        }
        break;
      case MenuKeyDownArrowDown:
        changes = {
          highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
        };
        break;
      case MenuKeyDownArrowUp:
        changes = {
          highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
        };
        break;
      case FunctionSelectItem$1:
        changes = {
          selectedItem: action.selectedItem
        };
        break;
      default:
        return downshiftCommonReducer(state, action, stateChangeTypes$2);
    }
    return {
      ...state,
      ...changes
    };
  }
  useSelect2.stateChangeTypes = stateChangeTypes$2;
  function useSelect2(userProps) {
    if (userProps === void 0) {
      userProps = {};
    }
    validatePropTypes$2(userProps, useSelect2);
    const props = {
      ...defaultProps$2,
      ...userProps
    };
    const {
      items,
      scrollIntoView: scrollIntoView2,
      environment,
      initialIsOpen,
      defaultIsOpen,
      itemToString: itemToString3,
      getA11ySelectionMessage: getA11ySelectionMessage2,
      getA11yStatusMessage: getA11yStatusMessage2
    } = props;
    const initialState = getInitialState$2(props);
    const [state, dispatch2] = useControlledReducer$1(downshiftSelectReducer, initialState, props);
    const {
      isOpen,
      highlightedIndex,
      selectedItem,
      inputValue
    } = state;
    const toggleButtonRef = (0, import_react89.useRef)(null);
    const menuRef = (0, import_react89.useRef)(null);
    const itemRefs = (0, import_react89.useRef)({});
    const shouldBlurRef = (0, import_react89.useRef)(true);
    const clearTimeoutRef = (0, import_react89.useRef)(null);
    const elementIds = useElementIds(props);
    const previousResultCountRef = (0, import_react89.useRef)();
    const isInitialMountRef = (0, import_react89.useRef)(true);
    const latest = useLatestRef2({
      state,
      props
    });
    const getItemNodeFromIndex = (0, import_react89.useCallback)((index2) => itemRefs.current[elementIds.getItemId(index2)], [elementIds]);
    useA11yMessageSetter(getA11yStatusMessage2, [isOpen, highlightedIndex, inputValue, items], {
      isInitialMount: isInitialMountRef.current,
      previousResultCount: previousResultCountRef.current,
      items,
      environment,
      itemToString: itemToString3,
      ...state
    });
    useA11yMessageSetter(getA11ySelectionMessage2, [selectedItem], {
      isInitialMount: isInitialMountRef.current,
      previousResultCount: previousResultCountRef.current,
      items,
      environment,
      itemToString: itemToString3,
      ...state
    });
    const shouldScrollRef = useScrollIntoView({
      menuElement: menuRef.current,
      highlightedIndex,
      isOpen,
      itemRefs,
      scrollIntoView: scrollIntoView2,
      getItemNodeFromIndex
    });
    (0, import_react89.useEffect)(() => {
      clearTimeoutRef.current = debounce2((outerDispatch) => {
        outerDispatch({
          type: FunctionSetInputValue$1,
          inputValue: ""
        });
      }, 500);
      return () => {
        clearTimeoutRef.current.cancel();
      };
    }, []);
    (0, import_react89.useEffect)(() => {
      if (!inputValue) {
        return;
      }
      clearTimeoutRef.current(dispatch2);
    }, [dispatch2, inputValue]);
    useControlPropsValidator({
      isInitialMount: isInitialMountRef.current,
      props,
      state
    });
    (0, import_react89.useEffect)(() => {
      if (isInitialMountRef.current) {
        if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {
          menuRef.current.focus();
        }
        return;
      }
      if (isOpen) {
        if (menuRef.current) {
          menuRef.current.focus();
        }
        return;
      }
      if (environment.document.activeElement === menuRef.current) {
        if (toggleButtonRef.current) {
          shouldBlurRef.current = false;
          toggleButtonRef.current.focus();
        }
      }
    }, [isOpen]);
    (0, import_react89.useEffect)(() => {
      if (isInitialMountRef.current) {
        return;
      }
      previousResultCountRef.current = items.length;
    });
    const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [menuRef, toggleButtonRef], environment, () => {
      dispatch2({
        type: MenuBlur
      });
    });
    const setGetterPropCallInfo = useGetterPropsCalledChecker("getMenuProps", "getToggleButtonProps");
    (0, import_react89.useEffect)(() => {
      isInitialMountRef.current = false;
    }, []);
    (0, import_react89.useEffect)(() => {
      if (!isOpen) {
        itemRefs.current = {};
      }
    }, [isOpen]);
    const toggleButtonKeyDownHandlers = (0, import_react89.useMemo)(() => ({
      ArrowDown(event) {
        event.preventDefault();
        dispatch2({
          type: ToggleButtonKeyDownArrowDown,
          getItemNodeFromIndex,
          shiftKey: event.shiftKey
        });
      },
      ArrowUp(event) {
        event.preventDefault();
        dispatch2({
          type: ToggleButtonKeyDownArrowUp,
          getItemNodeFromIndex,
          shiftKey: event.shiftKey
        });
      }
    }), [dispatch2, getItemNodeFromIndex]);
    const menuKeyDownHandlers = (0, import_react89.useMemo)(() => ({
      ArrowDown(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownArrowDown,
          getItemNodeFromIndex,
          shiftKey: event.shiftKey
        });
      },
      ArrowUp(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownArrowUp,
          getItemNodeFromIndex,
          shiftKey: event.shiftKey
        });
      },
      Home(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownHome,
          getItemNodeFromIndex
        });
      },
      End(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownEnd,
          getItemNodeFromIndex
        });
      },
      Escape() {
        dispatch2({
          type: MenuKeyDownEscape
        });
      },
      Enter(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownEnter
        });
      },
      " "(event) {
        event.preventDefault();
        dispatch2({
          type: MenuKeyDownSpaceButton
        });
      }
    }), [dispatch2, getItemNodeFromIndex]);
    const toggleMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionToggleMenu$1
      });
    }, [dispatch2]);
    const closeMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionCloseMenu$1
      });
    }, [dispatch2]);
    const openMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionOpenMenu$1
      });
    }, [dispatch2]);
    const setHighlightedIndex = (0, import_react89.useCallback)((newHighlightedIndex) => {
      dispatch2({
        type: FunctionSetHighlightedIndex$1,
        highlightedIndex: newHighlightedIndex
      });
    }, [dispatch2]);
    const selectItem = (0, import_react89.useCallback)((newSelectedItem) => {
      dispatch2({
        type: FunctionSelectItem$1,
        selectedItem: newSelectedItem
      });
    }, [dispatch2]);
    const reset = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionReset$2
      });
    }, [dispatch2]);
    const setInputValue = (0, import_react89.useCallback)((newInputValue) => {
      dispatch2({
        type: FunctionSetInputValue$1,
        inputValue: newInputValue
      });
    }, [dispatch2]);
    const getLabelProps = (0, import_react89.useCallback)((labelProps) => ({
      id: elementIds.labelId,
      htmlFor: elementIds.toggleButtonId,
      ...labelProps
    }), [elementIds]);
    const getMenuProps = (0, import_react89.useCallback)(function(_temp, _temp2) {
      let {
        onMouseLeave,
        refKey = "ref",
        onKeyDown,
        onBlur,
        ref,
        ...rest
      } = _temp === void 0 ? {} : _temp;
      let {
        suppressRefError = false
      } = _temp2 === void 0 ? {} : _temp2;
      const latestState = latest.current.state;
      const menuHandleKeyDown = (event) => {
        const key = normalizeArrowKey(event);
        if (key && menuKeyDownHandlers[key]) {
          menuKeyDownHandlers[key](event);
        } else if (isAcceptedCharacterKey(key)) {
          dispatch2({
            type: MenuKeyDownCharacter,
            key,
            getItemNodeFromIndex
          });
        }
      };
      const menuHandleBlur = () => {
        if (shouldBlurRef.current === false) {
          shouldBlurRef.current = true;
          return;
        }
        const shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown;
        if (shouldBlur) {
          dispatch2({
            type: MenuBlur
          });
        }
      };
      const menuHandleMouseLeave = () => {
        dispatch2({
          type: MenuMouseLeave$1
        });
      };
      setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
      return {
        [refKey]: handleRefs(ref, (menuNode) => {
          menuRef.current = menuNode;
        }),
        id: elementIds.menuId,
        role: "listbox",
        "aria-labelledby": elementIds.labelId,
        tabIndex: -1,
        ...latestState.isOpen && latestState.highlightedIndex > -1 && {
          "aria-activedescendant": elementIds.getItemId(latestState.highlightedIndex)
        },
        onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),
        onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),
        onBlur: callAllEventHandlers(onBlur, menuHandleBlur),
        ...rest
      };
    }, [dispatch2, latest, menuKeyDownHandlers, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds, getItemNodeFromIndex]);
    const getToggleButtonProps = (0, import_react89.useCallback)(function(_temp3, _temp4) {
      let {
        onClick,
        onKeyDown,
        refKey = "ref",
        ref,
        ...rest
      } = _temp3 === void 0 ? {} : _temp3;
      let {
        suppressRefError = false
      } = _temp4 === void 0 ? {} : _temp4;
      const toggleButtonHandleClick = () => {
        dispatch2({
          type: ToggleButtonClick$1
        });
      };
      const toggleButtonHandleKeyDown = (event) => {
        const key = normalizeArrowKey(event);
        if (key && toggleButtonKeyDownHandlers[key]) {
          toggleButtonKeyDownHandlers[key](event);
        } else if (isAcceptedCharacterKey(key)) {
          dispatch2({
            type: ToggleButtonKeyDownCharacter,
            key,
            getItemNodeFromIndex
          });
        }
      };
      const toggleProps = {
        [refKey]: handleRefs(ref, (toggleButtonNode) => {
          toggleButtonRef.current = toggleButtonNode;
        }),
        id: elementIds.toggleButtonId,
        "aria-haspopup": "listbox",
        "aria-expanded": latest.current.state.isOpen,
        "aria-labelledby": `${elementIds.labelId} ${elementIds.toggleButtonId}`,
        ...rest
      };
      if (!rest.disabled) {
        toggleProps.onClick = callAllEventHandlers(onClick, toggleButtonHandleClick);
        toggleProps.onKeyDown = callAllEventHandlers(onKeyDown, toggleButtonHandleKeyDown);
      }
      setGetterPropCallInfo("getToggleButtonProps", suppressRefError, refKey, toggleButtonRef);
      return toggleProps;
    }, [dispatch2, latest, toggleButtonKeyDownHandlers, setGetterPropCallInfo, elementIds, getItemNodeFromIndex]);
    const getItemProps = (0, import_react89.useCallback)(function(_temp5) {
      let {
        item,
        index: index2,
        onMouseMove,
        onClick,
        refKey = "ref",
        ref,
        disabled,
        ...rest
      } = _temp5 === void 0 ? {} : _temp5;
      const {
        state: latestState,
        props: latestProps
      } = latest.current;
      const itemHandleMouseMove = () => {
        if (index2 === latestState.highlightedIndex) {
          return;
        }
        shouldScrollRef.current = false;
        dispatch2({
          type: ItemMouseMove$1,
          index: index2,
          disabled
        });
      };
      const itemHandleClick = () => {
        dispatch2({
          type: ItemClick$1,
          index: index2
        });
      };
      const itemIndex = getItemIndex(index2, item, latestProps.items);
      if (itemIndex < 0) {
        throw new Error("Pass either item or item index in getItemProps!");
      }
      const itemProps = {
        disabled,
        role: "option",
        "aria-selected": `${itemIndex === latestState.highlightedIndex}`,
        id: elementIds.getItemId(itemIndex),
        [refKey]: handleRefs(ref, (itemNode) => {
          if (itemNode) {
            itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;
          }
        }),
        ...rest
      };
      if (!disabled) {
        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick);
      }
      itemProps.onMouseMove = callAllEventHandlers(onMouseMove, itemHandleMouseMove);
      return itemProps;
    }, [dispatch2, latest, shouldScrollRef, elementIds]);
    return {
      // prop getters.
      getToggleButtonProps,
      getLabelProps,
      getMenuProps,
      getItemProps,
      // actions.
      toggleMenu,
      openMenu,
      closeMenu,
      setHighlightedIndex,
      selectItem,
      reset,
      setInputValue,
      // state.
      highlightedIndex,
      isOpen,
      selectedItem,
      inputValue
    };
  }
  var InputKeyDownArrowDown = true ? "__input_keydown_arrow_down__" : 0;
  var InputKeyDownArrowUp = true ? "__input_keydown_arrow_up__" : 1;
  var InputKeyDownEscape = true ? "__input_keydown_escape__" : 2;
  var InputKeyDownHome = true ? "__input_keydown_home__" : 3;
  var InputKeyDownEnd = true ? "__input_keydown_end__" : 4;
  var InputKeyDownEnter = true ? "__input_keydown_enter__" : 5;
  var InputChange = true ? "__input_change__" : 6;
  var InputBlur = true ? "__input_blur__" : 7;
  var MenuMouseLeave = true ? "__menu_mouse_leave__" : 8;
  var ItemMouseMove = true ? "__item_mouse_move__" : 9;
  var ItemClick = true ? "__item_click__" : 10;
  var ToggleButtonClick = true ? "__togglebutton_click__" : 11;
  var FunctionToggleMenu = true ? "__function_toggle_menu__" : 12;
  var FunctionOpenMenu = true ? "__function_open_menu__" : 13;
  var FunctionCloseMenu = true ? "__function_close_menu__" : 14;
  var FunctionSetHighlightedIndex = true ? "__function_set_highlighted_index__" : 15;
  var FunctionSelectItem = true ? "__function_select_item__" : 16;
  var FunctionSetInputValue = true ? "__function_set_input_value__" : 17;
  var FunctionReset$1 = true ? "__function_reset__" : 18;
  var ControlledPropUpdatedSelectedItem = true ? "__controlled_prop_updated_selected_item__" : 19;
  var stateChangeTypes$1 = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    InputKeyDownArrowDown,
    InputKeyDownArrowUp,
    InputKeyDownEscape,
    InputKeyDownHome,
    InputKeyDownEnd,
    InputKeyDownEnter,
    InputChange,
    InputBlur,
    MenuMouseLeave,
    ItemMouseMove,
    ItemClick,
    ToggleButtonClick,
    FunctionToggleMenu,
    FunctionOpenMenu,
    FunctionCloseMenu,
    FunctionSetHighlightedIndex,
    FunctionSelectItem,
    FunctionSetInputValue,
    FunctionReset: FunctionReset$1,
    ControlledPropUpdatedSelectedItem
  });
  function getInitialState$1(props) {
    const initialState = getInitialState$2(props);
    const {
      selectedItem
    } = initialState;
    let {
      inputValue
    } = initialState;
    if (inputValue === "" && selectedItem && props.defaultInputValue === void 0 && props.initialInputValue === void 0 && props.inputValue === void 0) {
      inputValue = props.itemToString(selectedItem);
    }
    return {
      ...initialState,
      inputValue
    };
  }
  var propTypes$1 = {
    items: import_prop_types.default.array.isRequired,
    itemToString: import_prop_types.default.func,
    getA11yStatusMessage: import_prop_types.default.func,
    getA11ySelectionMessage: import_prop_types.default.func,
    circularNavigation: import_prop_types.default.bool,
    highlightedIndex: import_prop_types.default.number,
    defaultHighlightedIndex: import_prop_types.default.number,
    initialHighlightedIndex: import_prop_types.default.number,
    isOpen: import_prop_types.default.bool,
    defaultIsOpen: import_prop_types.default.bool,
    initialIsOpen: import_prop_types.default.bool,
    selectedItem: import_prop_types.default.any,
    initialSelectedItem: import_prop_types.default.any,
    defaultSelectedItem: import_prop_types.default.any,
    inputValue: import_prop_types.default.string,
    defaultInputValue: import_prop_types.default.string,
    initialInputValue: import_prop_types.default.string,
    id: import_prop_types.default.string,
    labelId: import_prop_types.default.string,
    menuId: import_prop_types.default.string,
    getItemId: import_prop_types.default.func,
    inputId: import_prop_types.default.string,
    toggleButtonId: import_prop_types.default.string,
    stateReducer: import_prop_types.default.func,
    onSelectedItemChange: import_prop_types.default.func,
    onHighlightedIndexChange: import_prop_types.default.func,
    onStateChange: import_prop_types.default.func,
    onIsOpenChange: import_prop_types.default.func,
    onInputValueChange: import_prop_types.default.func,
    environment: import_prop_types.default.shape({
      addEventListener: import_prop_types.default.func,
      removeEventListener: import_prop_types.default.func,
      document: import_prop_types.default.shape({
        getElementById: import_prop_types.default.func,
        activeElement: import_prop_types.default.any,
        body: import_prop_types.default.any
      })
    })
  };
  function useControlledReducer(reducer2, initialState, props) {
    const previousSelectedItemRef = (0, import_react89.useRef)();
    const [state, dispatch2] = useEnhancedReducer(reducer2, initialState, props);
    (0, import_react89.useEffect)(() => {
      if (isControlledProp(props, "selectedItem")) {
        if (previousSelectedItemRef.current !== props.selectedItem) {
          dispatch2({
            type: ControlledPropUpdatedSelectedItem,
            inputValue: props.itemToString(props.selectedItem)
          });
        }
        previousSelectedItemRef.current = state.selectedItem === previousSelectedItemRef.current ? props.selectedItem : state.selectedItem;
      }
    });
    return [getState(state, props), dispatch2];
  }
  var validatePropTypes$1 = noop5;
  if (true) {
    validatePropTypes$1 = (options, caller) => {
      import_prop_types.default.checkPropTypes(propTypes$1, options, "prop", caller.name);
    };
  }
  var defaultProps$1 = {
    ...defaultProps$3,
    getA11yStatusMessage: getA11yStatusMessage$1,
    circularNavigation: true
  };
  function downshiftUseComboboxReducer(state, action) {
    const {
      type,
      props,
      shiftKey
    } = action;
    let changes;
    switch (type) {
      case ItemClick:
        changes = {
          isOpen: getDefaultValue$1(props, "isOpen"),
          highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
          selectedItem: props.items[action.index],
          inputValue: props.itemToString(props.items[action.index])
        };
        break;
      case InputKeyDownArrowDown:
        if (state.isOpen) {
          changes = {
            highlightedIndex: getNextWrappingIndex(shiftKey ? 5 : 1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
          };
        } else {
          changes = {
            highlightedIndex: getHighlightedIndexOnOpen(props, state, 1, action.getItemNodeFromIndex),
            isOpen: props.items.length >= 0
          };
        }
        break;
      case InputKeyDownArrowUp:
        if (state.isOpen) {
          changes = {
            highlightedIndex: getNextWrappingIndex(shiftKey ? -5 : -1, state.highlightedIndex, props.items.length, action.getItemNodeFromIndex, props.circularNavigation)
          };
        } else {
          changes = {
            highlightedIndex: getHighlightedIndexOnOpen(props, state, -1, action.getItemNodeFromIndex),
            isOpen: props.items.length >= 0
          };
        }
        break;
      case InputKeyDownEnter:
        changes = {
          ...state.isOpen && state.highlightedIndex >= 0 && {
            selectedItem: props.items[state.highlightedIndex],
            isOpen: getDefaultValue$1(props, "isOpen"),
            highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
            inputValue: props.itemToString(props.items[state.highlightedIndex])
          }
        };
        break;
      case InputKeyDownEscape:
        changes = {
          isOpen: false,
          highlightedIndex: -1,
          ...!state.isOpen && {
            selectedItem: null,
            inputValue: ""
          }
        };
        break;
      case InputKeyDownHome:
        changes = {
          highlightedIndex: getNextNonDisabledIndex(1, 0, props.items.length, action.getItemNodeFromIndex, false)
        };
        break;
      case InputKeyDownEnd:
        changes = {
          highlightedIndex: getNextNonDisabledIndex(-1, props.items.length - 1, props.items.length, action.getItemNodeFromIndex, false)
        };
        break;
      case InputBlur:
        changes = {
          isOpen: false,
          highlightedIndex: -1,
          ...state.highlightedIndex >= 0 && action.selectItem && {
            selectedItem: props.items[state.highlightedIndex],
            inputValue: props.itemToString(props.items[state.highlightedIndex])
          }
        };
        break;
      case InputChange:
        changes = {
          isOpen: true,
          highlightedIndex: getDefaultValue$1(props, "highlightedIndex"),
          inputValue: action.inputValue
        };
        break;
      case FunctionSelectItem:
        changes = {
          selectedItem: action.selectedItem,
          inputValue: props.itemToString(action.selectedItem)
        };
        break;
      case ControlledPropUpdatedSelectedItem:
        changes = {
          inputValue: action.inputValue
        };
        break;
      default:
        return downshiftCommonReducer(state, action, stateChangeTypes$1);
    }
    return {
      ...state,
      ...changes
    };
  }
  useCombobox.stateChangeTypes = stateChangeTypes$1;
  function useCombobox(userProps) {
    if (userProps === void 0) {
      userProps = {};
    }
    validatePropTypes$1(userProps, useCombobox);
    const props = {
      ...defaultProps$1,
      ...userProps
    };
    const {
      initialIsOpen,
      defaultIsOpen,
      items,
      scrollIntoView: scrollIntoView2,
      environment,
      getA11yStatusMessage: getA11yStatusMessage2,
      getA11ySelectionMessage: getA11ySelectionMessage2,
      itemToString: itemToString3
    } = props;
    const initialState = getInitialState$1(props);
    const [state, dispatch2] = useControlledReducer(downshiftUseComboboxReducer, initialState, props);
    const {
      isOpen,
      highlightedIndex,
      selectedItem,
      inputValue
    } = state;
    const menuRef = (0, import_react89.useRef)(null);
    const itemRefs = (0, import_react89.useRef)({});
    const inputRef = (0, import_react89.useRef)(null);
    const toggleButtonRef = (0, import_react89.useRef)(null);
    const comboboxRef = (0, import_react89.useRef)(null);
    const isInitialMountRef = (0, import_react89.useRef)(true);
    const elementIds = useElementIds(props);
    const previousResultCountRef = (0, import_react89.useRef)();
    const latest = useLatestRef2({
      state,
      props
    });
    const getItemNodeFromIndex = (0, import_react89.useCallback)((index2) => itemRefs.current[elementIds.getItemId(index2)], [elementIds]);
    useA11yMessageSetter(getA11yStatusMessage2, [isOpen, highlightedIndex, inputValue, items], {
      isInitialMount: isInitialMountRef.current,
      previousResultCount: previousResultCountRef.current,
      items,
      environment,
      itemToString: itemToString3,
      ...state
    });
    useA11yMessageSetter(getA11ySelectionMessage2, [selectedItem], {
      isInitialMount: isInitialMountRef.current,
      previousResultCount: previousResultCountRef.current,
      items,
      environment,
      itemToString: itemToString3,
      ...state
    });
    const shouldScrollRef = useScrollIntoView({
      menuElement: menuRef.current,
      highlightedIndex,
      isOpen,
      itemRefs,
      scrollIntoView: scrollIntoView2,
      getItemNodeFromIndex
    });
    useControlPropsValidator({
      isInitialMount: isInitialMountRef.current,
      props,
      state
    });
    (0, import_react89.useEffect)(() => {
      const focusOnOpen = initialIsOpen || defaultIsOpen || isOpen;
      if (focusOnOpen && inputRef.current) {
        inputRef.current.focus();
      }
    }, []);
    (0, import_react89.useEffect)(() => {
      if (isInitialMountRef.current) {
        return;
      }
      previousResultCountRef.current = items.length;
    });
    const mouseAndTouchTrackersRef = useMouseAndTouchTracker(isOpen, [comboboxRef, menuRef, toggleButtonRef], environment, () => {
      dispatch2({
        type: InputBlur,
        selectItem: false
      });
    });
    const setGetterPropCallInfo = useGetterPropsCalledChecker("getInputProps", "getComboboxProps", "getMenuProps");
    (0, import_react89.useEffect)(() => {
      isInitialMountRef.current = false;
    }, []);
    (0, import_react89.useEffect)(() => {
      if (!isOpen) {
        itemRefs.current = {};
      }
    }, [isOpen]);
    const inputKeyDownHandlers = (0, import_react89.useMemo)(() => ({
      ArrowDown(event) {
        event.preventDefault();
        dispatch2({
          type: InputKeyDownArrowDown,
          shiftKey: event.shiftKey,
          getItemNodeFromIndex
        });
      },
      ArrowUp(event) {
        event.preventDefault();
        dispatch2({
          type: InputKeyDownArrowUp,
          shiftKey: event.shiftKey,
          getItemNodeFromIndex
        });
      },
      Home(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch2({
          type: InputKeyDownHome,
          getItemNodeFromIndex
        });
      },
      End(event) {
        if (!latest.current.state.isOpen) {
          return;
        }
        event.preventDefault();
        dispatch2({
          type: InputKeyDownEnd,
          getItemNodeFromIndex
        });
      },
      Escape(event) {
        const latestState = latest.current.state;
        if (latestState.isOpen || latestState.inputValue || latestState.selectedItem || latestState.highlightedIndex > -1) {
          event.preventDefault();
          dispatch2({
            type: InputKeyDownEscape
          });
        }
      },
      Enter(event) {
        const latestState = latest.current.state;
        if (!latestState.isOpen || latestState.highlightedIndex < 0 || event.which === 229) {
          return;
        }
        event.preventDefault();
        dispatch2({
          type: InputKeyDownEnter,
          getItemNodeFromIndex
        });
      }
    }), [dispatch2, latest, getItemNodeFromIndex]);
    const getLabelProps = (0, import_react89.useCallback)((labelProps) => ({
      id: elementIds.labelId,
      htmlFor: elementIds.inputId,
      ...labelProps
    }), [elementIds]);
    const getMenuProps = (0, import_react89.useCallback)(function(_temp, _temp2) {
      let {
        onMouseLeave,
        refKey = "ref",
        ref,
        ...rest
      } = _temp === void 0 ? {} : _temp;
      let {
        suppressRefError = false
      } = _temp2 === void 0 ? {} : _temp2;
      setGetterPropCallInfo("getMenuProps", suppressRefError, refKey, menuRef);
      return {
        [refKey]: handleRefs(ref, (menuNode) => {
          menuRef.current = menuNode;
        }),
        id: elementIds.menuId,
        role: "listbox",
        "aria-labelledby": elementIds.labelId,
        onMouseLeave: callAllEventHandlers(onMouseLeave, () => {
          dispatch2({
            type: MenuMouseLeave
          });
        }),
        ...rest
      };
    }, [dispatch2, setGetterPropCallInfo, elementIds]);
    const getItemProps = (0, import_react89.useCallback)(function(_temp3) {
      let {
        item,
        index: index2,
        refKey = "ref",
        ref,
        onMouseMove,
        onMouseDown,
        onClick,
        onPress,
        disabled,
        ...rest
      } = _temp3 === void 0 ? {} : _temp3;
      const {
        props: latestProps,
        state: latestState
      } = latest.current;
      const itemIndex = getItemIndex(index2, item, latestProps.items);
      if (itemIndex < 0) {
        throw new Error("Pass either item or item index in getItemProps!");
      }
      const onSelectKey = "onClick";
      const customClickHandler = onClick;
      const itemHandleMouseMove = () => {
        if (index2 === latestState.highlightedIndex) {
          return;
        }
        shouldScrollRef.current = false;
        dispatch2({
          type: ItemMouseMove,
          index: index2,
          disabled
        });
      };
      const itemHandleClick = () => {
        dispatch2({
          type: ItemClick,
          index: index2
        });
      };
      const itemHandleMouseDown = (e3) => e3.preventDefault();
      return {
        [refKey]: handleRefs(ref, (itemNode) => {
          if (itemNode) {
            itemRefs.current[elementIds.getItemId(itemIndex)] = itemNode;
          }
        }),
        disabled,
        role: "option",
        "aria-selected": `${itemIndex === latestState.highlightedIndex}`,
        id: elementIds.getItemId(itemIndex),
        ...!disabled && {
          [onSelectKey]: callAllEventHandlers(customClickHandler, itemHandleClick)
        },
        onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),
        onMouseDown: callAllEventHandlers(onMouseDown, itemHandleMouseDown),
        ...rest
      };
    }, [dispatch2, latest, shouldScrollRef, elementIds]);
    const getToggleButtonProps = (0, import_react89.useCallback)(function(_temp4) {
      let {
        onClick,
        onPress,
        refKey = "ref",
        ref,
        ...rest
      } = _temp4 === void 0 ? {} : _temp4;
      const toggleButtonHandleClick = () => {
        dispatch2({
          type: ToggleButtonClick
        });
        if (!latest.current.state.isOpen && inputRef.current) {
          inputRef.current.focus();
        }
      };
      return {
        [refKey]: handleRefs(ref, (toggleButtonNode) => {
          toggleButtonRef.current = toggleButtonNode;
        }),
        id: elementIds.toggleButtonId,
        tabIndex: -1,
        ...!rest.disabled && {
          ...{
            onClick: callAllEventHandlers(onClick, toggleButtonHandleClick)
          }
        },
        ...rest
      };
    }, [dispatch2, latest, elementIds]);
    const getInputProps = (0, import_react89.useCallback)(function(_temp5, _temp6) {
      let {
        onKeyDown,
        onChange,
        onInput,
        onBlur,
        onChangeText,
        refKey = "ref",
        ref,
        ...rest
      } = _temp5 === void 0 ? {} : _temp5;
      let {
        suppressRefError = false
      } = _temp6 === void 0 ? {} : _temp6;
      setGetterPropCallInfo("getInputProps", suppressRefError, refKey, inputRef);
      const latestState = latest.current.state;
      const inputHandleKeyDown = (event) => {
        const key = normalizeArrowKey(event);
        if (key && inputKeyDownHandlers[key]) {
          inputKeyDownHandlers[key](event);
        }
      };
      const inputHandleChange = (event) => {
        dispatch2({
          type: InputChange,
          inputValue: event.target.value
        });
      };
      const inputHandleBlur = () => {
        if (latestState.isOpen && !mouseAndTouchTrackersRef.current.isMouseDown) {
          dispatch2({
            type: InputBlur,
            selectItem: true
          });
        }
      };
      const onChangeKey = "onChange";
      let eventHandlers = {};
      if (!rest.disabled) {
        eventHandlers = {
          [onChangeKey]: callAllEventHandlers(onChange, onInput, inputHandleChange),
          onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),
          onBlur: callAllEventHandlers(onBlur, inputHandleBlur)
        };
      }
      return {
        [refKey]: handleRefs(ref, (inputNode) => {
          inputRef.current = inputNode;
        }),
        id: elementIds.inputId,
        "aria-autocomplete": "list",
        "aria-controls": elementIds.menuId,
        ...latestState.isOpen && latestState.highlightedIndex > -1 && {
          "aria-activedescendant": elementIds.getItemId(latestState.highlightedIndex)
        },
        "aria-labelledby": elementIds.labelId,
        // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion
        // revert back since autocomplete="nope" is ignored on latest Chrome and Opera
        autoComplete: "off",
        value: latestState.inputValue,
        ...eventHandlers,
        ...rest
      };
    }, [dispatch2, inputKeyDownHandlers, latest, mouseAndTouchTrackersRef, setGetterPropCallInfo, elementIds]);
    const getComboboxProps = (0, import_react89.useCallback)(function(_temp7, _temp8) {
      let {
        refKey = "ref",
        ref,
        ...rest
      } = _temp7 === void 0 ? {} : _temp7;
      let {
        suppressRefError = false
      } = _temp8 === void 0 ? {} : _temp8;
      setGetterPropCallInfo("getComboboxProps", suppressRefError, refKey, comboboxRef);
      return {
        [refKey]: handleRefs(ref, (comboboxNode) => {
          comboboxRef.current = comboboxNode;
        }),
        role: "combobox",
        "aria-haspopup": "listbox",
        "aria-owns": elementIds.menuId,
        "aria-expanded": latest.current.state.isOpen,
        ...rest
      };
    }, [latest, setGetterPropCallInfo, elementIds]);
    const toggleMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionToggleMenu
      });
    }, [dispatch2]);
    const closeMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionCloseMenu
      });
    }, [dispatch2]);
    const openMenu = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionOpenMenu
      });
    }, [dispatch2]);
    const setHighlightedIndex = (0, import_react89.useCallback)((newHighlightedIndex) => {
      dispatch2({
        type: FunctionSetHighlightedIndex,
        highlightedIndex: newHighlightedIndex
      });
    }, [dispatch2]);
    const selectItem = (0, import_react89.useCallback)((newSelectedItem) => {
      dispatch2({
        type: FunctionSelectItem,
        selectedItem: newSelectedItem
      });
    }, [dispatch2]);
    const setInputValue = (0, import_react89.useCallback)((newInputValue) => {
      dispatch2({
        type: FunctionSetInputValue,
        inputValue: newInputValue
      });
    }, [dispatch2]);
    const reset = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionReset$1
      });
    }, [dispatch2]);
    return {
      // prop getters.
      getItemProps,
      getLabelProps,
      getMenuProps,
      getInputProps,
      getComboboxProps,
      getToggleButtonProps,
      // actions.
      toggleMenu,
      openMenu,
      closeMenu,
      setHighlightedIndex,
      setInputValue,
      selectItem,
      reset,
      // state.
      highlightedIndex,
      isOpen,
      selectedItem,
      inputValue
    };
  }
  var defaultStateValues = {
    activeIndex: -1,
    selectedItems: []
  };
  function getInitialValue(props, propKey) {
    return getInitialValue$1(props, propKey, defaultStateValues);
  }
  function getDefaultValue(props, propKey) {
    return getDefaultValue$1(props, propKey, defaultStateValues);
  }
  function getInitialState(props) {
    const activeIndex = getInitialValue(props, "activeIndex");
    const selectedItems = getInitialValue(props, "selectedItems");
    return {
      activeIndex,
      selectedItems
    };
  }
  function isKeyDownOperationPermitted(event) {
    if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {
      return false;
    }
    const element = event.target;
    if (element instanceof HTMLInputElement && // if element is a text input
    element.value !== "" && // and we have text in it
    // and cursor is either not at the start or is currently highlighting text.
    (element.selectionStart !== 0 || element.selectionEnd !== 0)) {
      return false;
    }
    return true;
  }
  function getA11yRemovalMessage(selectionParameters) {
    const {
      removedSelectedItem,
      itemToString: itemToStringLocal
    } = selectionParameters;
    return `${itemToStringLocal(removedSelectedItem)} has been removed.`;
  }
  var propTypes = {
    selectedItems: import_prop_types.default.array,
    initialSelectedItems: import_prop_types.default.array,
    defaultSelectedItems: import_prop_types.default.array,
    itemToString: import_prop_types.default.func,
    getA11yRemovalMessage: import_prop_types.default.func,
    stateReducer: import_prop_types.default.func,
    activeIndex: import_prop_types.default.number,
    initialActiveIndex: import_prop_types.default.number,
    defaultActiveIndex: import_prop_types.default.number,
    onActiveIndexChange: import_prop_types.default.func,
    onSelectedItemsChange: import_prop_types.default.func,
    keyNavigationNext: import_prop_types.default.string,
    keyNavigationPrevious: import_prop_types.default.string,
    environment: import_prop_types.default.shape({
      addEventListener: import_prop_types.default.func,
      removeEventListener: import_prop_types.default.func,
      document: import_prop_types.default.shape({
        getElementById: import_prop_types.default.func,
        activeElement: import_prop_types.default.any,
        body: import_prop_types.default.any
      })
    })
  };
  var defaultProps = {
    itemToString: defaultProps$3.itemToString,
    stateReducer: defaultProps$3.stateReducer,
    environment: defaultProps$3.environment,
    getA11yRemovalMessage,
    keyNavigationNext: "ArrowRight",
    keyNavigationPrevious: "ArrowLeft"
  };
  var validatePropTypes = noop5;
  if (true) {
    validatePropTypes = (options, caller) => {
      import_prop_types.default.checkPropTypes(propTypes, options, "prop", caller.name);
    };
  }
  var SelectedItemClick = true ? "__selected_item_click__" : 0;
  var SelectedItemKeyDownDelete = true ? "__selected_item_keydown_delete__" : 1;
  var SelectedItemKeyDownBackspace = true ? "__selected_item_keydown_backspace__" : 2;
  var SelectedItemKeyDownNavigationNext = true ? "__selected_item_keydown_navigation_next__" : 3;
  var SelectedItemKeyDownNavigationPrevious = true ? "__selected_item_keydown_navigation_previous__" : 4;
  var DropdownKeyDownNavigationPrevious = true ? "__dropdown_keydown_navigation_previous__" : 5;
  var DropdownKeyDownBackspace = true ? "__dropdown_keydown_backspace__" : 6;
  var DropdownClick = true ? "__dropdown_click__" : 7;
  var FunctionAddSelectedItem = true ? "__function_add_selected_item__" : 8;
  var FunctionRemoveSelectedItem = true ? "__function_remove_selected_item__" : 9;
  var FunctionSetSelectedItems = true ? "__function_set_selected_items__" : 10;
  var FunctionSetActiveIndex = true ? "__function_set_active_index__" : 11;
  var FunctionReset = true ? "__function_reset__" : 12;
  var stateChangeTypes = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    SelectedItemClick,
    SelectedItemKeyDownDelete,
    SelectedItemKeyDownBackspace,
    SelectedItemKeyDownNavigationNext,
    SelectedItemKeyDownNavigationPrevious,
    DropdownKeyDownNavigationPrevious,
    DropdownKeyDownBackspace,
    DropdownClick,
    FunctionAddSelectedItem,
    FunctionRemoveSelectedItem,
    FunctionSetSelectedItems,
    FunctionSetActiveIndex,
    FunctionReset
  });
  function downshiftMultipleSelectionReducer(state, action) {
    const {
      type,
      index: index2,
      props,
      selectedItem
    } = action;
    const {
      activeIndex,
      selectedItems
    } = state;
    let changes;
    switch (type) {
      case SelectedItemClick:
        changes = {
          activeIndex: index2
        };
        break;
      case SelectedItemKeyDownNavigationPrevious:
        changes = {
          activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1
        };
        break;
      case SelectedItemKeyDownNavigationNext:
        changes = {
          activeIndex: activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1
        };
        break;
      case SelectedItemKeyDownBackspace:
      case SelectedItemKeyDownDelete: {
        let newActiveIndex = activeIndex;
        if (selectedItems.length === 1) {
          newActiveIndex = -1;
        } else if (activeIndex === selectedItems.length - 1) {
          newActiveIndex = selectedItems.length - 2;
        }
        changes = {
          selectedItems: [...selectedItems.slice(0, activeIndex), ...selectedItems.slice(activeIndex + 1)],
          ...{
            activeIndex: newActiveIndex
          }
        };
        break;
      }
      case DropdownKeyDownNavigationPrevious:
        changes = {
          activeIndex: selectedItems.length - 1
        };
        break;
      case DropdownKeyDownBackspace:
        changes = {
          selectedItems: selectedItems.slice(0, selectedItems.length - 1)
        };
        break;
      case FunctionAddSelectedItem:
        changes = {
          selectedItems: [...selectedItems, selectedItem]
        };
        break;
      case DropdownClick:
        changes = {
          activeIndex: -1
        };
        break;
      case FunctionRemoveSelectedItem: {
        let newActiveIndex = activeIndex;
        const selectedItemIndex = selectedItems.indexOf(selectedItem);
        if (selectedItemIndex >= 0) {
          if (selectedItems.length === 1) {
            newActiveIndex = -1;
          } else if (selectedItemIndex === selectedItems.length - 1) {
            newActiveIndex = selectedItems.length - 2;
          }
          changes = {
            selectedItems: [...selectedItems.slice(0, selectedItemIndex), ...selectedItems.slice(selectedItemIndex + 1)],
            activeIndex: newActiveIndex
          };
        }
        break;
      }
      case FunctionSetSelectedItems: {
        const {
          selectedItems: newSelectedItems
        } = action;
        changes = {
          selectedItems: newSelectedItems
        };
        break;
      }
      case FunctionSetActiveIndex: {
        const {
          activeIndex: newActiveIndex
        } = action;
        changes = {
          activeIndex: newActiveIndex
        };
        break;
      }
      case FunctionReset:
        changes = {
          activeIndex: getDefaultValue(props, "activeIndex"),
          selectedItems: getDefaultValue(props, "selectedItems")
        };
        break;
      default:
        throw new Error("Reducer called without proper action type.");
    }
    return {
      ...state,
      ...changes
    };
  }
  useMultipleSelection.stateChangeTypes = stateChangeTypes;
  function useMultipleSelection(userProps) {
    if (userProps === void 0) {
      userProps = {};
    }
    validatePropTypes(userProps, useMultipleSelection);
    const props = {
      ...defaultProps,
      ...userProps
    };
    const {
      getA11yRemovalMessage: getA11yRemovalMessage2,
      itemToString: itemToString3,
      environment,
      keyNavigationNext,
      keyNavigationPrevious
    } = props;
    const [state, dispatch2] = useControlledReducer$1(downshiftMultipleSelectionReducer, getInitialState(props), props);
    const {
      activeIndex,
      selectedItems
    } = state;
    const isInitialMountRef = (0, import_react89.useRef)(true);
    const dropdownRef = (0, import_react89.useRef)(null);
    const previousSelectedItemsRef = (0, import_react89.useRef)(selectedItems);
    const selectedItemRefs = (0, import_react89.useRef)();
    selectedItemRefs.current = [];
    const latest = useLatestRef2({
      state,
      props
    });
    (0, import_react89.useEffect)(() => {
      if (isInitialMountRef.current) {
        return;
      }
      if (selectedItems.length < previousSelectedItemsRef.current.length) {
        const removedSelectedItem = previousSelectedItemsRef.current.find((item) => selectedItems.indexOf(item) < 0);
        setStatus(getA11yRemovalMessage2({
          itemToString: itemToString3,
          resultCount: selectedItems.length,
          removedSelectedItem,
          activeIndex,
          activeSelectedItem: selectedItems[activeIndex]
        }), environment.document);
      }
      previousSelectedItemsRef.current = selectedItems;
    }, [selectedItems.length]);
    (0, import_react89.useEffect)(() => {
      if (isInitialMountRef.current) {
        return;
      }
      if (activeIndex === -1 && dropdownRef.current) {
        dropdownRef.current.focus();
      } else if (selectedItemRefs.current[activeIndex]) {
        selectedItemRefs.current[activeIndex].focus();
      }
    }, [activeIndex]);
    useControlPropsValidator({
      isInitialMount: isInitialMountRef.current,
      props,
      state
    });
    const setGetterPropCallInfo = useGetterPropsCalledChecker("getDropdownProps");
    (0, import_react89.useEffect)(() => {
      isInitialMountRef.current = false;
    }, []);
    const selectedItemKeyDownHandlers = (0, import_react89.useMemo)(() => ({
      [keyNavigationPrevious]() {
        dispatch2({
          type: SelectedItemKeyDownNavigationPrevious
        });
      },
      [keyNavigationNext]() {
        dispatch2({
          type: SelectedItemKeyDownNavigationNext
        });
      },
      Delete() {
        dispatch2({
          type: SelectedItemKeyDownDelete
        });
      },
      Backspace() {
        dispatch2({
          type: SelectedItemKeyDownBackspace
        });
      }
    }), [dispatch2, keyNavigationNext, keyNavigationPrevious]);
    const dropdownKeyDownHandlers = (0, import_react89.useMemo)(() => ({
      [keyNavigationPrevious](event) {
        if (isKeyDownOperationPermitted(event)) {
          dispatch2({
            type: DropdownKeyDownNavigationPrevious
          });
        }
      },
      Backspace(event) {
        if (isKeyDownOperationPermitted(event)) {
          dispatch2({
            type: DropdownKeyDownBackspace
          });
        }
      }
    }), [dispatch2, keyNavigationPrevious]);
    const getSelectedItemProps = (0, import_react89.useCallback)(function(_temp) {
      let {
        refKey = "ref",
        ref,
        onClick,
        onKeyDown,
        selectedItem,
        index: index2,
        ...rest
      } = _temp === void 0 ? {} : _temp;
      const {
        state: latestState
      } = latest.current;
      const itemIndex = getItemIndex(index2, selectedItem, latestState.selectedItems);
      if (itemIndex < 0) {
        throw new Error("Pass either selectedItem or index in getSelectedItemProps!");
      }
      const selectedItemHandleClick = () => {
        dispatch2({
          type: SelectedItemClick,
          index: index2
        });
      };
      const selectedItemHandleKeyDown = (event) => {
        const key = normalizeArrowKey(event);
        if (key && selectedItemKeyDownHandlers[key]) {
          selectedItemKeyDownHandlers[key](event);
        }
      };
      return {
        [refKey]: handleRefs(ref, (selectedItemNode) => {
          if (selectedItemNode) {
            selectedItemRefs.current.push(selectedItemNode);
          }
        }),
        tabIndex: index2 === latestState.activeIndex ? 0 : -1,
        onClick: callAllEventHandlers(onClick, selectedItemHandleClick),
        onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),
        ...rest
      };
    }, [dispatch2, latest, selectedItemKeyDownHandlers]);
    const getDropdownProps = (0, import_react89.useCallback)(function(_temp2, _temp3) {
      let {
        refKey = "ref",
        ref,
        onKeyDown,
        onClick,
        preventKeyAction = false,
        ...rest
      } = _temp2 === void 0 ? {} : _temp2;
      let {
        suppressRefError = false
      } = _temp3 === void 0 ? {} : _temp3;
      setGetterPropCallInfo("getDropdownProps", suppressRefError, refKey, dropdownRef);
      const dropdownHandleKeyDown = (event) => {
        const key = normalizeArrowKey(event);
        if (key && dropdownKeyDownHandlers[key]) {
          dropdownKeyDownHandlers[key](event);
        }
      };
      const dropdownHandleClick = () => {
        dispatch2({
          type: DropdownClick
        });
      };
      return {
        [refKey]: handleRefs(ref, (dropdownNode) => {
          if (dropdownNode) {
            dropdownRef.current = dropdownNode;
          }
        }),
        ...!preventKeyAction && {
          onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),
          onClick: callAllEventHandlers(onClick, dropdownHandleClick)
        },
        ...rest
      };
    }, [dispatch2, dropdownKeyDownHandlers, setGetterPropCallInfo]);
    const addSelectedItem = (0, import_react89.useCallback)((selectedItem) => {
      dispatch2({
        type: FunctionAddSelectedItem,
        selectedItem
      });
    }, [dispatch2]);
    const removeSelectedItem = (0, import_react89.useCallback)((selectedItem) => {
      dispatch2({
        type: FunctionRemoveSelectedItem,
        selectedItem
      });
    }, [dispatch2]);
    const setSelectedItems = (0, import_react89.useCallback)((newSelectedItems) => {
      dispatch2({
        type: FunctionSetSelectedItems,
        selectedItems: newSelectedItems
      });
    }, [dispatch2]);
    const setActiveIndex = (0, import_react89.useCallback)((newActiveIndex) => {
      dispatch2({
        type: FunctionSetActiveIndex,
        activeIndex: newActiveIndex
      });
    }, [dispatch2]);
    const reset = (0, import_react89.useCallback)(() => {
      dispatch2({
        type: FunctionReset
      });
    }, [dispatch2]);
    return {
      getSelectedItemProps,
      getDropdownProps,
      addSelectedItem,
      removeSelectedItem,
      setSelectedItems,
      setActiveIndex,
      reset,
      selectedItems,
      activeIndex
    };
  }

  // node_modules/@wordpress/components/build-module/custom-select-control/index.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var itemToString2 = (item) => item?.name;
  var stateReducer2 = ({
    selectedItem
  }, {
    type,
    changes,
    props: {
      items
    }
  }) => {
    switch (type) {
      case useSelect2.stateChangeTypes.ToggleButtonKeyDownArrowDown:
        return {
          selectedItem: items[selectedItem ? Math.min(items.indexOf(selectedItem) + 1, items.length - 1) : 0]
        };
      case useSelect2.stateChangeTypes.ToggleButtonKeyDownArrowUp:
        return {
          selectedItem: items[selectedItem ? Math.max(items.indexOf(selectedItem) - 1, 0) : items.length - 1]
        };
      default:
        return changes;
    }
  };
  function CustomSelectControl(props) {
    const {
      /** Start opting into the larger default height that will become the default size in a future version. */
      __next40pxDefaultSize = false,
      className,
      hideLabelFromVision,
      label,
      describedBy,
      options: items,
      onChange: onSelectedItemChange,
      /** @type {import('../select-control/types').SelectControlProps.size} */
      size: size4 = "default",
      value: _selectedItem,
      onMouseOver,
      onMouseOut,
      onFocus,
      onBlur,
      __experimentalShowSelectedHint = false
    } = useDeprecated36pxDefaultSizeProp(props);
    const {
      getLabelProps,
      getToggleButtonProps,
      getMenuProps,
      getItemProps,
      isOpen,
      highlightedIndex,
      selectedItem
    } = useSelect2({
      initialSelectedItem: items[0],
      items,
      itemToString: itemToString2,
      onSelectedItemChange,
      ...typeof _selectedItem !== "undefined" && _selectedItem !== null ? {
        selectedItem: _selectedItem
      } : void 0,
      stateReducer: stateReducer2
    });
    function getDescribedBy() {
      if (describedBy) {
        return describedBy;
      }
      if (!selectedItem) {
        return __("No selection");
      }
      return sprintf(__("Currently selected: %s"), selectedItem.name);
    }
    let menuProps = getMenuProps({
      className: "components-custom-select-control__menu",
      "aria-hidden": !isOpen
    });
    const onKeyDownHandler = (0, import_react.useCallback)((e3) => {
      e3.stopPropagation();
      menuProps?.onKeyDown?.(e3);
    }, [menuProps]);
    if (menuProps["aria-activedescendant"]?.startsWith("downshift-null")) {
      const {
        "aria-activedescendant": ariaActivedescendant,
        ...restMenuProps
      } = menuProps;
      menuProps = restMenuProps;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("div", {
      className: clsx_default("components-custom-select-control", className),
      children: [hideLabelFromVision ? /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(component_default2, {
        as: "label",
        ...getLabelProps(),
        children: label
      }) : (
        /* eslint-disable-next-line jsx-a11y/label-has-associated-control, jsx-a11y/label-has-for */
        /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(StyledLabel, {
          ...getLabelProps({
            className: "components-custom-select-control__label"
          }),
          children: label
        })
      ), /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(input_base_default, {
        __next40pxDefaultSize,
        size: size4,
        suffix: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(chevron_down_default2, {}),
        children: [/* @__PURE__ */ (0, import_jsx_runtime85.jsxs)(Select, {
          onMouseOver,
          onMouseOut,
          as: "button",
          onFocus,
          onBlur,
          selectSize: size4,
          __next40pxDefaultSize,
          ...getToggleButtonProps({
            // This is needed because some speech recognition software don't support `aria-labelledby`.
            "aria-label": label,
            "aria-labelledby": void 0,
            className: "components-custom-select-control__button",
            describedBy: getDescribedBy()
          }),
          children: [itemToString2(selectedItem), __experimentalShowSelectedHint && selectedItem.__experimentalHint && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", {
            className: "components-custom-select-control__hint",
            children: selectedItem.__experimentalHint
          })]
        }), /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("div", {
          className: "components-custom-select-control__menu-wrapper",
          children: /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("ul", {
            ...menuProps,
            onKeyDown: onKeyDownHandler,
            children: isOpen && items.map((item, index2) => /* @__PURE__ */ (0, import_jsx_runtime85.jsxs)("li", {
              ...getItemProps({
                item,
                index: index2,
                className: clsx_default(item.className, "components-custom-select-control__item", {
                  "is-highlighted": index2 === highlightedIndex,
                  "has-hint": !!item.__experimentalHint,
                  "is-next-40px-default-size": __next40pxDefaultSize
                }),
                style: item.style
              }),
              children: [item.name, item.__experimentalHint && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)("span", {
                className: "components-custom-select-control__item-hint",
                children: item.__experimentalHint
              }), item === selectedItem && /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(icon_default, {
                icon: check_default,
                className: "components-custom-select-control__item-icon"
              })]
            }, item.key))
          })
        })]
      })]
    });
  }

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-context/index.js
  var ToolbarContext = (0, import_react.createContext)(void 0);
  var toolbar_context_default = ToolbarContext;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-item/index.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  function ToolbarItem2({
    children,
    as: Component4,
    ...props
  }, ref) {
    const accessibleToolbarStore = (0, import_react.useContext)(toolbar_context_default);
    const isRenderProp2 = typeof children === "function";
    if (!isRenderProp2 && !Component4) {
      globalThis.SCRIPT_DEBUG === true ? warning("`ToolbarItem` is a generic headless component. You must pass either a `children` prop as a function or an `as` prop as a component. See https://developer.wordpress.org/block-editor/components/toolbar-item/") : void 0;
      return null;
    }
    const allProps = {
      ...props,
      ref,
      "data-toolbar-item": true
    };
    if (!accessibleToolbarStore) {
      if (Component4) {
        return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Component4, {
          ...allProps,
          children
        });
      }
      if (!isRenderProp2) {
        return null;
      }
      return children(allProps);
    }
    const render2 = isRenderProp2 ? children : Component4 && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(Component4, {
      children
    });
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(ToolbarItem, {
      ...allProps,
      store: accessibleToolbarStore,
      render: render2
    });
  }
  var toolbar_item_default = (0, import_react.forwardRef)(ToolbarItem2);

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-button/toolbar-button-container.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var ToolbarButtonContainer = ({
    children,
    className
  }) => /* @__PURE__ */ (0, import_jsx_runtime87.jsx)("div", {
    className,
    children
  });
  var toolbar_button_container_default = ToolbarButtonContainer;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-button/index.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  function UnforwardedToolbarButton({
    children,
    className,
    containerClassName,
    extraProps,
    isActive,
    isDisabled,
    title,
    ...props
  }, ref) {
    const accessibleToolbarState = (0, import_react.useContext)(toolbar_context_default);
    if (!accessibleToolbarState) {
      return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(toolbar_button_container_default, {
        className: containerClassName,
        children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(button_default, {
          ref,
          icon: props.icon,
          label: title,
          shortcut: props.shortcut,
          "data-subscript": props.subscript,
          onClick: (event) => {
            event.stopPropagation();
            if (props.onClick) {
              props.onClick(event);
            }
          },
          className: clsx_default("components-toolbar__control", className),
          isPressed: isActive,
          disabled: isDisabled,
          "data-toolbar-item": true,
          ...extraProps,
          ...props,
          children
        })
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(toolbar_item_default, {
      className: clsx_default("components-toolbar-button", className),
      ...extraProps,
      ...props,
      ref,
      children: (toolbarItemProps) => /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(button_default, {
        label: title,
        isPressed: isActive,
        disabled: isDisabled,
        ...toolbarItemProps,
        children
      })
    });
  }
  var ToolbarButton = (0, import_react.forwardRef)(UnforwardedToolbarButton);
  var toolbar_button_default = ToolbarButton;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-group/toolbar-group-container.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var ToolbarGroupContainer = ({
    className,
    children,
    ...props
  }) => /* @__PURE__ */ (0, import_jsx_runtime89.jsx)("div", {
    className,
    ...props,
    children
  });
  var toolbar_group_container_default = ToolbarGroupContainer;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-group/toolbar-group-collapsed.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  function ToolbarGroupCollapsed({
    controls = [],
    toggleProps,
    ...props
  }) {
    const accessibleToolbarState = (0, import_react.useContext)(toolbar_context_default);
    const renderDropdownMenu = (internalToggleProps) => /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(dropdown_menu_default, {
      controls,
      toggleProps: {
        ...internalToggleProps,
        "data-toolbar-item": true
      },
      ...props
    });
    if (accessibleToolbarState) {
      return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(toolbar_item_default, {
        ...toggleProps,
        children: renderDropdownMenu
      });
    }
    return renderDropdownMenu(toggleProps);
  }
  var toolbar_group_collapsed_default = ToolbarGroupCollapsed;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar-group/index.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  function isNestedArray(arr) {
    return Array.isArray(arr) && Array.isArray(arr[0]);
  }
  function ToolbarGroup({
    controls = [],
    children,
    className,
    isCollapsed: isCollapsed2,
    title,
    ...props
  }) {
    const accessibleToolbarState = (0, import_react.useContext)(toolbar_context_default);
    if ((!controls || !controls.length) && !children) {
      return null;
    }
    const finalClassName = clsx_default(
      // Unfortunately, there's legacy code referencing to `.components-toolbar`
      // So we can't get rid of it
      accessibleToolbarState ? "components-toolbar-group" : "components-toolbar",
      className
    );
    let controlSets;
    if (isNestedArray(controls)) {
      controlSets = controls;
    } else {
      controlSets = [controls];
    }
    if (isCollapsed2) {
      return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(toolbar_group_collapsed_default, {
        label: title,
        controls: controlSets,
        className: finalClassName,
        children,
        ...props
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(toolbar_group_container_default, {
      className: finalClassName,
      ...props,
      children: [controlSets?.flatMap((controlSet, indexOfSet) => controlSet.map((control, indexOfControl) => /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(toolbar_button_default, {
        containerClassName: indexOfSet > 0 && indexOfControl === 0 ? "has-left-divider" : void 0,
        ...control
      }, [indexOfSet, indexOfControl].join()))), children]
    });
  }
  var toolbar_group_default = ToolbarGroup;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar/toolbar-container.js
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  function UnforwardedToolbarContainer({
    label,
    ...props
  }, ref) {
    const toolbarStore = useToolbarStore({
      focusLoop: true,
      rtl: isRTL2()
    });
    return (
      // This will provide state for `ToolbarButton`'s
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(toolbar_context_default.Provider, {
        value: toolbarStore,
        children: /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(Toolbar, {
          ref,
          "aria-label": label,
          store: toolbarStore,
          ...props
        })
      })
    );
  }
  var ToolbarContainer2 = (0, import_react.forwardRef)(UnforwardedToolbarContainer);
  var toolbar_container_default = ToolbarContainer2;

  // node_modules/@wordpress/components/build-module/toolbar/toolbar/index.js
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  function UnforwardedToolbar({
    className,
    label,
    variant,
    ...props
  }, ref) {
    const isVariantDefined = variant !== void 0;
    const contextSystemValue = (0, import_react.useMemo)(() => {
      if (isVariantDefined) {
        return {};
      }
      return {
        DropdownMenu: {
          variant: "toolbar"
        },
        Dropdown: {
          variant: "toolbar"
        }
      };
    }, [isVariantDefined]);
    if (!label) {
      deprecated("Using Toolbar without label prop", {
        since: "5.6",
        alternative: "ToolbarGroup component",
        link: "https://developer.wordpress.org/block-editor/components/toolbar/"
      });
      const {
        title: _title,
        ...restProps
      } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(toolbar_group_default, {
        isCollapsed: false,
        ...restProps,
        className
      });
    }
    const finalClassName = clsx_default("components-accessible-toolbar", className, variant && `is-${variant}`);
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(ContextSystemProvider, {
      value: contextSystemValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(toolbar_container_default, {
        className: finalClassName,
        label,
        ref,
        ...props
      })
    });
  }
  var Toolbar2 = (0, import_react.forwardRef)(UnforwardedToolbar);
  var toolbar_default = Toolbar2;

  // node_modules/@wordpress/components/build-module/higher-order/with-filters/index.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var ANIMATION_FRAME_PERIOD = 16;
  function withFilters(hookName) {
    return createHigherOrderComponent((OriginalComponent) => {
      const namespace = "core/with-filters/" + hookName;
      let FilteredComponent;
      function ensureFilteredComponent() {
        if (FilteredComponent === void 0) {
          FilteredComponent = applyFilters(hookName, OriginalComponent);
        }
      }
      class FilteredComponentRenderer extends import_react.Component {
        constructor(props) {
          super(props);
          ensureFilteredComponent();
        }
        componentDidMount() {
          FilteredComponentRenderer.instances.push(this);
          if (FilteredComponentRenderer.instances.length === 1) {
            addAction("hookRemoved", namespace, onHooksUpdated);
            addAction("hookAdded", namespace, onHooksUpdated);
          }
        }
        componentWillUnmount() {
          FilteredComponentRenderer.instances = FilteredComponentRenderer.instances.filter((instance) => instance !== this);
          if (FilteredComponentRenderer.instances.length === 0) {
            removeAction("hookRemoved", namespace);
            removeAction("hookAdded", namespace);
          }
        }
        render() {
          return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(FilteredComponent, {
            ...this.props
          });
        }
      }
      FilteredComponentRenderer.instances = [];
      const throttledForceUpdate = debounce(() => {
        FilteredComponent = applyFilters(hookName, OriginalComponent);
        FilteredComponentRenderer.instances.forEach((instance) => {
          instance.forceUpdate();
        });
      }, ANIMATION_FRAME_PERIOD);
      function onHooksUpdated(updatedHookName) {
        if (updatedHookName === hookName) {
          throttledForceUpdate();
        }
      }
      return FilteredComponentRenderer;
    }, "withFilters");
  }

  // node_modules/@wordpress/components/build-module/dropdown-menu-v2/styles.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__9() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var ANIMATION_PARAMS = {
    SLIDE_AMOUNT: "2px",
    DURATION: "400ms",
    EASING: "cubic-bezier( 0.16, 1, 0.3, 1 )"
  };
  var CONTENT_WRAPPER_PADDING = space(1);
  var ITEM_PADDING_BLOCK = space(2);
  var ITEM_PADDING_INLINE = space(3);
  var DEFAULT_BORDER_COLOR = COLORS.gray[300];
  var DIVIDER_COLOR = COLORS.gray[200];
  var TOOLBAR_VARIANT_BORDER_COLOR = COLORS.gray["900"];
  var DEFAULT_BOX_SHADOW = `0 0 0 ${config_values_default.borderWidth} ${DEFAULT_BORDER_COLOR}, ${config_values_default.popoverShadow}`;
  var TOOLBAR_VARIANT_BOX_SHADOW = `0 0 0 ${config_values_default.borderWidth} ${TOOLBAR_VARIANT_BORDER_COLOR}`;
  var GRID_TEMPLATE_COLS = "minmax( 0, max-content ) 1fr";
  var slideUpAndFade = keyframes({
    "0%": {
      opacity: 0,
      transform: `translateY(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
    },
    "100%": {
      opacity: 1,
      transform: "translateY(0)"
    }
  });
  var slideRightAndFade = keyframes({
    "0%": {
      opacity: 0,
      transform: `translateX(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
    },
    "100%": {
      opacity: 1,
      transform: "translateX(0)"
    }
  });
  var slideDownAndFade = keyframes({
    "0%": {
      opacity: 0,
      transform: `translateY(-${ANIMATION_PARAMS.SLIDE_AMOUNT})`
    },
    "100%": {
      opacity: 1,
      transform: "translateY(0)"
    }
  });
  var slideLeftAndFade = keyframes({
    "0%": {
      opacity: 0,
      transform: `translateX(${ANIMATION_PARAMS.SLIDE_AMOUNT})`
    },
    "100%": {
      opacity: 1,
      transform: "translateX(0)"
    }
  });
  var DropdownMenu2 = /* @__PURE__ */ createStyled(Menu, false ? {
    target: "e1kdzosf12"
  } : {
    target: "e1kdzosf12",
    label: "DropdownMenu"
  })("position:relative;z-index:1000000;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";grid-template-rows:auto;box-sizing:border-box;min-width:160px;max-width:320px;max-height:var( --popover-available-height );padding:", CONTENT_WRAPPER_PADDING, ";background-color:", COLORS.ui.background, ";border-radius:4px;", (props) => /* @__PURE__ */ css("box-shadow:", props.variant === "toolbar" ? TOOLBAR_VARIANT_BOX_SHADOW : DEFAULT_BOX_SHADOW, ";" + (false ? "" : ";label:DropdownMenu;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"), " overscroll-behavior:contain;overflow:auto;outline:2px solid transparent!important;animation-duration:", ANIMATION_PARAMS.DURATION, ";animation-timing-function:", ANIMATION_PARAMS.EASING, ";will-change:transform,opacity;animation-name:", slideDownAndFade, ";&[data-side='right']{animation-name:", slideLeftAndFade, ";}&[data-side='bottom']{animation-name:", slideUpAndFade, ";}&[data-side='left']{animation-name:", slideRightAndFade, ";}@media ( prefers-reduced-motion ){animation-duration:0s;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var baseItem = /* @__PURE__ */ css("all:unset;position:relative;min-height:", space(10), ";box-sizing:border-box;grid-column:1/-1;display:grid;grid-template-columns:", GRID_TEMPLATE_COLS, ";align-items:center;@supports ( grid-template-columns: subgrid ){grid-template-columns:subgrid;}font-size:", font("default.fontSize"), ";font-family:inherit;font-weight:normal;line-height:20px;color:", COLORS.gray[900], ";border-radius:", config_values_default.radiusBlockUi, ";padding-block:", ITEM_PADDING_BLOCK, ";padding-inline:", ITEM_PADDING_INLINE, ";scroll-margin:", CONTENT_WRAPPER_PADDING, ";user-select:none;outline:none;&[aria-disabled='true']{color:", COLORS.ui.textDisabled, ";cursor:not-allowed;}&[data-active-item]:not( [data-focus-visible] ):not(\n			[aria-disabled='true']\n		){background-color:", COLORS.theme.accent, ";color:", COLORS.white, ";}&[data-focus-visible]{box-shadow:0 0 0 1.5px ", COLORS.theme.accent, ";outline:2px solid transparent;}&:active,&[data-active]{}", DropdownMenu2, ':not(:focus) &:not(:focus)[aria-expanded="true"]{background-color:', COLORS.gray[100], ";color:", COLORS.gray[900], ";}svg{fill:currentColor;}" + (false ? "" : ";label:baseItem;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  var DropdownMenuItem = /* @__PURE__ */ createStyled(MenuItem, false ? {
    target: "e1kdzosf11"
  } : {
    target: "e1kdzosf11",
    label: "DropdownMenuItem"
  })(baseItem, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuCheckboxItem = /* @__PURE__ */ createStyled(MenuItemCheckbox, false ? {
    target: "e1kdzosf10"
  } : {
    target: "e1kdzosf10",
    label: "DropdownMenuCheckboxItem"
  })(baseItem, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuRadioItem = /* @__PURE__ */ createStyled(MenuItemRadio, false ? {
    target: "e1kdzosf9"
  } : {
    target: "e1kdzosf9",
    label: "DropdownMenuRadioItem"
  })(baseItem, ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcU5vRSIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25NZW51Q29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xuXHRTTElERV9BTU9VTlQ6ICcycHgnLFxuXHREVVJBVElPTjogJzQwMG1zJyxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXG59O1xuXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XG5jb25zdCBJVEVNX1BBRERJTkdfQkxPQ0sgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORSA9IHNwYWNlKCAzICk7XG5cbi8vIFRPRE86XG4vLyAtIHRob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gc2F2ZWQgdmFyaWFibGVzP1xuLy8gLSBzaG91bGQgYnJpbmcgdGhpcyBpbnRvIHRoZSBjb25maWcsIGFuZCBtYWtlIHRoZW1lYWJsZVxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudD9cbmNvbnN0IERFRkFVTFRfQk9SREVSX0NPTE9SID0gQ09MT1JTLmdyYXlbIDMwMCBdO1xuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy5ncmF5WyAyMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IEdSSURfVEVNUExBVEVfQ09MUyA9ICdtaW5tYXgoIDAsIG1heC1jb250ZW50ICkgMWZyJztcblxuY29uc3Qgc2xpZGVVcEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZVJpZ2h0QW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZURvd25BbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoLSR7IEFOSU1BVElPTl9QQVJBTVMuU0xJREVfQU1PVU5UIH0pYCxcblx0fSxcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59ICk7XG5cbmNvbnN0IHNsaWRlTGVmdEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gc3R5bGVkKCBBcmlha2l0Lk1lbnUgKTxcblx0UGljazwgRHJvcGRvd25NZW51Q29udGV4dCwgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LyogU2FtZSBhcyBwb3BvdmVyIGNvbXBvbmVudCAqL1xuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xuXHR6LWluZGV4OiAxMDAwMDAwO1xuXG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XG5cdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcblxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtaW4td2lkdGg6IDE2MHB4O1xuXHRtYXgtd2lkdGg6IDMyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHQkeyAoIHByb3BzICkgPT4gY3NzYFxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPV1xuXHRcdFx0OiBERUZBVUxUX0JPWF9TSEFET1cgfTtcblx0YCB9XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIEFuaW1hdGlvbiAqL1xuXHRhbmltYXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04gfTtcblx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5FQVNJTkcgfTtcblx0d2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcblx0LyogRGVmYXVsdCBhbmltYXRpb24uKi9cblx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlRG93bkFuZEZhZGUgfTtcblxuXHQmW2RhdGEtc2lkZT0ncmlnaHQnXSB7XG5cdFx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlTGVmdEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nYm90dG9tJ10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVVwQW5kRmFkZSB9O1xuXHR9XG5cdCZbZGF0YS1zaWRlPSdsZWZ0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVJpZ2h0QW5kRmFkZSB9O1xuXHR9XG5cdEBtZWRpYSAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAwcztcblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzQmxvY2tVaSB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy53aGl0ZSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXG5cdFx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHR9XG5cblx0LyogQWN0aXZlIChpZS4gcHJlc3NlZCwgbW91c2UgZG93bikgKi9cblx0JjphY3RpdmUsXG5cdCZbZGF0YS1hY3RpdmVdIHtcblx0XHQvKiBUT0RPOiBzaG91bGQgdGhlcmUgYmUgYSB2aXN1YWwgYWN0aXZlIHN0YXRlPyAqL1xuXHR9XG5cblx0LyogV2hlbiB0aGUgaXRlbSBpcyB0aGUgdHJpZ2dlciBvZiBhbiBvcGVuIHN1Ym1lbnUgKi9cblx0JHsgRHJvcGRvd25NZW51IH06bm90KDpmb2N1cykgJjpub3QoOmZvY3VzKVthcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDEwMCBdIH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5cblx0c3ZnIHtcblx0XHRmaWxsOiBjdXJyZW50Q29sb3I7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtIClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtQ2hlY2tib3ggKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1SYWRpbyApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW1QcmVmaXhXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdC8qIEFsd2F5cyBvY2N1cHkgdGhlIGZpcnN0IGNvbHVtbiwgZXZlbiB3aGVuIGF1dG8tY29sbGFwc2luZyAqL1xuXHRncmlkLWNvbHVtbjogMTtcblxuXHQvKlxuXHQgKiBFdmVuIHdoZW4gdGhlIGl0ZW0gaXMgbm90IGNoZWNrZWQsIG9jY3VweSB0aGUgc2FtZSBzY3JlZW4gc3BhY2UgdG8gYXZvaWRcblx0ICogdGhlIHNwYWNlIGNvbGxhcHNpZGUgd2hlbiBubyBpdGVtcyBhcmUgY2hlY2tlZC5cblx0ICovXG5cdCR7IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSB9ID4gJixcblx0JHsgRHJvcGRvd25NZW51UmFkaW9JdGVtIH0gPiAmIHtcblx0XHQvKiBTYW1lIHdpZHRoIGFzIHRoZSBjaGVjayBpY29ucyAqL1xuXHRcdG1pbi13aWR0aDogJHsgc3BhY2UoIDYgKSB9O1xuXHR9XG5cblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYsXG5cdCY6bm90KCA6ZW1wdHkgKSB7XG5cdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0fVxuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgJzcwMCcgXSB9O1xuXG5cdC8qXG5cdCogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXG5cdCogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxuXHQqL1xuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApID4gJixcblx0LyogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBkaXNhYmxlZCAqL1xuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddID4gJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtQ29udGVudFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHQvKlxuXHQgKiBBbHdheXMgb2NjdXB5IHRoZSBzZWNvbmQgY29sdW1uLCBzaW5jZSB0aGUgZmlyc3QgY29sdW1uXG5cdCAqIGlzIHRha2VuIGJ5IHRoZSBwcmVmaXggd3JhcHBlciAod2hlbiBkaXNwbGF5ZWQpLlxuXHQgKi9cblx0Z3JpZC1jb2x1bW46IDI7XG5cblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtQ2hpbGRyZW5XcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0ZmxleDogMTtcblxuXHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0Z2FwOiAkeyBzcGFjZSggMSApIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVN1ZmZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZmxleDogMCAxIGZpdC1jb250ZW50O1xuXHRtaW4td2lkdGg6IDA7XG5cdHdpZHRoOiBmaXQtY29udGVudDtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0Z2FwOiAkeyBzcGFjZSggMyApIH07XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0Lypcblx0ICogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXG5cdCAqIHN1Ym1lbnUgdHJpZ2dlciAoaW4gdGhhdCBjYXNlLCBjb2xvciBzaG91bGQgbm90IGJlIGluaGVyaXRlZClcblx0ICovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgKjpub3QoJHsgRHJvcGRvd25NZW51IH0pICYsXG5cdC8qIFdoZW4gdGhlIHBhcmVudCBtZW51IGl0ZW0gaXMgZGlzYWJsZWQgKi9cblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCgkeyBEcm9wZG93bk1lbnUgfSkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVHcm91cCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXAgKWBcblx0LyogSWdub3JlIHRoaXMgZWxlbWVudCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBsYXlvdXQuIFVzZWZ1bCBmb3Igc3ViZ3JpZCAqL1xuXHRkaXNwbGF5OiBjb250ZW50cztcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVTZXBhcmF0b3IgPSBzdHlsZWQoIEFyaWFraXQuTWVudVNlcGFyYXRvciApPFxuXHRQaWNrPCBEcm9wZG93bk1lbnVDb250ZXh0LCAndmFyaWFudCcgPlxuPmBcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcblxuXHRib3JkZXI6IG5vbmU7XG5cdGhlaWdodDogJHsgQ09ORklHLmJvcmRlcldpZHRoIH07XG5cdGJhY2tncm91bmQtY29sb3I6ICR7ICggcHJvcHMgKSA9PlxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SXG5cdFx0XHQ6IERJVklERVJfQ09MT1IgfTtcblx0LyogQWxpZ24gd2l0aCBtZW51IGl0ZW1zJyBjb250ZW50ICovXG5cdG1hcmdpbi1ibG9jazogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4taW5saW5lOiAkeyBJVEVNX1BBRERJTkdfSU5MSU5FIH07XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWJtZW51Q2hldnJvbkljb24gPSBzdHlsZWQoIEljb24gKWBcblx0d2lkdGg6ICR7IHNwYWNlKCAxLjUgKSB9O1xuXHQkeyBydGwoXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKDEpYCxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSlgLFxuXHRcdH1cblx0KSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1MYWJlbCA9IHN0eWxlZCggVHJ1bmNhdGUgKWBcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMjBweDtcblx0Y29sb3I6IGluaGVyaXQ7XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbUhlbHBUZXh0ID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMTZweDtcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0W2RhdGEtYWN0aXZlLWl0ZW1dOm5vdCggW2RhdGEtZm9jdXMtdmlzaWJsZV0gKSAqOm5vdCggJHsgRHJvcGRvd25NZW51IH0gKSAmLFxuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddICo6bm90KCAkeyBEcm9wZG93bk1lbnUgfSApICYge1xuXHRcdGNvbG9yOiBpbmhlcml0O1xuXHR9XG5gO1xuIl19 */"));
  var ItemPrefixWrapper = /* @__PURE__ */ createStyled("span", false ? {
    target: "e1kdzosf8"
  } : {
    target: "e1kdzosf8",
    label: "ItemPrefixWrapper"
  })("grid-column:1;", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&{min-width:", space(6), ";}", DropdownMenuCheckboxItem, ">&,", DropdownMenuRadioItem, ">&,&:not( :empty ){margin-inline-end:", space(2), ";}display:flex;align-items:center;justify-content:center;color:", COLORS.gray["700"], ";[data-active-item]:not( [data-focus-visible] )>&,[aria-disabled='true']>&{color:inherit;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuItemContentWrapper = /* @__PURE__ */ createStyled("div", false ? {
    target: "e1kdzosf7"
  } : {
    target: "e1kdzosf7",
    label: "DropdownMenuItemContentWrapper"
  })("grid-column:2;display:flex;align-items:center;justify-content:space-between;gap:", space(3), ";pointer-events:none;" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuItemChildrenWrapper = /* @__PURE__ */ createStyled("div", false ? {
    target: "e1kdzosf6"
  } : {
    target: "e1kdzosf6",
    label: "DropdownMenuItemChildrenWrapper"
  })("flex:1;display:inline-flex;flex-direction:column;gap:", space(1), ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var ItemSuffixWrapper = /* @__PURE__ */ createStyled("span", false ? {
    target: "e1kdzosf5"
  } : {
    target: "e1kdzosf5",
    label: "ItemSuffixWrapper"
  })("flex:0 1 fit-content;min-width:0;width:fit-content;display:flex;align-items:center;justify-content:center;gap:", space(3), ";color:", COLORS.gray["700"], ";[data-active-item]:not( [data-focus-visible] ) *:not(", DropdownMenu2, ") &,[aria-disabled='true'] *:not(", DropdownMenu2, ") &{color:inherit;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvZHJvcGRvd24tbWVudS12Mi9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcVI0QyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL2Ryb3Bkb3duLW1lbnUtdjIvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5pbXBvcnQgeyBjc3MsIGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTLCBmb250LCBydGwsIENPTkZJRyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuaW1wb3J0IEljb24gZnJvbSAnLi4vaWNvbic7XG5pbXBvcnQgeyBUcnVuY2F0ZSB9IGZyb20gJy4uL3RydW5jYXRlJztcbmltcG9ydCB0eXBlIHsgRHJvcGRvd25NZW51Q29udGV4dCB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTklNQVRJT05fUEFSQU1TID0ge1xuXHRTTElERV9BTU9VTlQ6ICcycHgnLFxuXHREVVJBVElPTjogJzQwMG1zJyxcblx0RUFTSU5HOiAnY3ViaWMtYmV6aWVyKCAwLjE2LCAxLCAwLjMsIDEgKScsXG59O1xuXG5jb25zdCBDT05URU5UX1dSQVBQRVJfUEFERElORyA9IHNwYWNlKCAxICk7XG5jb25zdCBJVEVNX1BBRERJTkdfQkxPQ0sgPSBzcGFjZSggMiApO1xuY29uc3QgSVRFTV9QQURESU5HX0lOTElORSA9IHNwYWNlKCAzICk7XG5cbi8vIFRPRE86XG4vLyAtIHRob3NlIHZhbHVlcyBhcmUgZGlmZmVyZW50IGZyb20gc2F2ZWQgdmFyaWFibGVzP1xuLy8gLSBzaG91bGQgYnJpbmcgdGhpcyBpbnRvIHRoZSBjb25maWcsIGFuZCBtYWtlIHRoZW1lYWJsZVxuLy8gLSBib3JkZXIgY29sb3IgYW5kIGRpdmlkZXIgY29sb3IgYXJlIGRpZmZlcmVudD9cbmNvbnN0IERFRkFVTFRfQk9SREVSX0NPTE9SID0gQ09MT1JTLmdyYXlbIDMwMCBdO1xuY29uc3QgRElWSURFUl9DT0xPUiA9IENPTE9SUy5ncmF5WyAyMDAgXTtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgPSBDT0xPUlMuZ3JheVsgJzkwMCcgXTtcbmNvbnN0IERFRkFVTFRfQk9YX1NIQURPVyA9IGAwIDAgMCAkeyBDT05GSUcuYm9yZGVyV2lkdGggfSAkeyBERUZBVUxUX0JPUkRFUl9DT0xPUiB9LCAkeyBDT05GSUcucG9wb3ZlclNoYWRvdyB9YDtcbmNvbnN0IFRPT0xCQVJfVkFSSUFOVF9CT1hfU0hBRE9XID0gYDAgMCAwICR7IENPTkZJRy5ib3JkZXJXaWR0aCB9ICR7IFRPT0xCQVJfVkFSSUFOVF9CT1JERVJfQ09MT1IgfWA7XG5cbmNvbnN0IEdSSURfVEVNUExBVEVfQ09MUyA9ICdtaW5tYXgoIDAsIG1heC1jb250ZW50ICkgMWZyJztcblxuY29uc3Qgc2xpZGVVcEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWSgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVZKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZVJpZ2h0QW5kRmFkZSA9IGtleWZyYW1lcygge1xuXHQnMCUnOiB7XG5cdFx0b3BhY2l0eTogMCxcblx0XHR0cmFuc2Zvcm06IGB0cmFuc2xhdGVYKC0keyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5jb25zdCBzbGlkZURvd25BbmRGYWRlID0ga2V5ZnJhbWVzKCB7XG5cdCcwJSc6IHtcblx0XHRvcGFjaXR5OiAwLFxuXHRcdHRyYW5zZm9ybTogYHRyYW5zbGF0ZVkoLSR7IEFOSU1BVElPTl9QQVJBTVMuU0xJREVfQU1PVU5UIH0pYCxcblx0fSxcblx0JzEwMCUnOiB7IG9wYWNpdHk6IDEsIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVkoMCknIH0sXG59ICk7XG5cbmNvbnN0IHNsaWRlTGVmdEFuZEZhZGUgPSBrZXlmcmFtZXMoIHtcblx0JzAlJzoge1xuXHRcdG9wYWNpdHk6IDAsXG5cdFx0dHJhbnNmb3JtOiBgdHJhbnNsYXRlWCgkeyBBTklNQVRJT05fUEFSQU1TLlNMSURFX0FNT1VOVCB9KWAsXG5cdH0sXG5cdCcxMDAlJzogeyBvcGFjaXR5OiAxLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDApJyB9LFxufSApO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51ID0gc3R5bGVkKCBBcmlha2l0Lk1lbnUgKTxcblx0UGljazwgRHJvcGRvd25NZW51Q29udGV4dCwgJ3ZhcmlhbnQnID5cbj5gXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0LyogU2FtZSBhcyBwb3BvdmVyIGNvbXBvbmVudCAqL1xuXHQvKiBUT0RPOiBpcyB0aGVyZSBhIHdheSB0byByZWFkIHRoZSBzYXNzIHZhcmlhYmxlPyAqL1xuXHR6LWluZGV4OiAxMDAwMDAwO1xuXG5cdGRpc3BsYXk6IGdyaWQ7XG5cdGdyaWQtdGVtcGxhdGUtY29sdW1uczogJHsgR1JJRF9URU1QTEFURV9DT0xTIH07XG5cdGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcblxuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXHRtaW4td2lkdGg6IDE2MHB4O1xuXHRtYXgtd2lkdGg6IDMyMHB4O1xuXHRtYXgtaGVpZ2h0OiB2YXIoIC0tcG9wb3Zlci1hdmFpbGFibGUtaGVpZ2h0ICk7XG5cdHBhZGRpbmc6ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLmJhY2tncm91bmQgfTtcblx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHQkeyAoIHByb3BzICkgPT4gY3NzYFxuXHRcdGJveC1zaGFkb3c6ICR7IHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9YX1NIQURPV1xuXHRcdFx0OiBERUZBVUxUX0JPWF9TSEFET1cgfTtcblx0YCB9XG5cblx0b3ZlcnNjcm9sbC1iZWhhdmlvcjogY29udGFpbjtcblx0b3ZlcmZsb3c6IGF1dG87XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudCAhaW1wb3J0YW50O1xuXG5cdC8qIEFuaW1hdGlvbiAqL1xuXHRhbmltYXRpb24tZHVyYXRpb246ICR7IEFOSU1BVElPTl9QQVJBTVMuRFVSQVRJT04gfTtcblx0YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogJHsgQU5JTUFUSU9OX1BBUkFNUy5FQVNJTkcgfTtcblx0d2lsbC1jaGFuZ2U6IHRyYW5zZm9ybSwgb3BhY2l0eTtcblx0LyogRGVmYXVsdCBhbmltYXRpb24uKi9cblx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlRG93bkFuZEZhZGUgfTtcblxuXHQmW2RhdGEtc2lkZT0ncmlnaHQnXSB7XG5cdFx0YW5pbWF0aW9uLW5hbWU6ICR7IHNsaWRlTGVmdEFuZEZhZGUgfTtcblx0fVxuXHQmW2RhdGEtc2lkZT0nYm90dG9tJ10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVVwQW5kRmFkZSB9O1xuXHR9XG5cdCZbZGF0YS1zaWRlPSdsZWZ0J10ge1xuXHRcdGFuaW1hdGlvbi1uYW1lOiAkeyBzbGlkZVJpZ2h0QW5kRmFkZSB9O1xuXHR9XG5cdEBtZWRpYSAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb24gKSB7XG5cdFx0YW5pbWF0aW9uLWR1cmF0aW9uOiAwcztcblx0fVxuYDtcblxuY29uc3QgYmFzZUl0ZW0gPSBjc3NgXG5cdGFsbDogdW5zZXQ7XG5cblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRtaW4taGVpZ2h0OiAkeyBzcGFjZSggMTAgKSB9O1xuXHRib3gtc2l6aW5nOiBib3JkZXItYm94O1xuXG5cdC8qIE9jY3VweSB0aGUgd2lkdGggb2YgYWxsIGdyaWQgY29sdW1ucyAoaWUuIGZ1bGwgd2lkdGgpICovXG5cdGdyaWQtY29sdW1uOiAxIC8gLTE7XG5cblx0ZGlzcGxheTogZ3JpZDtcblx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAkeyBHUklEX1RFTVBMQVRFX0NPTFMgfTtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblxuXHRAc3VwcG9ydHMgKCBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHN1YmdyaWQgKSB7XG5cdFx0Lypcblx0XHQgKiBEZWZpbmUgYSBncmlkIGxheW91dCB3aGljaCBpbmhlcml0cyB0aGUgc2FtZSBjb2x1bW5zIGNvbmZpZ3VyYXRpb25cblx0XHQgKiBmcm9tIHRoZSBwYXJlbnQgbGF5b3V0IChpZS4gc3ViZ3JpZCkuIFRoaXMgYWxsb3dzIHRoZSBtZW51XG5cdFx0ICogdG8gc3luY2hyb25pemUgdGhlIGluZGVudGF0aW9uIG9mIGFsbCBpdHMgaXRlbXMuXG5cdFx0ICovXG5cdFx0Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBzdWJncmlkO1xuXHR9XG5cblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRmb250LWZhbWlseTogaW5oZXJpdDtcblx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0bGluZS1oZWlnaHQ6IDIwcHg7XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHRib3JkZXItcmFkaXVzOiAkeyBDT05GSUcucmFkaXVzQmxvY2tVaSB9O1xuXG5cdHBhZGRpbmctYmxvY2s6ICR7IElURU1fUEFERElOR19CTE9DSyB9O1xuXHRwYWRkaW5nLWlubGluZTogJHsgSVRFTV9QQURESU5HX0lOTElORSB9O1xuXG5cdC8qXG5cdCAqIE1ha2Ugc3VyZSB0aGF0LCB3aGVuIGFuIGl0ZW0gaXMgc2Nyb2xsZWQgaW50byB2aWV3IChlZy4gd2hpbGUgdXNpbmcgdGhlXG5cdCAqIGtleWJvYXJkIHRvIG1vdmUgZm9jdXMpLCB0aGUgd2hvbGUgaXRlbSBjb21lcyBpbnRvIHZpZXdcblx0ICovXG5cdHNjcm9sbC1tYXJnaW46ICR7IENPTlRFTlRfV1JBUFBFUl9QQURESU5HIH07XG5cblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdG91dGxpbmU6IG5vbmU7XG5cblx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdGNvbG9yOiAkeyBDT0xPUlMudWkudGV4dERpc2FibGVkIH07XG5cdFx0Y3Vyc29yOiBub3QtYWxsb3dlZDtcblx0fVxuXG5cdC8qIEhvdmVyICovXG5cdCZbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApOm5vdChcblx0XHRcdFthcmlhLWRpc2FibGVkPSd0cnVlJ11cblx0XHQpIHtcblx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy53aGl0ZSB9O1xuXHR9XG5cblx0LyogS2V5Ym9hcmQgZm9jdXMgKGZvY3VzLXZpc2libGUpICovXG5cdCZbZGF0YS1mb2N1cy12aXNpYmxlXSB7XG5cdFx0Ym94LXNoYWRvdzogMCAwIDAgMS41cHggJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXG5cdFx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHR9XG5cblx0LyogQWN0aXZlIChpZS4gcHJlc3NlZCwgbW91c2UgZG93bikgKi9cblx0JjphY3RpdmUsXG5cdCZbZGF0YS1hY3RpdmVdIHtcblx0XHQvKiBUT0RPOiBzaG91bGQgdGhlcmUgYmUgYSB2aXN1YWwgYWN0aXZlIHN0YXRlPyAqL1xuXHR9XG5cblx0LyogV2hlbiB0aGUgaXRlbSBpcyB0aGUgdHJpZ2dlciBvZiBhbiBvcGVuIHN1Ym1lbnUgKi9cblx0JHsgRHJvcGRvd25NZW51IH06bm90KDpmb2N1cykgJjpub3QoOmZvY3VzKVthcmlhLWV4cGFuZGVkPVwidHJ1ZVwiXSB7XG5cdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDEwMCBdIH07XG5cdFx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyA5MDAgXSB9O1xuXHR9XG5cblx0c3ZnIHtcblx0XHRmaWxsOiBjdXJyZW50Q29sb3I7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtIClgXG5cdCR7IGJhc2VJdGVtIH07XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtID0gc3R5bGVkKCBBcmlha2l0Lk1lbnVJdGVtQ2hlY2tib3ggKWBcblx0JHsgYmFzZUl0ZW0gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gPSBzdHlsZWQoIEFyaWFraXQuTWVudUl0ZW1SYWRpbyApYFxuXHQkeyBiYXNlSXRlbSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IEl0ZW1QcmVmaXhXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdC8qIEFsd2F5cyBvY2N1cHkgdGhlIGZpcnN0IGNvbHVtbiwgZXZlbiB3aGVuIGF1dG8tY29sbGFwc2luZyAqL1xuXHRncmlkLWNvbHVtbjogMTtcblxuXHQvKlxuXHQgKiBFdmVuIHdoZW4gdGhlIGl0ZW0gaXMgbm90IGNoZWNrZWQsIG9jY3VweSB0aGUgc2FtZSBzY3JlZW4gc3BhY2UgdG8gYXZvaWRcblx0ICogdGhlIHNwYWNlIGNvbGxhcHNpZGUgd2hlbiBubyBpdGVtcyBhcmUgY2hlY2tlZC5cblx0ICovXG5cdCR7IERyb3Bkb3duTWVudUNoZWNrYm94SXRlbSB9ID4gJixcblx0JHsgRHJvcGRvd25NZW51UmFkaW9JdGVtIH0gPiAmIHtcblx0XHQvKiBTYW1lIHdpZHRoIGFzIHRoZSBjaGVjayBpY29ucyAqL1xuXHRcdG1pbi13aWR0aDogJHsgc3BhY2UoIDYgKSB9O1xuXHR9XG5cblx0JHsgRHJvcGRvd25NZW51Q2hlY2tib3hJdGVtIH0gPiAmLFxuXHQkeyBEcm9wZG93bk1lbnVSYWRpb0l0ZW0gfSA+ICYsXG5cdCY6bm90KCA6ZW1wdHkgKSB7XG5cdFx0bWFyZ2luLWlubGluZS1lbmQ6ICR7IHNwYWNlKCAyICkgfTtcblx0fVxuXG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgJzcwMCcgXSB9O1xuXG5cdC8qXG5cdCogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXG5cdCogc3VibWVudSB0cmlnZ2VyIChpbiB0aGF0IGNhc2UsIGNvbG9yIHNob3VsZCBub3QgYmUgaW5oZXJpdGVkKVxuXHQqL1xuXHRbZGF0YS1hY3RpdmUtaXRlbV06bm90KCBbZGF0YS1mb2N1cy12aXNpYmxlXSApID4gJixcblx0LyogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBkaXNhYmxlZCAqL1xuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddID4gJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtQ29udGVudFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHQvKlxuXHQgKiBBbHdheXMgb2NjdXB5IHRoZSBzZWNvbmQgY29sdW1uLCBzaW5jZSB0aGUgZmlyc3QgY29sdW1uXG5cdCAqIGlzIHRha2VuIGJ5IHRoZSBwcmVmaXggd3JhcHBlciAod2hlbiBkaXNwbGF5ZWQpLlxuXHQgKi9cblx0Z3JpZC1jb2x1bW46IDI7XG5cblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRnYXA6ICR7IHNwYWNlKCAzICkgfTtcblxuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVJdGVtQ2hpbGRyZW5XcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0ZmxleDogMTtcblxuXHRkaXNwbGF5OiBpbmxpbmUtZmxleDtcblx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0Z2FwOiAkeyBzcGFjZSggMSApIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSXRlbVN1ZmZpeFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZmxleDogMCAxIGZpdC1jb250ZW50O1xuXHRtaW4td2lkdGg6IDA7XG5cdHdpZHRoOiBmaXQtY29udGVudDtcblxuXHRkaXNwbGF5OiBmbGV4O1xuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0Z2FwOiAkeyBzcGFjZSggMyApIH07XG5cblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0Lypcblx0ICogV2hlbiB0aGUgcGFyZW50IG1lbnUgaXRlbSBpcyBhY3RpdmUsIGV4Y2VwdCB3aGVuIGl0J3MgYSBub24tZm9jdXNlZC9ob3ZlcmVkXG5cdCAqIHN1Ym1lbnUgdHJpZ2dlciAoaW4gdGhhdCBjYXNlLCBjb2xvciBzaG91bGQgbm90IGJlIGluaGVyaXRlZClcblx0ICovXG5cdFtkYXRhLWFjdGl2ZS1pdGVtXTpub3QoIFtkYXRhLWZvY3VzLXZpc2libGVdICkgKjpub3QoJHsgRHJvcGRvd25NZW51IH0pICYsXG5cdC8qIFdoZW4gdGhlIHBhcmVudCBtZW51IGl0ZW0gaXMgZGlzYWJsZWQgKi9cblx0W2FyaWEtZGlzYWJsZWQ9J3RydWUnXSAqOm5vdCgkeyBEcm9wZG93bk1lbnUgfSkgJiB7XG5cdFx0Y29sb3I6IGluaGVyaXQ7XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVHcm91cCA9IHN0eWxlZCggQXJpYWtpdC5NZW51R3JvdXAgKWBcblx0LyogSWdub3JlIHRoaXMgZWxlbWVudCB3aGVuIGNhbGN1bGF0aW5nIHRoZSBsYXlvdXQuIFVzZWZ1bCBmb3Igc3ViZ3JpZCAqL1xuXHRkaXNwbGF5OiBjb250ZW50cztcbmA7XG5cbmV4cG9ydCBjb25zdCBEcm9wZG93bk1lbnVTZXBhcmF0b3IgPSBzdHlsZWQoIEFyaWFraXQuTWVudVNlcGFyYXRvciApPFxuXHRQaWNrPCBEcm9wZG93bk1lbnVDb250ZXh0LCAndmFyaWFudCcgPlxuPmBcblx0LyogT2NjdXB5IHRoZSB3aWR0aCBvZiBhbGwgZ3JpZCBjb2x1bW5zIChpZS4gZnVsbCB3aWR0aCkgKi9cblx0Z3JpZC1jb2x1bW46IDEgLyAtMTtcblxuXHRib3JkZXI6IG5vbmU7XG5cdGhlaWdodDogJHsgQ09ORklHLmJvcmRlcldpZHRoIH07XG5cdGJhY2tncm91bmQtY29sb3I6ICR7ICggcHJvcHMgKSA9PlxuXHRcdHByb3BzLnZhcmlhbnQgPT09ICd0b29sYmFyJ1xuXHRcdFx0PyBUT09MQkFSX1ZBUklBTlRfQk9SREVSX0NPTE9SXG5cdFx0XHQ6IERJVklERVJfQ09MT1IgfTtcblx0LyogQWxpZ24gd2l0aCBtZW51IGl0ZW1zJyBjb250ZW50ICovXG5cdG1hcmdpbi1ibG9jazogJHsgc3BhY2UoIDIgKSB9O1xuXHRtYXJnaW4taW5saW5lOiAkeyBJVEVNX1BBRERJTkdfSU5MSU5FIH07XG5cblx0LyogT25seSB2aXNpYmxlIGluIFdpbmRvd3MgSGlnaCBDb250cmFzdCBtb2RlICovXG5cdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcbmA7XG5cbmV4cG9ydCBjb25zdCBTdWJtZW51Q2hldnJvbkljb24gPSBzdHlsZWQoIEljb24gKWBcblx0d2lkdGg6ICR7IHNwYWNlKCAxLjUgKSB9O1xuXHQkeyBydGwoXG5cdFx0e1xuXHRcdFx0dHJhbnNmb3JtOiBgc2NhbGVYKDEpYCxcblx0XHR9LFxuXHRcdHtcblx0XHRcdHRyYW5zZm9ybTogYHNjYWxlWCgtMSlgLFxuXHRcdH1cblx0KSB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IERyb3Bkb3duTWVudUl0ZW1MYWJlbCA9IHN0eWxlZCggVHJ1bmNhdGUgKWBcblx0Zm9udC1zaXplOiAkeyBmb250KCAnZGVmYXVsdC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMjBweDtcblx0Y29sb3I6IGluaGVyaXQ7XG5gO1xuXG5leHBvcnQgY29uc3QgRHJvcGRvd25NZW51SXRlbUhlbHBUZXh0ID0gc3R5bGVkKCBUcnVuY2F0ZSApYFxuXHRmb250LXNpemU6ICR7IGZvbnQoICdoZWxwVGV4dC5mb250U2l6ZScgKSB9O1xuXHRsaW5lLWhlaWdodDogMTZweDtcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAnNzAwJyBdIH07XG5cblx0W2RhdGEtYWN0aXZlLWl0ZW1dOm5vdCggW2RhdGEtZm9jdXMtdmlzaWJsZV0gKSAqOm5vdCggJHsgRHJvcGRvd25NZW51IH0gKSAmLFxuXHRbYXJpYS1kaXNhYmxlZD0ndHJ1ZSddICo6bm90KCAkeyBEcm9wZG93bk1lbnUgfSApICYge1xuXHRcdGNvbG9yOiBpbmhlcml0O1xuXHR9XG5gO1xuIl19 */"));
  var DropdownMenuGroup = /* @__PURE__ */ createStyled(MenuGroup, false ? {
    target: "e1kdzosf4"
  } : {
    target: "e1kdzosf4",
    label: "DropdownMenuGroup"
  })(false ? {
    name: "49aokf",
    styles: "display:contents"
  } : {
    name: "49aokf",
    styles: "display:contents",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__9
  });
  var DropdownMenuSeparator = /* @__PURE__ */ createStyled(MenuSeparator, false ? {
    target: "e1kdzosf3"
  } : {
    target: "e1kdzosf3",
    label: "DropdownMenuSeparator"
  })("grid-column:1/-1;border:none;height:", config_values_default.borderWidth, ";background-color:", (props) => props.variant === "toolbar" ? TOOLBAR_VARIANT_BORDER_COLOR : DIVIDER_COLOR, ";margin-block:", space(2), ";margin-inline:", ITEM_PADDING_INLINE, ";outline:2px solid transparent;" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var SubmenuChevronIcon = /* @__PURE__ */ createStyled(icon_default2, false ? {
    target: "e1kdzosf2"
  } : {
    target: "e1kdzosf2",
    label: "SubmenuChevronIcon"
  })("width:", space(1.5), ";", rtl({
    transform: `scaleX(1)`
  }, {
    transform: `scaleX(-1)`
  }), ";" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuItemLabel = /* @__PURE__ */ createStyled(component_default6, false ? {
    target: "e1kdzosf1"
  } : {
    target: "e1kdzosf1",
    label: "DropdownMenuItemLabel"
  })("font-size:", font("default.fontSize"), ";line-height:20px;color:inherit;" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
  var DropdownMenuItemHelpText = /* @__PURE__ */ createStyled(component_default6, false ? {
    target: "e1kdzosf0"
  } : {
    target: "e1kdzosf0",
    label: "DropdownMenuItemHelpText"
  })("font-size:", font("helpText.fontSize"), ";line-height:16px;color:", COLORS.gray["700"], ";[data-active-item]:not( [data-focus-visible] ) *:not( ", DropdownMenu2, " ) &,[aria-disabled='true'] *:not( ", DropdownMenu2, " ) &{color:inherit;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

  // node_modules/@wordpress/components/build-module/dropdown-menu-v2/index.js
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var DropdownMenuContext = (0, import_react.createContext)(void 0);
  var DropdownMenuItem2 = (0, import_react.forwardRef)(function DropdownMenuItem3({
    prefix: prefix3,
    suffix,
    children,
    hideOnClick = true,
    ...props
  }, ref) {
    const dropdownMenuContext = (0, import_react.useContext)(DropdownMenuContext);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuItem, {
      ref,
      ...props,
      accessibleWhenDisabled: true,
      hideOnClick,
      store: dropdownMenuContext?.store,
      children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemPrefixWrapper, {
        children: prefix3
      }), /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuItemContentWrapper, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuItemChildrenWrapper, {
          children
        }), suffix && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemSuffixWrapper, {
          children: suffix
        })]
      })]
    });
  });
  var DropdownMenuCheckboxItem2 = (0, import_react.forwardRef)(function DropdownMenuCheckboxItem3({
    suffix,
    children,
    hideOnClick = false,
    ...props
  }, ref) {
    const dropdownMenuContext = (0, import_react.useContext)(DropdownMenuContext);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuCheckboxItem, {
      ref,
      ...props,
      accessibleWhenDisabled: true,
      hideOnClick,
      store: dropdownMenuContext?.store,
      children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(MenuItemCheck, {
        store: dropdownMenuContext?.store,
        render: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemPrefixWrapper, {}),
        style: {
          width: "auto",
          height: "auto"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(icon_default2, {
          icon: check_default,
          size: 24
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuItemContentWrapper, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuItemChildrenWrapper, {
          children
        }), suffix && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemSuffixWrapper, {
          children: suffix
        })]
      })]
    });
  });
  var radioCheck = /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(SVG, {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "0 0 24 24",
    children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(Circle, {
      cx: 12,
      cy: 12,
      r: 3
    })
  });
  var DropdownMenuRadioItem2 = (0, import_react.forwardRef)(function DropdownMenuRadioItem3({
    suffix,
    children,
    hideOnClick = false,
    ...props
  }, ref) {
    const dropdownMenuContext = (0, import_react.useContext)(DropdownMenuContext);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuRadioItem, {
      ref,
      ...props,
      accessibleWhenDisabled: true,
      hideOnClick,
      store: dropdownMenuContext?.store,
      children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(MenuItemCheck, {
        store: dropdownMenuContext?.store,
        render: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemPrefixWrapper, {}),
        style: {
          width: "auto",
          height: "auto"
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(icon_default2, {
          icon: radioCheck,
          size: 24
        })
      }), /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(DropdownMenuItemContentWrapper, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuItemChildrenWrapper, {
          children
        }), suffix && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(ItemSuffixWrapper, {
          children: suffix
        })]
      })]
    });
  });
  var DropdownMenuGroup2 = (0, import_react.forwardRef)(function DropdownMenuGroup3(props, ref) {
    const dropdownMenuContext = (0, import_react.useContext)(DropdownMenuContext);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuGroup, {
      ref,
      ...props,
      store: dropdownMenuContext?.store
    });
  });
  var UnconnectedDropdownMenu2 = (props, ref) => {
    var _props$placement;
    const {
      // Store props
      open,
      defaultOpen = false,
      onOpenChange,
      placement,
      // Menu trigger props
      trigger,
      // Menu props
      gutter,
      children,
      shift: shift4,
      modal = true,
      // From internal components context
      variant,
      // Rest
      ...otherProps
    } = useContextSystem(props, "DropdownMenu");
    const parentContext = (0, import_react.useContext)(DropdownMenuContext);
    const computedDirection = isRTL2() ? "rtl" : "ltr";
    let computedPlacement = (_props$placement = props.placement) !== null && _props$placement !== void 0 ? _props$placement : parentContext?.store ? "right-start" : "bottom-start";
    if (computedDirection === "rtl") {
      if (/right/.test(computedPlacement)) {
        computedPlacement = computedPlacement.replace("right", "left");
      } else if (/left/.test(computedPlacement)) {
        computedPlacement = computedPlacement.replace("left", "right");
      }
    }
    const dropdownMenuStore = useMenuStore({
      parent: parentContext?.store,
      open,
      defaultOpen,
      placement: computedPlacement,
      focusLoop: true,
      setOpen(willBeOpen) {
        onOpenChange?.(willBeOpen);
      },
      rtl: computedDirection === "rtl"
    });
    const contextValue = (0, import_react.useMemo)(() => ({
      store: dropdownMenuStore,
      variant
    }), [dropdownMenuStore, variant]);
    const appliedPlacementSide = dropdownMenuStore.useState("placement").split("-")[0];
    if (dropdownMenuStore.parent && !((0, import_react.isValidElement)(trigger) && DropdownMenuItem2 === trigger.type)) {
      console.warn("For nested DropdownMenus, the `trigger` should always be a `DropdownMenuItem`.");
    }
    const hideOnEscape = (0, import_react.useCallback)((event) => {
      event.preventDefault();
      return true;
    }, []);
    const wrapperProps = (0, import_react.useMemo)(() => ({
      dir: computedDirection,
      style: {
        direction: computedDirection
      }
    }), [computedDirection]);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(import_jsx_runtime98.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime96.jsx)(MenuButton, {
        ref,
        store: dropdownMenuStore,
        render: dropdownMenuStore.parent ? (0, import_react.cloneElement)(trigger, {
          // Add submenu arrow, unless a `suffix` is explicitly specified
          suffix: /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(import_jsx_runtime98.Fragment, {
            children: [trigger.props.suffix, /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(SubmenuChevronIcon, {
              "aria-hidden": "true",
              icon: chevron_right_small_default,
              size: 24,
              preserveAspectRatio: "xMidYMid slice"
            })]
          })
        }) : trigger
      }), /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenu2, {
        ...otherProps,
        modal,
        store: dropdownMenuStore,
        gutter: gutter !== null && gutter !== void 0 ? gutter : dropdownMenuStore.parent ? 0 : 8,
        shift: shift4 !== null && shift4 !== void 0 ? shift4 : dropdownMenuStore.parent ? -4 : 0,
        hideOnHoverOutside: false,
        "data-side": appliedPlacementSide,
        variant,
        wrapperProps,
        hideOnEscape,
        unmountOnHide: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuContext.Provider, {
          value: contextValue,
          children
        })
      })]
    });
  };
  var DropdownMenu3 = contextConnect(UnconnectedDropdownMenu2, "DropdownMenu");
  var DropdownMenuSeparator2 = (0, import_react.forwardRef)(function DropdownMenuSeparator3(props, ref) {
    const dropdownMenuContext = (0, import_react.useContext)(DropdownMenuContext);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuSeparator, {
      ref,
      ...props,
      store: dropdownMenuContext?.store,
      variant: dropdownMenuContext?.variant
    });
  });
  var DropdownMenuItemLabel2 = (0, import_react.forwardRef)(function DropdownMenuItemLabel3(props, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuItemLabel, {
      numberOfLines: 1,
      ref,
      ...props
    });
  });
  var DropdownMenuItemHelpText2 = (0, import_react.forwardRef)(function DropdownMenuItemHelpText3(props, ref) {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(DropdownMenuItemHelpText, {
      numberOfLines: 2,
      ref,
      ...props
    });
  });

  // node_modules/@wordpress/components/build-module/theme/styles.js
  function _EMOTION_STRINGIFIED_CSS_ERROR__10() {
    return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
  }
  var colorVariables = ({
    colors: colors3
  }) => {
    const shades = Object.entries(colors3.gray || {}).map(([k2, v2]) => `--wp-components-color-gray-${k2}: ${v2};`).join("");
    return [/* @__PURE__ */ css("--wp-components-color-accent:", colors3.accent, ";--wp-components-color-accent-darker-10:", colors3.accentDarker10, ";--wp-components-color-accent-darker-20:", colors3.accentDarker20, ";--wp-components-color-accent-inverted:", colors3.accentInverted, ";--wp-components-color-background:", colors3.background, ";--wp-components-color-foreground:", colors3.foreground, ";--wp-components-color-foreground-inverted:", colors3.foregroundInverted, ";", shades, ";" + (false ? "" : ";label:colorVariables;"), false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGhlbWUvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCSyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RoZW1lL3N0eWxlcy50cyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXh0ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCB7IGNzcyB9IGZyb20gJ0BlbW90aW9uL3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHR5cGUgeyBUaGVtZU91dHB1dFZhbHVlcyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgY29sb3JWYXJpYWJsZXMgPSAoIHsgY29sb3JzIH06IFRoZW1lT3V0cHV0VmFsdWVzICkgPT4ge1xuXHRjb25zdCBzaGFkZXMgPSBPYmplY3QuZW50cmllcyggY29sb3JzLmdyYXkgfHwge30gKVxuXHRcdC5tYXAoICggWyBrLCB2IF0gKSA9PiBgLS13cC1jb21wb25lbnRzLWNvbG9yLWdyYXktJHsgayB9OiAkeyB2IH07YCApXG5cdFx0LmpvaW4oICcnICk7XG5cblx0cmV0dXJuIFtcblx0XHRjc3NgXG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItYWNjZW50OiAkeyBjb2xvcnMuYWNjZW50IH07XG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItYWNjZW50LWRhcmtlci0xMDogJHsgY29sb3JzLmFjY2VudERhcmtlcjEwIH07XG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItYWNjZW50LWRhcmtlci0yMDogJHsgY29sb3JzLmFjY2VudERhcmtlcjIwIH07XG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItYWNjZW50LWludmVydGVkOiAkeyBjb2xvcnMuYWNjZW50SW52ZXJ0ZWQgfTtcblxuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWJhY2tncm91bmQ6ICR7IGNvbG9ycy5iYWNrZ3JvdW5kIH07XG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItZm9yZWdyb3VuZDogJHsgY29sb3JzLmZvcmVncm91bmQgfTtcblx0XHRcdC0td3AtY29tcG9uZW50cy1jb2xvci1mb3JlZ3JvdW5kLWludmVydGVkOiAkeyBjb2xvcnMuZm9yZWdyb3VuZEludmVydGVkIH07XG5cblx0XHRcdCR7IHNoYWRlcyB9XG5cdFx0YCxcblx0XTtcbn07XG5cbmV4cG9ydCBjb25zdCBXcmFwcGVyID0gc3R5bGVkLmRpdmBcblx0Y29sb3I6IHZhciggLS13cC1jb21wb25lbnRzLWNvbG9yLWZvcmVncm91bmQsIGN1cnJlbnRDb2xvciApO1xuYDtcbiJdfQ== */")];
  };
  var Wrapper2 = /* @__PURE__ */ createStyled("div", false ? {
    target: "e1krjpvb0"
  } : {
    target: "e1krjpvb0",
    label: "Wrapper"
  })(false ? {
    name: "1a3idx0",
    styles: "color:var( --wp-components-color-foreground, currentColor )"
  } : {
    name: "1a3idx0",
    styles: "color:var( --wp-components-color-foreground, currentColor )",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGhlbWUvc3R5bGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdDaUMiLCJmaWxlIjoiQHdvcmRwcmVzcy9jb21wb25lbnRzL3NyYy90aGVtZS9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB0eXBlIHsgVGhlbWVPdXRwdXRWYWx1ZXMgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGNvbG9yVmFyaWFibGVzID0gKCB7IGNvbG9ycyB9OiBUaGVtZU91dHB1dFZhbHVlcyApID0+IHtcblx0Y29uc3Qgc2hhZGVzID0gT2JqZWN0LmVudHJpZXMoIGNvbG9ycy5ncmF5IHx8IHt9IClcblx0XHQubWFwKCAoIFsgaywgdiBdICkgPT4gYC0td3AtY29tcG9uZW50cy1jb2xvci1ncmF5LSR7IGsgfTogJHsgdiB9O2AgKVxuXHRcdC5qb2luKCAnJyApO1xuXG5cdHJldHVybiBbXG5cdFx0Y3NzYFxuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWFjY2VudDogJHsgY29sb3JzLmFjY2VudCB9O1xuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWFjY2VudC1kYXJrZXItMTA6ICR7IGNvbG9ycy5hY2NlbnREYXJrZXIxMCB9O1xuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWFjY2VudC1kYXJrZXItMjA6ICR7IGNvbG9ycy5hY2NlbnREYXJrZXIyMCB9O1xuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWFjY2VudC1pbnZlcnRlZDogJHsgY29sb3JzLmFjY2VudEludmVydGVkIH07XG5cblx0XHRcdC0td3AtY29tcG9uZW50cy1jb2xvci1iYWNrZ3JvdW5kOiAkeyBjb2xvcnMuYmFja2dyb3VuZCB9O1xuXHRcdFx0LS13cC1jb21wb25lbnRzLWNvbG9yLWZvcmVncm91bmQ6ICR7IGNvbG9ycy5mb3JlZ3JvdW5kIH07XG5cdFx0XHQtLXdwLWNvbXBvbmVudHMtY29sb3ItZm9yZWdyb3VuZC1pbnZlcnRlZDogJHsgY29sb3JzLmZvcmVncm91bmRJbnZlcnRlZCB9O1xuXG5cdFx0XHQkeyBzaGFkZXMgfVxuXHRcdGAsXG5cdF07XG59O1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdGNvbG9yOiB2YXIoIC0td3AtY29tcG9uZW50cy1jb2xvci1mb3JlZ3JvdW5kLCBjdXJyZW50Q29sb3IgKTtcbmA7XG4iXX0= */",
    toString: _EMOTION_STRINGIFIED_CSS_ERROR__10
  });

  // node_modules/@wordpress/components/build-module/theme/color-algorithms.js
  k([names_default, a11y_default]);
  function generateThemeVariables(inputs) {
    validateInputs(inputs);
    const generatedColors = {
      ...generateAccentDependentColors(inputs.accent),
      ...generateBackgroundDependentColors(inputs.background)
    };
    warnContrastIssues(checkContrasts(inputs, generatedColors));
    return {
      colors: generatedColors
    };
  }
  function validateInputs(inputs) {
    for (const [key, value] of Object.entries(inputs)) {
      if (typeof value !== "undefined" && !w(value).isValid()) {
        globalThis.SCRIPT_DEBUG === true ? warning(`wp.components.Theme: "${value}" is not a valid color value for the '${key}' prop.`) : void 0;
      }
    }
  }
  function checkContrasts(inputs, outputs) {
    const background = inputs.background || COLORS.white;
    const accent = inputs.accent || "#3858e9";
    const foreground = outputs.foreground || COLORS.gray[900];
    const gray = outputs.gray || COLORS.gray;
    return {
      accent: w(background).isReadable(accent) ? void 0 : `The background color ("${background}") does not have sufficient contrast against the accent color ("${accent}").`,
      foreground: w(background).isReadable(foreground) ? void 0 : `The background color provided ("${background}") does not have sufficient contrast against the standard foreground colors.`,
      grays: w(background).contrast(gray[600]) >= 3 && w(background).contrast(gray[700]) >= 4.5 ? void 0 : `The background color provided ("${background}") cannot generate a set of grayscale foreground colors with sufficient contrast. Try adjusting the color to be lighter or darker.`
    };
  }
  function warnContrastIssues(issues) {
    for (const error2 of Object.values(issues)) {
      if (error2) {
        globalThis.SCRIPT_DEBUG === true ? warning("wp.components.Theme: " + error2) : void 0;
      }
    }
  }
  function generateAccentDependentColors(accent) {
    if (!accent) {
      return {};
    }
    return {
      accent,
      accentDarker10: w(accent).darken(0.1).toHex(),
      accentDarker20: w(accent).darken(0.2).toHex(),
      accentInverted: getForegroundForColor(accent)
    };
  }
  function generateBackgroundDependentColors(background) {
    if (!background) {
      return {};
    }
    const foreground = getForegroundForColor(background);
    return {
      background,
      foreground,
      foregroundInverted: getForegroundForColor(foreground),
      gray: generateShades(background, foreground)
    };
  }
  function getForegroundForColor(color2) {
    return w(color2).isDark() ? COLORS.white : COLORS.gray[900];
  }
  function generateShades(background, foreground) {
    const SHADES = {
      100: 0.06,
      200: 0.121,
      300: 0.132,
      400: 0.2,
      600: 0.42,
      700: 0.543,
      800: 0.821
    };
    const limit = 0.884;
    const direction = w(background).isDark() ? "lighten" : "darken";
    const range = Math.abs(w(background).toHsl().l - w(foreground).toHsl().l) / 100;
    const result = {};
    Object.entries(SHADES).forEach(([key, value]) => {
      result[parseInt(key)] = w(background)[direction](value / limit * range).toHex();
    });
    return result;
  }

  // node_modules/@wordpress/components/build-module/theme/index.js
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  function Theme({
    accent,
    background,
    className,
    ...props
  }) {
    const cx3 = useCx();
    const classes = (0, import_react.useMemo)(() => cx3(...colorVariables(generateThemeVariables({
      accent,
      background
    })), className), [accent, background, className, cx3]);
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(Wrapper2, {
      className: classes,
      ...props
    });
  }
  var theme_default = Theme;

  // node_modules/@wordpress/components/build-module/tabs/context.js
  var TabsContext = (0, import_react.createContext)(void 0);
  var useTabsContext = () => (0, import_react.useContext)(TabsContext);

  // node_modules/@wordpress/components/build-module/tabs/styles.js
  var TabListWrapper = /* @__PURE__ */ createStyled("div", false ? {
    target: "enfox0g2"
  } : {
    target: "enfox0g2",
    label: "TabListWrapper"
  })("position:relative;display:flex;align-items:stretch;flex-direction:row;&[aria-orientation='vertical']{flex-direction:column;}@media not ( prefers-reduced-motion: reduce ){&.is-animation-enabled::after{transition-property:left,top,width,height;transition-duration:0.2s;transition-timing-function:ease-out;}}&::after{content:'';position:absolute;pointer-events:none;outline:2px solid transparent;outline-offset:-1px;}&:not( [aria-orientation='vertical'] )::after{left:var( --indicator-left );bottom:0;width:var( --indicator-width );height:0;border-bottom:var( --wp-admin-border-width-focus ) solid ", COLORS.theme.accent, ";}&[aria-orientation='vertical']::after{opacity:0;right:0;top:var( --indicator-top );height:var( --indicator-height );border-right:var( --wp-admin-border-width-focus ) solid ", COLORS.theme.accent, ";}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGFicy9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYXdDIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGFicy9zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVzdHJpY3RlZC1pbXBvcnRzXG5pbXBvcnQgKiBhcyBBcmlha2l0IGZyb20gJ0Bhcmlha2l0L3JlYWN0JztcblxuLyoqXG4gKiBJbnRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgQ09MT1JTIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi91dGlscy9zcGFjZSc7XG5cbmV4cG9ydCBjb25zdCBUYWJMaXN0V3JhcHBlciA9IHN0eWxlZC5kaXZgXG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0ZGlzcGxheTogZmxleDtcblx0YWxpZ24taXRlbXM6IHN0cmV0Y2g7XG5cdGZsZXgtZGlyZWN0aW9uOiByb3c7XG5cdCZbYXJpYS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSB7XG5cdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0fVxuXHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogcmVkdWNlICkge1xuXHRcdCYuaXMtYW5pbWF0aW9uLWVuYWJsZWQ6OmFmdGVyIHtcblx0XHRcdHRyYW5zaXRpb24tcHJvcGVydHk6IGxlZnQsIHRvcCwgd2lkdGgsIGhlaWdodDtcblx0XHRcdHRyYW5zaXRpb24tZHVyYXRpb246IDAuMnM7XG5cdFx0XHR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7XG5cdFx0fVxuXHR9XG5cdCY6OmFmdGVyIHtcblx0XHRjb250ZW50OiAnJztcblx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cblx0XHQvLyBXaW5kb3dzIGhpZ2ggY29udHJhc3QgbW9kZS5cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0b3V0bGluZS1vZmZzZXQ6IC0xcHg7XG5cdH1cblx0Jjpub3QoIFthcmlhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddICk6OmFmdGVyIHtcblx0XHRsZWZ0OiB2YXIoIC0taW5kaWNhdG9yLWxlZnQgKTtcblx0XHRib3R0b206IDA7XG5cdFx0d2lkdGg6IHZhciggLS1pbmRpY2F0b3Itd2lkdGggKTtcblx0XHRoZWlnaHQ6IDA7XG5cdFx0Ym9yZGVyLWJvdHRvbTogdmFyKCAtLXdwLWFkbWluLWJvcmRlci13aWR0aC1mb2N1cyApIHNvbGlkXG5cdFx0XHQkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdH1cblx0JlthcmlhLW9yaWVudGF0aW9uPSd2ZXJ0aWNhbCddOjphZnRlciB7XG5cdFx0LyogVGVtcG9yYXJpbHkgaGlkZGVuLCBjb250ZXh0OiBodHRwczovL2dpdGh1Yi5jb20vV29yZFByZXNzL2d1dGVuYmVyZy9wdWxsLzYwNTYwI2lzc3VlY29tbWVudC0yMTI2NjcwMDcyICovXG5cdFx0b3BhY2l0eTogMDtcblxuXHRcdHJpZ2h0OiAwO1xuXHRcdHRvcDogdmFyKCAtLWluZGljYXRvci10b3AgKTtcblx0XHRoZWlnaHQ6IHZhciggLS1pbmRpY2F0b3ItaGVpZ2h0ICk7XG5cdFx0Ym9yZGVyLXJpZ2h0OiB2YXIoIC0td3AtYWRtaW4tYm9yZGVyLXdpZHRoLWZvY3VzICkgc29saWRcblx0XHRcdCR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFRhYiA9IHN0eWxlZCggQXJpYWtpdC5UYWIgKWBcblx0JiB7XG5cdFx0ZGlzcGxheTogaW5saW5lLWZsZXg7XG5cdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0Ym9yZGVyLXJhZGl1czogMDtcblx0XHRoZWlnaHQ6ICR7IHNwYWNlKCAxMiApIH07XG5cdFx0YmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG5cdFx0Ym9yZGVyOiBub25lO1xuXHRcdGJveC1zaGFkb3c6IG5vbmU7XG5cdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdHBhZGRpbmc6IDNweCAkeyBzcGFjZSggNCApIH07IC8vIFVzZSBwYWRkaW5nIHRvIG9mZnNldCB0aGUgW2FyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCJdIGJvcmRlciwgdGhpcyBiZW5lZml0cyBXaW5kb3dzIEhpZ2ggQ29udHJhc3QgbW9kZVxuXHRcdG1hcmdpbi1sZWZ0OiAwO1xuXHRcdGZvbnQtd2VpZ2h0OiA1MDA7XG5cblx0XHQmW2FyaWEtZGlzYWJsZWQ9J3RydWUnXSB7XG5cdFx0XHRjdXJzb3I6IGRlZmF1bHQ7XG5cdFx0XHRvcGFjaXR5OiAwLjM7XG5cdFx0fVxuXG5cdFx0Jjpob3ZlciB7XG5cdFx0XHRjb2xvcjogJHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXHRcdH1cblxuXHRcdCY6Zm9jdXM6bm90KCA6ZGlzYWJsZWQgKSB7XG5cdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0XHRib3gtc2hhZG93OiBub25lO1xuXHRcdFx0b3V0bGluZTogbm9uZTtcblx0XHR9XG5cblx0XHQvLyBGb2N1cy5cblx0XHQmOjpiZWZvcmUge1xuXHRcdFx0Y29udGVudDogJyc7XG5cdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHR0b3A6ICR7IHNwYWNlKCAzICkgfTtcblx0XHRcdHJpZ2h0OiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRib3R0b206ICR7IHNwYWNlKCAzICkgfTtcblx0XHRcdGxlZnQ6ICR7IHNwYWNlKCAzICkgfTtcblx0XHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0XHQvLyBEcmF3IHRoZSBpbmRpY2F0b3IuXG5cdFx0XHRib3gtc2hhZG93OiAwIDAgMCB2YXIoIC0td3AtYWRtaW4tYm9yZGVyLXdpZHRoLWZvY3VzIClcblx0XHRcdFx0JHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXG5cdFx0XHQvLyBBbmltYXRpb25cblx0XHRcdG9wYWNpdHk6IDA7XG5cblx0XHRcdEBtZWRpYSBub3QgKCBwcmVmZXJzLXJlZHVjZWQtbW90aW9uICkge1xuXHRcdFx0XHR0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMXMgbGluZWFyO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdCY6Zm9jdXMtdmlzaWJsZTo6YmVmb3JlIHtcblx0XHRcdG9wYWNpdHk6IDE7XG5cblx0XHRcdC8vIFdpbmRvd3MgaGlnaCBjb250cmFzdCBtb2RlLlxuXHRcdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdH1cblx0fVxuYDtcblxuZXhwb3J0IGNvbnN0IFRhYlBhbmVsID0gc3R5bGVkKCBBcmlha2l0LlRhYlBhbmVsIClgXG5cdCY6Zm9jdXMge1xuXHRcdGJveC1zaGFkb3c6IG5vbmU7XG5cdFx0b3V0bGluZTogbm9uZTtcblx0fVxuXG5cdCY6Zm9jdXMtdmlzaWJsZSB7XG5cdFx0Ym9yZGVyLXJhZGl1czogMnB4O1xuXHRcdGJveC1zaGFkb3c6IDAgMCAwIHZhciggLS13cC1hZG1pbi1ib3JkZXItd2lkdGgtZm9jdXMgKVxuXHRcdFx0JHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXHRcdC8vIFdpbmRvd3MgaGlnaCBjb250cmFzdCBtb2RlLlxuXHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHRvdXRsaW5lLW9mZnNldDogMDtcblx0fVxuYDtcbiJdfQ== */"));
  var Tab2 = /* @__PURE__ */ createStyled(Tab, false ? {
    target: "enfox0g1"
  } : {
    target: "enfox0g1",
    label: "Tab"
  })("&{display:inline-flex;align-items:center;position:relative;border-radius:0;height:", space(12), ";background:transparent;border:none;box-shadow:none;cursor:pointer;padding:3px ", space(4), ";margin-left:0;font-weight:500;&[aria-disabled='true']{cursor:default;opacity:0.3;}&:hover{color:", COLORS.theme.accent, ";}&:focus:not( :disabled ){position:relative;box-shadow:none;outline:none;}&::before{content:'';position:absolute;top:", space(3), ";right:", space(3), ";bottom:", space(3), ";left:", space(3), ";pointer-events:none;box-shadow:0 0 0 var( --wp-admin-border-width-focus ) ", COLORS.theme.accent, ";border-radius:2px;opacity:0;@media not ( prefers-reduced-motion ){transition:opacity 0.1s linear;}}&:focus-visible::before{opacity:1;outline:2px solid transparent;}}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGFicy9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUR3QyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RhYnMvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuXG5leHBvcnQgY29uc3QgVGFiTGlzdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuXHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHQmW2FyaWEtb3JpZW50YXRpb249J3ZlcnRpY2FsJ10ge1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdH1cblx0QG1lZGlhIG5vdCAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSApIHtcblx0XHQmLmlzLWFuaW1hdGlvbi1lbmFibGVkOjphZnRlciB7XG5cdFx0XHR0cmFuc2l0aW9uLXByb3BlcnR5OiBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQ7XG5cdFx0XHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuXHRcdFx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xuXHRcdH1cblx0fVxuXHQmOjphZnRlciB7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0Ly8gV2luZG93cyBoaWdoIGNvbnRyYXN0IG1vZGUuXG5cdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xuXHR9XG5cdCY6bm90KCBbYXJpYS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSApOjphZnRlciB7XG5cdFx0bGVmdDogdmFyKCAtLWluZGljYXRvci1sZWZ0ICk7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdHdpZHRoOiB2YXIoIC0taW5kaWNhdG9yLXdpZHRoICk7XG5cdFx0aGVpZ2h0OiAwO1xuXHRcdGJvcmRlci1ib3R0b206IHZhciggLS13cC1hZG1pbi1ib3JkZXItd2lkdGgtZm9jdXMgKSBzb2xpZFxuXHRcdFx0JHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXHR9XG5cdCZbYXJpYS1vcmllbnRhdGlvbj0ndmVydGljYWwnXTo6YWZ0ZXIge1xuXHRcdC8qIFRlbXBvcmFyaWx5IGhpZGRlbiwgY29udGV4dDogaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvcHVsbC82MDU2MCNpc3N1ZWNvbW1lbnQtMjEyNjY3MDA3MiAqL1xuXHRcdG9wYWNpdHk6IDA7XG5cblx0XHRyaWdodDogMDtcblx0XHR0b3A6IHZhciggLS1pbmRpY2F0b3ItdG9wICk7XG5cdFx0aGVpZ2h0OiB2YXIoIC0taW5kaWNhdG9yLWhlaWdodCApO1xuXHRcdGJvcmRlci1yaWdodDogdmFyKCAtLXdwLWFkbWluLWJvcmRlci13aWR0aC1mb2N1cyApIHNvbGlkXG5cdFx0XHQkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUYWIgPSBzdHlsZWQoIEFyaWFraXQuVGFiIClgXG5cdCYge1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdGJvcmRlci1yYWRpdXM6IDA7XG5cdFx0aGVpZ2h0OiAkeyBzcGFjZSggMTIgKSB9O1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRwYWRkaW5nOiAzcHggJHsgc3BhY2UoIDQgKSB9OyAvLyBVc2UgcGFkZGluZyB0byBvZmZzZXQgdGhlIFthcmlhLXNlbGVjdGVkPVwidHJ1ZVwiXSBib3JkZXIsIHRoaXMgYmVuZWZpdHMgV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGVcblx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHRmb250LXdlaWdodDogNTAwO1xuXG5cdFx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdFx0Y3Vyc29yOiBkZWZhdWx0O1xuXHRcdFx0b3BhY2l0eTogMC4zO1xuXHRcdH1cblxuXHRcdCY6aG92ZXIge1xuXHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHR9XG5cblx0XHQmOmZvY3VzOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0Ym94LXNoYWRvdzogbm9uZTtcblx0XHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0fVxuXG5cdFx0Ly8gRm9jdXMuXG5cdFx0Jjo6YmVmb3JlIHtcblx0XHRcdGNvbnRlbnQ6ICcnO1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0dG9wOiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRyaWdodDogJHsgc3BhY2UoIDMgKSB9O1xuXHRcdFx0Ym90dG9tOiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRsZWZ0OiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdFx0Ly8gRHJhdyB0aGUgaW5kaWNhdG9yLlxuXHRcdFx0Ym94LXNoYWRvdzogMCAwIDAgdmFyKCAtLXdwLWFkbWluLWJvcmRlci13aWR0aC1mb2N1cyApXG5cdFx0XHRcdCR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblxuXHRcdFx0Ly8gQW5pbWF0aW9uXG5cdFx0XHRvcGFjaXR5OiAwO1xuXG5cdFx0XHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcblx0XHRcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAwLjFzIGxpbmVhcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQmOmZvY3VzLXZpc2libGU6OmJlZm9yZSB7XG5cdFx0XHRvcGFjaXR5OiAxO1xuXG5cdFx0XHQvLyBXaW5kb3dzIGhpZ2ggY29udHJhc3QgbW9kZS5cblx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUYWJQYW5lbCA9IHN0eWxlZCggQXJpYWtpdC5UYWJQYW5lbCApYFxuXHQmOmZvY3VzIHtcblx0XHRib3gtc2hhZG93OiBub25lO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdH1cblxuXHQmOmZvY3VzLXZpc2libGUge1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OiAwIDAgMCB2YXIoIC0td3AtYWRtaW4tYm9yZGVyLXdpZHRoLWZvY3VzIClcblx0XHRcdCR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHQvLyBXaW5kb3dzIGhpZ2ggY29udHJhc3QgbW9kZS5cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdH1cbmA7XG4iXX0= */"));
  var TabPanel2 = /* @__PURE__ */ createStyled(TabPanel, false ? {
    target: "enfox0g0"
  } : {
    target: "enfox0g0",
    label: "TabPanel"
  })("&:focus{box-shadow:none;outline:none;}&:focus-visible{border-radius:2px;box-shadow:0 0 0 var( --wp-admin-border-width-focus ) ", COLORS.theme.accent, ";outline:2px solid transparent;outline-offset:0;}" + (false ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvdGFicy9zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBdUhrRCIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3RhYnMvc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtaW1wb3J0c1xuaW1wb3J0ICogYXMgQXJpYWtpdCBmcm9tICdAYXJpYWtpdC9yZWFjdCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCB7IENPTE9SUyB9IGZyb20gJy4uL3V0aWxzJztcbmltcG9ydCB7IHNwYWNlIH0gZnJvbSAnLi4vdXRpbHMvc3BhY2UnO1xuXG5leHBvcnQgY29uc3QgVGFiTGlzdFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGFsaWduLWl0ZW1zOiBzdHJldGNoO1xuXHRmbGV4LWRpcmVjdGlvbjogcm93O1xuXHQmW2FyaWEtb3JpZW50YXRpb249J3ZlcnRpY2FsJ10ge1xuXHRcdGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG5cdH1cblx0QG1lZGlhIG5vdCAoIHByZWZlcnMtcmVkdWNlZC1tb3Rpb246IHJlZHVjZSApIHtcblx0XHQmLmlzLWFuaW1hdGlvbi1lbmFibGVkOjphZnRlciB7XG5cdFx0XHR0cmFuc2l0aW9uLXByb3BlcnR5OiBsZWZ0LCB0b3AsIHdpZHRoLCBoZWlnaHQ7XG5cdFx0XHR0cmFuc2l0aW9uLWR1cmF0aW9uOiAwLjJzO1xuXHRcdFx0dHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xuXHRcdH1cblx0fVxuXHQmOjphZnRlciB7XG5cdFx0Y29udGVudDogJyc7XG5cdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXG5cdFx0Ly8gV2luZG93cyBoaWdoIGNvbnRyYXN0IG1vZGUuXG5cdFx0b3V0bGluZTogMnB4IHNvbGlkIHRyYW5zcGFyZW50O1xuXHRcdG91dGxpbmUtb2Zmc2V0OiAtMXB4O1xuXHR9XG5cdCY6bm90KCBbYXJpYS1vcmllbnRhdGlvbj0ndmVydGljYWwnXSApOjphZnRlciB7XG5cdFx0bGVmdDogdmFyKCAtLWluZGljYXRvci1sZWZ0ICk7XG5cdFx0Ym90dG9tOiAwO1xuXHRcdHdpZHRoOiB2YXIoIC0taW5kaWNhdG9yLXdpZHRoICk7XG5cdFx0aGVpZ2h0OiAwO1xuXHRcdGJvcmRlci1ib3R0b206IHZhciggLS13cC1hZG1pbi1ib3JkZXItd2lkdGgtZm9jdXMgKSBzb2xpZFxuXHRcdFx0JHsgQ09MT1JTLnRoZW1lLmFjY2VudCB9O1xuXHR9XG5cdCZbYXJpYS1vcmllbnRhdGlvbj0ndmVydGljYWwnXTo6YWZ0ZXIge1xuXHRcdC8qIFRlbXBvcmFyaWx5IGhpZGRlbiwgY29udGV4dDogaHR0cHM6Ly9naXRodWIuY29tL1dvcmRQcmVzcy9ndXRlbmJlcmcvcHVsbC82MDU2MCNpc3N1ZWNvbW1lbnQtMjEyNjY3MDA3MiAqL1xuXHRcdG9wYWNpdHk6IDA7XG5cblx0XHRyaWdodDogMDtcblx0XHR0b3A6IHZhciggLS1pbmRpY2F0b3ItdG9wICk7XG5cdFx0aGVpZ2h0OiB2YXIoIC0taW5kaWNhdG9yLWhlaWdodCApO1xuXHRcdGJvcmRlci1yaWdodDogdmFyKCAtLXdwLWFkbWluLWJvcmRlci13aWR0aC1mb2N1cyApIHNvbGlkXG5cdFx0XHQkeyBDT0xPUlMudGhlbWUuYWNjZW50IH07XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUYWIgPSBzdHlsZWQoIEFyaWFraXQuVGFiIClgXG5cdCYge1xuXHRcdGRpc3BsYXk6IGlubGluZS1mbGV4O1xuXHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdGJvcmRlci1yYWRpdXM6IDA7XG5cdFx0aGVpZ2h0OiAkeyBzcGFjZSggMTIgKSB9O1xuXHRcdGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuXHRcdGJvcmRlcjogbm9uZTtcblx0XHRib3gtc2hhZG93OiBub25lO1xuXHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRwYWRkaW5nOiAzcHggJHsgc3BhY2UoIDQgKSB9OyAvLyBVc2UgcGFkZGluZyB0byBvZmZzZXQgdGhlIFthcmlhLXNlbGVjdGVkPVwidHJ1ZVwiXSBib3JkZXIsIHRoaXMgYmVuZWZpdHMgV2luZG93cyBIaWdoIENvbnRyYXN0IG1vZGVcblx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHRmb250LXdlaWdodDogNTAwO1xuXG5cdFx0JlthcmlhLWRpc2FibGVkPSd0cnVlJ10ge1xuXHRcdFx0Y3Vyc29yOiBkZWZhdWx0O1xuXHRcdFx0b3BhY2l0eTogMC4zO1xuXHRcdH1cblxuXHRcdCY6aG92ZXIge1xuXHRcdFx0Y29sb3I6ICR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHR9XG5cblx0XHQmOmZvY3VzOm5vdCggOmRpc2FibGVkICkge1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0Ym94LXNoYWRvdzogbm9uZTtcblx0XHRcdG91dGxpbmU6IG5vbmU7XG5cdFx0fVxuXG5cdFx0Ly8gRm9jdXMuXG5cdFx0Jjo6YmVmb3JlIHtcblx0XHRcdGNvbnRlbnQ6ICcnO1xuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0dG9wOiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRyaWdodDogJHsgc3BhY2UoIDMgKSB9O1xuXHRcdFx0Ym90dG9tOiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRsZWZ0OiAkeyBzcGFjZSggMyApIH07XG5cdFx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblxuXHRcdFx0Ly8gRHJhdyB0aGUgaW5kaWNhdG9yLlxuXHRcdFx0Ym94LXNoYWRvdzogMCAwIDAgdmFyKCAtLXdwLWFkbWluLWJvcmRlci13aWR0aC1mb2N1cyApXG5cdFx0XHRcdCR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblxuXHRcdFx0Ly8gQW5pbWF0aW9uXG5cdFx0XHRvcGFjaXR5OiAwO1xuXG5cdFx0XHRAbWVkaWEgbm90ICggcHJlZmVycy1yZWR1Y2VkLW1vdGlvbiApIHtcblx0XHRcdFx0dHJhbnNpdGlvbjogb3BhY2l0eSAwLjFzIGxpbmVhcjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQmOmZvY3VzLXZpc2libGU6OmJlZm9yZSB7XG5cdFx0XHRvcGFjaXR5OiAxO1xuXG5cdFx0XHQvLyBXaW5kb3dzIGhpZ2ggY29udHJhc3QgbW9kZS5cblx0XHRcdG91dGxpbmU6IDJweCBzb2xpZCB0cmFuc3BhcmVudDtcblx0XHR9XG5cdH1cbmA7XG5cbmV4cG9ydCBjb25zdCBUYWJQYW5lbCA9IHN0eWxlZCggQXJpYWtpdC5UYWJQYW5lbCApYFxuXHQmOmZvY3VzIHtcblx0XHRib3gtc2hhZG93OiBub25lO1xuXHRcdG91dGxpbmU6IG5vbmU7XG5cdH1cblxuXHQmOmZvY3VzLXZpc2libGUge1xuXHRcdGJvcmRlci1yYWRpdXM6IDJweDtcblx0XHRib3gtc2hhZG93OiAwIDAgMCB2YXIoIC0td3AtYWRtaW4tYm9yZGVyLXdpZHRoLWZvY3VzIClcblx0XHRcdCR7IENPTE9SUy50aGVtZS5hY2NlbnQgfTtcblx0XHQvLyBXaW5kb3dzIGhpZ2ggY29udHJhc3QgbW9kZS5cblx0XHRvdXRsaW5lOiAycHggc29saWQgdHJhbnNwYXJlbnQ7XG5cdFx0b3V0bGluZS1vZmZzZXQ6IDA7XG5cdH1cbmA7XG4iXX0= */"));

  // node_modules/@wordpress/components/build-module/tabs/tab.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var Tab3 = (0, import_react.forwardRef)(function Tab4({
    children,
    tabId,
    disabled,
    render: render2,
    ...otherProps
  }, ref) {
    const context2 = useTabsContext();
    if (!context2) {
      globalThis.SCRIPT_DEBUG === true ? warning("`Tabs.Tab` must be wrapped in a `Tabs` component.") : void 0;
      return null;
    }
    const {
      store: store6,
      instanceId
    } = context2;
    const instancedTabId = `${instanceId}-${tabId}`;
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(Tab2, {
      ref,
      store: store6,
      id: instancedTabId,
      disabled,
      render: render2,
      ...otherProps,
      children
    });
  });

  // node_modules/@wordpress/components/build-module/tabs/tablist.js
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  function useTrackElementOffset(targetElement, onUpdate) {
    const [indicatorPosition, setIndicatorPosition] = (0, import_react.useState)({
      left: 0,
      top: 0,
      width: 0,
      height: 0
    });
    const updateCallbackRef = (0, import_react.useRef)(onUpdate);
    (0, import_react.useLayoutEffect)(() => {
      updateCallbackRef.current = onUpdate;
    });
    const observedElementRef = (0, import_react.useRef)();
    const resizeObserverRef = (0, import_react.useRef)();
    (0, import_react.useEffect)(() => {
      if (targetElement === observedElementRef.current) {
        return;
      }
      observedElementRef.current = targetElement !== null && targetElement !== void 0 ? targetElement : void 0;
      function updateIndicator(element) {
        setIndicatorPosition({
          left: element.offsetLeft,
          top: element.offsetTop,
          width: element.offsetWidth,
          height: element.offsetHeight
        });
        updateCallbackRef.current?.();
      }
      if (!resizeObserverRef.current) {
        resizeObserverRef.current = new ResizeObserver(() => {
          if (observedElementRef.current) {
            updateIndicator(observedElementRef.current);
          }
        });
      }
      const {
        current: resizeObserver
      } = resizeObserverRef;
      if (targetElement) {
        updateIndicator(targetElement);
        resizeObserver.observe(targetElement);
      }
      return () => {
        if (observedElementRef.current) {
          resizeObserver.unobserve(observedElementRef.current);
        }
      };
    }, [targetElement]);
    return indicatorPosition;
  }
  function useOnValueUpdate(value, onUpdate) {
    const previousValueRef = (0, import_react.useRef)(value);
    const updateCallbackRef = (0, import_react.useRef)(onUpdate);
    (0, import_react.useLayoutEffect)(() => {
      updateCallbackRef.current = onUpdate;
    });
    (0, import_react.useEffect)(() => {
      if (previousValueRef.current !== value) {
        updateCallbackRef.current({
          previousValue: previousValueRef.current
        });
        previousValueRef.current = value;
      }
    }, [value]);
  }
  var TabList2 = (0, import_react.forwardRef)(function TabList3({
    children,
    ...otherProps
  }, ref) {
    const context2 = useTabsContext();
    const selectedId = context2?.store.useState("selectedId");
    const indicatorPosition = useTrackElementOffset(context2?.store.item(selectedId)?.element);
    const [animationEnabled, setAnimationEnabled] = (0, import_react.useState)(false);
    useOnValueUpdate(selectedId, ({
      previousValue
    }) => previousValue && setAnimationEnabled(true));
    if (!context2) {
      globalThis.SCRIPT_DEBUG === true ? warning("`Tabs.TabList` must be wrapped in a `Tabs` component.") : void 0;
      return null;
    }
    const {
      store: store6
    } = context2;
    const {
      activeId,
      selectOnMove
    } = store6.useState();
    const {
      setActiveId
    } = store6;
    const onBlur = () => {
      if (!selectOnMove) {
        return;
      }
      if (selectedId !== activeId) {
        setActiveId(selectedId);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(TabList, {
      ref,
      store: store6,
      render: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(TabListWrapper, {
        onTransitionEnd: (event) => {
          if (event.pseudoElement === "::after") {
            setAnimationEnabled(false);
          }
        }
      }),
      onBlur,
      ...otherProps,
      style: {
        "--indicator-left": `${indicatorPosition.left}px`,
        "--indicator-top": `${indicatorPosition.top}px`,
        "--indicator-width": `${indicatorPosition.width}px`,
        "--indicator-height": `${indicatorPosition.height}px`,
        ...otherProps.style
      },
      className: clsx_default(animationEnabled ? "is-animation-enabled" : "", otherProps.className),
      children
    });
  });

  // node_modules/@wordpress/components/build-module/tabs/tabpanel.js
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var TabPanel3 = (0, import_react.forwardRef)(function TabPanel4({
    children,
    tabId,
    focusable = true,
    ...otherProps
  }, ref) {
    const context2 = useTabsContext();
    if (!context2) {
      globalThis.SCRIPT_DEBUG === true ? warning("`Tabs.TabPanel` must be wrapped in a `Tabs` component.") : void 0;
      return null;
    }
    const {
      store: store6,
      instanceId
    } = context2;
    const instancedTabId = `${instanceId}-${tabId}`;
    const selectedId = store6.useState((state) => state.selectedId);
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(TabPanel2, {
      ref,
      store: store6,
      id: `${instancedTabId}-view`,
      tabId: instancedTabId,
      focusable,
      ...otherProps,
      children: selectedId === instancedTabId && children
    });
  });

  // node_modules/@wordpress/components/build-module/tabs/index.js
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  function Tabs({
    selectOnMove = true,
    defaultTabId,
    orientation = "horizontal",
    onSelect,
    children,
    selectedTabId
  }) {
    const instanceId = use_instance_id_default(Tabs, "tabs");
    const store6 = useTabStore({
      selectOnMove,
      orientation,
      defaultSelectedId: defaultTabId && `${instanceId}-${defaultTabId}`,
      setSelectedId: (selectedId2) => {
        const strippedDownId = typeof selectedId2 === "string" ? selectedId2.replace(`${instanceId}-`, "") : selectedId2;
        onSelect?.(strippedDownId);
      },
      selectedId: selectedTabId && `${instanceId}-${selectedTabId}`
    });
    const isControlled = selectedTabId !== void 0;
    const {
      items,
      selectedId,
      activeId
    } = store6.useState();
    const {
      setSelectedId,
      setActiveId
    } = store6;
    const tabsHavePopulated = (0, import_react.useRef)(false);
    if (items.length > 0) {
      tabsHavePopulated.current = true;
    }
    const selectedTab = items.find((item) => item.id === selectedId);
    const firstEnabledTab = items.find((item) => {
      return !item.dimmed;
    });
    const initialTab = items.find((item) => item.id === `${instanceId}-${defaultTabId}`);
    (0, import_react.useLayoutEffect)(() => {
      if (isControlled) {
        return;
      }
      if (defaultTabId && !initialTab) {
        return;
      }
      if (!items.find((item) => item.id === selectedId)) {
        if (initialTab && !initialTab.dimmed) {
          setSelectedId(initialTab?.id);
          return;
        }
        if (firstEnabledTab) {
          setSelectedId(firstEnabledTab.id);
        } else if (tabsHavePopulated.current) {
          setSelectedId(null);
        }
      }
    }, [firstEnabledTab, initialTab, defaultTabId, isControlled, items, selectedId, setSelectedId]);
    (0, import_react.useLayoutEffect)(() => {
      if (!selectedTab?.dimmed) {
        return;
      }
      if (isControlled) {
        setSelectedId(null);
        return;
      }
      if (initialTab && !initialTab.dimmed) {
        setSelectedId(initialTab.id);
        return;
      }
      if (firstEnabledTab) {
        setSelectedId(firstEnabledTab.id);
      }
    }, [firstEnabledTab, initialTab, isControlled, selectedTab?.dimmed, setSelectedId]);
    (0, import_react.useLayoutEffect)(() => {
      if (!isControlled) {
        return;
      }
      if (tabsHavePopulated.current && !!selectedTabId && !selectedTab) {
        setSelectedId(null);
      }
    }, [isControlled, selectedTab, selectedTabId, setSelectedId]);
    (0, import_react.useEffect)(() => {
      if (selectedTabId === null && !activeId && firstEnabledTab?.id) {
        setActiveId(firstEnabledTab.id);
      }
    }, [selectedTabId, activeId, firstEnabledTab?.id, setActiveId]);
    (0, import_react.useEffect)(() => {
      if (!isControlled) {
        return;
      }
      requestAnimationFrame(() => {
        const focusedElement = items?.[0]?.element?.ownerDocument.activeElement;
        if (!focusedElement || !items.some((item) => focusedElement === item.element)) {
          return;
        }
        if (activeId !== focusedElement.id) {
          setActiveId(focusedElement.id);
        }
      });
    }, [activeId, isControlled, items, setActiveId]);
    const contextValue = (0, import_react.useMemo)(() => ({
      store: store6,
      instanceId
    }), [store6, instanceId]);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(TabsContext.Provider, {
      value: contextValue,
      children
    });
  }
  Tabs.TabList = TabList2;
  Tabs.Tab = Tab3;
  Tabs.TabPanel = TabPanel3;
  Tabs.Context = TabsContext;
  var tabs_default = Tabs;

  // node_modules/@wordpress/components/build-module/lock-unlock.js
  var {
    lock: lock4,
    unlock: unlock4
  } = __dangerousOptInToUnstableAPIsOnlyForCoreModules("I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.", "@wordpress/components");

  // node_modules/@wordpress/components/build-module/private-apis.js
  var privateApis = {};
  lock4(privateApis, {
    CompositeV2: Composite,
    CompositeGroupV2: CompositeGroup,
    CompositeItemV2: CompositeItem,
    CompositeRowV2: CompositeRow,
    useCompositeStoreV2: useCompositeStore,
    CustomSelectControl,
    __experimentalPopoverLegacyPositionToPlacement: positionToPlacement,
    createPrivateSlotFill,
    ComponentsContext,
    Tabs: tabs_default,
    Theme: theme_default,
    DropdownMenuV2: DropdownMenu3,
    DropdownMenuGroupV2: DropdownMenuGroup2,
    DropdownMenuItemV2: DropdownMenuItem2,
    DropdownMenuCheckboxItemV2: DropdownMenuCheckboxItem2,
    DropdownMenuRadioItemV2: DropdownMenuRadioItem2,
    DropdownMenuSeparatorV2: DropdownMenuSeparator2,
    DropdownMenuItemLabelV2: DropdownMenuItemLabel2,
    DropdownMenuItemHelpTextV2: DropdownMenuItemHelpText2,
    kebabCase
  });

  // node_modules/@wordpress/block-editor/build-module/lock-unlock.js
  var {
    lock: lock5,
    unlock: unlock5
  } = __dangerousOptInToUnstableAPIsOnlyForCoreModules("I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.", "@wordpress/block-editor");

  // node_modules/@wordpress/block-editor/build-module/components/block-context/index.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var Context4 = (0, import_react.createContext)({});
  var block_context_default = Context4;

  // node_modules/@wordpress/block-editor/build-module/store/reducer.js
  var import_es63 = __toESM(require_es6());

  // node_modules/@wordpress/block-editor/build-module/store/defaults.js
  var PREFERENCES_DEFAULTS = {
    insertUsage: {}
  };
  var SETTINGS_DEFAULTS = {
    alignWide: false,
    supportsLayout: true,
    // colors setting is not used anymore now defaults are passed from theme.json on the server and core has its own defaults.
    // The setting is only kept for backward compatibility purposes.
    colors: [{
      name: __("Black"),
      slug: "black",
      color: "#000000"
    }, {
      name: __("Cyan bluish gray"),
      slug: "cyan-bluish-gray",
      color: "#abb8c3"
    }, {
      name: __("White"),
      slug: "white",
      color: "#ffffff"
    }, {
      name: __("Pale pink"),
      slug: "pale-pink",
      color: "#f78da7"
    }, {
      name: __("Vivid red"),
      slug: "vivid-red",
      color: "#cf2e2e"
    }, {
      name: __("Luminous vivid orange"),
      slug: "luminous-vivid-orange",
      color: "#ff6900"
    }, {
      name: __("Luminous vivid amber"),
      slug: "luminous-vivid-amber",
      color: "#fcb900"
    }, {
      name: __("Light green cyan"),
      slug: "light-green-cyan",
      color: "#7bdcb5"
    }, {
      name: __("Vivid green cyan"),
      slug: "vivid-green-cyan",
      color: "#00d084"
    }, {
      name: __("Pale cyan blue"),
      slug: "pale-cyan-blue",
      color: "#8ed1fc"
    }, {
      name: __("Vivid cyan blue"),
      slug: "vivid-cyan-blue",
      color: "#0693e3"
    }, {
      name: __("Vivid purple"),
      slug: "vivid-purple",
      color: "#9b51e0"
    }],
    // fontSizes setting is not used anymore now defaults are passed from theme.json on the server and core has its own defaults.
    // The setting is only kept for backward compatibility purposes.
    fontSizes: [{
      name: _x("Small", "font size name"),
      size: 13,
      slug: "small"
    }, {
      name: _x("Normal", "font size name"),
      size: 16,
      slug: "normal"
    }, {
      name: _x("Medium", "font size name"),
      size: 20,
      slug: "medium"
    }, {
      name: _x("Large", "font size name"),
      size: 36,
      slug: "large"
    }, {
      name: _x("Huge", "font size name"),
      size: 42,
      slug: "huge"
    }],
    // Image default size slug.
    imageDefaultSize: "large",
    imageSizes: [{
      slug: "thumbnail",
      name: __("Thumbnail")
    }, {
      slug: "medium",
      name: __("Medium")
    }, {
      slug: "large",
      name: __("Large")
    }, {
      slug: "full",
      name: __("Full Size")
    }],
    // Allow plugin to disable Image Editor if need be.
    imageEditing: true,
    // This is current max width of the block inner area
    // It's used to constraint image resizing and this value could be overridden later by themes
    maxWidth: 580,
    // Allowed block types for the editor, defaulting to true (all supported).
    allowedBlockTypes: true,
    // Maximum upload size in bytes allowed for the site.
    maxUploadFileSize: 0,
    // List of allowed mime types and file extensions.
    allowedMimeTypes: null,
    // Allows to disable block locking interface.
    canLockBlocks: true,
    // Allows to disable Openverse media category in the inserter.
    enableOpenverseMediaCategory: true,
    clearBlockSelection: true,
    __experimentalCanUserUseUnfilteredHTML: false,
    __experimentalBlockDirectory: false,
    __mobileEnablePageTemplates: false,
    __experimentalBlockPatterns: [],
    __experimentalBlockPatternCategories: [],
    __unstableGalleryWithImageBlocks: false,
    __unstableIsPreviewMode: false,
    // These settings will be completely revamped in the future.
    // The goal is to evolve this into an API which will instruct
    // the block inspector to animate transitions between what it
    // displays based on the relationship between the selected block
    // and its parent, and only enable it if the parent is controlling
    // its children blocks.
    blockInspectorAnimation: {
      animationParent: "core/navigation",
      "core/navigation": {
        enterDirection: "leftToRight"
      },
      "core/navigation-submenu": {
        enterDirection: "rightToLeft"
      },
      "core/navigation-link": {
        enterDirection: "rightToLeft"
      },
      "core/search": {
        enterDirection: "rightToLeft"
      },
      "core/social-links": {
        enterDirection: "rightToLeft"
      },
      "core/page-list": {
        enterDirection: "rightToLeft"
      },
      "core/spacer": {
        enterDirection: "rightToLeft"
      },
      "core/home-link": {
        enterDirection: "rightToLeft"
      },
      "core/site-title": {
        enterDirection: "rightToLeft"
      },
      "core/site-logo": {
        enterDirection: "rightToLeft"
      }
    },
    generateAnchors: false,
    // gradients setting is not used anymore now defaults are passed from theme.json on the server and core has its own defaults.
    // The setting is only kept for backward compatibility purposes.
    gradients: [{
      name: __("Vivid cyan blue to vivid purple"),
      gradient: "linear-gradient(135deg,rgba(6,147,227,1) 0%,rgb(155,81,224) 100%)",
      slug: "vivid-cyan-blue-to-vivid-purple"
    }, {
      name: __("Light green cyan to vivid green cyan"),
      gradient: "linear-gradient(135deg,rgb(122,220,180) 0%,rgb(0,208,130) 100%)",
      slug: "light-green-cyan-to-vivid-green-cyan"
    }, {
      name: __("Luminous vivid amber to luminous vivid orange"),
      gradient: "linear-gradient(135deg,rgba(252,185,0,1) 0%,rgba(255,105,0,1) 100%)",
      slug: "luminous-vivid-amber-to-luminous-vivid-orange"
    }, {
      name: __("Luminous vivid orange to vivid red"),
      gradient: "linear-gradient(135deg,rgba(255,105,0,1) 0%,rgb(207,46,46) 100%)",
      slug: "luminous-vivid-orange-to-vivid-red"
    }, {
      name: __("Very light gray to cyan bluish gray"),
      gradient: "linear-gradient(135deg,rgb(238,238,238) 0%,rgb(169,184,195) 100%)",
      slug: "very-light-gray-to-cyan-bluish-gray"
    }, {
      name: __("Cool to warm spectrum"),
      gradient: "linear-gradient(135deg,rgb(74,234,220) 0%,rgb(151,120,209) 20%,rgb(207,42,186) 40%,rgb(238,44,130) 60%,rgb(251,105,98) 80%,rgb(254,248,76) 100%)",
      slug: "cool-to-warm-spectrum"
    }, {
      name: __("Blush light purple"),
      gradient: "linear-gradient(135deg,rgb(255,206,236) 0%,rgb(152,150,240) 100%)",
      slug: "blush-light-purple"
    }, {
      name: __("Blush bordeaux"),
      gradient: "linear-gradient(135deg,rgb(254,205,165) 0%,rgb(254,45,45) 50%,rgb(107,0,62) 100%)",
      slug: "blush-bordeaux"
    }, {
      name: __("Luminous dusk"),
      gradient: "linear-gradient(135deg,rgb(255,203,112) 0%,rgb(199,81,192) 50%,rgb(65,88,208) 100%)",
      slug: "luminous-dusk"
    }, {
      name: __("Pale ocean"),
      gradient: "linear-gradient(135deg,rgb(255,245,203) 0%,rgb(182,227,212) 50%,rgb(51,167,181) 100%)",
      slug: "pale-ocean"
    }, {
      name: __("Electric grass"),
      gradient: "linear-gradient(135deg,rgb(202,248,128) 0%,rgb(113,206,126) 100%)",
      slug: "electric-grass"
    }, {
      name: __("Midnight"),
      gradient: "linear-gradient(135deg,rgb(2,3,129) 0%,rgb(40,116,252) 100%)",
      slug: "midnight"
    }],
    __unstableResolvedAssets: {
      styles: [],
      scripts: []
    }
  };

  // node_modules/@wordpress/block-editor/build-module/store/array.js
  function insertAt(array, elements2, index2) {
    return [...array.slice(0, index2), ...Array.isArray(elements2) ? elements2 : [elements2], ...array.slice(index2)];
  }
  function moveTo(array, from2, to2, count = 1) {
    const withoutMovedElements = [...array];
    withoutMovedElements.splice(from2, count);
    return insertAt(withoutMovedElements, array.slice(from2, from2 + count), to2);
  }

  // node_modules/@wordpress/block-editor/build-module/store/reducer.js
  var identity3 = (x2) => x2;
  function mapBlockOrder(blocks2, rootClientId = "") {
    const result = /* @__PURE__ */ new Map();
    const current = [];
    result.set(rootClientId, current);
    blocks2.forEach((block3) => {
      const {
        clientId,
        innerBlocks
      } = block3;
      current.push(clientId);
      mapBlockOrder(innerBlocks, clientId).forEach((order, subClientId) => {
        result.set(subClientId, order);
      });
    });
    return result;
  }
  function mapBlockParents(blocks2, rootClientId = "") {
    const result = [];
    const stack2 = [[rootClientId, blocks2]];
    while (stack2.length) {
      const [parent, currentBlocks] = stack2.shift();
      currentBlocks.forEach(({
        innerBlocks,
        ...block3
      }) => {
        result.push([block3.clientId, parent]);
        if (innerBlocks?.length) {
          stack2.push([block3.clientId, innerBlocks]);
        }
      });
    }
    return result;
  }
  function flattenBlocks(blocks2, transform = identity3) {
    const result = [];
    const stack2 = [...blocks2];
    while (stack2.length) {
      const {
        innerBlocks,
        ...block3
      } = stack2.shift();
      stack2.push(...innerBlocks);
      result.push([block3.clientId, transform(block3)]);
    }
    return result;
  }
  function getFlattenedClientIds(blocks2) {
    const result = {};
    const stack2 = [...blocks2];
    while (stack2.length) {
      const {
        innerBlocks,
        ...block3
      } = stack2.shift();
      stack2.push(...innerBlocks);
      result[block3.clientId] = true;
    }
    return result;
  }
  function getFlattenedBlocksWithoutAttributes(blocks2) {
    return flattenBlocks(blocks2, (block3) => {
      const {
        attributes,
        ...restBlock
      } = block3;
      return restBlock;
    });
  }
  function getFlattenedBlockAttributes(blocks2) {
    return flattenBlocks(blocks2, (block3) => block3.attributes);
  }
  function hasSameKeys(a2, b2) {
    return (0, import_es63.default)(Object.keys(a2), Object.keys(b2));
  }
  function isUpdatingSameBlockAttribute(action, lastAction) {
    return action.type === "UPDATE_BLOCK_ATTRIBUTES" && lastAction !== void 0 && lastAction.type === "UPDATE_BLOCK_ATTRIBUTES" && (0, import_es63.default)(action.clientIds, lastAction.clientIds) && hasSameKeys(action.attributes, lastAction.attributes);
  }
  function updateBlockTreeForBlocks(state, blocks2) {
    const treeToUpdate = state.tree;
    const stack2 = [...blocks2];
    const flattenedBlocks = [...blocks2];
    while (stack2.length) {
      const block3 = stack2.shift();
      stack2.push(...block3.innerBlocks);
      flattenedBlocks.push(...block3.innerBlocks);
    }
    for (const block3 of flattenedBlocks) {
      treeToUpdate.set(block3.clientId, {});
    }
    for (const block3 of flattenedBlocks) {
      treeToUpdate.set(block3.clientId, Object.assign(treeToUpdate.get(block3.clientId), {
        ...state.byClientId.get(block3.clientId),
        attributes: state.attributes.get(block3.clientId),
        innerBlocks: block3.innerBlocks.map((subBlock) => treeToUpdate.get(subBlock.clientId))
      }));
    }
  }
  function updateParentInnerBlocksInTree(state, updatedClientIds, updateChildrenOfUpdatedClientIds = false) {
    const treeToUpdate = state.tree;
    const uncontrolledParents = /* @__PURE__ */ new Set([]);
    const controlledParents = /* @__PURE__ */ new Set();
    for (const clientId of updatedClientIds) {
      let current = updateChildrenOfUpdatedClientIds ? clientId : state.parents.get(clientId);
      do {
        if (state.controlledInnerBlocks[current]) {
          controlledParents.add(current);
          break;
        } else {
          uncontrolledParents.add(current);
          current = state.parents.get(current);
        }
      } while (current !== void 0);
    }
    for (const clientId of uncontrolledParents) {
      treeToUpdate.set(clientId, {
        ...treeToUpdate.get(clientId)
      });
    }
    for (const clientId of uncontrolledParents) {
      treeToUpdate.get(clientId).innerBlocks = (state.order.get(clientId) || []).map((subClientId) => treeToUpdate.get(subClientId));
    }
    for (const clientId of controlledParents) {
      treeToUpdate.set("controlled||" + clientId, {
        innerBlocks: (state.order.get(clientId) || []).map((subClientId) => treeToUpdate.get(subClientId))
      });
    }
  }
  var withBlockTree = (reducer2) => (state = {}, action) => {
    const newState = reducer2(state, action);
    if (newState === state) {
      return state;
    }
    newState.tree = state.tree ? state.tree : /* @__PURE__ */ new Map();
    switch (action.type) {
      case "RECEIVE_BLOCKS":
      case "INSERT_BLOCKS": {
        newState.tree = new Map(newState.tree);
        updateBlockTreeForBlocks(newState, action.blocks);
        updateParentInnerBlocksInTree(newState, action.rootClientId ? [action.rootClientId] : [""], true);
        break;
      }
      case "UPDATE_BLOCK":
        newState.tree = new Map(newState.tree);
        newState.tree.set(action.clientId, {
          ...newState.tree.get(action.clientId),
          ...newState.byClientId.get(action.clientId),
          attributes: newState.attributes.get(action.clientId)
        });
        updateParentInnerBlocksInTree(newState, [action.clientId], false);
        break;
      case "SYNC_DERIVED_BLOCK_ATTRIBUTES":
      case "UPDATE_BLOCK_ATTRIBUTES": {
        newState.tree = new Map(newState.tree);
        action.clientIds.forEach((clientId) => {
          newState.tree.set(clientId, {
            ...newState.tree.get(clientId),
            attributes: newState.attributes.get(clientId)
          });
        });
        updateParentInnerBlocksInTree(newState, action.clientIds, false);
        break;
      }
      case "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
        const inserterClientIds = getFlattenedClientIds(action.blocks);
        newState.tree = new Map(newState.tree);
        action.replacedClientIds.forEach((clientId) => {
          newState.tree.delete(clientId);
          if (!inserterClientIds[clientId]) {
            newState.tree.delete("controlled||" + clientId);
          }
        });
        updateBlockTreeForBlocks(newState, action.blocks);
        updateParentInnerBlocksInTree(newState, action.blocks.map((b2) => b2.clientId), false);
        const parentsOfRemovedBlocks2 = [];
        for (const clientId of action.clientIds) {
          const parentId = state.parents.get(clientId);
          if (parentId !== void 0 && (parentId === "" || newState.byClientId.get(parentId))) {
            parentsOfRemovedBlocks2.push(parentId);
          }
        }
        updateParentInnerBlocksInTree(newState, parentsOfRemovedBlocks2, true);
        break;
      }
      case "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN":
        const parentsOfRemovedBlocks = [];
        for (const clientId of action.clientIds) {
          const parentId = state.parents.get(clientId);
          if (parentId !== void 0 && (parentId === "" || newState.byClientId.get(parentId))) {
            parentsOfRemovedBlocks.push(parentId);
          }
        }
        newState.tree = new Map(newState.tree);
        action.removedClientIds.forEach((clientId) => {
          newState.tree.delete(clientId);
          newState.tree.delete("controlled||" + clientId);
        });
        updateParentInnerBlocksInTree(newState, parentsOfRemovedBlocks, true);
        break;
      case "MOVE_BLOCKS_TO_POSITION": {
        const updatedBlockUids = [];
        if (action.fromRootClientId) {
          updatedBlockUids.push(action.fromRootClientId);
        } else {
          updatedBlockUids.push("");
        }
        if (action.toRootClientId) {
          updatedBlockUids.push(action.toRootClientId);
        }
        newState.tree = new Map(newState.tree);
        updateParentInnerBlocksInTree(newState, updatedBlockUids, true);
        break;
      }
      case "MOVE_BLOCKS_UP":
      case "MOVE_BLOCKS_DOWN": {
        const updatedBlockUids = [action.rootClientId ? action.rootClientId : ""];
        newState.tree = new Map(newState.tree);
        updateParentInnerBlocksInTree(newState, updatedBlockUids, true);
        break;
      }
      case "SAVE_REUSABLE_BLOCK_SUCCESS": {
        const updatedBlockUids = [];
        newState.attributes.forEach((attributes, clientId) => {
          if (newState.byClientId.get(clientId).name === "core/block" && attributes.ref === action.updatedId) {
            updatedBlockUids.push(clientId);
          }
        });
        newState.tree = new Map(newState.tree);
        updatedBlockUids.forEach((clientId) => {
          newState.tree.set(clientId, {
            ...newState.byClientId.get(clientId),
            attributes: newState.attributes.get(clientId),
            innerBlocks: newState.tree.get(clientId).innerBlocks
          });
        });
        updateParentInnerBlocksInTree(newState, updatedBlockUids, false);
      }
    }
    return newState;
  };
  function withPersistentBlockChange(reducer2) {
    let lastAction;
    let markNextChangeAsNotPersistent = false;
    let explicitPersistent;
    return (state, action) => {
      let nextState = reducer2(state, action);
      let nextIsPersistentChange;
      if (action.type === "SET_EXPLICIT_PERSISTENT") {
        var _state$isPersistentCh;
        explicitPersistent = action.isPersistentChange;
        nextIsPersistentChange = (_state$isPersistentCh = state.isPersistentChange) !== null && _state$isPersistentCh !== void 0 ? _state$isPersistentCh : true;
      }
      if (explicitPersistent !== void 0) {
        nextIsPersistentChange = explicitPersistent;
        return nextIsPersistentChange === nextState.isPersistentChange ? nextState : {
          ...nextState,
          isPersistentChange: nextIsPersistentChange
        };
      }
      const isExplicitPersistentChange = action.type === "MARK_LAST_CHANGE_AS_PERSISTENT" || markNextChangeAsNotPersistent;
      if (state === nextState && !isExplicitPersistentChange) {
        var _state$isPersistentCh2;
        markNextChangeAsNotPersistent = action.type === "MARK_NEXT_CHANGE_AS_NOT_PERSISTENT";
        nextIsPersistentChange = (_state$isPersistentCh2 = state?.isPersistentChange) !== null && _state$isPersistentCh2 !== void 0 ? _state$isPersistentCh2 : true;
        if (state.isPersistentChange === nextIsPersistentChange) {
          return state;
        }
        return {
          ...nextState,
          isPersistentChange: nextIsPersistentChange
        };
      }
      nextState = {
        ...nextState,
        isPersistentChange: isExplicitPersistentChange ? !markNextChangeAsNotPersistent : !isUpdatingSameBlockAttribute(action, lastAction)
      };
      lastAction = action;
      markNextChangeAsNotPersistent = action.type === "MARK_NEXT_CHANGE_AS_NOT_PERSISTENT";
      return nextState;
    };
  }
  function withIgnoredBlockChange(reducer2) {
    const IGNORED_ACTION_TYPES = /* @__PURE__ */ new Set(["RECEIVE_BLOCKS"]);
    return (state, action) => {
      const nextState = reducer2(state, action);
      if (nextState !== state) {
        nextState.isIgnoredChange = IGNORED_ACTION_TYPES.has(action.type);
      }
      return nextState;
    };
  }
  var withInnerBlocksRemoveCascade = (reducer2) => (state, action) => {
    const getAllChildren = (clientIds) => {
      let result = clientIds;
      for (let i3 = 0; i3 < result.length; i3++) {
        if (!state.order.get(result[i3]) || action.keepControlledInnerBlocks && action.keepControlledInnerBlocks[result[i3]]) {
          continue;
        }
        if (result === clientIds) {
          result = [...result];
        }
        result.push(...state.order.get(result[i3]));
      }
      return result;
    };
    if (state) {
      switch (action.type) {
        case "REMOVE_BLOCKS":
          action = {
            ...action,
            type: "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN",
            removedClientIds: getAllChildren(action.clientIds)
          };
          break;
        case "REPLACE_BLOCKS":
          action = {
            ...action,
            type: "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN",
            replacedClientIds: getAllChildren(action.clientIds)
          };
          break;
      }
    }
    return reducer2(state, action);
  };
  var withBlockReset = (reducer2) => (state, action) => {
    if (action.type === "RESET_BLOCKS") {
      const newState = {
        ...state,
        byClientId: new Map(getFlattenedBlocksWithoutAttributes(action.blocks)),
        attributes: new Map(getFlattenedBlockAttributes(action.blocks)),
        order: mapBlockOrder(action.blocks),
        parents: new Map(mapBlockParents(action.blocks)),
        controlledInnerBlocks: {}
      };
      newState.tree = new Map(state?.tree);
      updateBlockTreeForBlocks(newState, action.blocks);
      newState.tree.set("", {
        innerBlocks: action.blocks.map((subBlock) => newState.tree.get(subBlock.clientId))
      });
      return newState;
    }
    return reducer2(state, action);
  };
  var withReplaceInnerBlocks = (reducer2) => (state, action) => {
    if (action.type !== "REPLACE_INNER_BLOCKS") {
      return reducer2(state, action);
    }
    const nestedControllers = {};
    if (Object.keys(state.controlledInnerBlocks).length) {
      const stack2 = [...action.blocks];
      while (stack2.length) {
        const {
          innerBlocks,
          ...block3
        } = stack2.shift();
        stack2.push(...innerBlocks);
        if (!!state.controlledInnerBlocks[block3.clientId]) {
          nestedControllers[block3.clientId] = true;
        }
      }
    }
    let stateAfterBlocksRemoval = state;
    if (state.order.get(action.rootClientId)) {
      stateAfterBlocksRemoval = reducer2(stateAfterBlocksRemoval, {
        type: "REMOVE_BLOCKS",
        keepControlledInnerBlocks: nestedControllers,
        clientIds: state.order.get(action.rootClientId)
      });
    }
    let stateAfterInsert = stateAfterBlocksRemoval;
    if (action.blocks.length) {
      stateAfterInsert = reducer2(stateAfterInsert, {
        ...action,
        type: "INSERT_BLOCKS",
        index: 0
      });
      const stateAfterInsertOrder = new Map(stateAfterInsert.order);
      Object.keys(nestedControllers).forEach((key) => {
        if (state.order.get(key)) {
          stateAfterInsertOrder.set(key, state.order.get(key));
        }
      });
      stateAfterInsert.order = stateAfterInsertOrder;
      stateAfterInsert.tree = new Map(stateAfterInsert.tree);
      Object.keys(nestedControllers).forEach((_key) => {
        const key = `controlled||${_key}`;
        if (state.tree.has(key)) {
          stateAfterInsert.tree.set(key, state.tree.get(key));
        }
      });
    }
    return stateAfterInsert;
  };
  var withSaveReusableBlock = (reducer2) => (state, action) => {
    if (state && action.type === "SAVE_REUSABLE_BLOCK_SUCCESS") {
      const {
        id: id3,
        updatedId
      } = action;
      if (id3 === updatedId) {
        return state;
      }
      state = {
        ...state
      };
      state.attributes = new Map(state.attributes);
      state.attributes.forEach((attributes, clientId) => {
        const {
          name
        } = state.byClientId.get(clientId);
        if (name === "core/block" && attributes.ref === id3) {
          state.attributes.set(clientId, {
            ...attributes,
            ref: updatedId
          });
        }
      });
    }
    return reducer2(state, action);
  };
  var withResetControlledBlocks = (reducer2) => (state, action) => {
    if (action.type === "SET_HAS_CONTROLLED_INNER_BLOCKS") {
      const tempState = reducer2(state, {
        type: "REPLACE_INNER_BLOCKS",
        rootClientId: action.clientId,
        blocks: []
      });
      return reducer2(tempState, action);
    }
    return reducer2(state, action);
  };
  var blocks = pipe_default(
    combineReducers2,
    withSaveReusableBlock,
    // Needs to be before withBlockCache.
    withBlockTree,
    // Needs to be before withInnerBlocksRemoveCascade.
    withInnerBlocksRemoveCascade,
    withReplaceInnerBlocks,
    // Needs to be after withInnerBlocksRemoveCascade.
    withBlockReset,
    withPersistentBlockChange,
    withIgnoredBlockChange,
    withResetControlledBlocks
  )({
    // The state is using a Map instead of a plain object for performance reasons.
    // You can run the "./test/performance.js" unit test to check the impact
    // code changes can have on this reducer.
    byClientId(state = /* @__PURE__ */ new Map(), action) {
      switch (action.type) {
        case "RECEIVE_BLOCKS":
        case "INSERT_BLOCKS": {
          const newState = new Map(state);
          getFlattenedBlocksWithoutAttributes(action.blocks).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "UPDATE_BLOCK": {
          if (!state.has(action.clientId)) {
            return state;
          }
          const {
            attributes,
            ...changes
          } = action.updates;
          if (Object.values(changes).length === 0) {
            return state;
          }
          const newState = new Map(state);
          newState.set(action.clientId, {
            ...state.get(action.clientId),
            ...changes
          });
          return newState;
        }
        case "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          if (!action.blocks) {
            return state;
          }
          const newState = new Map(state);
          action.replacedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          getFlattenedBlocksWithoutAttributes(action.blocks).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const newState = new Map(state);
          action.removedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          return newState;
        }
      }
      return state;
    },
    // The state is using a Map instead of a plain object for performance reasons.
    // You can run the "./test/performance.js" unit test to check the impact
    // code changes can have on this reducer.
    attributes(state = /* @__PURE__ */ new Map(), action) {
      switch (action.type) {
        case "RECEIVE_BLOCKS":
        case "INSERT_BLOCKS": {
          const newState = new Map(state);
          getFlattenedBlockAttributes(action.blocks).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "UPDATE_BLOCK": {
          if (!state.get(action.clientId) || !action.updates.attributes) {
            return state;
          }
          const newState = new Map(state);
          newState.set(action.clientId, {
            ...state.get(action.clientId),
            ...action.updates.attributes
          });
          return newState;
        }
        case "SYNC_DERIVED_BLOCK_ATTRIBUTES":
        case "UPDATE_BLOCK_ATTRIBUTES": {
          if (action.clientIds.every((id3) => !state.get(id3))) {
            return state;
          }
          let hasChange = false;
          const newState = new Map(state);
          for (const clientId of action.clientIds) {
            var _action$attributes;
            const updatedAttributeEntries = Object.entries(action.uniqueByBlock ? action.attributes[clientId] : (_action$attributes = action.attributes) !== null && _action$attributes !== void 0 ? _action$attributes : {});
            if (updatedAttributeEntries.length === 0) {
              continue;
            }
            let hasUpdatedAttributes = false;
            const existingAttributes = state.get(clientId);
            const newAttributes = {};
            updatedAttributeEntries.forEach(([key, value]) => {
              if (existingAttributes[key] !== value) {
                hasUpdatedAttributes = true;
                newAttributes[key] = value;
              }
            });
            hasChange = hasChange || hasUpdatedAttributes;
            if (hasUpdatedAttributes) {
              newState.set(clientId, {
                ...existingAttributes,
                ...newAttributes
              });
            }
          }
          return hasChange ? newState : state;
        }
        case "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          if (!action.blocks) {
            return state;
          }
          const newState = new Map(state);
          action.replacedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          getFlattenedBlockAttributes(action.blocks).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const newState = new Map(state);
          action.removedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          return newState;
        }
      }
      return state;
    },
    // The state is using a Map instead of a plain object for performance reasons.
    // You can run the "./test/performance.js" unit test to check the impact
    // code changes can have on this reducer.
    order(state = /* @__PURE__ */ new Map(), action) {
      switch (action.type) {
        case "RECEIVE_BLOCKS": {
          var _state$get;
          const blockOrder = mapBlockOrder(action.blocks);
          const newState = new Map(state);
          blockOrder.forEach((order, clientId) => {
            if (clientId !== "") {
              newState.set(clientId, order);
            }
          });
          newState.set("", ((_state$get = state.get("")) !== null && _state$get !== void 0 ? _state$get : []).concat(blockOrder[""]));
          return newState;
        }
        case "INSERT_BLOCKS": {
          const {
            rootClientId = ""
          } = action;
          const subState = state.get(rootClientId) || [];
          const mappedBlocks = mapBlockOrder(action.blocks, rootClientId);
          const {
            index: index2 = subState.length
          } = action;
          const newState = new Map(state);
          mappedBlocks.forEach((order, clientId) => {
            newState.set(clientId, order);
          });
          newState.set(rootClientId, insertAt(subState, mappedBlocks.get(rootClientId), index2));
          return newState;
        }
        case "MOVE_BLOCKS_TO_POSITION": {
          var _state$get$filter;
          const {
            fromRootClientId = "",
            toRootClientId = "",
            clientIds
          } = action;
          const {
            index: index2 = state.get(toRootClientId).length
          } = action;
          if (fromRootClientId === toRootClientId) {
            const subState = state.get(toRootClientId);
            const fromIndex = subState.indexOf(clientIds[0]);
            const newState2 = new Map(state);
            newState2.set(toRootClientId, moveTo(state.get(toRootClientId), fromIndex, index2, clientIds.length));
            return newState2;
          }
          const newState = new Map(state);
          newState.set(fromRootClientId, (_state$get$filter = state.get(fromRootClientId)?.filter((id3) => !clientIds.includes(id3))) !== null && _state$get$filter !== void 0 ? _state$get$filter : []);
          newState.set(toRootClientId, insertAt(state.get(toRootClientId), clientIds, index2));
          return newState;
        }
        case "MOVE_BLOCKS_UP": {
          const {
            clientIds,
            rootClientId = ""
          } = action;
          const firstClientId = clientIds[0];
          const subState = state.get(rootClientId);
          if (!subState.length || firstClientId === subState[0]) {
            return state;
          }
          const firstIndex = subState.indexOf(firstClientId);
          const newState = new Map(state);
          newState.set(rootClientId, moveTo(subState, firstIndex, firstIndex - 1, clientIds.length));
          return newState;
        }
        case "MOVE_BLOCKS_DOWN": {
          const {
            clientIds,
            rootClientId = ""
          } = action;
          const firstClientId = clientIds[0];
          const lastClientId = clientIds[clientIds.length - 1];
          const subState = state.get(rootClientId);
          if (!subState.length || lastClientId === subState[subState.length - 1]) {
            return state;
          }
          const firstIndex = subState.indexOf(firstClientId);
          const newState = new Map(state);
          newState.set(rootClientId, moveTo(subState, firstIndex, firstIndex + 1, clientIds.length));
          return newState;
        }
        case "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const {
            clientIds
          } = action;
          if (!action.blocks) {
            return state;
          }
          const mappedBlocks = mapBlockOrder(action.blocks);
          const newState = new Map(state);
          action.replacedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          mappedBlocks.forEach((order, clientId) => {
            if (clientId !== "") {
              newState.set(clientId, order);
            }
          });
          newState.forEach((order, clientId) => {
            const newSubOrder = Object.values(order).reduce((result, subClientId) => {
              if (subClientId === clientIds[0]) {
                return [...result, ...mappedBlocks.get("")];
              }
              if (clientIds.indexOf(subClientId) === -1) {
                result.push(subClientId);
              }
              return result;
            }, []);
            newState.set(clientId, newSubOrder);
          });
          return newState;
        }
        case "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const newState = new Map(state);
          action.removedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          newState.forEach((order, clientId) => {
            var _order$filter;
            const newSubOrder = (_order$filter = order?.filter((id3) => !action.removedClientIds.includes(id3))) !== null && _order$filter !== void 0 ? _order$filter : [];
            if (newSubOrder.length !== order.length) {
              newState.set(clientId, newSubOrder);
            }
          });
          return newState;
        }
      }
      return state;
    },
    // While technically redundant data as the inverse of `order`, it serves as
    // an optimization for the selectors which derive the ancestry of a block.
    parents(state = /* @__PURE__ */ new Map(), action) {
      switch (action.type) {
        case "RECEIVE_BLOCKS": {
          const newState = new Map(state);
          mapBlockParents(action.blocks).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "INSERT_BLOCKS": {
          const newState = new Map(state);
          mapBlockParents(action.blocks, action.rootClientId || "").forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "MOVE_BLOCKS_TO_POSITION": {
          const newState = new Map(state);
          action.clientIds.forEach((id3) => {
            newState.set(id3, action.toRootClientId || "");
          });
          return newState;
        }
        case "REPLACE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const newState = new Map(state);
          action.replacedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          mapBlockParents(action.blocks, state.get(action.clientIds[0])).forEach(([key, value]) => {
            newState.set(key, value);
          });
          return newState;
        }
        case "REMOVE_BLOCKS_AUGMENTED_WITH_CHILDREN": {
          const newState = new Map(state);
          action.removedClientIds.forEach((clientId) => {
            newState.delete(clientId);
          });
          return newState;
        }
      }
      return state;
    },
    controlledInnerBlocks(state = {}, {
      type,
      clientId,
      hasControlledInnerBlocks
    }) {
      if (type === "SET_HAS_CONTROLLED_INNER_BLOCKS") {
        return {
          ...state,
          [clientId]: hasControlledInnerBlocks
        };
      }
      return state;
    }
  });
  function isBlockInterfaceHidden(state = false, action) {
    switch (action.type) {
      case "HIDE_BLOCK_INTERFACE":
        return true;
      case "SHOW_BLOCK_INTERFACE":
        return false;
    }
    return state;
  }
  function isTyping(state = false, action) {
    switch (action.type) {
      case "START_TYPING":
        return true;
      case "STOP_TYPING":
        return false;
    }
    return state;
  }
  function isDragging2(state = false, action) {
    switch (action.type) {
      case "START_DRAGGING":
        return true;
      case "STOP_DRAGGING":
        return false;
    }
    return state;
  }
  function draggedBlocks(state = [], action) {
    switch (action.type) {
      case "START_DRAGGING_BLOCKS":
        return action.clientIds;
      case "STOP_DRAGGING_BLOCKS":
        return [];
    }
    return state;
  }
  function blockVisibility(state = {}, action) {
    if (action.type === "SET_BLOCK_VISIBILITY") {
      return {
        ...state,
        ...action.updates
      };
    }
    return state;
  }
  function selectionHelper(state = {}, action) {
    switch (action.type) {
      case "CLEAR_SELECTED_BLOCK": {
        if (state.clientId) {
          return {};
        }
        return state;
      }
      case "SELECT_BLOCK":
        if (action.clientId === state.clientId) {
          return state;
        }
        return {
          clientId: action.clientId
        };
      case "REPLACE_INNER_BLOCKS":
      case "INSERT_BLOCKS": {
        if (!action.updateSelection || !action.blocks.length) {
          return state;
        }
        return {
          clientId: action.blocks[0].clientId
        };
      }
      case "REMOVE_BLOCKS":
        if (!action.clientIds || !action.clientIds.length || action.clientIds.indexOf(state.clientId) === -1) {
          return state;
        }
        return {};
      case "REPLACE_BLOCKS": {
        if (action.clientIds.indexOf(state.clientId) === -1) {
          return state;
        }
        const blockToSelect = action.blocks[action.indexToSelect] || action.blocks[action.blocks.length - 1];
        if (!blockToSelect) {
          return {};
        }
        if (blockToSelect.clientId === state.clientId) {
          return state;
        }
        return {
          clientId: blockToSelect.clientId
        };
      }
    }
    return state;
  }
  function selection(state = {}, action) {
    switch (action.type) {
      case "SELECTION_CHANGE":
        if (action.clientId) {
          return {
            selectionStart: {
              clientId: action.clientId,
              attributeKey: action.attributeKey,
              offset: action.startOffset
            },
            selectionEnd: {
              clientId: action.clientId,
              attributeKey: action.attributeKey,
              offset: action.endOffset
            }
          };
        }
        return {
          selectionStart: action.start || state.selectionStart,
          selectionEnd: action.end || state.selectionEnd
        };
      case "RESET_SELECTION":
        const {
          selectionStart: selectionStart2,
          selectionEnd: selectionEnd2
        } = action;
        return {
          selectionStart: selectionStart2,
          selectionEnd: selectionEnd2
        };
      case "MULTI_SELECT":
        const {
          start: start2,
          end
        } = action;
        if (start2 === state.selectionStart?.clientId && end === state.selectionEnd?.clientId) {
          return state;
        }
        return {
          selectionStart: {
            clientId: start2
          },
          selectionEnd: {
            clientId: end
          }
        };
      case "RESET_BLOCKS":
        const startClientId = state?.selectionStart?.clientId;
        const endClientId = state?.selectionEnd?.clientId;
        if (!startClientId && !endClientId) {
          return state;
        }
        if (!action.blocks.some((block3) => block3.clientId === startClientId)) {
          return {
            selectionStart: {},
            selectionEnd: {}
          };
        }
        if (!action.blocks.some((block3) => block3.clientId === endClientId)) {
          return {
            ...state,
            selectionEnd: state.selectionStart
          };
        }
    }
    const selectionStart = selectionHelper(state.selectionStart, action);
    const selectionEnd = selectionHelper(state.selectionEnd, action);
    if (selectionStart === state.selectionStart && selectionEnd === state.selectionEnd) {
      return state;
    }
    return {
      selectionStart,
      selectionEnd
    };
  }
  function isMultiSelecting(state = false, action) {
    switch (action.type) {
      case "START_MULTI_SELECT":
        return true;
      case "STOP_MULTI_SELECT":
        return false;
    }
    return state;
  }
  function isSelectionEnabled(state = true, action) {
    switch (action.type) {
      case "TOGGLE_SELECTION":
        return action.isSelectionEnabled;
    }
    return state;
  }
  function removalPromptData(state = false, action) {
    switch (action.type) {
      case "DISPLAY_BLOCK_REMOVAL_PROMPT":
        const {
          clientIds,
          selectPrevious,
          message
        } = action;
        return {
          clientIds,
          selectPrevious,
          message
        };
      case "CLEAR_BLOCK_REMOVAL_PROMPT":
        return false;
    }
    return state;
  }
  function blockRemovalRules(state = false, action) {
    switch (action.type) {
      case "SET_BLOCK_REMOVAL_RULES":
        return action.rules;
    }
    return state;
  }
  function initialPosition(state = null, action) {
    if (action.type === "REPLACE_BLOCKS" && action.initialPosition !== void 0) {
      return action.initialPosition;
    } else if (["MULTI_SELECT", "SELECT_BLOCK", "RESET_SELECTION", "INSERT_BLOCKS", "REPLACE_INNER_BLOCKS"].includes(action.type)) {
      return action.initialPosition;
    }
    return state;
  }
  function blocksMode(state = {}, action) {
    if (action.type === "TOGGLE_BLOCK_MODE") {
      const {
        clientId
      } = action;
      return {
        ...state,
        [clientId]: state[clientId] && state[clientId] === "html" ? "visual" : "html"
      };
    }
    return state;
  }
  function insertionPoint(state = null, action) {
    switch (action.type) {
      case "SHOW_INSERTION_POINT": {
        const {
          rootClientId,
          index: index2,
          __unstableWithInserter,
          operation,
          nearestSide
        } = action;
        const nextState = {
          rootClientId,
          index: index2,
          __unstableWithInserter,
          operation,
          nearestSide
        };
        return (0, import_es63.default)(state, nextState) ? state : nextState;
      }
      case "HIDE_INSERTION_POINT":
        return null;
    }
    return state;
  }
  function template(state = {
    isValid: true
  }, action) {
    switch (action.type) {
      case "SET_TEMPLATE_VALIDITY":
        return {
          ...state,
          isValid: action.isValid
        };
    }
    return state;
  }
  function settings(state = SETTINGS_DEFAULTS, action) {
    switch (action.type) {
      case "UPDATE_SETTINGS":
        if (action.reset) {
          return {
            ...SETTINGS_DEFAULTS,
            ...action.settings
          };
        }
        return {
          ...state,
          ...action.settings
        };
    }
    return state;
  }
  function preferences(state = PREFERENCES_DEFAULTS, action) {
    switch (action.type) {
      case "INSERT_BLOCKS":
      case "REPLACE_BLOCKS": {
        const nextInsertUsage = action.blocks.reduce((prevUsage, block3) => {
          const {
            attributes,
            name: blockName
          } = block3;
          let id3 = blockName;
          const match2 = select(store2).getActiveBlockVariation(blockName, attributes);
          if (match2?.name) {
            id3 += "/" + match2.name;
          }
          if (blockName === "core/block") {
            id3 += "/" + attributes.ref;
          }
          return {
            ...prevUsage,
            [id3]: {
              time: action.time,
              count: prevUsage[id3] ? prevUsage[id3].count + 1 : 1
            }
          };
        }, state.insertUsage);
        return {
          ...state,
          insertUsage: nextInsertUsage
        };
      }
    }
    return state;
  }
  var blockListSettings = (state = {}, action) => {
    switch (action.type) {
      // Even if the replaced blocks have the same client ID, our logic
      // should correct the state.
      case "REPLACE_BLOCKS":
      case "REMOVE_BLOCKS": {
        return Object.fromEntries(Object.entries(state).filter(([id3]) => !action.clientIds.includes(id3)));
      }
      case "UPDATE_BLOCK_LIST_SETTINGS": {
        const updates = typeof action.clientId === "string" ? {
          [action.clientId]: action.settings
        } : action.clientId;
        for (const clientId in updates) {
          if (!updates[clientId]) {
            if (!state[clientId]) {
              delete updates[clientId];
            }
          } else if ((0, import_es63.default)(state[clientId], updates[clientId])) {
            delete updates[clientId];
          }
        }
        if (Object.keys(updates).length === 0) {
          return state;
        }
        const merged = {
          ...state,
          ...updates
        };
        for (const clientId in updates) {
          if (!updates[clientId]) {
            delete merged[clientId];
          }
        }
        return merged;
      }
    }
    return state;
  };
  function editorMode(state = "edit", action) {
    if (action.type === "INSERT_BLOCKS" && state === "navigation") {
      return "edit";
    }
    if (action.type === "SET_EDITOR_MODE") {
      return action.mode;
    }
    return state;
  }
  function hasBlockMovingClientId(state = null, action) {
    if (action.type === "SET_BLOCK_MOVING_MODE") {
      return action.hasBlockMovingClientId;
    }
    if (action.type === "SET_EDITOR_MODE") {
      return null;
    }
    return state;
  }
  function lastBlockAttributesChange(state = null, action) {
    switch (action.type) {
      case "UPDATE_BLOCK":
        if (!action.updates.attributes) {
          break;
        }
        return {
          [action.clientId]: action.updates.attributes
        };
      case "UPDATE_BLOCK_ATTRIBUTES":
        return action.clientIds.reduce((accumulator, id3) => ({
          ...accumulator,
          [id3]: action.uniqueByBlock ? action.attributes[id3] : action.attributes
        }), {});
    }
    return state;
  }
  function highlightedBlock(state, action) {
    switch (action.type) {
      case "TOGGLE_BLOCK_HIGHLIGHT":
        const {
          clientId,
          isHighlighted
        } = action;
        if (isHighlighted) {
          return clientId;
        } else if (state === clientId) {
          return null;
        }
        return state;
      case "SELECT_BLOCK":
        if (action.clientId !== state) {
          return null;
        }
    }
    return state;
  }
  function expandedBlock(state = null, action) {
    switch (action.type) {
      case "SET_BLOCK_EXPANDED_IN_LIST_VIEW":
        return action.clientId;
      case "SELECT_BLOCK":
        if (action.clientId !== state) {
          return null;
        }
    }
    return state;
  }
  function lastBlockInserted(state = {}, action) {
    switch (action.type) {
      case "INSERT_BLOCKS":
      case "REPLACE_BLOCKS":
        if (!action.blocks.length) {
          return state;
        }
        const clientIds = action.blocks.map((block3) => {
          return block3.clientId;
        });
        const source = action.meta?.source;
        return {
          clientIds,
          source
        };
      case "RESET_BLOCKS":
        return {};
    }
    return state;
  }
  function temporarilyEditingAsBlocks(state = "", action) {
    if (action.type === "SET_TEMPORARILY_EDITING_AS_BLOCKS") {
      return action.temporarilyEditingAsBlocks;
    }
    return state;
  }
  function temporarilyEditingFocusModeRevert(state = "", action) {
    if (action.type === "SET_TEMPORARILY_EDITING_AS_BLOCKS") {
      return action.focusModeToRevert;
    }
    return state;
  }
  function blockEditingModes(state = /* @__PURE__ */ new Map(), action) {
    switch (action.type) {
      case "SET_BLOCK_EDITING_MODE":
        return new Map(state).set(action.clientId, action.mode);
      case "UNSET_BLOCK_EDITING_MODE": {
        const newState = new Map(state);
        newState.delete(action.clientId);
        return newState;
      }
      case "RESET_BLOCKS": {
        return state.has("") ? (/* @__PURE__ */ new Map()).set("", state.get("")) : state;
      }
    }
    return state;
  }
  function openedBlockSettingsMenu(state = null, action) {
    if ("SET_OPENED_BLOCK_SETTINGS_MENU" === action.type) {
      var _action$clientId;
      return (_action$clientId = action?.clientId) !== null && _action$clientId !== void 0 ? _action$clientId : null;
    }
    return state;
  }
  function styleOverrides(state = /* @__PURE__ */ new Map(), action) {
    switch (action.type) {
      case "SET_STYLE_OVERRIDE":
        return new Map(state).set(action.id, action.style);
      case "DELETE_STYLE_OVERRIDE": {
        const newState = new Map(state);
        newState.delete(action.id);
        return newState;
      }
    }
    return state;
  }
  function registeredInserterMediaCategories(state = [], action) {
    switch (action.type) {
      case "REGISTER_INSERTER_MEDIA_CATEGORY":
        return [...state, action.category];
    }
    return state;
  }
  function lastFocus(state = false, action) {
    switch (action.type) {
      case "LAST_FOCUS":
        return action.lastFocus;
    }
    return state;
  }
  var combinedReducers = combineReducers2({
    blocks,
    isDragging: isDragging2,
    isTyping,
    isBlockInterfaceHidden,
    draggedBlocks,
    selection,
    isMultiSelecting,
    isSelectionEnabled,
    initialPosition,
    blocksMode,
    blockListSettings,
    insertionPoint,
    template,
    settings,
    preferences,
    lastBlockAttributesChange,
    lastFocus,
    editorMode,
    hasBlockMovingClientId,
    expandedBlock,
    highlightedBlock,
    lastBlockInserted,
    temporarilyEditingAsBlocks,
    temporarilyEditingFocusModeRevert,
    blockVisibility,
    blockEditingModes,
    styleOverrides,
    removalPromptData,
    blockRemovalRules,
    openedBlockSettingsMenu,
    registeredInserterMediaCategories
  });
  function withAutomaticChangeReset(reducer2) {
    return (state, action) => {
      const nextState = reducer2(state, action);
      if (!state) {
        return nextState;
      }
      nextState.automaticChangeStatus = state.automaticChangeStatus;
      if (action.type === "MARK_AUTOMATIC_CHANGE") {
        return {
          ...nextState,
          automaticChangeStatus: "pending"
        };
      }
      if (action.type === "MARK_AUTOMATIC_CHANGE_FINAL" && state.automaticChangeStatus === "pending") {
        return {
          ...nextState,
          automaticChangeStatus: "final"
        };
      }
      if (nextState.blocks === state.blocks && nextState.selection === state.selection) {
        return nextState;
      }
      if (nextState.automaticChangeStatus !== "final" && nextState.selection !== state.selection) {
        return nextState;
      }
      return {
        ...nextState,
        automaticChangeStatus: void 0
      };
    };
  }
  var reducer_default4 = withAutomaticChangeReset(combinedReducers);

  // node_modules/@wordpress/block-editor/build-module/store/selectors.js
  var selectors_exports4 = {};
  __export(selectors_exports4, {
    __experimentalGetActiveBlockIdByBlockNames: () => __experimentalGetActiveBlockIdByBlockNames,
    __experimentalGetAllowedBlocks: () => __experimentalGetAllowedBlocks,
    __experimentalGetAllowedPatterns: () => __experimentalGetAllowedPatterns,
    __experimentalGetBlockListSettingsForBlocks: () => __experimentalGetBlockListSettingsForBlocks,
    __experimentalGetDirectInsertBlock: () => __experimentalGetDirectInsertBlock,
    __experimentalGetGlobalBlocksByName: () => __experimentalGetGlobalBlocksByName,
    __experimentalGetLastBlockAttributeChanges: () => __experimentalGetLastBlockAttributeChanges,
    __experimentalGetParsedPattern: () => __experimentalGetParsedPattern,
    __experimentalGetPatternTransformItems: () => __experimentalGetPatternTransformItems,
    __experimentalGetPatternsByBlockTypes: () => __experimentalGetPatternsByBlockTypes,
    __experimentalGetReusableBlockTitle: () => __experimentalGetReusableBlockTitle,
    __unstableGetBlockWithoutInnerBlocks: () => __unstableGetBlockWithoutInnerBlocks,
    __unstableGetClientIdWithClientIdsTree: () => __unstableGetClientIdWithClientIdsTree,
    __unstableGetClientIdsTree: () => __unstableGetClientIdsTree,
    __unstableGetContentLockingParent: () => __unstableGetContentLockingParent,
    __unstableGetEditorMode: () => __unstableGetEditorMode,
    __unstableGetSelectedBlocksWithPartialSelection: () => __unstableGetSelectedBlocksWithPartialSelection,
    __unstableGetTemporarilyEditingAsBlocks: () => __unstableGetTemporarilyEditingAsBlocks,
    __unstableGetTemporarilyEditingFocusModeToRevert: () => __unstableGetTemporarilyEditingFocusModeToRevert,
    __unstableGetVisibleBlocks: () => __unstableGetVisibleBlocks,
    __unstableHasActiveBlockOverlayActive: () => __unstableHasActiveBlockOverlayActive,
    __unstableIsFullySelected: () => __unstableIsFullySelected,
    __unstableIsLastBlockChangeIgnored: () => __unstableIsLastBlockChangeIgnored,
    __unstableIsSelectionCollapsed: () => __unstableIsSelectionCollapsed,
    __unstableIsSelectionMergeable: () => __unstableIsSelectionMergeable,
    __unstableIsWithinBlockOverlay: () => __unstableIsWithinBlockOverlay,
    __unstableSelectionHasUnmergeableBlock: () => __unstableSelectionHasUnmergeableBlock,
    areInnerBlocksControlled: () => areInnerBlocksControlled,
    canEditBlock: () => canEditBlock,
    canInsertBlockType: () => canInsertBlockType,
    canInsertBlocks: () => canInsertBlocks,
    canLockBlockType: () => canLockBlockType,
    canMoveBlock: () => canMoveBlock,
    canMoveBlocks: () => canMoveBlocks,
    canRemoveBlock: () => canRemoveBlock,
    canRemoveBlocks: () => canRemoveBlocks,
    didAutomaticChange: () => didAutomaticChange,
    getAdjacentBlockClientId: () => getAdjacentBlockClientId,
    getAllowedBlocks: () => getAllowedBlocks,
    getBlock: () => getBlock,
    getBlockAttributes: () => getBlockAttributes2,
    getBlockCount: () => getBlockCount,
    getBlockEditingMode: () => getBlockEditingMode,
    getBlockHierarchyRootClientId: () => getBlockHierarchyRootClientId,
    getBlockIndex: () => getBlockIndex,
    getBlockInsertionPoint: () => getBlockInsertionPoint,
    getBlockListSettings: () => getBlockListSettings,
    getBlockMode: () => getBlockMode,
    getBlockName: () => getBlockName,
    getBlockNamesByClientId: () => getBlockNamesByClientId,
    getBlockOrder: () => getBlockOrder,
    getBlockParents: () => getBlockParents,
    getBlockParentsByBlockName: () => getBlockParentsByBlockName,
    getBlockRootClientId: () => getBlockRootClientId,
    getBlockSelectionEnd: () => getBlockSelectionEnd,
    getBlockSelectionStart: () => getBlockSelectionStart,
    getBlockTransformItems: () => getBlockTransformItems,
    getBlocks: () => getBlocks,
    getBlocksByClientId: () => getBlocksByClientId,
    getBlocksByName: () => getBlocksByName,
    getClientIdsOfDescendants: () => getClientIdsOfDescendants,
    getClientIdsWithDescendants: () => getClientIdsWithDescendants,
    getDirectInsertBlock: () => getDirectInsertBlock,
    getDraggedBlockClientIds: () => getDraggedBlockClientIds,
    getFirstMultiSelectedBlockClientId: () => getFirstMultiSelectedBlockClientId,
    getGlobalBlockCount: () => getGlobalBlockCount,
    getInserterItems: () => getInserterItems,
    getLastMultiSelectedBlockClientId: () => getLastMultiSelectedBlockClientId,
    getLowestCommonAncestorWithSelectedBlock: () => getLowestCommonAncestorWithSelectedBlock,
    getMultiSelectedBlockClientIds: () => getMultiSelectedBlockClientIds,
    getMultiSelectedBlocks: () => getMultiSelectedBlocks,
    getMultiSelectedBlocksEndClientId: () => getMultiSelectedBlocksEndClientId,
    getMultiSelectedBlocksStartClientId: () => getMultiSelectedBlocksStartClientId,
    getNextBlockClientId: () => getNextBlockClientId,
    getPatternsByBlockTypes: () => getPatternsByBlockTypes,
    getPreviousBlockClientId: () => getPreviousBlockClientId,
    getSelectedBlock: () => getSelectedBlock,
    getSelectedBlockClientId: () => getSelectedBlockClientId,
    getSelectedBlockClientIds: () => getSelectedBlockClientIds,
    getSelectedBlockCount: () => getSelectedBlockCount,
    getSelectedBlocksInitialCaretPosition: () => getSelectedBlocksInitialCaretPosition,
    getSelectionEnd: () => getSelectionEnd,
    getSelectionStart: () => getSelectionStart,
    getSettings: () => getSettings,
    getTemplate: () => getTemplate,
    getTemplateLock: () => getTemplateLock,
    hasBlockMovingClientId: () => hasBlockMovingClientId2,
    hasDraggedInnerBlock: () => hasDraggedInnerBlock,
    hasInserterItems: () => hasInserterItems,
    hasMultiSelection: () => hasMultiSelection,
    hasSelectedBlock: () => hasSelectedBlock,
    hasSelectedInnerBlock: () => hasSelectedInnerBlock,
    isAncestorBeingDragged: () => isAncestorBeingDragged,
    isAncestorMultiSelected: () => isAncestorMultiSelected,
    isBlockBeingDragged: () => isBlockBeingDragged,
    isBlockHighlighted: () => isBlockHighlighted,
    isBlockInsertionPointVisible: () => isBlockInsertionPointVisible,
    isBlockMultiSelected: () => isBlockMultiSelected,
    isBlockSelected: () => isBlockSelected,
    isBlockValid: () => isBlockValid,
    isBlockVisible: () => isBlockVisible,
    isBlockWithinSelection: () => isBlockWithinSelection,
    isCaretWithinFormattedText: () => isCaretWithinFormattedText,
    isDraggingBlocks: () => isDraggingBlocks,
    isFirstMultiSelectedBlock: () => isFirstMultiSelectedBlock,
    isGroupable: () => isGroupable,
    isLastBlockChangePersistent: () => isLastBlockChangePersistent,
    isMultiSelecting: () => isMultiSelecting2,
    isNavigationMode: () => isNavigationMode,
    isSelectionEnabled: () => isSelectionEnabled2,
    isTyping: () => isTyping2,
    isUngroupable: () => isUngroupable,
    isValidTemplate: () => isValidTemplate,
    wasBlockJustInserted: () => wasBlockJustInserted
  });

  // node_modules/@wordpress/block-editor/build-module/store/private-keys.js
  var globalStylesDataKey = Symbol("globalStylesDataKey");
  var selectBlockPatternsKey = Symbol("selectBlockPatternsKey");
  var reusableBlocksSelectKey = Symbol("reusableBlocksSelect");

  // node_modules/@wordpress/block-editor/build-module/store/constants.js
  var STORE_NAME3 = "core/block-editor";

  // node_modules/@wordpress/block-editor/build-module/store/utils.js
  var withRootClientIdOptionKey = Symbol("withRootClientId");
  var checkAllowList = (list, item, defaultResult = null) => {
    if (typeof list === "boolean") {
      return list;
    }
    if (Array.isArray(list)) {
      if (list.includes("core/post-content") && item === null) {
        return true;
      }
      return list.includes(item);
    }
    return defaultResult;
  };
  var checkAllowListRecursive = (blocks2, allowedBlockTypes) => {
    if (typeof allowedBlockTypes === "boolean") {
      return allowedBlockTypes;
    }
    const blocksQueue = [...blocks2];
    while (blocksQueue.length > 0) {
      const block3 = blocksQueue.shift();
      const isAllowed = checkAllowList(allowedBlockTypes, block3.name || block3.blockName, true);
      if (!isAllowed) {
        return false;
      }
      block3.innerBlocks?.forEach((innerBlock) => {
        blocksQueue.push(innerBlock);
      });
    }
    return true;
  };
  var getAllPatternsDependants = (select2) => (state) => {
    return [state.settings.__experimentalBlockPatterns, state.settings.__experimentalUserPatternCategories, state.settings.__experimentalReusableBlocks, state.settings[selectBlockPatternsKey]?.(select2), state.blockPatterns, unlock5(select2(STORE_NAME3)).getReusableBlocks()];
  };
  function getInsertBlockTypeDependants(state, rootClientId) {
    return [state.blockListSettings[rootClientId], state.blocks.byClientId.get(rootClientId), state.settings.allowedBlockTypes, state.settings.templateLock, state.blockEditingModes];
  }

  // node_modules/@wordpress/block-editor/build-module/utils/sorting.js
  var comparator = (field, items, order) => {
    return (a2, b2) => {
      let cmpA, cmpB;
      if (typeof field === "function") {
        cmpA = field(a2);
        cmpB = field(b2);
      } else {
        cmpA = a2[field];
        cmpB = b2[field];
      }
      if (cmpA > cmpB) {
        return order === "asc" ? 1 : -1;
      } else if (cmpB > cmpA) {
        return order === "asc" ? -1 : 1;
      }
      const orderA = items.findIndex((item) => item === a2);
      const orderB = items.findIndex((item) => item === b2);
      if (orderA > orderB) {
        return 1;
      } else if (orderB > orderA) {
        return -1;
      }
      return 0;
    };
  };
  function orderBy(items, field, order = "asc") {
    return items.concat().sort(comparator(field, items, order));
  }

  // node_modules/@wordpress/block-editor/build-module/store/private-selectors.js
  var private_selectors_exports2 = {};
  __export(private_selectors_exports2, {
    getAllPatterns: () => getAllPatterns,
    getBlockRemovalRules: () => getBlockRemovalRules,
    getBlockSettings: () => getBlockSettings,
    getBlockWithoutAttributes: () => getBlockWithoutAttributes,
    getContentLockingParent: () => getContentLockingParent,
    getEnabledBlockParents: () => getEnabledBlockParents,
    getEnabledClientIdsTree: () => getEnabledClientIdsTree,
    getExpandedBlock: () => getExpandedBlock,
    getInserterMediaCategories: () => getInserterMediaCategories,
    getLastFocus: () => getLastFocus,
    getLastInsertedBlocksClientIds: () => getLastInsertedBlocksClientIds,
    getOpenedBlockSettingsMenu: () => getOpenedBlockSettingsMenu,
    getPatternBySlug: () => getPatternBySlug,
    getRegisteredInserterMediaCategories: () => getRegisteredInserterMediaCategories,
    getRemovalPromptData: () => getRemovalPromptData,
    getReusableBlocks: () => getReusableBlocks,
    getStyleOverrides: () => getStyleOverrides,
    getTemporarilyEditingAsBlocks: () => getTemporarilyEditingAsBlocks,
    getTemporarilyEditingFocusModeToRevert: () => getTemporarilyEditingFocusModeToRevert,
    hasAllowedPatterns: () => hasAllowedPatterns,
    isBlockInterfaceHidden: () => isBlockInterfaceHidden2,
    isBlockSubtreeDisabled: () => isBlockSubtreeDisabled,
    isDragging: () => isDragging3,
    isResolvingPatterns: () => isResolvingPatterns
  });

  // node_modules/@wordpress/block-editor/build-module/components/inserter/block-patterns-tab/utils.js
  var INSERTER_PATTERN_TYPES = {
    user: "user",
    theme: "theme",
    directory: "directory"
  };
  var allPatternsCategory = {
    name: "allPatterns",
    label: _x("All", "patterns")
  };
  var myPatternsCategory = {
    name: "myPatterns",
    label: __("My patterns")
  };

  // node_modules/@wordpress/block-editor/build-module/utils/object.js
  var getValueFromObjectPath2 = (object, path, defaultValue2) => {
    var _value;
    const arrayPath = Array.isArray(path) ? path : path.split(".");
    let value = object;
    arrayPath.forEach((fieldName) => {
      value = value?.[fieldName];
    });
    return (_value = value) !== null && _value !== void 0 ? _value : defaultValue2;
  };

  // node_modules/@wordpress/block-editor/build-module/store/get-block-settings.js
  var blockedPaths = ["color", "border", "dimensions", "typography", "spacing"];
  var deprecatedFlags = {
    "color.palette": (settings2) => settings2.colors,
    "color.gradients": (settings2) => settings2.gradients,
    "color.custom": (settings2) => settings2.disableCustomColors === void 0 ? void 0 : !settings2.disableCustomColors,
    "color.customGradient": (settings2) => settings2.disableCustomGradients === void 0 ? void 0 : !settings2.disableCustomGradients,
    "typography.fontSizes": (settings2) => settings2.fontSizes,
    "typography.customFontSize": (settings2) => settings2.disableCustomFontSizes === void 0 ? void 0 : !settings2.disableCustomFontSizes,
    "typography.lineHeight": (settings2) => settings2.enableCustomLineHeight,
    "spacing.units": (settings2) => {
      if (settings2.enableCustomUnits === void 0) {
        return;
      }
      if (settings2.enableCustomUnits === true) {
        return ["px", "em", "rem", "vh", "vw", "%"];
      }
      return settings2.enableCustomUnits;
    },
    "spacing.padding": (settings2) => settings2.enableCustomSpacing
  };
  var prefixedFlags = {
    /*
     * These were only available in the plugin
     * and can be removed when the minimum WordPress version
     * for the plugin is 5.9.
     */
    "border.customColor": "border.color",
    "border.customStyle": "border.style",
    "border.customWidth": "border.width",
    "typography.customFontStyle": "typography.fontStyle",
    "typography.customFontWeight": "typography.fontWeight",
    "typography.customLetterSpacing": "typography.letterSpacing",
    "typography.customTextDecorations": "typography.textDecoration",
    "typography.customTextTransforms": "typography.textTransform",
    /*
     * These were part of WordPress 5.8 and we need to keep them.
     */
    "border.customRadius": "border.radius",
    "spacing.customMargin": "spacing.margin",
    "spacing.customPadding": "spacing.padding",
    "typography.customLineHeight": "typography.lineHeight"
  };
  var removeCustomPrefixes = (path) => {
    return prefixedFlags[path] || path;
  };
  function getBlockSettings(state, clientId, ...paths) {
    const blockName = getBlockName(state, clientId);
    const candidates = [];
    if (clientId) {
      let id3 = clientId;
      do {
        const name = getBlockName(state, id3);
        if (hasBlockSupport(name, "__experimentalSettings", false)) {
          candidates.push(id3);
        }
      } while (id3 = state.blocks.parents.get(id3));
    }
    return paths.map((path) => {
      if (blockedPaths.includes(path)) {
        console.warn("Top level useSetting paths are disabled. Please use a subpath to query the information needed.");
        return void 0;
      }
      let result = applyFilters("blockEditor.useSetting.before", void 0, path, clientId, blockName);
      if (void 0 !== result) {
        return result;
      }
      const normalizedPath = removeCustomPrefixes(path);
      for (const candidateClientId of candidates) {
        var _getValueFromObjectPa;
        const candidateAtts = getBlockAttributes2(state, candidateClientId);
        result = (_getValueFromObjectPa = getValueFromObjectPath2(candidateAtts.settings?.blocks?.[blockName], normalizedPath)) !== null && _getValueFromObjectPa !== void 0 ? _getValueFromObjectPa : getValueFromObjectPath2(candidateAtts.settings, normalizedPath);
        if (result !== void 0) {
          break;
        }
      }
      const settings2 = getSettings(state);
      if (result === void 0 && blockName) {
        result = getValueFromObjectPath2(settings2.__experimentalFeatures?.blocks?.[blockName], normalizedPath);
      }
      if (result === void 0) {
        result = getValueFromObjectPath2(settings2.__experimentalFeatures, normalizedPath);
      }
      if (result !== void 0) {
        if (__EXPERIMENTAL_PATHS_WITH_OVERRIDE[normalizedPath]) {
          var _ref4, _result$custom;
          return (_ref4 = (_result$custom = result.custom) !== null && _result$custom !== void 0 ? _result$custom : result.theme) !== null && _ref4 !== void 0 ? _ref4 : result.default;
        }
        return result;
      }
      const deprecatedSettingsValue = deprecatedFlags[normalizedPath]?.(settings2);
      if (deprecatedSettingsValue !== void 0) {
        return deprecatedSettingsValue;
      }
      return normalizedPath === "typography.dropCap" ? true : void 0;
    });
  }

  // node_modules/@wordpress/block-editor/build-module/store/private-selectors.js
  function isBlockInterfaceHidden2(state) {
    return state.isBlockInterfaceHidden;
  }
  function getLastInsertedBlocksClientIds(state) {
    return state?.lastBlockInserted?.clientIds;
  }
  function getBlockWithoutAttributes(state, clientId) {
    return state.blocks.byClientId.get(clientId);
  }
  var isBlockSubtreeDisabled = (state, clientId) => {
    const isChildSubtreeDisabled = (childClientId) => {
      return getBlockEditingMode(state, childClientId) === "disabled" && getBlockOrder(state, childClientId).every(isChildSubtreeDisabled);
    };
    return getBlockOrder(state, clientId).every(isChildSubtreeDisabled);
  };
  function getEnabledClientIdsTreeUnmemoized(state, rootClientId) {
    const blockOrder = getBlockOrder(state, rootClientId);
    const result = [];
    for (const clientId of blockOrder) {
      const innerBlocks = getEnabledClientIdsTreeUnmemoized(state, clientId);
      if (getBlockEditingMode(state, clientId) !== "disabled") {
        result.push({
          clientId,
          innerBlocks
        });
      } else {
        result.push(...innerBlocks);
      }
    }
    return result;
  }
  var getEnabledClientIdsTree = rememo_default(getEnabledClientIdsTreeUnmemoized, (state) => [state.blocks.order, state.blockEditingModes, state.settings.templateLock, state.blockListSettings]);
  var getEnabledBlockParents = rememo_default((state, clientId, ascending = false) => {
    return getBlockParents(state, clientId, ascending).filter((parent) => getBlockEditingMode(state, parent) !== "disabled");
  }, (state) => [state.blocks.parents, state.blockEditingModes, state.settings.templateLock, state.blockListSettings]);
  function getRemovalPromptData(state) {
    return state.removalPromptData;
  }
  function getBlockRemovalRules(state) {
    return state.blockRemovalRules;
  }
  function getOpenedBlockSettingsMenu(state) {
    return state.openedBlockSettingsMenu;
  }
  var getStyleOverrides = rememo_default((state) => {
    const clientIds = getClientIdsWithDescendants(state);
    const clientIdMap = clientIds.reduce((acc, clientId, index2) => {
      acc[clientId] = index2;
      return acc;
    }, {});
    return [...state.styleOverrides].sort((overrideA, overrideB) => {
      var _clientIdMap$clientId, _clientIdMap$clientId2;
      const [, {
        clientId: clientIdA
      }] = overrideA;
      const [, {
        clientId: clientIdB
      }] = overrideB;
      const aIndex = (_clientIdMap$clientId = clientIdMap[clientIdA]) !== null && _clientIdMap$clientId !== void 0 ? _clientIdMap$clientId : -1;
      const bIndex = (_clientIdMap$clientId2 = clientIdMap[clientIdB]) !== null && _clientIdMap$clientId2 !== void 0 ? _clientIdMap$clientId2 : -1;
      return aIndex - bIndex;
    });
  }, (state) => [state.blocks.order, state.styleOverrides]);
  function getRegisteredInserterMediaCategories(state) {
    return state.registeredInserterMediaCategories;
  }
  var getInserterMediaCategories = rememo_default((state) => {
    const {
      settings: {
        inserterMediaCategories,
        allowedMimeTypes,
        enableOpenverseMediaCategory
      },
      registeredInserterMediaCategories: registeredInserterMediaCategories2
    } = state;
    if (!inserterMediaCategories && !registeredInserterMediaCategories2.length || !allowedMimeTypes) {
      return;
    }
    const coreInserterMediaCategoriesNames = inserterMediaCategories?.map(({
      name
    }) => name) || [];
    const mergedCategories = [...inserterMediaCategories || [], ...(registeredInserterMediaCategories2 || []).filter(({
      name
    }) => !coreInserterMediaCategoriesNames.includes(name))];
    return mergedCategories.filter((category) => {
      if (!enableOpenverseMediaCategory && category.name === "openverse") {
        return false;
      }
      return Object.values(allowedMimeTypes).some((mimeType) => mimeType.startsWith(`${category.mediaType}/`));
    });
  }, (state) => [state.settings.inserterMediaCategories, state.settings.allowedMimeTypes, state.settings.enableOpenverseMediaCategory, state.registeredInserterMediaCategories]);
  var hasAllowedPatterns = createRegistrySelector((select2) => rememo_default((state, rootClientId = null) => {
    const {
      getAllPatterns: getAllPatterns2,
      __experimentalGetParsedPattern: __experimentalGetParsedPattern2
    } = unlock5(select2(STORE_NAME3));
    const patterns = getAllPatterns2();
    const {
      allowedBlockTypes
    } = getSettings(state);
    return patterns.some(({
      name,
      inserter = true
    }) => {
      if (!inserter) {
        return false;
      }
      const {
        blocks: blocks2
      } = __experimentalGetParsedPattern2(name);
      return checkAllowListRecursive(blocks2, allowedBlockTypes) && blocks2.every(({
        name: blockName
      }) => canInsertBlockType(state, blockName, rootClientId));
    });
  }, (state, rootClientId) => [...getAllPatternsDependants(select2)(state), ...getInsertBlockTypeDependants(state, rootClientId)]));
  function mapUserPattern(userPattern, __experimentalUserPatternCategories = []) {
    return {
      name: `core/block/${userPattern.id}`,
      id: userPattern.id,
      type: INSERTER_PATTERN_TYPES.user,
      title: userPattern.title.raw,
      categories: userPattern.wp_pattern_category.map((catId) => {
        const category = __experimentalUserPatternCategories.find(({
          id: id3
        }) => id3 === catId);
        return category ? category.slug : catId;
      }),
      content: userPattern.content.raw,
      syncStatus: userPattern.wp_pattern_sync_status
    };
  }
  var getPatternBySlug = createRegistrySelector((select2) => rememo_default((state, patternName) => {
    var _state$settings$__exp, _state$settings$selec;
    if (patternName?.startsWith("core/block/")) {
      const _id = parseInt(patternName.slice("core/block/".length), 10);
      const block3 = unlock5(select2(STORE_NAME3)).getReusableBlocks().find(({
        id: id3
      }) => id3 === _id);
      if (!block3) {
        return null;
      }
      return mapUserPattern(block3, state.settings.__experimentalUserPatternCategories);
    }
    return [
      // This setting is left for back compat.
      ...(_state$settings$__exp = state.settings.__experimentalBlockPatterns) !== null && _state$settings$__exp !== void 0 ? _state$settings$__exp : [],
      ...(_state$settings$selec = state.settings[selectBlockPatternsKey]?.(select2)) !== null && _state$settings$selec !== void 0 ? _state$settings$selec : []
    ].find(({
      name
    }) => name === patternName);
  }, (state, patternName) => patternName?.startsWith("core/block/") ? [unlock5(select2(STORE_NAME3)).getReusableBlocks(), state.settings.__experimentalReusableBlocks] : [state.settings.__experimentalBlockPatterns, state.settings[selectBlockPatternsKey]?.(select2)]));
  var getAllPatterns = createRegistrySelector((select2) => rememo_default((state) => {
    var _state$settings$__exp2, _state$settings$selec2;
    return [
      ...unlock5(select2(STORE_NAME3)).getReusableBlocks().map((userPattern) => mapUserPattern(userPattern, state.settings.__experimentalUserPatternCategories)),
      // This setting is left for back compat.
      ...(_state$settings$__exp2 = state.settings.__experimentalBlockPatterns) !== null && _state$settings$__exp2 !== void 0 ? _state$settings$__exp2 : [],
      ...(_state$settings$selec2 = state.settings[selectBlockPatternsKey]?.(select2)) !== null && _state$settings$selec2 !== void 0 ? _state$settings$selec2 : []
    ].filter((x2, index2, arr) => index2 === arr.findIndex((y2) => x2.name === y2.name));
  }, getAllPatternsDependants(select2)));
  var isResolvingPatterns = createRegistrySelector((select2) => rememo_default((state) => {
    const blockPatternsSelect = state.settings[selectBlockPatternsKey];
    const reusableBlocksSelect = state.settings[reusableBlocksSelectKey];
    return (blockPatternsSelect ? blockPatternsSelect(select2) === void 0 : false) || (reusableBlocksSelect ? reusableBlocksSelect(select2) === void 0 : false);
  }, getAllPatternsDependants(select2)));
  var EMPTY_ARRAY = [];
  var getReusableBlocks = createRegistrySelector((select2) => (state) => {
    var _state$settings$__exp3;
    const reusableBlocksSelect = state.settings[reusableBlocksSelectKey];
    return reusableBlocksSelect ? reusableBlocksSelect(select2) : (_state$settings$__exp3 = state.settings.__experimentalReusableBlocks) !== null && _state$settings$__exp3 !== void 0 ? _state$settings$__exp3 : EMPTY_ARRAY;
  });
  function getLastFocus(state) {
    return state.lastFocus;
  }
  function isDragging3(state) {
    return state.isDragging;
  }
  function getExpandedBlock(state) {
    return state.expandedBlock;
  }
  var getContentLockingParent = rememo_default((state, clientId) => {
    let current = clientId;
    let result;
    while (current = state.blocks.parents.get(current)) {
      if (getBlockName(state, current) === "core/block" || getTemplateLock(state, current) === "contentOnly") {
        result = current;
      }
    }
    return result;
  }, (state) => [state.blocks.parents, state.blockListSettings]);
  function getTemporarilyEditingAsBlocks(state) {
    return state.temporarilyEditingAsBlocks;
  }
  function getTemporarilyEditingFocusModeToRevert(state) {
    return state.temporarilyEditingFocusModeRevert;
  }

  // node_modules/@wordpress/block-editor/build-module/store/selectors.js
  var MILLISECONDS_PER_HOUR = 3600 * 1e3;
  var MILLISECONDS_PER_DAY = 24 * 3600 * 1e3;
  var MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1e3;
  var EMPTY_ARRAY2 = [];
  var EMPTY_SET = /* @__PURE__ */ new Set();
  function getBlockName(state, clientId) {
    const block3 = state.blocks.byClientId.get(clientId);
    const socialLinkName = "core/social-link";
    if (platform_default.OS !== "web" && block3?.name === socialLinkName) {
      const attributes = state.blocks.attributes.get(clientId);
      const {
        service
      } = attributes !== null && attributes !== void 0 ? attributes : {};
      return service ? `${socialLinkName}-${service}` : socialLinkName;
    }
    return block3 ? block3.name : null;
  }
  function isBlockValid(state, clientId) {
    const block3 = state.blocks.byClientId.get(clientId);
    return !!block3 && block3.isValid;
  }
  function getBlockAttributes2(state, clientId) {
    const block3 = state.blocks.byClientId.get(clientId);
    if (!block3) {
      return null;
    }
    return state.blocks.attributes.get(clientId);
  }
  function getBlock(state, clientId) {
    if (!state.blocks.byClientId.has(clientId)) {
      return null;
    }
    return state.blocks.tree.get(clientId);
  }
  var __unstableGetBlockWithoutInnerBlocks = rememo_default((state, clientId) => {
    const block3 = state.blocks.byClientId.get(clientId);
    if (!block3) {
      return null;
    }
    return {
      ...block3,
      attributes: getBlockAttributes2(state, clientId)
    };
  }, (state, clientId) => [state.blocks.byClientId.get(clientId), state.blocks.attributes.get(clientId)]);
  function getBlocks(state, rootClientId) {
    const treeKey = !rootClientId || !areInnerBlocksControlled(state, rootClientId) ? rootClientId || "" : "controlled||" + rootClientId;
    return state.blocks.tree.get(treeKey)?.innerBlocks || EMPTY_ARRAY2;
  }
  var __unstableGetClientIdWithClientIdsTree = rememo_default((state, clientId) => {
    deprecated("wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree", {
      since: "6.3",
      version: "6.5"
    });
    return {
      clientId,
      innerBlocks: __unstableGetClientIdsTree(state, clientId)
    };
  }, (state) => [state.blocks.order]);
  var __unstableGetClientIdsTree = rememo_default((state, rootClientId = "") => {
    deprecated("wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree", {
      since: "6.3",
      version: "6.5"
    });
    return getBlockOrder(state, rootClientId).map((clientId) => __unstableGetClientIdWithClientIdsTree(state, clientId));
  }, (state) => [state.blocks.order]);
  var getClientIdsOfDescendants = rememo_default((state, rootIds) => {
    rootIds = Array.isArray(rootIds) ? [...rootIds] : [rootIds];
    const ids = [];
    for (const rootId of rootIds) {
      const order = state.blocks.order.get(rootId);
      if (order) {
        ids.push(...order);
      }
    }
    let index2 = 0;
    while (index2 < ids.length) {
      const id3 = ids[index2];
      const order = state.blocks.order.get(id3);
      if (order) {
        ids.splice(index2 + 1, 0, ...order);
      }
      index2++;
    }
    return ids;
  }, (state) => [state.blocks.order]);
  var getClientIdsWithDescendants = (state) => getClientIdsOfDescendants(state, "");
  var getGlobalBlockCount = rememo_default((state, blockName) => {
    const clientIds = getClientIdsWithDescendants(state);
    if (!blockName) {
      return clientIds.length;
    }
    let count = 0;
    for (const clientId of clientIds) {
      const block3 = state.blocks.byClientId.get(clientId);
      if (block3.name === blockName) {
        count++;
      }
    }
    return count;
  }, (state) => [state.blocks.order, state.blocks.byClientId]);
  var getBlocksByName = rememo_default((state, blockName) => {
    if (!blockName) {
      return EMPTY_ARRAY2;
    }
    const blockNames = Array.isArray(blockName) ? blockName : [blockName];
    const clientIds = getClientIdsWithDescendants(state);
    const foundBlocks = clientIds.filter((clientId) => {
      const block3 = state.blocks.byClientId.get(clientId);
      return blockNames.includes(block3.name);
    });
    return foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY2;
  }, (state) => [state.blocks.order, state.blocks.byClientId]);
  function __experimentalGetGlobalBlocksByName(state, blockName) {
    deprecated("wp.data.select( 'core/block-editor' ).__experimentalGetGlobalBlocksByName", {
      since: "6.5",
      alternative: `wp.data.select( 'core/block-editor' ).getBlocksByName`
    });
    return getBlocksByName(state, blockName);
  }
  var getBlocksByClientId = rememo_default((state, clientIds) => (Array.isArray(clientIds) ? clientIds : [clientIds]).map((clientId) => getBlock(state, clientId)), (state, clientIds) => (Array.isArray(clientIds) ? clientIds : [clientIds]).map((clientId) => state.blocks.tree.get(clientId)));
  var getBlockNamesByClientId = rememo_default((state, clientIds) => getBlocksByClientId(state, clientIds).filter(Boolean).map((block3) => block3.name), (state, clientIds) => getBlocksByClientId(state, clientIds));
  function getBlockCount(state, rootClientId) {
    return getBlockOrder(state, rootClientId).length;
  }
  function getSelectionStart(state) {
    return state.selection.selectionStart;
  }
  function getSelectionEnd(state) {
    return state.selection.selectionEnd;
  }
  function getBlockSelectionStart(state) {
    return state.selection.selectionStart.clientId;
  }
  function getBlockSelectionEnd(state) {
    return state.selection.selectionEnd.clientId;
  }
  function getSelectedBlockCount(state) {
    const multiSelectedBlockCount = getMultiSelectedBlockClientIds(state).length;
    if (multiSelectedBlockCount) {
      return multiSelectedBlockCount;
    }
    return state.selection.selectionStart.clientId ? 1 : 0;
  }
  function hasSelectedBlock(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    return !!selectionStart.clientId && selectionStart.clientId === selectionEnd.clientId;
  }
  function getSelectedBlockClientId(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    const {
      clientId
    } = selectionStart;
    if (!clientId || clientId !== selectionEnd.clientId) {
      return null;
    }
    return clientId;
  }
  function getSelectedBlock(state) {
    const clientId = getSelectedBlockClientId(state);
    return clientId ? getBlock(state, clientId) : null;
  }
  function getBlockRootClientId(state, clientId) {
    var _state$blocks$parents;
    return (_state$blocks$parents = state.blocks.parents.get(clientId)) !== null && _state$blocks$parents !== void 0 ? _state$blocks$parents : null;
  }
  var getBlockParents = rememo_default((state, clientId, ascending = false) => {
    const parents = [];
    let current = clientId;
    while (current = state.blocks.parents.get(current)) {
      parents.push(current);
    }
    if (!parents.length) {
      return EMPTY_ARRAY2;
    }
    return ascending ? parents : parents.reverse();
  }, (state) => [state.blocks.parents]);
  var getBlockParentsByBlockName = rememo_default((state, clientId, blockName, ascending = false) => {
    const parents = getBlockParents(state, clientId, ascending);
    const hasName = Array.isArray(blockName) ? (name) => blockName.includes(name) : (name) => blockName === name;
    return parents.filter((id3) => hasName(getBlockName(state, id3)));
  }, (state) => [state.blocks.parents]);
  function getBlockHierarchyRootClientId(state, clientId) {
    let current = clientId;
    let parent;
    do {
      parent = current;
      current = state.blocks.parents.get(current);
    } while (current);
    return parent;
  }
  function getLowestCommonAncestorWithSelectedBlock(state, clientId) {
    const selectedId = getSelectedBlockClientId(state);
    const clientParents = [...getBlockParents(state, clientId), clientId];
    const selectedParents = [...getBlockParents(state, selectedId), selectedId];
    let lowestCommonAncestor;
    const maxDepth2 = Math.min(clientParents.length, selectedParents.length);
    for (let index2 = 0; index2 < maxDepth2; index2++) {
      if (clientParents[index2] === selectedParents[index2]) {
        lowestCommonAncestor = clientParents[index2];
      } else {
        break;
      }
    }
    return lowestCommonAncestor;
  }
  function getAdjacentBlockClientId(state, startClientId, modifier = 1) {
    if (startClientId === void 0) {
      startClientId = getSelectedBlockClientId(state);
    }
    if (startClientId === void 0) {
      if (modifier < 0) {
        startClientId = getFirstMultiSelectedBlockClientId(state);
      } else {
        startClientId = getLastMultiSelectedBlockClientId(state);
      }
    }
    if (!startClientId) {
      return null;
    }
    const rootClientId = getBlockRootClientId(state, startClientId);
    if (rootClientId === null) {
      return null;
    }
    const {
      order
    } = state.blocks;
    const orderSet = order.get(rootClientId);
    const index2 = orderSet.indexOf(startClientId);
    const nextIndex = index2 + 1 * modifier;
    if (nextIndex < 0) {
      return null;
    }
    if (nextIndex === orderSet.length) {
      return null;
    }
    return orderSet[nextIndex];
  }
  function getPreviousBlockClientId(state, startClientId) {
    return getAdjacentBlockClientId(state, startClientId, -1);
  }
  function getNextBlockClientId(state, startClientId) {
    return getAdjacentBlockClientId(state, startClientId, 1);
  }
  function getSelectedBlocksInitialCaretPosition(state) {
    return state.initialPosition;
  }
  var getSelectedBlockClientIds = rememo_default((state) => {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    if (!selectionStart.clientId || !selectionEnd.clientId) {
      return EMPTY_ARRAY2;
    }
    if (selectionStart.clientId === selectionEnd.clientId) {
      return [selectionStart.clientId];
    }
    const rootClientId = getBlockRootClientId(state, selectionStart.clientId);
    if (rootClientId === null) {
      return EMPTY_ARRAY2;
    }
    const blockOrder = getBlockOrder(state, rootClientId);
    const startIndex = blockOrder.indexOf(selectionStart.clientId);
    const endIndex = blockOrder.indexOf(selectionEnd.clientId);
    if (startIndex > endIndex) {
      return blockOrder.slice(endIndex, startIndex + 1);
    }
    return blockOrder.slice(startIndex, endIndex + 1);
  }, (state) => [state.blocks.order, state.selection.selectionStart.clientId, state.selection.selectionEnd.clientId]);
  function getMultiSelectedBlockClientIds(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    if (selectionStart.clientId === selectionEnd.clientId) {
      return EMPTY_ARRAY2;
    }
    return getSelectedBlockClientIds(state);
  }
  var getMultiSelectedBlocks = rememo_default((state) => {
    const multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(state);
    if (!multiSelectedBlockClientIds.length) {
      return EMPTY_ARRAY2;
    }
    return multiSelectedBlockClientIds.map((clientId) => getBlock(state, clientId));
  }, (state) => [...getSelectedBlockClientIds.getDependants(state), state.blocks.byClientId, state.blocks.order, state.blocks.attributes]);
  function getFirstMultiSelectedBlockClientId(state) {
    return getMultiSelectedBlockClientIds(state)[0] || null;
  }
  function getLastMultiSelectedBlockClientId(state) {
    const selectedClientIds = getMultiSelectedBlockClientIds(state);
    return selectedClientIds[selectedClientIds.length - 1] || null;
  }
  function isFirstMultiSelectedBlock(state, clientId) {
    return getFirstMultiSelectedBlockClientId(state) === clientId;
  }
  function isBlockMultiSelected(state, clientId) {
    return getMultiSelectedBlockClientIds(state).indexOf(clientId) !== -1;
  }
  var isAncestorMultiSelected = rememo_default((state, clientId) => {
    let ancestorClientId = clientId;
    let isMultiSelected = false;
    while (ancestorClientId && !isMultiSelected) {
      ancestorClientId = getBlockRootClientId(state, ancestorClientId);
      isMultiSelected = isBlockMultiSelected(state, ancestorClientId);
    }
    return isMultiSelected;
  }, (state) => [state.blocks.order, state.selection.selectionStart.clientId, state.selection.selectionEnd.clientId]);
  function getMultiSelectedBlocksStartClientId(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    if (selectionStart.clientId === selectionEnd.clientId) {
      return null;
    }
    return selectionStart.clientId || null;
  }
  function getMultiSelectedBlocksEndClientId(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    if (selectionStart.clientId === selectionEnd.clientId) {
      return null;
    }
    return selectionEnd.clientId || null;
  }
  function __unstableIsFullySelected(state) {
    const selectionAnchor = getSelectionStart(state);
    const selectionFocus = getSelectionEnd(state);
    return !selectionAnchor.attributeKey && !selectionFocus.attributeKey && typeof selectionAnchor.offset === "undefined" && typeof selectionFocus.offset === "undefined";
  }
  function __unstableIsSelectionCollapsed(state) {
    const selectionAnchor = getSelectionStart(state);
    const selectionFocus = getSelectionEnd(state);
    return !!selectionAnchor && !!selectionFocus && selectionAnchor.clientId === selectionFocus.clientId && selectionAnchor.attributeKey === selectionFocus.attributeKey && selectionAnchor.offset === selectionFocus.offset;
  }
  function __unstableSelectionHasUnmergeableBlock(state) {
    return getSelectedBlockClientIds(state).some((clientId) => {
      const blockName = getBlockName(state, clientId);
      const blockType = getBlockType(blockName);
      return !blockType.merge;
    });
  }
  function __unstableIsSelectionMergeable(state, isForward) {
    const selectionAnchor = getSelectionStart(state);
    const selectionFocus = getSelectionEnd(state);
    if (selectionAnchor.clientId === selectionFocus.clientId) {
      return false;
    }
    if (!selectionAnchor.attributeKey || !selectionFocus.attributeKey || typeof selectionAnchor.offset === "undefined" || typeof selectionFocus.offset === "undefined") {
      return false;
    }
    const anchorRootClientId = getBlockRootClientId(state, selectionAnchor.clientId);
    const focusRootClientId = getBlockRootClientId(state, selectionFocus.clientId);
    if (anchorRootClientId !== focusRootClientId) {
      return false;
    }
    const blockOrder = getBlockOrder(state, anchorRootClientId);
    const anchorIndex = blockOrder.indexOf(selectionAnchor.clientId);
    const focusIndex = blockOrder.indexOf(selectionFocus.clientId);
    let selectionStart, selectionEnd;
    if (anchorIndex > focusIndex) {
      selectionStart = selectionFocus;
      selectionEnd = selectionAnchor;
    } else {
      selectionStart = selectionAnchor;
      selectionEnd = selectionFocus;
    }
    const targetBlockClientId = isForward ? selectionEnd.clientId : selectionStart.clientId;
    const blockToMergeClientId = isForward ? selectionStart.clientId : selectionEnd.clientId;
    const targetBlockName = getBlockName(state, targetBlockClientId);
    const targetBlockType = getBlockType(targetBlockName);
    if (!targetBlockType.merge) {
      return false;
    }
    const blockToMerge = getBlock(state, blockToMergeClientId);
    if (blockToMerge.name === targetBlockName) {
      return true;
    }
    const blocksToMerge = switchToBlockType(blockToMerge, targetBlockName);
    return blocksToMerge && blocksToMerge.length;
  }
  var __unstableGetSelectedBlocksWithPartialSelection = (state) => {
    const selectionAnchor = getSelectionStart(state);
    const selectionFocus = getSelectionEnd(state);
    if (selectionAnchor.clientId === selectionFocus.clientId) {
      return EMPTY_ARRAY2;
    }
    if (!selectionAnchor.attributeKey || !selectionFocus.attributeKey || typeof selectionAnchor.offset === "undefined" || typeof selectionFocus.offset === "undefined") {
      return EMPTY_ARRAY2;
    }
    const anchorRootClientId = getBlockRootClientId(state, selectionAnchor.clientId);
    const focusRootClientId = getBlockRootClientId(state, selectionFocus.clientId);
    if (anchorRootClientId !== focusRootClientId) {
      return EMPTY_ARRAY2;
    }
    const blockOrder = getBlockOrder(state, anchorRootClientId);
    const anchorIndex = blockOrder.indexOf(selectionAnchor.clientId);
    const focusIndex = blockOrder.indexOf(selectionFocus.clientId);
    const [selectionStart, selectionEnd] = anchorIndex > focusIndex ? [selectionFocus, selectionAnchor] : [selectionAnchor, selectionFocus];
    const blockA = getBlock(state, selectionStart.clientId);
    const blockB = getBlock(state, selectionEnd.clientId);
    const htmlA = blockA.attributes[selectionStart.attributeKey];
    const htmlB = blockB.attributes[selectionEnd.attributeKey];
    let valueA = create2({
      html: htmlA
    });
    let valueB = create2({
      html: htmlB
    });
    valueA = remove3(valueA, 0, selectionStart.offset);
    valueB = remove3(valueB, selectionEnd.offset, valueB.text.length);
    return [{
      ...blockA,
      attributes: {
        ...blockA.attributes,
        [selectionStart.attributeKey]: toHTMLString({
          value: valueA
        })
      }
    }, {
      ...blockB,
      attributes: {
        ...blockB.attributes,
        [selectionEnd.attributeKey]: toHTMLString({
          value: valueB
        })
      }
    }];
  };
  function getBlockOrder(state, rootClientId) {
    return state.blocks.order.get(rootClientId || "") || EMPTY_ARRAY2;
  }
  function getBlockIndex(state, clientId) {
    const rootClientId = getBlockRootClientId(state, clientId);
    return getBlockOrder(state, rootClientId).indexOf(clientId);
  }
  function isBlockSelected(state, clientId) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    if (selectionStart.clientId !== selectionEnd.clientId) {
      return false;
    }
    return selectionStart.clientId === clientId;
  }
  function hasSelectedInnerBlock(state, clientId, deep = false) {
    const selectedBlockClientIds = getSelectedBlockClientIds(state);
    if (!selectedBlockClientIds.length) {
      return false;
    }
    if (deep) {
      return selectedBlockClientIds.some((id3) => (
        // Pass true because we don't care about order and it's more
        // performant.
        getBlockParents(state, id3, true).includes(clientId)
      ));
    }
    return selectedBlockClientIds.some((id3) => getBlockRootClientId(state, id3) === clientId);
  }
  function hasDraggedInnerBlock(state, clientId, deep = false) {
    return getBlockOrder(state, clientId).some((innerClientId) => isBlockBeingDragged(state, innerClientId) || deep && hasDraggedInnerBlock(state, innerClientId, deep));
  }
  function isBlockWithinSelection(state, clientId) {
    if (!clientId) {
      return false;
    }
    const clientIds = getMultiSelectedBlockClientIds(state);
    const index2 = clientIds.indexOf(clientId);
    return index2 > -1 && index2 < clientIds.length - 1;
  }
  function hasMultiSelection(state) {
    const {
      selectionStart,
      selectionEnd
    } = state.selection;
    return selectionStart.clientId !== selectionEnd.clientId;
  }
  function isMultiSelecting2(state) {
    return state.isMultiSelecting;
  }
  function isSelectionEnabled2(state) {
    return state.isSelectionEnabled;
  }
  function getBlockMode(state, clientId) {
    return state.blocksMode[clientId] || "visual";
  }
  function isTyping2(state) {
    return state.isTyping;
  }
  function isDraggingBlocks(state) {
    return !!state.draggedBlocks.length;
  }
  function getDraggedBlockClientIds(state) {
    return state.draggedBlocks;
  }
  function isBlockBeingDragged(state, clientId) {
    return state.draggedBlocks.includes(clientId);
  }
  function isAncestorBeingDragged(state, clientId) {
    if (!isDraggingBlocks(state)) {
      return false;
    }
    const parents = getBlockParents(state, clientId);
    return parents.some((parentClientId) => isBlockBeingDragged(state, parentClientId));
  }
  function isCaretWithinFormattedText() {
    deprecated('wp.data.select( "core/block-editor" ).isCaretWithinFormattedText', {
      since: "6.1",
      version: "6.3"
    });
    return false;
  }
  var getBlockInsertionPoint = rememo_default((state) => {
    let rootClientId, index2;
    const {
      insertionPoint: insertionPoint2,
      selection: {
        selectionEnd
      }
    } = state;
    if (insertionPoint2 !== null) {
      return insertionPoint2;
    }
    const {
      clientId
    } = selectionEnd;
    if (clientId) {
      rootClientId = getBlockRootClientId(state, clientId) || void 0;
      index2 = getBlockIndex(state, selectionEnd.clientId) + 1;
    } else {
      index2 = getBlockOrder(state).length;
    }
    return {
      rootClientId,
      index: index2
    };
  }, (state) => [state.insertionPoint, state.selection.selectionEnd.clientId, state.blocks.parents, state.blocks.order]);
  function isBlockInsertionPointVisible(state) {
    return state.insertionPoint !== null;
  }
  function isValidTemplate(state) {
    return state.template.isValid;
  }
  function getTemplate(state) {
    return state.settings.template;
  }
  function getTemplateLock(state, rootClientId) {
    var _getBlockListSettings;
    if (!rootClientId) {
      var _state$settings$templ;
      return (_state$settings$templ = state.settings.templateLock) !== null && _state$settings$templ !== void 0 ? _state$settings$templ : false;
    }
    return (_getBlockListSettings = getBlockListSettings(state, rootClientId)?.templateLock) !== null && _getBlockListSettings !== void 0 ? _getBlockListSettings : false;
  }
  var canInsertBlockTypeUnmemoized = (state, blockName, rootClientId = null) => {
    let blockType;
    if (blockName && "object" === typeof blockName) {
      blockType = blockName;
      blockName = blockType.name;
    } else {
      blockType = getBlockType(blockName);
    }
    if (!blockType) {
      return false;
    }
    const {
      allowedBlockTypes
    } = getSettings(state);
    const isBlockAllowedInEditor = checkAllowList(allowedBlockTypes, blockName, true);
    if (!isBlockAllowedInEditor) {
      return false;
    }
    const isLocked = !!getTemplateLock(state, rootClientId);
    if (isLocked) {
      return false;
    }
    if (getBlockEditingMode(state, rootClientId !== null && rootClientId !== void 0 ? rootClientId : "") === "disabled") {
      return false;
    }
    const parentBlockListSettings = getBlockListSettings(state, rootClientId);
    if (rootClientId && parentBlockListSettings === void 0) {
      return false;
    }
    const parentName = getBlockName(state, rootClientId);
    const parentBlockType = getBlockType(parentName);
    const parentAllowedChildBlocks = parentBlockType?.allowedBlocks;
    let hasParentAllowedBlock = checkAllowList(parentAllowedChildBlocks, blockName);
    if (hasParentAllowedBlock !== false) {
      const parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;
      const hasParentListAllowedBlock = checkAllowList(parentAllowedBlocks, blockName);
      if (hasParentListAllowedBlock !== null) {
        hasParentAllowedBlock = hasParentListAllowedBlock;
      }
    }
    const blockAllowedParentBlocks = blockType.parent;
    const hasBlockAllowedParent = checkAllowList(blockAllowedParentBlocks, parentName);
    let hasBlockAllowedAncestor = true;
    const blockAllowedAncestorBlocks = blockType.ancestor;
    if (blockAllowedAncestorBlocks) {
      const ancestors = [rootClientId, ...getBlockParents(state, rootClientId)];
      hasBlockAllowedAncestor = ancestors.some((ancestorClientId) => checkAllowList(blockAllowedAncestorBlocks, getBlockName(state, ancestorClientId)));
    }
    const canInsert = hasBlockAllowedAncestor && (hasParentAllowedBlock === null && hasBlockAllowedParent === null || hasParentAllowedBlock === true || hasBlockAllowedParent === true);
    if (!canInsert) {
      return canInsert;
    }
    return applyFilters("blockEditor.__unstableCanInsertBlockType", canInsert, blockType, rootClientId, {
      // Pass bound selectors of the current registry. If we're in a nested
      // context, the data will differ from the one selected from the root
      // registry.
      getBlock: getBlock.bind(null, state),
      getBlockParentsByBlockName: getBlockParentsByBlockName.bind(null, state)
    });
  };
  var canInsertBlockType = rememo_default(canInsertBlockTypeUnmemoized, (state, blockName, rootClientId) => getInsertBlockTypeDependants(state, rootClientId));
  function canInsertBlocks(state, clientIds, rootClientId = null) {
    return clientIds.every((id3) => canInsertBlockType(state, getBlockName(state, id3), rootClientId));
  }
  function canRemoveBlock(state, clientId, rootClientId = null) {
    const attributes = getBlockAttributes2(state, clientId);
    if (attributes === null) {
      return true;
    }
    if (attributes.lock?.remove !== void 0) {
      return !attributes.lock.remove;
    }
    if (getTemplateLock(state, rootClientId)) {
      return false;
    }
    return getBlockEditingMode(state, rootClientId) !== "disabled";
  }
  function canRemoveBlocks(state, clientIds, rootClientId = null) {
    return clientIds.every((clientId) => canRemoveBlock(state, clientId, rootClientId));
  }
  function canMoveBlock(state, clientId, rootClientId = null) {
    const attributes = getBlockAttributes2(state, clientId);
    if (attributes === null) {
      return true;
    }
    if (attributes.lock?.move !== void 0) {
      return !attributes.lock.move;
    }
    if (getTemplateLock(state, rootClientId) === "all") {
      return false;
    }
    return getBlockEditingMode(state, rootClientId) !== "disabled";
  }
  function canMoveBlocks(state, clientIds, rootClientId = null) {
    return clientIds.every((clientId) => canMoveBlock(state, clientId, rootClientId));
  }
  function canEditBlock(state, clientId) {
    const attributes = getBlockAttributes2(state, clientId);
    if (attributes === null) {
      return true;
    }
    const {
      lock: lock6
    } = attributes;
    return !lock6?.edit;
  }
  function canLockBlockType(state, nameOrType) {
    if (!hasBlockSupport(nameOrType, "lock", true)) {
      return false;
    }
    return !!state.settings?.canLockBlocks;
  }
  function getInsertUsage(state, id3) {
    var _state$preferences$in;
    return (_state$preferences$in = state.preferences.insertUsage?.[id3]) !== null && _state$preferences$in !== void 0 ? _state$preferences$in : null;
  }
  var canIncludeBlockTypeInInserter = (state, blockType, rootClientId) => {
    if (!hasBlockSupport(blockType, "inserter", true)) {
      return false;
    }
    return canInsertBlockTypeUnmemoized(state, blockType.name, rootClientId);
  };
  var getItemFromVariation = (state, item) => (variation) => {
    const variationId = `${item.id}/${variation.name}`;
    const {
      time: time2,
      count = 0
    } = getInsertUsage(state, variationId) || {};
    return {
      ...item,
      id: variationId,
      icon: variation.icon || item.icon,
      title: variation.title || item.title,
      description: variation.description || item.description,
      category: variation.category || item.category,
      // If `example` is explicitly undefined for the variation, the preview will not be shown.
      example: variation.hasOwnProperty("example") ? variation.example : item.example,
      initialAttributes: {
        ...item.initialAttributes,
        ...variation.attributes
      },
      innerBlocks: variation.innerBlocks,
      keywords: variation.keywords || item.keywords,
      frecency: calculateFrecency(time2, count)
    };
  };
  var calculateFrecency = (time2, count) => {
    if (!time2) {
      return count;
    }
    const duration = Date.now() - time2;
    switch (true) {
      case duration < MILLISECONDS_PER_HOUR:
        return count * 4;
      case duration < MILLISECONDS_PER_DAY:
        return count * 2;
      case duration < MILLISECONDS_PER_WEEK:
        return count / 2;
      default:
        return count / 4;
    }
  };
  var buildBlockTypeItem = (state, {
    buildScope = "inserter"
  }) => (blockType) => {
    const id3 = blockType.name;
    let isDisabled = false;
    if (!hasBlockSupport(blockType.name, "multiple", true)) {
      isDisabled = getBlocksByClientId(state, getClientIdsWithDescendants(state)).some(({
        name
      }) => name === blockType.name);
    }
    const {
      time: time2,
      count = 0
    } = getInsertUsage(state, id3) || {};
    const blockItemBase = {
      id: id3,
      name: blockType.name,
      title: blockType.title,
      icon: blockType.icon,
      isDisabled,
      frecency: calculateFrecency(time2, count)
    };
    if (buildScope === "transform") {
      return blockItemBase;
    }
    const inserterVariations = getBlockVariations(blockType.name, "inserter");
    return {
      ...blockItemBase,
      initialAttributes: {},
      description: blockType.description,
      category: blockType.category,
      keywords: blockType.keywords,
      variations: inserterVariations,
      example: blockType.example,
      utility: 1
      // Deprecated.
    };
  };
  var getInserterItems = createRegistrySelector((select2) => rememo_default((state, rootClientId = null, options = {}) => {
    const buildReusableBlockInserterItem = (reusableBlock) => {
      const icon = !reusableBlock.wp_pattern_sync_status ? {
        src: symbol_default,
        foreground: "var(--wp-block-synced-color)"
      } : symbol_default;
      const id3 = `core/block/${reusableBlock.id}`;
      const {
        time: time2,
        count = 0
      } = getInsertUsage(state, id3) || {};
      const frecency = calculateFrecency(time2, count);
      return {
        id: id3,
        name: "core/block",
        initialAttributes: {
          ref: reusableBlock.id
        },
        title: reusableBlock.title?.raw,
        icon,
        category: "reusable",
        keywords: ["reusable"],
        isDisabled: false,
        utility: 1,
        // Deprecated.
        frecency,
        content: reusableBlock.content?.raw,
        syncStatus: reusableBlock.wp_pattern_sync_status
      };
    };
    const syncedPatternInserterItems = canInsertBlockTypeUnmemoized(state, "core/block", rootClientId) ? unlock5(select2(STORE_NAME3)).getReusableBlocks().map(buildReusableBlockInserterItem) : [];
    const buildBlockTypeInserterItem = buildBlockTypeItem(state, {
      buildScope: "inserter"
    });
    let blockTypeInserterItems = getBlockTypes().filter((blockType) => hasBlockSupport(blockType, "inserter", true)).map(buildBlockTypeInserterItem);
    if (options[withRootClientIdOptionKey]) {
      blockTypeInserterItems = blockTypeInserterItems.reduce((accumulator, item) => {
        item.rootClientId = rootClientId !== null && rootClientId !== void 0 ? rootClientId : "";
        while (!canInsertBlockTypeUnmemoized(state, item.name, item.rootClientId)) {
          if (!item.rootClientId) {
            let sectionRootClientId;
            try {
              sectionRootClientId = unlock5(getSettings(state)).sectionRootClientId;
            } catch (e3) {
            }
            if (sectionRootClientId && canInsertBlockTypeUnmemoized(state, item.name, sectionRootClientId)) {
              item.rootClientId = sectionRootClientId;
            } else {
              delete item.rootClientId;
            }
            break;
          } else {
            const parentClientId = getBlockRootClientId(state, item.rootClientId);
            item.rootClientId = parentClientId;
          }
        }
        if (item.hasOwnProperty("rootClientId")) {
          accumulator.push(item);
        }
        return accumulator;
      }, []);
    } else {
      blockTypeInserterItems = blockTypeInserterItems.filter((blockType) => canIncludeBlockTypeInInserter(state, blockType, rootClientId));
    }
    const items = blockTypeInserterItems.reduce((accumulator, item) => {
      const {
        variations = []
      } = item;
      if (!variations.some(({
        isDefault
      }) => isDefault)) {
        accumulator.push(item);
      }
      if (variations.length) {
        const variationMapper = getItemFromVariation(state, item);
        accumulator.push(...variations.map(variationMapper));
      }
      return accumulator;
    }, []);
    const groupByType = (blocks2, block3) => {
      const {
        core,
        noncore
      } = blocks2;
      const type = block3.name.startsWith("core/") ? core : noncore;
      type.push(block3);
      return blocks2;
    };
    const {
      core: coreItems,
      noncore: nonCoreItems
    } = items.reduce(groupByType, {
      core: [],
      noncore: []
    });
    const sortedBlockTypes = [...coreItems, ...nonCoreItems];
    return [...sortedBlockTypes, ...syncedPatternInserterItems];
  }, (state, rootClientId) => [getBlockTypes(), unlock5(select2(STORE_NAME3)).getReusableBlocks(), state.blocks.order, state.preferences.insertUsage, ...getInsertBlockTypeDependants(state, rootClientId)]));
  var getBlockTransformItems = rememo_default((state, blocks2, rootClientId = null) => {
    const normalizedBlocks = Array.isArray(blocks2) ? blocks2 : [blocks2];
    const buildBlockTypeTransformItem = buildBlockTypeItem(state, {
      buildScope: "transform"
    });
    const blockTypeTransformItems = getBlockTypes().filter((blockType) => canIncludeBlockTypeInInserter(state, blockType, rootClientId)).map(buildBlockTypeTransformItem);
    const itemsByName = Object.fromEntries(Object.entries(blockTypeTransformItems).map(([, value]) => [value.name, value]));
    const possibleTransforms = getPossibleBlockTransformations(normalizedBlocks).reduce((accumulator, block3) => {
      if (itemsByName[block3?.name]) {
        accumulator.push(itemsByName[block3.name]);
      }
      return accumulator;
    }, []);
    return orderBy(possibleTransforms, (block3) => itemsByName[block3.name].frecency, "desc");
  }, (state, blocks2, rootClientId) => [getBlockTypes(), state.preferences.insertUsage, ...getInsertBlockTypeDependants(state, rootClientId)]);
  var hasInserterItems = createRegistrySelector((select2) => (state, rootClientId = null) => {
    const hasBlockType = getBlockTypes().some((blockType) => canIncludeBlockTypeInInserter(state, blockType, rootClientId));
    if (hasBlockType) {
      return true;
    }
    const hasReusableBlock = canInsertBlockTypeUnmemoized(state, "core/block", rootClientId) && unlock5(select2(STORE_NAME3)).getReusableBlocks().length > 0;
    return hasReusableBlock;
  });
  var getAllowedBlocks = createRegistrySelector((select2) => rememo_default((state, rootClientId = null) => {
    if (!rootClientId) {
      return;
    }
    const blockTypes2 = getBlockTypes().filter((blockType) => canIncludeBlockTypeInInserter(state, blockType, rootClientId));
    const hasReusableBlock = canInsertBlockTypeUnmemoized(state, "core/block", rootClientId) && unlock5(select2(STORE_NAME3)).getReusableBlocks().length > 0;
    if (hasReusableBlock) {
      blockTypes2.push("core/block");
    }
    return blockTypes2;
  }, (state, rootClientId) => [getBlockTypes(), unlock5(select2(STORE_NAME3)).getReusableBlocks(), ...getInsertBlockTypeDependants(state, rootClientId)]));
  var __experimentalGetAllowedBlocks = rememo_default((state, rootClientId = null) => {
    deprecated('wp.data.select( "core/block-editor" ).__experimentalGetAllowedBlocks', {
      alternative: 'wp.data.select( "core/block-editor" ).getAllowedBlocks',
      since: "6.2",
      version: "6.4"
    });
    return getAllowedBlocks(state, rootClientId);
  }, (state, rootClientId) => getAllowedBlocks.getDependants(state, rootClientId));
  function getDirectInsertBlock(state, rootClientId = null) {
    var _state$blockListSetti;
    if (!rootClientId) {
      return;
    }
    const {
      defaultBlock,
      directInsert
    } = (_state$blockListSetti = state.blockListSettings[rootClientId]) !== null && _state$blockListSetti !== void 0 ? _state$blockListSetti : {};
    if (!defaultBlock || !directInsert) {
      return;
    }
    return defaultBlock;
  }
  function __experimentalGetDirectInsertBlock(state, rootClientId = null) {
    deprecated('wp.data.select( "core/block-editor" ).__experimentalGetDirectInsertBlock', {
      alternative: 'wp.data.select( "core/block-editor" ).getDirectInsertBlock',
      since: "6.3",
      version: "6.4"
    });
    return getDirectInsertBlock(state, rootClientId);
  }
  var __experimentalGetParsedPattern = createRegistrySelector((select2) => rememo_default((state, patternName) => {
    const pattern = unlock5(select2(STORE_NAME3)).getPatternBySlug(patternName);
    if (!pattern) {
      return null;
    }
    const blocks2 = parse3(pattern.content, {
      __unstableSkipMigrationLogs: true
    });
    if (blocks2.length === 1) {
      blocks2[0].attributes = {
        ...blocks2[0].attributes,
        metadata: {
          ...blocks2[0].attributes.metadata || {},
          categories: pattern.categories,
          patternName: pattern.name,
          name: blocks2[0].attributes.metadata?.name || pattern.title
        }
      };
    }
    return {
      ...pattern,
      blocks: blocks2
    };
  }, (state, patternName) => [unlock5(select2(STORE_NAME3)).getPatternBySlug(patternName)]));
  var getAllowedPatternsDependants = (select2) => (state, rootClientId) => [...getAllPatternsDependants(select2)(state), ...getInsertBlockTypeDependants(state, rootClientId)];
  var __experimentalGetAllowedPatterns = createRegistrySelector((select2) => {
    return rememo_default((state, rootClientId = null) => {
      const {
        getAllPatterns: getAllPatterns2,
        __experimentalGetParsedPattern: getParsedPattern
      } = unlock5(select2(STORE_NAME3));
      const patterns = getAllPatterns2();
      const {
        allowedBlockTypes
      } = getSettings(state);
      const parsedPatterns = patterns.filter(({
        inserter = true
      }) => !!inserter).map(({
        name
      }) => getParsedPattern(name));
      const availableParsedPatterns = parsedPatterns.filter(({
        blocks: blocks2
      }) => checkAllowListRecursive(blocks2, allowedBlockTypes));
      const patternsAllowed = availableParsedPatterns.filter(({
        blocks: blocks2
      }) => blocks2.every(({
        name
      }) => canInsertBlockType(state, name, rootClientId)));
      return patternsAllowed;
    }, getAllowedPatternsDependants(select2));
  });
  var getPatternsByBlockTypes = createRegistrySelector((select2) => rememo_default((state, blockNames, rootClientId = null) => {
    if (!blockNames) {
      return EMPTY_ARRAY2;
    }
    const patterns = select2(STORE_NAME3).__experimentalGetAllowedPatterns(rootClientId);
    const normalizedBlockNames = Array.isArray(blockNames) ? blockNames : [blockNames];
    const filteredPatterns = patterns.filter((pattern) => pattern?.blockTypes?.some?.((blockName) => normalizedBlockNames.includes(blockName)));
    if (filteredPatterns.length === 0) {
      return EMPTY_ARRAY2;
    }
    return filteredPatterns;
  }, (state, blockNames, rootClientId) => getAllowedPatternsDependants(select2)(state, rootClientId)));
  var __experimentalGetPatternsByBlockTypes = createRegistrySelector((select2) => {
    deprecated('wp.data.select( "core/block-editor" ).__experimentalGetPatternsByBlockTypes', {
      alternative: 'wp.data.select( "core/block-editor" ).getPatternsByBlockTypes',
      since: "6.2",
      version: "6.4"
    });
    return select2(STORE_NAME3).getPatternsByBlockTypes;
  });
  var __experimentalGetPatternTransformItems = createRegistrySelector((select2) => rememo_default((state, blocks2, rootClientId = null) => {
    if (!blocks2) {
      return EMPTY_ARRAY2;
    }
    if (blocks2.some(({
      clientId,
      innerBlocks
    }) => innerBlocks.length || areInnerBlocksControlled(state, clientId))) {
      return EMPTY_ARRAY2;
    }
    const selectedBlockNames = Array.from(new Set(blocks2.map(({
      name
    }) => name)));
    return select2(STORE_NAME3).getPatternsByBlockTypes(selectedBlockNames, rootClientId);
  }, (state, blocks2, rootClientId) => getAllowedPatternsDependants(select2)(state, rootClientId)));
  function getBlockListSettings(state, clientId) {
    return state.blockListSettings[clientId];
  }
  function getSettings(state) {
    return state.settings;
  }
  function isLastBlockChangePersistent(state) {
    return state.blocks.isPersistentChange;
  }
  var __experimentalGetBlockListSettingsForBlocks = rememo_default((state, clientIds = []) => {
    return clientIds.reduce((blockListSettingsForBlocks, clientId) => {
      if (!state.blockListSettings[clientId]) {
        return blockListSettingsForBlocks;
      }
      return {
        ...blockListSettingsForBlocks,
        [clientId]: state.blockListSettings[clientId]
      };
    }, {});
  }, (state) => [state.blockListSettings]);
  var __experimentalGetReusableBlockTitle = createRegistrySelector((select2) => rememo_default((state, ref) => {
    deprecated("wp.data.select( 'core/block-editor' ).__experimentalGetReusableBlockTitle", {
      since: "6.6",
      version: "6.8"
    });
    const reusableBlock = unlock5(select2(STORE_NAME3)).getReusableBlocks().find((block3) => block3.id === ref);
    if (!reusableBlock) {
      return null;
    }
    return reusableBlock.title?.raw;
  }, () => [unlock5(select2(STORE_NAME3)).getReusableBlocks()]));
  function __unstableIsLastBlockChangeIgnored(state) {
    return state.blocks.isIgnoredChange;
  }
  function __experimentalGetLastBlockAttributeChanges(state) {
    return state.lastBlockAttributesChange;
  }
  function isNavigationMode(state) {
    return state.editorMode === "navigation";
  }
  function __unstableGetEditorMode(state) {
    return state.editorMode;
  }
  function hasBlockMovingClientId2(state) {
    return state.hasBlockMovingClientId;
  }
  function didAutomaticChange(state) {
    return !!state.automaticChangeStatus;
  }
  function isBlockHighlighted(state, clientId) {
    return state.highlightedBlock === clientId;
  }
  function areInnerBlocksControlled(state, clientId) {
    return !!state.blocks.controlledInnerBlocks[clientId];
  }
  var __experimentalGetActiveBlockIdByBlockNames = rememo_default((state, validBlockNames) => {
    if (!validBlockNames.length) {
      return null;
    }
    const selectedBlockClientId = getSelectedBlockClientId(state);
    if (validBlockNames.includes(getBlockName(state, selectedBlockClientId))) {
      return selectedBlockClientId;
    }
    const multiSelectedBlockClientIds = getMultiSelectedBlockClientIds(state);
    const entityAreaParents = getBlockParentsByBlockName(state, selectedBlockClientId || multiSelectedBlockClientIds[0], validBlockNames);
    if (entityAreaParents) {
      return entityAreaParents[entityAreaParents.length - 1];
    }
    return null;
  }, (state, validBlockNames) => [state.selection.selectionStart.clientId, state.selection.selectionEnd.clientId, validBlockNames]);
  function wasBlockJustInserted(state, clientId, source) {
    const {
      lastBlockInserted: lastBlockInserted2
    } = state;
    return lastBlockInserted2.clientIds?.includes(clientId) && lastBlockInserted2.source === source;
  }
  function isBlockVisible(state, clientId) {
    var _state$blockVisibilit;
    return (_state$blockVisibilit = state.blockVisibility?.[clientId]) !== null && _state$blockVisibilit !== void 0 ? _state$blockVisibilit : true;
  }
  var __unstableGetVisibleBlocks = rememo_default((state) => {
    const visibleBlocks = new Set(Object.keys(state.blockVisibility).filter((key) => state.blockVisibility[key]));
    if (visibleBlocks.size === 0) {
      return EMPTY_SET;
    }
    return visibleBlocks;
  }, (state) => [state.blockVisibility]);
  function __unstableHasActiveBlockOverlayActive(state, clientId) {
    if (getBlockEditingMode(state, clientId) !== "default") {
      return false;
    }
    if (!canEditBlock(state, clientId)) {
      return true;
    }
    const editorMode2 = __unstableGetEditorMode(state);
    if (editorMode2 === "zoom-out") {
      const {
        sectionRootClientId
      } = unlock5(getSettings(state));
      if (sectionRootClientId) {
        const sectionClientIds = getBlockOrder(state, sectionRootClientId);
        if (sectionClientIds?.includes(clientId)) {
          return true;
        }
      } else if (clientId && !getBlockRootClientId(state, clientId)) {
        return true;
      }
    }
    const blockSupportDisable = hasBlockSupport(getBlockName(state, clientId), "__experimentalDisableBlockOverlay", false);
    const shouldEnableIfUnselected = editorMode2 === "navigation" || (blockSupportDisable ? false : areInnerBlocksControlled(state, clientId));
    return shouldEnableIfUnselected && !isBlockSelected(state, clientId) && !hasSelectedInnerBlock(state, clientId, true);
  }
  function __unstableIsWithinBlockOverlay(state, clientId) {
    let parent = state.blocks.parents.get(clientId);
    while (!!parent) {
      if (__unstableHasActiveBlockOverlayActive(state, parent)) {
        return true;
      }
      parent = state.blocks.parents.get(parent);
    }
    return false;
  }
  var getBlockEditingMode = createRegistrySelector((select2) => (state, clientId = "") => {
    if (clientId === null) {
      clientId = "";
    }
    const editorMode2 = __unstableGetEditorMode(state);
    if (editorMode2 === "zoom-out") {
      const {
        sectionRootClientId
      } = unlock5(getSettings(state));
      if (clientId === "") {
        return sectionRootClientId ? "disabled" : "contentOnly";
      }
      if (clientId === sectionRootClientId) {
        return "contentOnly";
      }
      const sectionsClientIds = getBlockOrder(state, sectionRootClientId);
      if (!sectionsClientIds?.includes(clientId)) {
        return "disabled";
      }
    }
    const blockEditingMode = state.blockEditingModes.get(clientId);
    if (blockEditingMode) {
      return blockEditingMode;
    }
    if (!clientId) {
      return "default";
    }
    const rootClientId = getBlockRootClientId(state, clientId);
    const templateLock = getTemplateLock(state, rootClientId);
    if (templateLock === "contentOnly") {
      const name = getBlockName(state, clientId);
      const isContent = select2(store2).__experimentalHasContentRoleAttribute(name);
      return isContent ? "contentOnly" : "disabled";
    }
    const parentMode = getBlockEditingMode(state, rootClientId);
    return parentMode === "contentOnly" ? "default" : parentMode;
  });
  var isUngroupable = createRegistrySelector((select2) => (state, clientId = "") => {
    const _clientId = clientId || getSelectedBlockClientId(state);
    if (!_clientId) {
      return false;
    }
    const {
      getGroupingBlockName: getGroupingBlockName3
    } = select2(store2);
    const block3 = getBlock(state, _clientId);
    const groupingBlockName2 = getGroupingBlockName3();
    const _isUngroupable = block3 && (block3.name === groupingBlockName2 || getBlockType(block3.name)?.transforms?.ungroup) && !!block3.innerBlocks.length;
    return _isUngroupable && canRemoveBlock(state, _clientId);
  });
  var isGroupable = createRegistrySelector((select2) => (state, clientIds = EMPTY_ARRAY2) => {
    const {
      getGroupingBlockName: getGroupingBlockName3
    } = select2(store2);
    const groupingBlockName2 = getGroupingBlockName3();
    const _clientIds = clientIds?.length ? clientIds : getSelectedBlockClientIds(state);
    const rootClientId = _clientIds?.length ? getBlockRootClientId(state, _clientIds[0]) : void 0;
    const groupingBlockAvailable = canInsertBlockType(state, groupingBlockName2, rootClientId);
    const _isGroupable = groupingBlockAvailable && _clientIds.length;
    return _isGroupable && canRemoveBlocks(state, _clientIds, rootClientId);
  });
  var __unstableGetContentLockingParent = (state, clientId) => {
    deprecated("wp.data.select( 'core/block-editor' ).__unstableGetContentLockingParent", {
      since: "6.1",
      version: "6.7"
    });
    return getContentLockingParent(state, clientId);
  };
  function __unstableGetTemporarilyEditingAsBlocks(state) {
    deprecated("wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingAsBlocks", {
      since: "6.1",
      version: "6.7"
    });
    return getTemporarilyEditingAsBlocks(state);
  }
  function __unstableGetTemporarilyEditingFocusModeToRevert(state) {
    deprecated("wp.data.select( 'core/block-editor' ).__unstableGetTemporarilyEditingFocusModeToRevert", {
      since: "6.5",
      version: "6.7"
    });
    return getTemporarilyEditingFocusModeToRevert(state);
  }

  // node_modules/@wordpress/block-editor/build-module/store/private-actions.js
  var private_actions_exports2 = {};
  __export(private_actions_exports2, {
    __experimentalUpdateSettings: () => __experimentalUpdateSettings,
    clearBlockRemovalPrompt: () => clearBlockRemovalPrompt,
    deleteStyleOverride: () => deleteStyleOverride,
    ensureDefaultBlock: () => ensureDefaultBlock,
    expandBlock: () => expandBlock,
    hideBlockInterface: () => hideBlockInterface,
    modifyContentLockBlock: () => modifyContentLockBlock,
    privateRemoveBlocks: () => privateRemoveBlocks,
    setBlockRemovalRules: () => setBlockRemovalRules,
    setLastFocus: () => setLastFocus,
    setOpenedBlockSettingsMenu: () => setOpenedBlockSettingsMenu,
    setStyleOverride: () => setStyleOverride,
    showBlockInterface: () => showBlockInterface,
    startDragging: () => startDragging,
    stopDragging: () => stopDragging,
    stopEditingAsBlocks: () => stopEditingAsBlocks,
    syncDerivedUpdates: () => syncDerivedUpdates
  });

  // node_modules/@wordpress/block-editor/build-module/store/undo-ignore.js
  var undoIgnoreBlocks = /* @__PURE__ */ new WeakSet();

  // node_modules/@wordpress/block-editor/build-module/store/private-actions.js
  var castArray2 = (maybeArray) => Array.isArray(maybeArray) ? maybeArray : [maybeArray];
  var privateSettings = ["inserterMediaCategories", "blockInspectorAnimation"];
  function __experimentalUpdateSettings(settings2, {
    stripExperimentalSettings = false,
    reset = false
  } = {}) {
    let cleanSettings = settings2;
    if (stripExperimentalSettings && platform_default.OS === "web") {
      cleanSettings = {};
      for (const key in settings2) {
        if (!privateSettings.includes(key)) {
          cleanSettings[key] = settings2[key];
        }
      }
    }
    return {
      type: "UPDATE_SETTINGS",
      settings: cleanSettings,
      reset
    };
  }
  function hideBlockInterface() {
    return {
      type: "HIDE_BLOCK_INTERFACE"
    };
  }
  function showBlockInterface() {
    return {
      type: "SHOW_BLOCK_INTERFACE"
    };
  }
  var privateRemoveBlocks = (clientIds, selectPrevious = true, forceRemove = false) => ({
    select: select2,
    dispatch: dispatch2,
    registry
  }) => {
    if (!clientIds || !clientIds.length) {
      return;
    }
    clientIds = castArray2(clientIds);
    const rootClientId = select2.getBlockRootClientId(clientIds[0]);
    const canRemoveBlocks2 = select2.canRemoveBlocks(clientIds, rootClientId);
    if (!canRemoveBlocks2) {
      return;
    }
    const rules = !forceRemove && select2.getBlockRemovalRules();
    if (rules) {
      let flattenBlocks2 = function(blocks2) {
        const result = [];
        const stack2 = [...blocks2];
        while (stack2.length) {
          const {
            innerBlocks,
            ...block3
          } = stack2.shift();
          stack2.push(...innerBlocks);
          result.push(block3);
        }
        return result;
      };
      const blockList = clientIds.map(select2.getBlock);
      const flattenedBlocks = flattenBlocks2(blockList);
      let message;
      for (const rule of rules) {
        message = rule.callback(flattenedBlocks);
        if (message) {
          dispatch2(displayBlockRemovalPrompt(clientIds, selectPrevious, message));
          return;
        }
      }
    }
    if (selectPrevious) {
      dispatch2.selectPreviousBlock(clientIds[0], selectPrevious);
    }
    registry.batch(() => {
      dispatch2({
        type: "REMOVE_BLOCKS",
        clientIds
      });
      dispatch2(ensureDefaultBlock());
    });
  };
  var ensureDefaultBlock = () => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const count = select2.getBlockCount();
    if (count > 0) {
      return;
    }
    const {
      __unstableHasCustomAppender
    } = select2.getSettings();
    if (__unstableHasCustomAppender) {
      return;
    }
    dispatch2.insertDefaultBlock();
  };
  function displayBlockRemovalPrompt(clientIds, selectPrevious, message) {
    return {
      type: "DISPLAY_BLOCK_REMOVAL_PROMPT",
      clientIds,
      selectPrevious,
      message
    };
  }
  function clearBlockRemovalPrompt() {
    return {
      type: "CLEAR_BLOCK_REMOVAL_PROMPT"
    };
  }
  function setBlockRemovalRules(rules = false) {
    return {
      type: "SET_BLOCK_REMOVAL_RULES",
      rules
    };
  }
  function setOpenedBlockSettingsMenu(clientId) {
    return {
      type: "SET_OPENED_BLOCK_SETTINGS_MENU",
      clientId
    };
  }
  function setStyleOverride(id3, style) {
    return {
      type: "SET_STYLE_OVERRIDE",
      id: id3,
      style
    };
  }
  function deleteStyleOverride(id3) {
    return {
      type: "DELETE_STYLE_OVERRIDE",
      id: id3
    };
  }
  function syncDerivedUpdates(callback) {
    return ({
      dispatch: dispatch2,
      select: select2,
      registry
    }) => {
      registry.batch(() => {
        dispatch2({
          type: "SET_EXPLICIT_PERSISTENT",
          isPersistentChange: false
        });
        callback();
        dispatch2({
          type: "SET_EXPLICIT_PERSISTENT",
          isPersistentChange: void 0
        });
        const updatedBlocks = select2.getBlocks();
        undoIgnoreBlocks.add(updatedBlocks);
      });
    };
  }
  function setLastFocus(lastFocus2 = null) {
    return {
      type: "LAST_FOCUS",
      lastFocus: lastFocus2
    };
  }
  function stopEditingAsBlocks(clientId) {
    return ({
      select: select2,
      dispatch: dispatch2,
      registry
    }) => {
      const focusModeToRevert = unlock5(registry.select(store3)).getTemporarilyEditingFocusModeToRevert();
      dispatch2.__unstableMarkNextChangeAsNotPersistent();
      dispatch2.updateBlockAttributes(clientId, {
        templateLock: "contentOnly"
      });
      dispatch2.updateBlockListSettings(clientId, {
        ...select2.getBlockListSettings(clientId),
        templateLock: "contentOnly"
      });
      dispatch2.updateSettings({
        focusMode: focusModeToRevert
      });
      dispatch2.__unstableSetTemporarilyEditingAsBlocks();
    };
  }
  function startDragging() {
    return {
      type: "START_DRAGGING"
    };
  }
  function stopDragging() {
    return {
      type: "STOP_DRAGGING"
    };
  }
  function expandBlock(clientId) {
    return {
      type: "SET_BLOCK_EXPANDED_IN_LIST_VIEW",
      clientId
    };
  }
  var modifyContentLockBlock = (clientId) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    dispatch2.__unstableMarkNextChangeAsNotPersistent();
    dispatch2.updateBlockAttributes(clientId, {
      templateLock: void 0
    });
    dispatch2.updateBlockListSettings(clientId, {
      ...select2.getBlockListSettings(clientId),
      templateLock: false
    });
    const focusModeToRevert = select2.getSettings().focusMode;
    dispatch2.updateSettings({
      focusMode: true
    });
    dispatch2.__unstableSetTemporarilyEditingAsBlocks(clientId, focusModeToRevert);
  };

  // node_modules/@wordpress/block-editor/build-module/store/actions.js
  var actions_exports5 = {};
  __export(actions_exports5, {
    __unstableDeleteSelection: () => __unstableDeleteSelection,
    __unstableExpandSelection: () => __unstableExpandSelection,
    __unstableMarkAutomaticChange: () => __unstableMarkAutomaticChange,
    __unstableMarkLastChangeAsPersistent: () => __unstableMarkLastChangeAsPersistent,
    __unstableMarkNextChangeAsNotPersistent: () => __unstableMarkNextChangeAsNotPersistent,
    __unstableSaveReusableBlock: () => __unstableSaveReusableBlock,
    __unstableSetEditorMode: () => __unstableSetEditorMode,
    __unstableSetTemporarilyEditingAsBlocks: () => __unstableSetTemporarilyEditingAsBlocks,
    __unstableSplitSelection: () => __unstableSplitSelection,
    clearSelectedBlock: () => clearSelectedBlock,
    duplicateBlocks: () => duplicateBlocks,
    enterFormattedText: () => enterFormattedText,
    exitFormattedText: () => exitFormattedText,
    flashBlock: () => flashBlock,
    hideInsertionPoint: () => hideInsertionPoint,
    insertAfterBlock: () => insertAfterBlock,
    insertBeforeBlock: () => insertBeforeBlock,
    insertBlock: () => insertBlock,
    insertBlocks: () => insertBlocks,
    insertDefaultBlock: () => insertDefaultBlock,
    mergeBlocks: () => mergeBlocks,
    moveBlockToPosition: () => moveBlockToPosition,
    moveBlocksDown: () => moveBlocksDown,
    moveBlocksToPosition: () => moveBlocksToPosition,
    moveBlocksUp: () => moveBlocksUp,
    multiSelect: () => multiSelect,
    receiveBlocks: () => receiveBlocks,
    registerInserterMediaCategory: () => registerInserterMediaCategory,
    removeBlock: () => removeBlock,
    removeBlocks: () => removeBlocks,
    replaceBlock: () => replaceBlock,
    replaceBlocks: () => replaceBlocks,
    replaceInnerBlocks: () => replaceInnerBlocks,
    resetBlocks: () => resetBlocks,
    resetSelection: () => resetSelection,
    selectBlock: () => selectBlock,
    selectNextBlock: () => selectNextBlock,
    selectPreviousBlock: () => selectPreviousBlock,
    selectionChange: () => selectionChange,
    setBlockEditingMode: () => setBlockEditingMode,
    setBlockMovingClientId: () => setBlockMovingClientId,
    setBlockVisibility: () => setBlockVisibility,
    setHasControlledInnerBlocks: () => setHasControlledInnerBlocks,
    setNavigationMode: () => setNavigationMode,
    setTemplateValidity: () => setTemplateValidity,
    showInsertionPoint: () => showInsertionPoint,
    startDraggingBlocks: () => startDraggingBlocks,
    startMultiSelect: () => startMultiSelect,
    startTyping: () => startTyping,
    stopDraggingBlocks: () => stopDraggingBlocks,
    stopMultiSelect: () => stopMultiSelect,
    stopTyping: () => stopTyping,
    synchronizeTemplate: () => synchronizeTemplate,
    toggleBlockHighlight: () => toggleBlockHighlight,
    toggleBlockMode: () => toggleBlockMode,
    toggleSelection: () => toggleSelection,
    unsetBlockEditingMode: () => unsetBlockEditingMode,
    updateBlock: () => updateBlock,
    updateBlockAttributes: () => updateBlockAttributes,
    updateBlockListSettings: () => updateBlockListSettings,
    updateSettings: () => updateSettings,
    validateBlocksToTemplate: () => validateBlocksToTemplate
  });

  // node_modules/@wordpress/notices/build-module/store/utils/on-sub-key.js
  var onSubKey2 = (actionProperty) => (reducer2) => (state = {}, action) => {
    const key = action[actionProperty];
    if (key === void 0) {
      return state;
    }
    const nextKeyState = reducer2(state[key], action);
    if (nextKeyState === state[key]) {
      return state;
    }
    return {
      ...state,
      [key]: nextKeyState
    };
  };
  var on_sub_key_default = onSubKey2;

  // node_modules/@wordpress/notices/build-module/store/reducer.js
  var notices = on_sub_key_default("context")((state = [], action) => {
    switch (action.type) {
      case "CREATE_NOTICE":
        return [...state.filter(({
          id: id3
        }) => id3 !== action.notice.id), action.notice];
      case "REMOVE_NOTICE":
        return state.filter(({
          id: id3
        }) => id3 !== action.id);
      case "REMOVE_NOTICES":
        return state.filter(({
          id: id3
        }) => !action.ids.includes(id3));
      case "REMOVE_ALL_NOTICES":
        return state.filter(({
          type
        }) => type !== action.noticeType);
    }
    return state;
  });
  var reducer_default5 = notices;

  // node_modules/@wordpress/notices/build-module/store/actions.js
  var actions_exports4 = {};
  __export(actions_exports4, {
    createErrorNotice: () => createErrorNotice,
    createInfoNotice: () => createInfoNotice,
    createNotice: () => createNotice,
    createSuccessNotice: () => createSuccessNotice,
    createWarningNotice: () => createWarningNotice,
    removeAllNotices: () => removeAllNotices,
    removeNotice: () => removeNotice,
    removeNotices: () => removeNotices
  });

  // node_modules/@wordpress/notices/build-module/store/constants.js
  var DEFAULT_CONTEXT = "global";
  var DEFAULT_STATUS = "info";

  // node_modules/@wordpress/notices/build-module/store/actions.js
  var uniqueId = 0;
  function createNotice(status = DEFAULT_STATUS, content, options = {}) {
    const {
      speak: speak2 = true,
      isDismissible = true,
      context: context2 = DEFAULT_CONTEXT,
      id: id3 = `${context2}${++uniqueId}`,
      actions: actions2 = [],
      type = "default",
      __unstableHTML,
      icon = null,
      explicitDismiss = false,
      onDismiss
    } = options;
    content = String(content);
    return {
      type: "CREATE_NOTICE",
      context: context2,
      notice: {
        id: id3,
        status,
        content,
        spokenMessage: speak2 ? content : null,
        __unstableHTML,
        isDismissible,
        actions: actions2,
        type,
        icon,
        explicitDismiss,
        onDismiss
      }
    };
  }
  function createSuccessNotice(content, options) {
    return createNotice("success", content, options);
  }
  function createInfoNotice(content, options) {
    return createNotice("info", content, options);
  }
  function createErrorNotice(content, options) {
    return createNotice("error", content, options);
  }
  function createWarningNotice(content, options) {
    return createNotice("warning", content, options);
  }
  function removeNotice(id3, context2 = DEFAULT_CONTEXT) {
    return {
      type: "REMOVE_NOTICE",
      id: id3,
      context: context2
    };
  }
  function removeAllNotices(noticeType = "default", context2 = DEFAULT_CONTEXT) {
    return {
      type: "REMOVE_ALL_NOTICES",
      noticeType,
      context: context2
    };
  }
  function removeNotices(ids, context2 = DEFAULT_CONTEXT) {
    return {
      type: "REMOVE_NOTICES",
      ids,
      context: context2
    };
  }

  // node_modules/@wordpress/notices/build-module/store/selectors.js
  var selectors_exports5 = {};
  __export(selectors_exports5, {
    getNotices: () => getNotices
  });
  var DEFAULT_NOTICES = [];
  function getNotices(state, context2 = DEFAULT_CONTEXT) {
    return state[context2] || DEFAULT_NOTICES;
  }

  // node_modules/@wordpress/notices/build-module/store/index.js
  var store4 = createReduxStore("core/notices", {
    reducer: reducer_default5,
    actions: actions_exports4,
    selectors: selectors_exports5
  });
  register(store4);

  // node_modules/@wordpress/block-editor/build-module/utils/selection.js
  var START_OF_SELECTED_AREA = "\x86";
  function retrieveSelectedAttribute(blockAttributes) {
    if (!blockAttributes) {
      return;
    }
    return Object.keys(blockAttributes).find((name) => {
      const value = blockAttributes[name];
      return (typeof value === "string" || value instanceof RichTextData) && // To do: refactor this to use rich text's selection instead, so we
      // no longer have to use on this hack inserting a special character.
      value.toString().indexOf(START_OF_SELECTED_AREA) !== -1;
    });
  }
  function findRichTextAttributeKey(blockType) {
    for (const [key, value] of Object.entries(blockType.attributes)) {
      if (value.source === "rich-text" || value.source === "html") {
        return key;
      }
    }
  }

  // node_modules/@wordpress/block-editor/build-module/store/actions.js
  var castArray3 = (maybeArray) => Array.isArray(maybeArray) ? maybeArray : [maybeArray];
  var resetBlocks = (blocks2) => ({
    dispatch: dispatch2
  }) => {
    dispatch2({
      type: "RESET_BLOCKS",
      blocks: blocks2
    });
    dispatch2(validateBlocksToTemplate(blocks2));
  };
  var validateBlocksToTemplate = (blocks2) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const template2 = select2.getTemplate();
    const templateLock = select2.getTemplateLock();
    const isBlocksValidToTemplate = !template2 || templateLock !== "all" || doBlocksMatchTemplate(blocks2, template2);
    const isValidTemplate2 = select2.isValidTemplate();
    if (isBlocksValidToTemplate !== isValidTemplate2) {
      dispatch2.setTemplateValidity(isBlocksValidToTemplate);
      return isBlocksValidToTemplate;
    }
  };
  function resetSelection(selectionStart, selectionEnd, initialPosition2) {
    return {
      type: "RESET_SELECTION",
      selectionStart,
      selectionEnd,
      initialPosition: initialPosition2
    };
  }
  function receiveBlocks(blocks2) {
    deprecated('wp.data.dispatch( "core/block-editor" ).receiveBlocks', {
      since: "5.9",
      alternative: "resetBlocks or insertBlocks"
    });
    return {
      type: "RECEIVE_BLOCKS",
      blocks: blocks2
    };
  }
  function updateBlockAttributes(clientIds, attributes, uniqueByBlock = false) {
    return {
      type: "UPDATE_BLOCK_ATTRIBUTES",
      clientIds: castArray3(clientIds),
      attributes,
      uniqueByBlock
    };
  }
  function updateBlock(clientId, updates) {
    return {
      type: "UPDATE_BLOCK",
      clientId,
      updates
    };
  }
  function selectBlock(clientId, initialPosition2 = 0) {
    return {
      type: "SELECT_BLOCK",
      initialPosition: initialPosition2,
      clientId
    };
  }
  var selectPreviousBlock = (clientId, fallbackToParent = false) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const previousBlockClientId = select2.getPreviousBlockClientId(clientId);
    if (previousBlockClientId) {
      dispatch2.selectBlock(previousBlockClientId, -1);
    } else if (fallbackToParent) {
      const firstParentClientId = select2.getBlockRootClientId(clientId);
      if (firstParentClientId) {
        dispatch2.selectBlock(firstParentClientId, -1);
      }
    }
  };
  var selectNextBlock = (clientId) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const nextBlockClientId = select2.getNextBlockClientId(clientId);
    if (nextBlockClientId) {
      dispatch2.selectBlock(nextBlockClientId);
    }
  };
  function startMultiSelect() {
    return {
      type: "START_MULTI_SELECT"
    };
  }
  function stopMultiSelect() {
    return {
      type: "STOP_MULTI_SELECT"
    };
  }
  var multiSelect = (start2, end, __experimentalInitialPosition = 0) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const startBlockRootClientId = select2.getBlockRootClientId(start2);
    const endBlockRootClientId = select2.getBlockRootClientId(end);
    if (startBlockRootClientId !== endBlockRootClientId) {
      return;
    }
    dispatch2({
      type: "MULTI_SELECT",
      start: start2,
      end,
      initialPosition: __experimentalInitialPosition
    });
    const blockCount = select2.getSelectedBlockCount();
    speak(sprintf(
      /* translators: %s: number of selected blocks */
      _n("%s block selected.", "%s blocks selected.", blockCount),
      blockCount
    ), "assertive");
  };
  function clearSelectedBlock() {
    return {
      type: "CLEAR_SELECTED_BLOCK"
    };
  }
  function toggleSelection(isSelectionEnabled3 = true) {
    return {
      type: "TOGGLE_SELECTION",
      isSelectionEnabled: isSelectionEnabled3
    };
  }
  var replaceBlocks = (clientIds, blocks2, indexToSelect, initialPosition2 = 0, meta) => ({
    select: select2,
    dispatch: dispatch2,
    registry
  }) => {
    clientIds = castArray3(clientIds);
    blocks2 = castArray3(blocks2);
    const rootClientId = select2.getBlockRootClientId(clientIds[0]);
    for (let index2 = 0; index2 < blocks2.length; index2++) {
      const block3 = blocks2[index2];
      const canInsertBlock = select2.canInsertBlockType(block3.name, rootClientId);
      if (!canInsertBlock) {
        return;
      }
    }
    registry.batch(() => {
      dispatch2({
        type: "REPLACE_BLOCKS",
        clientIds,
        blocks: blocks2,
        time: Date.now(),
        indexToSelect,
        initialPosition: initialPosition2,
        meta
      });
      dispatch2.ensureDefaultBlock();
    });
  };
  function replaceBlock(clientId, block3) {
    return replaceBlocks(clientId, block3);
  }
  var createOnMove = (type) => (clientIds, rootClientId) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const canMoveBlocks2 = select2.canMoveBlocks(clientIds, rootClientId);
    if (!canMoveBlocks2) {
      return;
    }
    dispatch2({
      type,
      clientIds: castArray3(clientIds),
      rootClientId
    });
  };
  var moveBlocksDown = createOnMove("MOVE_BLOCKS_DOWN");
  var moveBlocksUp = createOnMove("MOVE_BLOCKS_UP");
  var moveBlocksToPosition = (clientIds, fromRootClientId = "", toRootClientId = "", index2) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const canMoveBlocks2 = select2.canMoveBlocks(clientIds, fromRootClientId);
    if (!canMoveBlocks2) {
      return;
    }
    if (fromRootClientId !== toRootClientId) {
      const canRemoveBlocks2 = select2.canRemoveBlocks(clientIds, fromRootClientId);
      if (!canRemoveBlocks2) {
        return;
      }
      const canInsertBlocks2 = select2.canInsertBlocks(clientIds, toRootClientId);
      if (!canInsertBlocks2) {
        return;
      }
    }
    dispatch2({
      type: "MOVE_BLOCKS_TO_POSITION",
      fromRootClientId,
      toRootClientId,
      clientIds,
      index: index2
    });
  };
  function moveBlockToPosition(clientId, fromRootClientId = "", toRootClientId = "", index2) {
    return moveBlocksToPosition([clientId], fromRootClientId, toRootClientId, index2);
  }
  function insertBlock(block3, index2, rootClientId, updateSelection, meta) {
    return insertBlocks([block3], index2, rootClientId, updateSelection, 0, meta);
  }
  var insertBlocks = (blocks2, index2, rootClientId, updateSelection = true, initialPosition2 = 0, meta) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (initialPosition2 !== null && typeof initialPosition2 === "object") {
      meta = initialPosition2;
      initialPosition2 = 0;
      deprecated("meta argument in wp.data.dispatch('core/block-editor')", {
        since: "5.8",
        hint: "The meta argument is now the 6th argument of the function"
      });
    }
    blocks2 = castArray3(blocks2);
    const allowedBlocks = [];
    for (const block3 of blocks2) {
      const isValid = select2.canInsertBlockType(block3.name, rootClientId);
      if (isValid) {
        allowedBlocks.push(block3);
      }
    }
    if (allowedBlocks.length) {
      dispatch2({
        type: "INSERT_BLOCKS",
        blocks: allowedBlocks,
        index: index2,
        rootClientId,
        time: Date.now(),
        updateSelection,
        initialPosition: updateSelection ? initialPosition2 : null,
        meta
      });
    }
  };
  function showInsertionPoint(rootClientId, index2, __unstableOptions = {}) {
    const {
      __unstableWithInserter,
      operation,
      nearestSide
    } = __unstableOptions;
    return {
      type: "SHOW_INSERTION_POINT",
      rootClientId,
      index: index2,
      __unstableWithInserter,
      operation,
      nearestSide
    };
  }
  var hideInsertionPoint = () => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (!select2.isBlockInsertionPointVisible()) {
      return;
    }
    dispatch2({
      type: "HIDE_INSERTION_POINT"
    });
  };
  function setTemplateValidity(isValid) {
    return {
      type: "SET_TEMPLATE_VALIDITY",
      isValid
    };
  }
  var synchronizeTemplate = () => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    dispatch2({
      type: "SYNCHRONIZE_TEMPLATE"
    });
    const blocks2 = select2.getBlocks();
    const template2 = select2.getTemplate();
    const updatedBlockList = synchronizeBlocksWithTemplate(blocks2, template2);
    dispatch2.resetBlocks(updatedBlockList);
  };
  var __unstableDeleteSelection = (isForward) => ({
    registry,
    select: select2,
    dispatch: dispatch2
  }) => {
    const selectionAnchor = select2.getSelectionStart();
    const selectionFocus = select2.getSelectionEnd();
    if (selectionAnchor.clientId === selectionFocus.clientId) {
      return;
    }
    if (!selectionAnchor.attributeKey || !selectionFocus.attributeKey || typeof selectionAnchor.offset === "undefined" || typeof selectionFocus.offset === "undefined") {
      return false;
    }
    const anchorRootClientId = select2.getBlockRootClientId(selectionAnchor.clientId);
    const focusRootClientId = select2.getBlockRootClientId(selectionFocus.clientId);
    if (anchorRootClientId !== focusRootClientId) {
      return;
    }
    const blockOrder = select2.getBlockOrder(anchorRootClientId);
    const anchorIndex = blockOrder.indexOf(selectionAnchor.clientId);
    const focusIndex = blockOrder.indexOf(selectionFocus.clientId);
    let selectionStart, selectionEnd;
    if (anchorIndex > focusIndex) {
      selectionStart = selectionFocus;
      selectionEnd = selectionAnchor;
    } else {
      selectionStart = selectionAnchor;
      selectionEnd = selectionFocus;
    }
    const targetSelection = isForward ? selectionEnd : selectionStart;
    const targetBlock = select2.getBlock(targetSelection.clientId);
    const targetBlockType = getBlockType(targetBlock.name);
    if (!targetBlockType.merge) {
      return;
    }
    const selectionA = selectionStart;
    const selectionB = selectionEnd;
    const blockA = select2.getBlock(selectionA.clientId);
    const blockB = select2.getBlock(selectionB.clientId);
    const htmlA = blockA.attributes[selectionA.attributeKey];
    const htmlB = blockB.attributes[selectionB.attributeKey];
    let valueA = create2({
      html: htmlA
    });
    let valueB = create2({
      html: htmlB
    });
    valueA = remove3(valueA, selectionA.offset, valueA.text.length);
    valueB = insert(valueB, START_OF_SELECTED_AREA, 0, selectionB.offset);
    const cloneA = cloneBlock(blockA, {
      [selectionA.attributeKey]: toHTMLString({
        value: valueA
      })
    });
    const cloneB = cloneBlock(blockB, {
      [selectionB.attributeKey]: toHTMLString({
        value: valueB
      })
    });
    const followingBlock = isForward ? cloneA : cloneB;
    const blocksWithTheSameType = blockA.name === blockB.name ? [followingBlock] : switchToBlockType(followingBlock, targetBlockType.name);
    if (!blocksWithTheSameType || !blocksWithTheSameType.length) {
      return;
    }
    let updatedAttributes;
    if (isForward) {
      const blockToMerge = blocksWithTheSameType.pop();
      updatedAttributes = targetBlockType.merge(blockToMerge.attributes, cloneB.attributes);
    } else {
      const blockToMerge = blocksWithTheSameType.shift();
      updatedAttributes = targetBlockType.merge(cloneA.attributes, blockToMerge.attributes);
    }
    const newAttributeKey = retrieveSelectedAttribute(updatedAttributes);
    const convertedHtml = updatedAttributes[newAttributeKey];
    const convertedValue = create2({
      html: convertedHtml
    });
    const newOffset = convertedValue.text.indexOf(START_OF_SELECTED_AREA);
    const newValue = remove3(convertedValue, newOffset, newOffset + 1);
    const newHtml = toHTMLString({
      value: newValue
    });
    updatedAttributes[newAttributeKey] = newHtml;
    const selectedBlockClientIds = select2.getSelectedBlockClientIds();
    const replacement = [...isForward ? blocksWithTheSameType : [], {
      // Preserve the original client ID.
      ...targetBlock,
      attributes: {
        ...targetBlock.attributes,
        ...updatedAttributes
      }
    }, ...isForward ? [] : blocksWithTheSameType];
    registry.batch(() => {
      dispatch2.selectionChange(targetBlock.clientId, newAttributeKey, newOffset, newOffset);
      dispatch2.replaceBlocks(
        selectedBlockClientIds,
        replacement,
        0,
        // If we don't pass the `indexToSelect` it will default to the last block.
        select2.getSelectedBlocksInitialCaretPosition()
      );
    });
  };
  var __unstableSplitSelection = (blocks2 = []) => ({
    registry,
    select: select2,
    dispatch: dispatch2
  }) => {
    const selectionAnchor = select2.getSelectionStart();
    const selectionFocus = select2.getSelectionEnd();
    const anchorRootClientId = select2.getBlockRootClientId(selectionAnchor.clientId);
    const focusRootClientId = select2.getBlockRootClientId(selectionFocus.clientId);
    if (anchorRootClientId !== focusRootClientId) {
      return;
    }
    const blockOrder = select2.getBlockOrder(anchorRootClientId);
    const anchorIndex = blockOrder.indexOf(selectionAnchor.clientId);
    const focusIndex = blockOrder.indexOf(selectionFocus.clientId);
    let selectionStart, selectionEnd;
    if (anchorIndex > focusIndex) {
      selectionStart = selectionFocus;
      selectionEnd = selectionAnchor;
    } else {
      selectionStart = selectionAnchor;
      selectionEnd = selectionFocus;
    }
    const selectionA = selectionStart;
    const selectionB = selectionEnd;
    const blockA = select2.getBlock(selectionA.clientId);
    const blockB = select2.getBlock(selectionB.clientId);
    const blockAType = getBlockType(blockA.name);
    const blockBType = getBlockType(blockB.name);
    const attributeKeyA = typeof selectionA.attributeKey === "string" ? selectionA.attributeKey : findRichTextAttributeKey(blockAType);
    const attributeKeyB = typeof selectionB.attributeKey === "string" ? selectionB.attributeKey : findRichTextAttributeKey(blockBType);
    const blockAttributes = select2.getBlockAttributes(selectionA.clientId);
    const bindings = blockAttributes?.metadata?.bindings;
    if (bindings?.[attributeKeyA]) {
      if (blocks2.length) {
        const {
          createWarningNotice: createWarningNotice2
        } = registry.dispatch(store4);
        createWarningNotice2(__("Blocks can't be inserted into other blocks with bindings"), {
          type: "snackbar"
        });
        return;
      }
      dispatch2.insertAfterBlock(selectionA.clientId);
      return;
    }
    if (!attributeKeyA || !attributeKeyB || typeof selectionAnchor.offset === "undefined" || typeof selectionFocus.offset === "undefined") {
      return;
    }
    if (selectionA.clientId === selectionB.clientId && attributeKeyA === attributeKeyB && selectionA.offset === selectionB.offset) {
      if (blocks2.length) {
        if (isUnmodifiedDefaultBlock(blockA)) {
          dispatch2.replaceBlocks([selectionA.clientId], blocks2, blocks2.length - 1, -1);
          return;
        }
      } else if (!select2.getBlockOrder(selectionA.clientId).length) {
        let createEmpty2 = function() {
          const defaultBlockName2 = getDefaultBlockName();
          return select2.canInsertBlockType(defaultBlockName2, anchorRootClientId) ? createBlock(defaultBlockName2) : createBlock(select2.getBlockName(selectionA.clientId));
        };
        const length2 = blockAttributes[attributeKeyA].length;
        if (selectionA.offset === 0 && length2) {
          dispatch2.insertBlocks([createEmpty2()], select2.getBlockIndex(selectionA.clientId), anchorRootClientId, false);
          return;
        }
        if (selectionA.offset === length2) {
          dispatch2.insertBlocks([createEmpty2()], select2.getBlockIndex(selectionA.clientId) + 1, anchorRootClientId);
          return;
        }
      }
    }
    const htmlA = blockA.attributes[attributeKeyA];
    const htmlB = blockB.attributes[attributeKeyB];
    let valueA = create2({
      html: htmlA
    });
    let valueB = create2({
      html: htmlB
    });
    valueA = remove3(valueA, selectionA.offset, valueA.text.length);
    valueB = remove3(valueB, 0, selectionB.offset);
    let head = {
      // Preserve the original client ID.
      ...blockA,
      // If both start and end are the same, should only copy innerBlocks
      // once.
      innerBlocks: blockA.clientId === blockB.clientId ? [] : blockA.innerBlocks,
      attributes: {
        ...blockA.attributes,
        [attributeKeyA]: toHTMLString({
          value: valueA
        })
      }
    };
    const tail = {
      ...blockB,
      // Only preserve the original client ID if the end is different.
      clientId: blockA.clientId === blockB.clientId ? createBlock(blockB.name).clientId : blockB.clientId,
      attributes: {
        ...blockB.attributes,
        [attributeKeyB]: toHTMLString({
          value: valueB
        })
      }
    };
    if (!blocks2.length) {
      dispatch2.replaceBlocks(select2.getSelectedBlockClientIds(), [head, tail]);
      return;
    }
    let selection2;
    const output2 = [];
    const clonedBlocks = [...blocks2];
    const firstBlock = clonedBlocks.shift();
    const headType = getBlockType(head.name);
    const firstBlocks = headType.merge && firstBlock.name === headType.name ? [firstBlock] : switchToBlockType(firstBlock, headType.name);
    if (firstBlocks?.length) {
      const first = firstBlocks.shift();
      head = {
        ...head,
        attributes: {
          ...head.attributes,
          ...headType.merge(head.attributes, first.attributes)
        }
      };
      output2.push(head);
      selection2 = {
        clientId: head.clientId,
        attributeKey: attributeKeyA,
        offset: create2({
          html: head.attributes[attributeKeyA]
        }).text.length
      };
      clonedBlocks.unshift(...firstBlocks);
    } else {
      if (!isUnmodifiedBlock(head)) {
        output2.push(head);
      }
      output2.push(firstBlock);
    }
    const lastBlock = clonedBlocks.pop();
    const tailType = getBlockType(tail.name);
    if (clonedBlocks.length) {
      output2.push(...clonedBlocks);
    }
    if (lastBlock) {
      const lastBlocks = tailType.merge && tailType.name === lastBlock.name ? [lastBlock] : switchToBlockType(lastBlock, tailType.name);
      if (lastBlocks?.length) {
        const last = lastBlocks.pop();
        output2.push({
          ...tail,
          attributes: {
            ...tail.attributes,
            ...tailType.merge(last.attributes, tail.attributes)
          }
        });
        output2.push(...lastBlocks);
        selection2 = {
          clientId: tail.clientId,
          attributeKey: attributeKeyB,
          offset: create2({
            html: last.attributes[attributeKeyB]
          }).text.length
        };
      } else {
        output2.push(lastBlock);
        if (!isUnmodifiedBlock(tail)) {
          output2.push(tail);
        }
      }
    } else if (!isUnmodifiedBlock(tail)) {
      output2.push(tail);
    }
    registry.batch(() => {
      dispatch2.replaceBlocks(select2.getSelectedBlockClientIds(), output2, output2.length - 1, 0);
      if (selection2) {
        dispatch2.selectionChange(selection2.clientId, selection2.attributeKey, selection2.offset, selection2.offset);
      }
    });
  };
  var __unstableExpandSelection = () => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    const selectionAnchor = select2.getSelectionStart();
    const selectionFocus = select2.getSelectionEnd();
    dispatch2.selectionChange({
      start: {
        clientId: selectionAnchor.clientId
      },
      end: {
        clientId: selectionFocus.clientId
      }
    });
  };
  var mergeBlocks = (firstBlockClientId, secondBlockClientId) => ({
    registry,
    select: select2,
    dispatch: dispatch2
  }) => {
    const clientIdA = firstBlockClientId;
    const clientIdB = secondBlockClientId;
    const blockA = select2.getBlock(clientIdA);
    const blockAType = getBlockType(blockA.name);
    if (!blockAType) {
      return;
    }
    const blockB = select2.getBlock(clientIdB);
    if (!blockAType.merge && getBlockSupport(blockA.name, "__experimentalOnMerge")) {
      const blocksWithTheSameType2 = switchToBlockType(blockB, blockAType.name);
      if (blocksWithTheSameType2?.length !== 1) {
        dispatch2.selectBlock(blockA.clientId);
        return;
      }
      const [blockWithSameType] = blocksWithTheSameType2;
      if (blockWithSameType.innerBlocks.length < 1) {
        dispatch2.selectBlock(blockA.clientId);
        return;
      }
      registry.batch(() => {
        dispatch2.insertBlocks(blockWithSameType.innerBlocks, void 0, clientIdA);
        dispatch2.removeBlock(clientIdB);
        dispatch2.selectBlock(blockWithSameType.innerBlocks[0].clientId);
        const nextBlockClientId = select2.getNextBlockClientId(clientIdA);
        if (nextBlockClientId && select2.getBlockName(clientIdA) === select2.getBlockName(nextBlockClientId)) {
          const rootAttributes = select2.getBlockAttributes(clientIdA);
          const previousRootAttributes = select2.getBlockAttributes(nextBlockClientId);
          if (Object.keys(rootAttributes).every((key) => rootAttributes[key] === previousRootAttributes[key])) {
            dispatch2.moveBlocksToPosition(select2.getBlockOrder(nextBlockClientId), nextBlockClientId, clientIdA);
            dispatch2.removeBlock(nextBlockClientId, false);
          }
        }
      });
      return;
    }
    if (isUnmodifiedDefaultBlock(blockA)) {
      dispatch2.removeBlock(clientIdA, select2.isBlockSelected(clientIdA));
      return;
    }
    if (isUnmodifiedDefaultBlock(blockB)) {
      dispatch2.removeBlock(clientIdB, select2.isBlockSelected(clientIdB));
      return;
    }
    if (!blockAType.merge) {
      dispatch2.selectBlock(blockA.clientId);
      return;
    }
    const blockBType = getBlockType(blockB.name);
    const {
      clientId,
      attributeKey,
      offset: offset5
    } = select2.getSelectionStart();
    const selectedBlockType = clientId === clientIdA ? blockAType : blockBType;
    const attributeDefinition = selectedBlockType.attributes[attributeKey];
    const canRestoreTextSelection = (clientId === clientIdA || clientId === clientIdB) && attributeKey !== void 0 && offset5 !== void 0 && // We cannot restore text selection if the RichText identifier
    // is not a defined block attribute key. This can be the case if the
    // fallback intance ID is used to store selection (and no RichText
    // identifier is set), or when the identifier is wrong.
    !!attributeDefinition;
    if (!attributeDefinition) {
      if (typeof attributeKey === "number") {
        window.console.error(`RichText needs an identifier prop that is the block attribute key of the attribute it controls. Its type is expected to be a string, but was ${typeof attributeKey}`);
      } else {
        window.console.error("The RichText identifier prop does not match any attributes defined by the block.");
      }
    }
    const cloneA = cloneBlock(blockA);
    const cloneB = cloneBlock(blockB);
    if (canRestoreTextSelection) {
      const selectedBlock = clientId === clientIdA ? cloneA : cloneB;
      const html2 = selectedBlock.attributes[attributeKey];
      const value = insert(create2({
        html: html2
      }), START_OF_SELECTED_AREA, offset5, offset5);
      selectedBlock.attributes[attributeKey] = toHTMLString({
        value
      });
    }
    const blocksWithTheSameType = blockA.name === blockB.name ? [cloneB] : switchToBlockType(cloneB, blockA.name);
    if (!blocksWithTheSameType || !blocksWithTheSameType.length) {
      return;
    }
    const updatedAttributes = blockAType.merge(cloneA.attributes, blocksWithTheSameType[0].attributes);
    if (canRestoreTextSelection) {
      const newAttributeKey = retrieveSelectedAttribute(updatedAttributes);
      const convertedHtml = updatedAttributes[newAttributeKey];
      const convertedValue = create2({
        html: convertedHtml
      });
      const newOffset = convertedValue.text.indexOf(START_OF_SELECTED_AREA);
      const newValue = remove3(convertedValue, newOffset, newOffset + 1);
      const newHtml = toHTMLString({
        value: newValue
      });
      updatedAttributes[newAttributeKey] = newHtml;
      dispatch2.selectionChange(blockA.clientId, newAttributeKey, newOffset, newOffset);
    }
    dispatch2.replaceBlocks(
      [blockA.clientId, blockB.clientId],
      [{
        ...blockA,
        attributes: {
          ...blockA.attributes,
          ...updatedAttributes
        }
      }, ...blocksWithTheSameType.slice(1)],
      0
      // If we don't pass the `indexToSelect` it will default to the last block.
    );
  };
  var removeBlocks = (clientIds, selectPrevious = true) => privateRemoveBlocks(clientIds, selectPrevious);
  function removeBlock(clientId, selectPrevious) {
    return removeBlocks([clientId], selectPrevious);
  }
  function replaceInnerBlocks(rootClientId, blocks2, updateSelection = false, initialPosition2 = 0) {
    return {
      type: "REPLACE_INNER_BLOCKS",
      rootClientId,
      blocks: blocks2,
      updateSelection,
      initialPosition: updateSelection ? initialPosition2 : null,
      time: Date.now()
    };
  }
  function toggleBlockMode(clientId) {
    return {
      type: "TOGGLE_BLOCK_MODE",
      clientId
    };
  }
  function startTyping() {
    return {
      type: "START_TYPING"
    };
  }
  function stopTyping() {
    return {
      type: "STOP_TYPING"
    };
  }
  function startDraggingBlocks(clientIds = []) {
    return {
      type: "START_DRAGGING_BLOCKS",
      clientIds
    };
  }
  function stopDraggingBlocks() {
    return {
      type: "STOP_DRAGGING_BLOCKS"
    };
  }
  function enterFormattedText() {
    deprecated('wp.data.dispatch( "core/block-editor" ).enterFormattedText', {
      since: "6.1",
      version: "6.3"
    });
    return {
      type: "DO_NOTHING"
    };
  }
  function exitFormattedText() {
    deprecated('wp.data.dispatch( "core/block-editor" ).exitFormattedText', {
      since: "6.1",
      version: "6.3"
    });
    return {
      type: "DO_NOTHING"
    };
  }
  function selectionChange(clientId, attributeKey, startOffset, endOffset) {
    if (typeof clientId === "string") {
      return {
        type: "SELECTION_CHANGE",
        clientId,
        attributeKey,
        startOffset,
        endOffset
      };
    }
    return {
      type: "SELECTION_CHANGE",
      ...clientId
    };
  }
  var insertDefaultBlock = (attributes, rootClientId, index2) => ({
    dispatch: dispatch2
  }) => {
    const defaultBlockName2 = getDefaultBlockName();
    if (!defaultBlockName2) {
      return;
    }
    const block3 = createBlock(defaultBlockName2, attributes);
    return dispatch2.insertBlock(block3, index2, rootClientId);
  };
  function updateBlockListSettings(clientId, settings2) {
    return {
      type: "UPDATE_BLOCK_LIST_SETTINGS",
      clientId,
      settings: settings2
    };
  }
  function updateSettings(settings2) {
    return __experimentalUpdateSettings(settings2, {
      stripExperimentalSettings: true
    });
  }
  function __unstableSaveReusableBlock(id3, updatedId) {
    return {
      type: "SAVE_REUSABLE_BLOCK_SUCCESS",
      id: id3,
      updatedId
    };
  }
  function __unstableMarkLastChangeAsPersistent() {
    return {
      type: "MARK_LAST_CHANGE_AS_PERSISTENT"
    };
  }
  function __unstableMarkNextChangeAsNotPersistent() {
    return {
      type: "MARK_NEXT_CHANGE_AS_NOT_PERSISTENT"
    };
  }
  var __unstableMarkAutomaticChange = () => ({
    dispatch: dispatch2
  }) => {
    dispatch2({
      type: "MARK_AUTOMATIC_CHANGE"
    });
    const {
      requestIdleCallback = (cb) => setTimeout(cb, 100)
    } = window;
    requestIdleCallback(() => {
      dispatch2({
        type: "MARK_AUTOMATIC_CHANGE_FINAL"
      });
    });
  };
  var setNavigationMode = (isNavigationMode2 = true) => ({
    dispatch: dispatch2
  }) => {
    dispatch2.__unstableSetEditorMode(isNavigationMode2 ? "navigation" : "edit");
  };
  var __unstableSetEditorMode = (mode) => ({
    dispatch: dispatch2,
    select: select2,
    registry
  }) => {
    if (mode === "zoom-out") {
      const firstSelectedClientId = select2.getBlockSelectionStart();
      const {
        sectionRootClientId
      } = unlock5(registry.select(STORE_NAME3).getSettings());
      if (firstSelectedClientId) {
        let sectionClientId;
        if (sectionRootClientId) {
          const sectionClientIds = select2.getBlockOrder(sectionRootClientId);
          sectionClientId = select2.getBlockParents(firstSelectedClientId).find((parent) => sectionClientIds.includes(parent));
        } else {
          sectionClientId = select2.getBlockHierarchyRootClientId(firstSelectedClientId);
        }
        if (sectionClientId) {
          dispatch2.selectBlock(sectionClientId);
        } else {
          dispatch2.clearSelectedBlock();
        }
      }
    }
    dispatch2({
      type: "SET_EDITOR_MODE",
      mode
    });
    if (mode === "navigation") {
      speak(__("You are currently in navigation mode. Navigate blocks using the Tab key and Arrow keys. Use Left and Right Arrow keys to move between nesting levels. To exit navigation mode and edit the selected block, press Enter."));
    } else if (mode === "edit") {
      speak(__("You are currently in edit mode. To return to the navigation mode, press Escape."));
    } else if (mode === "zoom-out") {
      speak(__("You are currently in zoom-out mode."));
    }
  };
  var setBlockMovingClientId = (hasBlockMovingClientId3 = null) => ({
    dispatch: dispatch2
  }) => {
    dispatch2({
      type: "SET_BLOCK_MOVING_MODE",
      hasBlockMovingClientId: hasBlockMovingClientId3
    });
    if (hasBlockMovingClientId3) {
      speak(__("Use the Tab key and Arrow keys to choose new block location. Use Left and Right Arrow keys to move between nesting levels. Once location is selected press Enter or Space to move the block."));
    }
  };
  var duplicateBlocks = (clientIds, updateSelection = true) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (!clientIds || !clientIds.length) {
      return;
    }
    const blocks2 = select2.getBlocksByClientId(clientIds);
    if (blocks2.some((block3) => !block3)) {
      return;
    }
    const blockNames = blocks2.map((block3) => block3.name);
    if (blockNames.some((blockName) => !hasBlockSupport(blockName, "multiple", true))) {
      return;
    }
    const rootClientId = select2.getBlockRootClientId(clientIds[0]);
    const clientIdsArray = castArray3(clientIds);
    const lastSelectedIndex = select2.getBlockIndex(clientIdsArray[clientIdsArray.length - 1]);
    const clonedBlocks = blocks2.map((block3) => __experimentalCloneSanitizedBlock(block3));
    dispatch2.insertBlocks(clonedBlocks, lastSelectedIndex + 1, rootClientId, updateSelection);
    if (clonedBlocks.length > 1 && updateSelection) {
      dispatch2.multiSelect(clonedBlocks[0].clientId, clonedBlocks[clonedBlocks.length - 1].clientId);
    }
    return clonedBlocks.map((block3) => block3.clientId);
  };
  var insertBeforeBlock = (clientId) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (!clientId) {
      return;
    }
    const rootClientId = select2.getBlockRootClientId(clientId);
    const isLocked = select2.getTemplateLock(rootClientId);
    if (isLocked) {
      return;
    }
    const blockIndex = select2.getBlockIndex(clientId);
    const directInsertBlock = rootClientId ? select2.getDirectInsertBlock(rootClientId) : null;
    if (!directInsertBlock) {
      return dispatch2.insertDefaultBlock({}, rootClientId, blockIndex);
    }
    const copiedAttributes = {};
    if (directInsertBlock.attributesToCopy) {
      const attributes = select2.getBlockAttributes(clientId);
      directInsertBlock.attributesToCopy.forEach((key) => {
        if (attributes[key]) {
          copiedAttributes[key] = attributes[key];
        }
      });
    }
    const block3 = createBlock(directInsertBlock.name, {
      ...directInsertBlock.attributes,
      ...copiedAttributes
    });
    return dispatch2.insertBlock(block3, blockIndex, rootClientId);
  };
  var insertAfterBlock = (clientId) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (!clientId) {
      return;
    }
    const rootClientId = select2.getBlockRootClientId(clientId);
    const isLocked = select2.getTemplateLock(rootClientId);
    if (isLocked) {
      return;
    }
    const blockIndex = select2.getBlockIndex(clientId);
    const directInsertBlock = rootClientId ? select2.getDirectInsertBlock(rootClientId) : null;
    if (!directInsertBlock) {
      return dispatch2.insertDefaultBlock({}, rootClientId, blockIndex + 1);
    }
    const copiedAttributes = {};
    if (directInsertBlock.attributesToCopy) {
      const attributes = select2.getBlockAttributes(clientId);
      directInsertBlock.attributesToCopy.forEach((key) => {
        if (attributes[key]) {
          copiedAttributes[key] = attributes[key];
        }
      });
    }
    const block3 = createBlock(directInsertBlock.name, {
      ...directInsertBlock.attributes,
      ...copiedAttributes
    });
    return dispatch2.insertBlock(block3, blockIndex + 1, rootClientId);
  };
  function toggleBlockHighlight(clientId, isHighlighted) {
    return {
      type: "TOGGLE_BLOCK_HIGHLIGHT",
      clientId,
      isHighlighted
    };
  }
  var flashBlock = (clientId) => async ({
    dispatch: dispatch2
  }) => {
    dispatch2(toggleBlockHighlight(clientId, true));
    await new Promise((resolve) => setTimeout(resolve, 150));
    dispatch2(toggleBlockHighlight(clientId, false));
  };
  function setHasControlledInnerBlocks(clientId, hasControlledInnerBlocks) {
    return {
      type: "SET_HAS_CONTROLLED_INNER_BLOCKS",
      hasControlledInnerBlocks,
      clientId
    };
  }
  function setBlockVisibility(updates) {
    return {
      type: "SET_BLOCK_VISIBILITY",
      updates
    };
  }
  function __unstableSetTemporarilyEditingAsBlocks(temporarilyEditingAsBlocks2, focusModeToRevert) {
    return {
      type: "SET_TEMPORARILY_EDITING_AS_BLOCKS",
      temporarilyEditingAsBlocks: temporarilyEditingAsBlocks2,
      focusModeToRevert
    };
  }
  var registerInserterMediaCategory = (category) => ({
    select: select2,
    dispatch: dispatch2
  }) => {
    if (!category || typeof category !== "object") {
      console.error("Category should be an `InserterMediaCategory` object.");
      return;
    }
    if (!category.name) {
      console.error("Category should have a `name` that should be unique among all media categories.");
      return;
    }
    if (!category.labels?.name) {
      console.error("Category should have a `labels.name`.");
      return;
    }
    if (!["image", "audio", "video"].includes(category.mediaType)) {
      console.error("Category should have `mediaType` property that is one of `image|audio|video`.");
      return;
    }
    if (!category.fetch || typeof category.fetch !== "function") {
      console.error("Category should have a `fetch` function defined with the following signature `(InserterMediaRequest) => Promise<InserterMediaItem[]>`.");
      return;
    }
    const registeredInserterMediaCategories2 = select2.getRegisteredInserterMediaCategories();
    if (registeredInserterMediaCategories2.some(({
      name
    }) => name === category.name)) {
      console.error(`A category is already registered with the same name: "${category.name}".`);
      return;
    }
    if (registeredInserterMediaCategories2.some(({
      labels: {
        name
      } = {}
    }) => name === category.labels?.name)) {
      console.error(`A category is already registered with the same labels.name: "${category.labels.name}".`);
      return;
    }
    dispatch2({
      type: "REGISTER_INSERTER_MEDIA_CATEGORY",
      category: {
        ...category,
        isExternalResource: true
      }
    });
  };
  function setBlockEditingMode(clientId = "", mode) {
    return {
      type: "SET_BLOCK_EDITING_MODE",
      clientId,
      mode
    };
  }
  function unsetBlockEditingMode(clientId = "") {
    return {
      type: "UNSET_BLOCK_EDITING_MODE",
      clientId
    };
  }

  // node_modules/@wordpress/block-editor/build-module/store/index.js
  var storeConfig = {
    reducer: reducer_default4,
    selectors: selectors_exports4,
    actions: actions_exports5
  };
  var store3 = createReduxStore(STORE_NAME3, {
    ...storeConfig,
    persist: ["preferences"]
  });
  var registeredStore = registerStore(STORE_NAME3, {
    ...storeConfig,
    persist: ["preferences"]
  });
  unlock5(registeredStore).registerPrivateActions(private_actions_exports2);
  unlock5(registeredStore).registerPrivateSelectors(private_selectors_exports2);
  unlock5(store3).registerPrivateActions(private_actions_exports2);
  unlock5(store3).registerPrivateSelectors(private_selectors_exports2);

  // node_modules/@wordpress/block-editor/build-module/components/block-list/private-block-context.js
  var PrivateBlockContext = (0, import_react.createContext)({});

  // node_modules/@wordpress/block-editor/build-module/components/block-edit/index.js
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());

  // node_modules/@wordpress/block-editor/build-module/components/inserter/search-items.js
  var import_remove_accents5 = __toESM(require_remove_accents());
  var defaultGetName = (item) => item.name || "";
  var defaultGetTitle = (item) => item.title;
  var defaultGetDescription = (item) => item.description || "";
  var defaultGetKeywords = (item) => item.keywords || [];
  var defaultGetCategory = (item) => item.category;
  var defaultGetCollection = () => null;
  var splitRegexp = [
    /([\p{Ll}\p{Lo}\p{N}])([\p{Lu}\p{Lt}])/gu,
    // One lowercase or digit, followed by one uppercase.
    /([\p{Lu}\p{Lt}])([\p{Lu}\p{Lt}][\p{Ll}\p{Lo}])/gu
    // One uppercase followed by one uppercase and one lowercase.
  ];
  var stripRegexp = /(\p{C}|\p{P}|\p{S})+/giu;
  var extractedWords = /* @__PURE__ */ new Map();
  var normalizedStrings = /* @__PURE__ */ new Map();
  function extractWords(input = "") {
    if (extractedWords.has(input)) {
      return extractedWords.get(input);
    }
    const result = noCase(input, {
      splitRegexp,
      stripRegexp
    }).split(" ").filter(Boolean);
    extractedWords.set(input, result);
    return result;
  }
  function normalizeString2(input = "") {
    if (normalizedStrings.has(input)) {
      return normalizedStrings.get(input);
    }
    let result = (0, import_remove_accents5.default)(input);
    result = result.replace(/^\//, "");
    result = result.toLowerCase();
    normalizedStrings.set(input, result);
    return result;
  }
  var getNormalizedSearchTerms = (input = "") => {
    return extractWords(normalizeString2(input));
  };
  var removeMatchingTerms = (unmatchedTerms, unprocessedTerms) => {
    return unmatchedTerms.filter((term) => !getNormalizedSearchTerms(unprocessedTerms).some((unprocessedTerm) => unprocessedTerm.includes(term)));
  };
  var searchBlockItems = (items, categories2, collections2, searchInput) => {
    const normalizedSearchTerms = getNormalizedSearchTerms(searchInput);
    if (normalizedSearchTerms.length === 0) {
      return items;
    }
    const config2 = {
      getCategory: (item) => categories2.find(({
        slug
      }) => slug === item.category)?.title,
      getCollection: (item) => collections2[item.name.split("/")[0]]?.title
    };
    return searchItems(items, searchInput, config2);
  };
  var searchItems = (items = [], searchInput = "", config2 = {}) => {
    const normalizedSearchTerms = getNormalizedSearchTerms(searchInput);
    if (normalizedSearchTerms.length === 0) {
      return items;
    }
    const rankedItems = items.map((item) => {
      return [item, getItemSearchRank(item, searchInput, config2)];
    }).filter(([, rank]) => rank > 0);
    rankedItems.sort(([, rank1], [, rank2]) => rank2 - rank1);
    return rankedItems.map(([item]) => item);
  };
  function getItemSearchRank(item, searchTerm, config2 = {}) {
    const {
      getName = defaultGetName,
      getTitle = defaultGetTitle,
      getDescription = defaultGetDescription,
      getKeywords = defaultGetKeywords,
      getCategory = defaultGetCategory,
      getCollection = defaultGetCollection
    } = config2;
    const name = getName(item);
    const title = getTitle(item);
    const description = getDescription(item);
    const keywords = getKeywords(item);
    const category = getCategory(item);
    const collection = getCollection(item);
    const normalizedSearchInput = normalizeString2(searchTerm);
    const normalizedTitle = normalizeString2(title);
    let rank = 0;
    if (normalizedSearchInput === normalizedTitle) {
      rank += 30;
    } else if (normalizedTitle.startsWith(normalizedSearchInput)) {
      rank += 20;
    } else {
      const terms = [name, title, description, ...keywords, category, collection].join(" ");
      const normalizedSearchTerms = extractWords(normalizedSearchInput);
      const unmatchedTerms = removeMatchingTerms(normalizedSearchTerms, terms);
      if (unmatchedTerms.length === 0) {
        rank += 10;
      }
    }
    if (rank !== 0 && name.startsWith("core/")) {
      const isCoreBlockVariation = name !== item.id;
      rank += isCoreBlockVariation ? 1 : 2;
    }
    return rank;
  }

  // node_modules/@wordpress/block-editor/build-module/components/inserter/hooks/use-block-types-state.js
  var useBlockTypesState = (rootClientId, onInsert, isQuick) => {
    const [items] = useSelect((select2) => [select2(store3).getInserterItems(rootClientId, {
      [withRootClientIdOptionKey]: !isQuick
    })], [rootClientId, isQuick]);
    const [categories2, collections2] = useSelect((select2) => {
      const {
        getCategories: getCategories2,
        getCollections: getCollections2
      } = select2(store2);
      return [getCategories2(), getCollections2()];
    }, []);
    const onSelectItem = (0, import_react.useCallback)(({
      name,
      initialAttributes,
      innerBlocks,
      syncStatus,
      content,
      rootClientId: _rootClientId
    }, shouldFocusBlock) => {
      const insertedBlock = syncStatus === "unsynced" ? parse3(content, {
        __unstableSkipMigrationLogs: true
      }) : createBlock(name, initialAttributes, createBlocksFromInnerBlocksTemplate(innerBlocks));
      onInsert(insertedBlock, void 0, shouldFocusBlock, _rootClientId);
    }, [onInsert]);
    return [items, categories2, collections2, onSelectItem];
  };
  var use_block_types_state_default = useBlockTypesState;

  // node_modules/@wordpress/block-editor/build-module/components/block-icon/index.js
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  function BlockIcon({
    icon,
    showColors = false,
    className,
    context: context2
  }) {
    if (icon?.src === "block-default") {
      icon = {
        src: block_default_default
      };
    }
    const renderedIcon = /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(icon_default2, {
      icon: icon && icon.src ? icon.src : icon,
      context: context2
    });
    const style = showColors ? {
      backgroundColor: icon && icon.background,
      color: icon && icon.foreground
    } : {};
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("span", {
      style,
      className: clsx_default("block-editor-block-icon", className, {
        "has-colors": showColors
      }),
      children: renderedIcon
    });
  }
  var block_icon_default = (0, import_react.memo)(BlockIcon);

  // node_modules/@wordpress/block-editor/build-module/utils/order-inserter-block-items.js
  var orderInserterBlockItems = (items, priority2) => {
    if (!priority2) {
      return items;
    }
    items.sort(({
      id: aName
    }, {
      id: bName
    }) => {
      let aIndex = priority2.indexOf(aName);
      let bIndex = priority2.indexOf(bName);
      if (aIndex < 0) {
        aIndex = priority2.length;
      }
      if (bIndex < 0) {
        bIndex = priority2.length;
      }
      return aIndex - bIndex;
    });
    return items;
  };

  // node_modules/@wordpress/block-editor/build-module/autocompleters/block.js
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var noop6 = () => {
  };
  var SHOWN_BLOCK_TYPES = 9;
  function createBlockCompleter() {
    return {
      name: "blocks",
      className: "block-editor-autocompleters__block",
      triggerPrefix: "/",
      useItems(filterValue) {
        const {
          rootClientId,
          selectedBlockName,
          prioritizedBlocks
        } = useSelect((select2) => {
          const {
            getSelectedBlockClientId: getSelectedBlockClientId2,
            getBlockName: getBlockName2,
            getBlockListSettings: getBlockListSettings2,
            getBlockRootClientId: getBlockRootClientId2
          } = select2(store3);
          const selectedBlockClientId = getSelectedBlockClientId2();
          const _rootClientId = getBlockRootClientId2(selectedBlockClientId);
          return {
            selectedBlockName: selectedBlockClientId ? getBlockName2(selectedBlockClientId) : null,
            rootClientId: _rootClientId,
            prioritizedBlocks: getBlockListSettings2(_rootClientId)?.prioritizedInserterBlocks
          };
        }, []);
        const [items, categories2, collections2] = use_block_types_state_default(rootClientId, noop6);
        const filteredItems = (0, import_react.useMemo)(() => {
          const initialFilteredItems = !!filterValue.trim() ? searchBlockItems(items, categories2, collections2, filterValue) : orderInserterBlockItems(orderBy(items, "frecency", "desc"), prioritizedBlocks);
          return initialFilteredItems.filter((item) => item.name !== selectedBlockName).slice(0, SHOWN_BLOCK_TYPES);
        }, [filterValue, selectedBlockName, items, categories2, collections2, prioritizedBlocks]);
        const options = (0, import_react.useMemo)(() => filteredItems.map((blockItem) => {
          const {
            title,
            icon,
            isDisabled
          } = blockItem;
          return {
            key: `block-${blockItem.id}`,
            value: blockItem,
            label: /* @__PURE__ */ (0, import_jsx_runtime110.jsxs)(import_jsx_runtime109.Fragment, {
              children: [/* @__PURE__ */ (0, import_jsx_runtime108.jsx)(block_icon_default, {
                icon,
                showColors: true
              }, "icon"), title]
            }),
            isDisabled
          };
        }), [filteredItems]);
        return [options];
      },
      allowContext(before, after) {
        return !(/\S/.test(before) || /\S/.test(after));
      },
      getOptionCompletion(inserterItem) {
        const {
          name,
          initialAttributes,
          innerBlocks,
          syncStatus,
          content
        } = inserterItem;
        return {
          action: "replace",
          value: syncStatus === "unsynced" ? parse3(content, {
            __unstableSkipMigrationLogs: true
          }) : createBlock(name, initialAttributes, createBlocksFromInnerBlocksTemplate(innerBlocks))
        };
      }
    };
  }
  var block_default = createBlockCompleter();

  // node_modules/@wordpress/api-fetch/build-module/middlewares/nonce.js
  function createNonceMiddleware(nonce) {
    const middleware2 = (options, next3) => {
      const {
        headers = {}
      } = options;
      for (const headerName in headers) {
        if (headerName.toLowerCase() === "x-wp-nonce" && headers[headerName] === middleware2.nonce) {
          return next3(options);
        }
      }
      return next3({
        ...options,
        headers: {
          ...headers,
          "X-WP-Nonce": middleware2.nonce
        }
      });
    };
    middleware2.nonce = nonce;
    return middleware2;
  }
  var nonce_default = createNonceMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/namespace-endpoint.js
  var namespaceAndEndpointMiddleware = (options, next3) => {
    let path = options.path;
    let namespaceTrimmed, endpointTrimmed;
    if (typeof options.namespace === "string" && typeof options.endpoint === "string") {
      namespaceTrimmed = options.namespace.replace(/^\/|\/$/g, "");
      endpointTrimmed = options.endpoint.replace(/^\//, "");
      if (endpointTrimmed) {
        path = namespaceTrimmed + "/" + endpointTrimmed;
      } else {
        path = namespaceTrimmed;
      }
    }
    delete options.namespace;
    delete options.endpoint;
    return next3({
      ...options,
      path
    });
  };
  var namespace_endpoint_default = namespaceAndEndpointMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/root-url.js
  var createRootURLMiddleware = (rootURL) => (options, next3) => {
    return namespace_endpoint_default(options, (optionsWithPath) => {
      let url = optionsWithPath.url;
      let path = optionsWithPath.path;
      let apiRoot;
      if (typeof path === "string") {
        apiRoot = rootURL;
        if (-1 !== rootURL.indexOf("?")) {
          path = path.replace("?", "&");
        }
        path = path.replace(/^\//, "");
        if ("string" === typeof apiRoot && -1 !== apiRoot.indexOf("?")) {
          path = path.replace("?", "&");
        }
        url = apiRoot + path;
      }
      return next3({
        ...optionsWithPath,
        url
      });
    });
  };
  var root_url_default = createRootURLMiddleware;

  // node_modules/@wordpress/url/build-module/is-url.js
  function isURL(url) {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  }

  // node_modules/@wordpress/url/build-module/get-query-string.js
  function getQueryString(url) {
    let query2;
    try {
      query2 = new URL(url, "http://example.com").search.substring(1);
    } catch (error2) {
    }
    if (query2) {
      return query2;
    }
  }

  // node_modules/@wordpress/url/build-module/build-query-string.js
  function buildQueryString(data) {
    let string2 = "";
    const stack2 = Object.entries(data);
    let pair;
    while (pair = stack2.shift()) {
      let [key, value] = pair;
      const hasNestedData = Array.isArray(value) || value && value.constructor === Object;
      if (hasNestedData) {
        const valuePairs = Object.entries(value).reverse();
        for (const [member, memberValue] of valuePairs) {
          stack2.unshift([`${key}[${member}]`, memberValue]);
        }
      } else if (value !== void 0) {
        if (value === null) {
          value = "";
        }
        string2 += "&" + [key, value].map(encodeURIComponent).join("=");
      }
    }
    return string2.substr(1);
  }

  // node_modules/@wordpress/url/build-module/get-fragment.js
  function getFragment(url) {
    const matches2 = /^\S+?(#[^\s\?]*)/.exec(url);
    if (matches2) {
      return matches2[1];
    }
  }

  // node_modules/@wordpress/url/build-module/safe-decode-uri-component.js
  function safeDecodeURIComponent(uriComponent) {
    try {
      return decodeURIComponent(uriComponent);
    } catch (uriComponentError) {
      return uriComponent;
    }
  }

  // node_modules/@wordpress/url/build-module/get-query-args.js
  function setPath(object, path, value) {
    const length2 = path.length;
    const lastIndex = length2 - 1;
    for (let i3 = 0; i3 < length2; i3++) {
      let key = path[i3];
      if (!key && Array.isArray(object)) {
        key = object.length.toString();
      }
      key = ["__proto__", "constructor", "prototype"].includes(key) ? key.toUpperCase() : key;
      const isNextKeyArrayIndex = !isNaN(Number(path[i3 + 1]));
      object[key] = i3 === lastIndex ? (
        // If at end of path, assign the intended value.
        value
      ) : (
        // Otherwise, advance to the next object in the path, creating
        // it if it does not yet exist.
        object[key] || (isNextKeyArrayIndex ? [] : {})
      );
      if (Array.isArray(object[key]) && !isNextKeyArrayIndex) {
        object[key] = {
          ...object[key]
        };
      }
      object = object[key];
    }
  }
  function getQueryArgs(url) {
    return (getQueryString(url) || "").replace(/\+/g, "%20").split("&").reduce((accumulator, keyValue) => {
      const [key, value = ""] = keyValue.split("=").filter(Boolean).map(safeDecodeURIComponent);
      if (key) {
        const segments = key.replace(/\]/g, "").split("[");
        setPath(accumulator, segments, value);
      }
      return accumulator;
    }, /* @__PURE__ */ Object.create(null));
  }

  // node_modules/@wordpress/url/build-module/add-query-args.js
  function addQueryArgs(url = "", args) {
    if (!args || !Object.keys(args).length) {
      return url;
    }
    const fragment = getFragment(url) || "";
    let baseUrl = url.replace(fragment, "");
    const queryStringIndex = url.indexOf("?");
    if (queryStringIndex !== -1) {
      args = Object.assign(getQueryArgs(url), args);
      baseUrl = baseUrl.substr(0, queryStringIndex);
    }
    return baseUrl + "?" + buildQueryString(args) + fragment;
  }

  // node_modules/@wordpress/url/build-module/get-query-arg.js
  function getQueryArg(url, arg) {
    return getQueryArgs(url)[arg];
  }

  // node_modules/@wordpress/url/build-module/has-query-arg.js
  function hasQueryArg(url, arg) {
    return getQueryArg(url, arg) !== void 0;
  }

  // node_modules/@wordpress/url/build-module/remove-query-args.js
  function removeQueryArgs(url, ...args) {
    const fragment = url.replace(/^[^#]*/, "");
    url = url.replace(/#.*/, "");
    const queryStringIndex = url.indexOf("?");
    if (queryStringIndex === -1) {
      return url + fragment;
    }
    const query2 = getQueryArgs(url);
    const baseURL = url.substr(0, queryStringIndex);
    args.forEach((arg) => delete query2[arg]);
    const queryString = buildQueryString(query2);
    const updatedUrl = queryString ? baseURL + "?" + queryString : baseURL;
    return updatedUrl + fragment;
  }

  // node_modules/@wordpress/url/build-module/normalize-path.js
  function normalizePath(path) {
    const split2 = path.split("?");
    const query2 = split2[1];
    const base = split2[0];
    if (!query2) {
      return base;
    }
    return base + "?" + query2.split("&").map((entry) => entry.split("=")).map((pair) => pair.map(decodeURIComponent)).sort((a2, b2) => a2[0].localeCompare(b2[0])).map((pair) => pair.map(encodeURIComponent)).map((pair) => pair.join("=")).join("&");
  }

  // node_modules/@wordpress/api-fetch/build-module/middlewares/preloading.js
  function createPreloadingMiddleware(preloadedData) {
    const cache3 = Object.fromEntries(Object.entries(preloadedData).map(([path, data]) => [normalizePath(path), data]));
    return (options, next3) => {
      const {
        parse: parse5 = true
      } = options;
      let rawPath = options.path;
      if (!rawPath && options.url) {
        const {
          rest_route: pathFromQuery,
          ...queryArgs
        } = getQueryArgs(options.url);
        if (typeof pathFromQuery === "string") {
          rawPath = addQueryArgs(pathFromQuery, queryArgs);
        }
      }
      if (typeof rawPath !== "string") {
        return next3(options);
      }
      const method = options.method || "GET";
      const path = normalizePath(rawPath);
      if ("GET" === method && cache3[path]) {
        const cacheData = cache3[path];
        delete cache3[path];
        return prepareResponse(cacheData, !!parse5);
      } else if ("OPTIONS" === method && cache3[method] && cache3[method][path]) {
        const cacheData = cache3[method][path];
        delete cache3[method][path];
        return prepareResponse(cacheData, !!parse5);
      }
      return next3(options);
    };
  }
  function prepareResponse(responseData, parse5) {
    if (parse5) {
      return Promise.resolve(responseData.body);
    }
    try {
      return Promise.resolve(new window.Response(JSON.stringify(responseData.body), {
        status: 200,
        statusText: "OK",
        headers: responseData.headers
      }));
    } catch {
      Object.entries(responseData.headers).forEach(([key, value]) => {
        if (key.toLowerCase() === "link") {
          responseData.headers[key] = value.replace(/<([^>]+)>/, (_, url) => `<${encodeURI(url)}>`);
        }
      });
      return Promise.resolve(parse5 ? responseData.body : new window.Response(JSON.stringify(responseData.body), {
        status: 200,
        statusText: "OK",
        headers: responseData.headers
      }));
    }
  }
  var preloading_default = createPreloadingMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/fetch-all-middleware.js
  var modifyQuery = ({
    path,
    url,
    ...options
  }, queryArgs) => ({
    ...options,
    url: url && addQueryArgs(url, queryArgs),
    path: path && addQueryArgs(path, queryArgs)
  });
  var parseResponse = (response) => response.json ? response.json() : Promise.reject(response);
  var parseLinkHeader = (linkHeader) => {
    if (!linkHeader) {
      return {};
    }
    const match2 = linkHeader.match(/<([^>]+)>; rel="next"/);
    return match2 ? {
      next: match2[1]
    } : {};
  };
  var getNextPageUrl = (response) => {
    const {
      next: next3
    } = parseLinkHeader(response.headers.get("link"));
    return next3;
  };
  var requestContainsUnboundedQuery = (options) => {
    const pathIsUnbounded = !!options.path && options.path.indexOf("per_page=-1") !== -1;
    const urlIsUnbounded = !!options.url && options.url.indexOf("per_page=-1") !== -1;
    return pathIsUnbounded || urlIsUnbounded;
  };
  var fetchAllMiddleware = async (options, next3) => {
    if (options.parse === false) {
      return next3(options);
    }
    if (!requestContainsUnboundedQuery(options)) {
      return next3(options);
    }
    const response = await build_module_default({
      ...modifyQuery(options, {
        per_page: 100
      }),
      // Ensure headers are returned for page 1.
      parse: false
    });
    const results = await parseResponse(response);
    if (!Array.isArray(results)) {
      return results;
    }
    let nextPage = getNextPageUrl(response);
    if (!nextPage) {
      return results;
    }
    let mergedResults = (
      /** @type {any[]} */
      [].concat(results)
    );
    while (nextPage) {
      const nextResponse = await build_module_default({
        ...options,
        // Ensure the URL for the next page is used instead of any provided path.
        path: void 0,
        url: nextPage,
        // Ensure we still get headers so we can identify the next page.
        parse: false
      });
      const nextResults = await parseResponse(nextResponse);
      mergedResults = mergedResults.concat(nextResults);
      nextPage = getNextPageUrl(nextResponse);
    }
    return mergedResults;
  };
  var fetch_all_middleware_default = fetchAllMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/http-v1.js
  var OVERRIDE_METHODS = /* @__PURE__ */ new Set(["PATCH", "PUT", "DELETE"]);
  var DEFAULT_METHOD = "GET";
  var httpV1Middleware = (options, next3) => {
    const {
      method = DEFAULT_METHOD
    } = options;
    if (OVERRIDE_METHODS.has(method.toUpperCase())) {
      options = {
        ...options,
        headers: {
          ...options.headers,
          "X-HTTP-Method-Override": method,
          "Content-Type": "application/json"
        },
        method: "POST"
      };
    }
    return next3(options);
  };
  var http_v1_default = httpV1Middleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/user-locale.js
  var userLocaleMiddleware = (options, next3) => {
    if (typeof options.url === "string" && !hasQueryArg(options.url, "_locale")) {
      options.url = addQueryArgs(options.url, {
        _locale: "user"
      });
    }
    if (typeof options.path === "string" && !hasQueryArg(options.path, "_locale")) {
      options.path = addQueryArgs(options.path, {
        _locale: "user"
      });
    }
    return next3(options);
  };
  var user_locale_default = userLocaleMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/utils/response.js
  var parseResponse2 = (response, shouldParseResponse = true) => {
    if (shouldParseResponse) {
      if (response.status === 204) {
        return null;
      }
      return response.json ? response.json() : Promise.reject(response);
    }
    return response;
  };
  var parseJsonAndNormalizeError = (response) => {
    const invalidJsonError = {
      code: "invalid_json",
      message: __("The response is not a valid JSON response.")
    };
    if (!response || !response.json) {
      throw invalidJsonError;
    }
    return response.json().catch(() => {
      throw invalidJsonError;
    });
  };
  var parseResponseAndNormalizeError = (response, shouldParseResponse = true) => {
    return Promise.resolve(parseResponse2(response, shouldParseResponse)).catch((res) => parseAndThrowError(res, shouldParseResponse));
  };
  function parseAndThrowError(response, shouldParseResponse = true) {
    if (!shouldParseResponse) {
      throw response;
    }
    return parseJsonAndNormalizeError(response).then((error2) => {
      const unknownError = {
        code: "unknown_error",
        message: __("An unknown error occurred.")
      };
      throw error2 || unknownError;
    });
  }

  // node_modules/@wordpress/api-fetch/build-module/middlewares/media-upload.js
  function isMediaUploadRequest(options) {
    const isCreateMethod = !!options.method && options.method === "POST";
    const isMediaEndpoint = !!options.path && options.path.indexOf("/wp/v2/media") !== -1 || !!options.url && options.url.indexOf("/wp/v2/media") !== -1;
    return isMediaEndpoint && isCreateMethod;
  }
  var mediaUploadMiddleware = (options, next3) => {
    if (!isMediaUploadRequest(options)) {
      return next3(options);
    }
    let retries = 0;
    const maxRetries = 5;
    const postProcess = (attachmentId) => {
      retries++;
      return next3({
        path: `/wp/v2/media/${attachmentId}/post-process`,
        method: "POST",
        data: {
          action: "create-image-subsizes"
        },
        parse: false
      }).catch(() => {
        if (retries < maxRetries) {
          return postProcess(attachmentId);
        }
        next3({
          path: `/wp/v2/media/${attachmentId}?force=true`,
          method: "DELETE"
        });
        return Promise.reject();
      });
    };
    return next3({
      ...options,
      parse: false
    }).catch((response) => {
      if (!response.headers) {
        return Promise.reject(response);
      }
      const attachmentId = response.headers.get("x-wp-upload-attachment-id");
      if (response.status >= 500 && response.status < 600 && attachmentId) {
        return postProcess(attachmentId).catch(() => {
          if (options.parse !== false) {
            return Promise.reject({
              code: "post_process",
              message: __("Media upload failed. If this is a photo or a large image, please scale it down and try again.")
            });
          }
          return Promise.reject(response);
        });
      }
      return parseAndThrowError(response, options.parse);
    }).then((response) => parseResponseAndNormalizeError(response, options.parse));
  };
  var media_upload_default = mediaUploadMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/middlewares/theme-preview.js
  var createThemePreviewMiddleware = (themePath) => (options, next3) => {
    if (typeof options.url === "string") {
      const wpThemePreview = getQueryArg(options.url, "wp_theme_preview");
      if (wpThemePreview === void 0) {
        options.url = addQueryArgs(options.url, {
          wp_theme_preview: themePath
        });
      } else if (wpThemePreview === "") {
        options.url = removeQueryArgs(options.url, "wp_theme_preview");
      }
    }
    if (typeof options.path === "string") {
      const wpThemePreview = getQueryArg(options.path, "wp_theme_preview");
      if (wpThemePreview === void 0) {
        options.path = addQueryArgs(options.path, {
          wp_theme_preview: themePath
        });
      } else if (wpThemePreview === "") {
        options.path = removeQueryArgs(options.path, "wp_theme_preview");
      }
    }
    return next3(options);
  };
  var theme_preview_default = createThemePreviewMiddleware;

  // node_modules/@wordpress/api-fetch/build-module/index.js
  var DEFAULT_HEADERS = {
    // The backend uses the Accept header as a condition for considering an
    // incoming request as a REST request.
    //
    // See: https://core.trac.wordpress.org/ticket/44534
    Accept: "application/json, */*;q=0.1"
  };
  var DEFAULT_OPTIONS2 = {
    credentials: "include"
  };
  var middlewares = [user_locale_default, namespace_endpoint_default, http_v1_default, fetch_all_middleware_default];
  function registerMiddleware(middleware2) {
    middlewares.unshift(middleware2);
  }
  var checkStatus = (response) => {
    if (response.status >= 200 && response.status < 300) {
      return response;
    }
    throw response;
  };
  var defaultFetchHandler = (nextOptions) => {
    const {
      url,
      path,
      data,
      parse: parse5 = true,
      ...remainingOptions
    } = nextOptions;
    let {
      body,
      headers
    } = nextOptions;
    headers = {
      ...DEFAULT_HEADERS,
      ...headers
    };
    if (data) {
      body = JSON.stringify(data);
      headers["Content-Type"] = "application/json";
    }
    const responsePromise = window.fetch(
      // Fall back to explicitly passing `window.location` which is the behavior if `undefined` is passed.
      url || path || window.location.href,
      {
        ...DEFAULT_OPTIONS2,
        ...remainingOptions,
        body,
        headers
      }
    );
    return responsePromise.then((value) => Promise.resolve(value).then(checkStatus).catch((response) => parseAndThrowError(response, parse5)).then((response) => parseResponseAndNormalizeError(response, parse5)), (err) => {
      if (err && err.name === "AbortError") {
        throw err;
      }
      throw {
        code: "fetch_error",
        message: __("You are probably offline.")
      };
    });
  };
  var fetchHandler = defaultFetchHandler;
  function setFetchHandler(newFetchHandler) {
    fetchHandler = newFetchHandler;
  }
  function apiFetch(options) {
    const enhancedHandler = middlewares.reduceRight((next3, middleware2) => {
      return (workingOptions) => middleware2(workingOptions, next3);
    }, fetchHandler);
    return enhancedHandler(options).catch((error2) => {
      if (error2.code !== "rest_cookie_invalid_nonce") {
        return Promise.reject(error2);
      }
      return window.fetch(apiFetch.nonceEndpoint).then(checkStatus).then((data) => data.text()).then((text2) => {
        apiFetch.nonceMiddleware.nonce = text2;
        return apiFetch(options);
      });
    });
  }
  apiFetch.use = registerMiddleware;
  apiFetch.setFetchHandler = setFetchHandler;
  apiFetch.createNonceMiddleware = nonce_default;
  apiFetch.createPreloadingMiddleware = preloading_default;
  apiFetch.createRootURLMiddleware = root_url_default;
  apiFetch.fetchAllMiddleware = fetch_all_middleware_default;
  apiFetch.mediaUploadMiddleware = media_upload_default;
  apiFetch.createThemePreviewMiddleware = theme_preview_default;
  var build_module_default = apiFetch;

  // node_modules/@wordpress/block-editor/build-module/autocompleters/link.js
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var SHOWN_SUGGESTIONS = 10;
  function createLinkCompleter() {
    return {
      name: "links",
      className: "block-editor-autocompleters__link",
      triggerPrefix: "[[",
      options: async (letters) => {
        let options = await build_module_default({
          path: addQueryArgs("/wp/v2/search", {
            per_page: SHOWN_SUGGESTIONS,
            search: letters,
            type: "post",
            order_by: "menu_order"
          })
        });
        options = options.filter((option) => option.title !== "");
        return options;
      },
      getOptionKeywords(item) {
        const expansionWords = item.title.split(/\s+/);
        return [...expansionWords];
      },
      getOptionLabel(item) {
        return /* @__PURE__ */ (0, import_jsx_runtime113.jsxs)(import_jsx_runtime112.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime111.jsx)(icon_default, {
            icon: item.subtype === "page" ? page_default : post_default
          }, "icon"), item.title]
        });
      },
      getOptionCompletion(item) {
        return /* @__PURE__ */ (0, import_jsx_runtime111.jsx)("a", {
          href: item.url,
          children: item.title
        });
      }
    };
  }
  var link_default = createLinkCompleter();

  // node_modules/@wordpress/block-editor/build-module/components/autocomplete/index.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var EMPTY_ARRAY3 = [];
  function useCompleters({
    completers = EMPTY_ARRAY3
  }) {
    const {
      name
    } = useBlockEditContext();
    return (0, import_react.useMemo)(() => {
      let filteredCompleters = [...completers, link_default];
      if (name === getDefaultBlockName() || getBlockSupport(name, "__experimentalSlashInserter", false)) {
        filteredCompleters = [...filteredCompleters, block_default];
      }
      if (hasFilter("editor.Autocomplete.completers")) {
        if (filteredCompleters === completers) {
          filteredCompleters = filteredCompleters.map((completer) => ({
            ...completer
          }));
        }
        filteredCompleters = applyFilters("editor.Autocomplete.completers", filteredCompleters, name);
      }
      return filteredCompleters;
    }, [completers, name]);
  }
  function useBlockEditorAutocompleteProps(props) {
    return useAutocompleteProps({
      ...props,
      completers: useCompleters(props)
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/provider/block-refs-provider.js
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var BlockRefs = (0, import_react.createContext)({
    refsMap: observableMap()
  });

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-block-refs.js
  function useBlockRefProvider(clientId) {
    const {
      refsMap
    } = (0, import_react.useContext)(BlockRefs);
    return useRefEffect((element) => {
      refsMap.set(clientId, element);
      return () => refsMap.delete(clientId);
    }, [clientId]);
  }

  // node_modules/@react-spring/rafz/dist/react-spring_rafz.modern.mjs
  var updateQueue = makeQueue();
  var raf = (fn) => schedule(fn, updateQueue);
  var writeQueue = makeQueue();
  raf.write = (fn) => schedule(fn, writeQueue);
  var onStartQueue = makeQueue();
  raf.onStart = (fn) => schedule(fn, onStartQueue);
  var onFrameQueue = makeQueue();
  raf.onFrame = (fn) => schedule(fn, onFrameQueue);
  var onFinishQueue = makeQueue();
  raf.onFinish = (fn) => schedule(fn, onFinishQueue);
  var timeouts = [];
  raf.setTimeout = (handler, ms) => {
    const time2 = raf.now() + ms;
    const cancel = () => {
      const i3 = timeouts.findIndex((t4) => t4.cancel == cancel);
      if (~i3)
        timeouts.splice(i3, 1);
      pendingCount -= ~i3 ? 1 : 0;
    };
    const timeout = { time: time2, handler, cancel };
    timeouts.splice(findTimeout(time2), 0, timeout);
    pendingCount += 1;
    start();
    return timeout;
  };
  var findTimeout = (time2) => ~(~timeouts.findIndex((t4) => t4.time > time2) || ~timeouts.length);
  raf.cancel = (fn) => {
    onStartQueue.delete(fn);
    onFrameQueue.delete(fn);
    onFinishQueue.delete(fn);
    updateQueue.delete(fn);
    writeQueue.delete(fn);
  };
  raf.sync = (fn) => {
    sync2 = true;
    raf.batchedUpdates(fn);
    sync2 = false;
  };
  raf.throttle = (fn) => {
    let lastArgs;
    function queuedFn() {
      try {
        fn(...lastArgs);
      } finally {
        lastArgs = null;
      }
    }
    function throttled(...args) {
      lastArgs = args;
      raf.onStart(queuedFn);
    }
    throttled.handler = fn;
    throttled.cancel = () => {
      onStartQueue.delete(queuedFn);
      lastArgs = null;
    };
    return throttled;
  };
  var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : (
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    () => {
    }
  );
  raf.use = (impl) => nativeRaf = impl;
  raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
  raf.batchedUpdates = (fn) => fn();
  raf.catch = console.error;
  raf.frameLoop = "always";
  raf.advance = () => {
    if (raf.frameLoop !== "demand") {
      console.warn(
        "Cannot call the manual advancement of rafz whilst frameLoop is not set as demand"
      );
    } else {
      update();
    }
  };
  var ts = -1;
  var pendingCount = 0;
  var sync2 = false;
  function schedule(fn, queue) {
    if (sync2) {
      queue.delete(fn);
      fn(0);
    } else {
      queue.add(fn);
      start();
    }
  }
  function start() {
    if (ts < 0) {
      ts = 0;
      if (raf.frameLoop !== "demand") {
        nativeRaf(loop);
      }
    }
  }
  function stop() {
    ts = -1;
  }
  function loop() {
    if (~ts) {
      nativeRaf(loop);
      raf.batchedUpdates(update);
    }
  }
  function update() {
    const prevTs = ts;
    ts = raf.now();
    const count = findTimeout(ts);
    if (count) {
      eachSafely(timeouts.splice(0, count), (t4) => t4.handler());
      pendingCount -= count;
    }
    if (!pendingCount) {
      stop();
      return;
    }
    onStartQueue.flush();
    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
    onFrameQueue.flush();
    writeQueue.flush();
    onFinishQueue.flush();
  }
  function makeQueue() {
    let next3 = /* @__PURE__ */ new Set();
    let current = next3;
    return {
      add(fn) {
        pendingCount += current == next3 && !next3.has(fn) ? 1 : 0;
        next3.add(fn);
      },
      delete(fn) {
        pendingCount -= current == next3 && next3.has(fn) ? 1 : 0;
        return next3.delete(fn);
      },
      flush(arg) {
        if (current.size) {
          next3 = /* @__PURE__ */ new Set();
          pendingCount -= current.size;
          eachSafely(current, (fn) => fn(arg) && next3.add(fn));
          pendingCount += next3.size;
          current = next3;
        }
      }
    };
  }
  function eachSafely(values, each2) {
    values.forEach((value) => {
      try {
        each2(value);
      } catch (e3) {
        raf.catch(e3);
      }
    });
  }

  // node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs
  var import_react92 = __toESM(require_react(), 1);
  var import_react93 = __toESM(require_react(), 1);
  var import_react94 = __toESM(require_react(), 1);
  var import_react95 = __toESM(require_react(), 1);
  var import_react96 = __toESM(require_react(), 1);
  var import_react97 = __toESM(require_react(), 1);
  var import_react98 = __toESM(require_react(), 1);
  var import_react99 = __toESM(require_react(), 1);
  var __defProp4 = Object.defineProperty;
  var __export2 = (target, all) => {
    for (var name in all)
      __defProp4(target, name, { get: all[name], enumerable: true });
  };
  var globals_exports = {};
  __export2(globals_exports, {
    assign: () => assign2,
    colors: () => colors,
    createStringInterpolator: () => createStringInterpolator,
    skipAnimation: () => skipAnimation,
    to: () => to,
    willAdvance: () => willAdvance
  });
  function noop7() {
  }
  var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, { value, writable: true, configurable: true });
  var is = {
    arr: Array.isArray,
    obj: (a2) => !!a2 && a2.constructor.name === "Object",
    fun: (a2) => typeof a2 === "function",
    str: (a2) => typeof a2 === "string",
    num: (a2) => typeof a2 === "number",
    und: (a2) => a2 === void 0
  };
  function isEqual(a2, b2) {
    if (is.arr(a2)) {
      if (!is.arr(b2) || a2.length !== b2.length)
        return false;
      for (let i3 = 0; i3 < a2.length; i3++) {
        if (a2[i3] !== b2[i3])
          return false;
      }
      return true;
    }
    return a2 === b2;
  }
  var each = (obj, fn) => obj.forEach(fn);
  function eachProp(obj, fn, ctx14) {
    if (is.arr(obj)) {
      for (let i3 = 0; i3 < obj.length; i3++) {
        fn.call(ctx14, obj[i3], `${i3}`);
      }
      return;
    }
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        fn.call(ctx14, obj[key], key);
      }
    }
  }
  var toArray2 = (a2) => is.und(a2) ? [] : is.arr(a2) ? a2 : [a2];
  function flush2(queue, iterator) {
    if (queue.size) {
      const items = Array.from(queue);
      queue.clear();
      each(items, iterator);
    }
  }
  var flushCalls = (queue, ...args) => flush2(queue, (fn) => fn(...args));
  var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
  var createStringInterpolator;
  var to;
  var colors = null;
  var skipAnimation = false;
  var willAdvance = noop7;
  var assign2 = (globals) => {
    if (globals.to)
      to = globals.to;
    if (globals.now)
      raf.now = globals.now;
    if (globals.colors !== void 0)
      colors = globals.colors;
    if (globals.skipAnimation != null)
      skipAnimation = globals.skipAnimation;
    if (globals.createStringInterpolator)
      createStringInterpolator = globals.createStringInterpolator;
    if (globals.requestAnimationFrame)
      raf.use(globals.requestAnimationFrame);
    if (globals.batchedUpdates)
      raf.batchedUpdates = globals.batchedUpdates;
    if (globals.willAdvance)
      willAdvance = globals.willAdvance;
    if (globals.frameLoop)
      raf.frameLoop = globals.frameLoop;
  };
  var startQueue = /* @__PURE__ */ new Set();
  var currentFrame = [];
  var prevFrame = [];
  var priority = 0;
  var frameLoop = {
    get idle() {
      return !startQueue.size && !currentFrame.length;
    },
    /** Advance the given animation on every frame until idle. */
    start(animation) {
      if (priority > animation.priority) {
        startQueue.add(animation);
        raf.onStart(flushStartQueue);
      } else {
        startSafely(animation);
        raf(advance);
      }
    },
    /** Advance all animations by the given time. */
    advance,
    /** Call this when an animation's priority changes. */
    sort(animation) {
      if (priority) {
        raf.onFrame(() => frameLoop.sort(animation));
      } else {
        const prevIndex = currentFrame.indexOf(animation);
        if (~prevIndex) {
          currentFrame.splice(prevIndex, 1);
          startUnsafely(animation);
        }
      }
    },
    /**
     * Clear all animations. For testing purposes.
     *
     * ☠️ Never call this from within the frameloop.
     */
    clear() {
      currentFrame = [];
      startQueue.clear();
    }
  };
  function flushStartQueue() {
    startQueue.forEach(startSafely);
    startQueue.clear();
    raf(advance);
  }
  function startSafely(animation) {
    if (!currentFrame.includes(animation))
      startUnsafely(animation);
  }
  function startUnsafely(animation) {
    currentFrame.splice(
      findIndex(currentFrame, (other) => other.priority > animation.priority),
      0,
      animation
    );
  }
  function advance(dt) {
    const nextFrame = prevFrame;
    for (let i3 = 0; i3 < currentFrame.length; i3++) {
      const animation = currentFrame[i3];
      priority = animation.priority;
      if (!animation.idle) {
        willAdvance(animation);
        animation.advance(dt);
        if (!animation.idle) {
          nextFrame.push(animation);
        }
      }
    }
    priority = 0;
    prevFrame = currentFrame;
    prevFrame.length = 0;
    currentFrame = nextFrame;
    return currentFrame.length > 0;
  }
  function findIndex(arr, test2) {
    const index2 = arr.findIndex(test2);
    return index2 < 0 ? arr.length : index2;
  }
  var clamp3 = (min2, max2, v2) => Math.min(Math.max(v2, min2), max2);
  var colors2 = {
    transparent: 0,
    aliceblue: 4042850303,
    antiquewhite: 4209760255,
    aqua: 16777215,
    aquamarine: 2147472639,
    azure: 4043309055,
    beige: 4126530815,
    bisque: 4293182719,
    black: 255,
    blanchedalmond: 4293643775,
    blue: 65535,
    blueviolet: 2318131967,
    brown: 2771004159,
    burlywood: 3736635391,
    burntsienna: 3934150143,
    cadetblue: 1604231423,
    chartreuse: 2147418367,
    chocolate: 3530104575,
    coral: 4286533887,
    cornflowerblue: 1687547391,
    cornsilk: 4294499583,
    crimson: 3692313855,
    cyan: 16777215,
    darkblue: 35839,
    darkcyan: 9145343,
    darkgoldenrod: 3095792639,
    darkgray: 2846468607,
    darkgreen: 6553855,
    darkgrey: 2846468607,
    darkkhaki: 3182914559,
    darkmagenta: 2332068863,
    darkolivegreen: 1433087999,
    darkorange: 4287365375,
    darkorchid: 2570243327,
    darkred: 2332033279,
    darksalmon: 3918953215,
    darkseagreen: 2411499519,
    darkslateblue: 1211993087,
    darkslategray: 793726975,
    darkslategrey: 793726975,
    darkturquoise: 13554175,
    darkviolet: 2483082239,
    deeppink: 4279538687,
    deepskyblue: 12582911,
    dimgray: 1768516095,
    dimgrey: 1768516095,
    dodgerblue: 512819199,
    firebrick: 2988581631,
    floralwhite: 4294635775,
    forestgreen: 579543807,
    fuchsia: 4278255615,
    gainsboro: 3705462015,
    ghostwhite: 4177068031,
    gold: 4292280575,
    goldenrod: 3668254975,
    gray: 2155905279,
    green: 8388863,
    greenyellow: 2919182335,
    grey: 2155905279,
    honeydew: 4043305215,
    hotpink: 4285117695,
    indianred: 3445382399,
    indigo: 1258324735,
    ivory: 4294963455,
    khaki: 4041641215,
    lavender: 3873897215,
    lavenderblush: 4293981695,
    lawngreen: 2096890111,
    lemonchiffon: 4294626815,
    lightblue: 2916673279,
    lightcoral: 4034953471,
    lightcyan: 3774873599,
    lightgoldenrodyellow: 4210742015,
    lightgray: 3553874943,
    lightgreen: 2431553791,
    lightgrey: 3553874943,
    lightpink: 4290167295,
    lightsalmon: 4288707327,
    lightseagreen: 548580095,
    lightskyblue: 2278488831,
    lightslategray: 2005441023,
    lightslategrey: 2005441023,
    lightsteelblue: 2965692159,
    lightyellow: 4294959359,
    lime: 16711935,
    limegreen: 852308735,
    linen: 4210091775,
    magenta: 4278255615,
    maroon: 2147483903,
    mediumaquamarine: 1724754687,
    mediumblue: 52735,
    mediumorchid: 3126187007,
    mediumpurple: 2473647103,
    mediumseagreen: 1018393087,
    mediumslateblue: 2070474495,
    mediumspringgreen: 16423679,
    mediumturquoise: 1221709055,
    mediumvioletred: 3340076543,
    midnightblue: 421097727,
    mintcream: 4127193855,
    mistyrose: 4293190143,
    moccasin: 4293178879,
    navajowhite: 4292783615,
    navy: 33023,
    oldlace: 4260751103,
    olive: 2155872511,
    olivedrab: 1804477439,
    orange: 4289003775,
    orangered: 4282712319,
    orchid: 3664828159,
    palegoldenrod: 4008225535,
    palegreen: 2566625535,
    paleturquoise: 2951671551,
    palevioletred: 3681588223,
    papayawhip: 4293907967,
    peachpuff: 4292524543,
    peru: 3448061951,
    pink: 4290825215,
    plum: 3718307327,
    powderblue: 2967529215,
    purple: 2147516671,
    rebeccapurple: 1714657791,
    red: 4278190335,
    rosybrown: 3163525119,
    royalblue: 1097458175,
    saddlebrown: 2336560127,
    salmon: 4202722047,
    sandybrown: 4104413439,
    seagreen: 780883967,
    seashell: 4294307583,
    sienna: 2689740287,
    silver: 3233857791,
    skyblue: 2278484991,
    slateblue: 1784335871,
    slategray: 1887473919,
    slategrey: 1887473919,
    snow: 4294638335,
    springgreen: 16744447,
    steelblue: 1182971135,
    tan: 3535047935,
    teal: 8421631,
    thistle: 3636451583,
    tomato: 4284696575,
    turquoise: 1088475391,
    violet: 4001558271,
    wheat: 4125012991,
    white: 4294967295,
    whitesmoke: 4126537215,
    yellow: 4294902015,
    yellowgreen: 2597139199
  };
  var NUMBER = "[-+]?\\d*\\.?\\d+";
  var PERCENTAGE = NUMBER + "%";
  function call(...parts) {
    return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
  }
  var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
  var rgba2 = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
  var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
  var hsla2 = new RegExp(
    "hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)
  );
  var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
  var hex6 = /^#([0-9a-fA-F]{6})$/;
  var hex8 = /^#([0-9a-fA-F]{8})$/;
  function normalizeColor(color2) {
    let match2;
    if (typeof color2 === "number") {
      return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
    }
    if (match2 = hex6.exec(color2))
      return parseInt(match2[1] + "ff", 16) >>> 0;
    if (colors && colors[color2] !== void 0) {
      return colors[color2];
    }
    if (match2 = rgb.exec(color2)) {
      return (parse255(match2[1]) << 24 | // r
      parse255(match2[2]) << 16 | // g
      parse255(match2[3]) << 8 | // b
      255) >>> // a
      0;
    }
    if (match2 = rgba2.exec(color2)) {
      return (parse255(match2[1]) << 24 | // r
      parse255(match2[2]) << 16 | // g
      parse255(match2[3]) << 8 | // b
      parse1(match2[4])) >>> // a
      0;
    }
    if (match2 = hex3.exec(color2)) {
      return parseInt(
        match2[1] + match2[1] + // r
        match2[2] + match2[2] + // g
        match2[3] + match2[3] + // b
        "ff",
        // a
        16
      ) >>> 0;
    }
    if (match2 = hex8.exec(color2))
      return parseInt(match2[1], 16) >>> 0;
    if (match2 = hex4.exec(color2)) {
      return parseInt(
        match2[1] + match2[1] + // r
        match2[2] + match2[2] + // g
        match2[3] + match2[3] + // b
        match2[4] + match2[4],
        // a
        16
      ) >>> 0;
    }
    if (match2 = hsl.exec(color2)) {
      return (hslToRgb(
        parse360(match2[1]),
        // h
        parsePercentage(match2[2]),
        // s
        parsePercentage(match2[3])
        // l
      ) | 255) >>> // a
      0;
    }
    if (match2 = hsla2.exec(color2)) {
      return (hslToRgb(
        parse360(match2[1]),
        // h
        parsePercentage(match2[2]),
        // s
        parsePercentage(match2[3])
        // l
      ) | parse1(match2[4])) >>> // a
      0;
    }
    return null;
  }
  function hue2rgb(p2, q, t4) {
    if (t4 < 0)
      t4 += 1;
    if (t4 > 1)
      t4 -= 1;
    if (t4 < 1 / 6)
      return p2 + (q - p2) * 6 * t4;
    if (t4 < 1 / 2)
      return q;
    if (t4 < 2 / 3)
      return p2 + (q - p2) * (2 / 3 - t4) * 6;
    return p2;
  }
  function hslToRgb(h2, s2, l2) {
    const q = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
    const p2 = 2 * l2 - q;
    const r4 = hue2rgb(p2, q, h2 + 1 / 3);
    const g2 = hue2rgb(p2, q, h2);
    const b2 = hue2rgb(p2, q, h2 - 1 / 3);
    return Math.round(r4 * 255) << 24 | Math.round(g2 * 255) << 16 | Math.round(b2 * 255) << 8;
  }
  function parse255(str) {
    const int2 = parseInt(str, 10);
    if (int2 < 0)
      return 0;
    if (int2 > 255)
      return 255;
    return int2;
  }
  function parse360(str) {
    const int2 = parseFloat(str);
    return (int2 % 360 + 360) % 360 / 360;
  }
  function parse1(str) {
    const num = parseFloat(str);
    if (num < 0)
      return 0;
    if (num > 1)
      return 255;
    return Math.round(num * 255);
  }
  function parsePercentage(str) {
    const int2 = parseFloat(str);
    if (int2 < 0)
      return 0;
    if (int2 > 100)
      return 1;
    return int2 / 100;
  }
  function colorToRgba(input) {
    let int32Color = normalizeColor(input);
    if (int32Color === null)
      return input;
    int32Color = int32Color || 0;
    const r4 = (int32Color & 4278190080) >>> 24;
    const g2 = (int32Color & 16711680) >>> 16;
    const b2 = (int32Color & 65280) >>> 8;
    const a2 = (int32Color & 255) / 255;
    return `rgba(${r4}, ${g2}, ${b2}, ${a2})`;
  }
  var createInterpolator = (range, output2, extrapolate) => {
    if (is.fun(range)) {
      return range;
    }
    if (is.arr(range)) {
      return createInterpolator({
        range,
        output: output2,
        extrapolate
      });
    }
    if (is.str(range.output[0])) {
      return createStringInterpolator(range);
    }
    const config2 = range;
    const outputRange = config2.output;
    const inputRange = config2.range || [0, 1];
    const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
    const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
    const easing = config2.easing || ((t4) => t4);
    return (input) => {
      const range2 = findRange(input, inputRange);
      return interpolate2(
        input,
        inputRange[range2],
        inputRange[range2 + 1],
        outputRange[range2],
        outputRange[range2 + 1],
        easing,
        extrapolateLeft,
        extrapolateRight,
        config2.map
      );
    };
  };
  function interpolate2(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
    let result = map ? map(input) : input;
    if (result < inputMin) {
      if (extrapolateLeft === "identity")
        return result;
      else if (extrapolateLeft === "clamp")
        result = inputMin;
    }
    if (result > inputMax) {
      if (extrapolateRight === "identity")
        return result;
      else if (extrapolateRight === "clamp")
        result = inputMax;
    }
    if (outputMin === outputMax)
      return outputMin;
    if (inputMin === inputMax)
      return input <= inputMin ? outputMin : outputMax;
    if (inputMin === -Infinity)
      result = -result;
    else if (inputMax === Infinity)
      result = result - inputMin;
    else
      result = (result - inputMin) / (inputMax - inputMin);
    result = easing(result);
    if (outputMin === -Infinity)
      result = -result;
    else if (outputMax === Infinity)
      result = result + outputMin;
    else
      result = result * (outputMax - outputMin) + outputMin;
    return result;
  }
  function findRange(input, inputRange) {
    for (var i3 = 1; i3 < inputRange.length - 1; ++i3)
      if (inputRange[i3] >= input)
        break;
    return i3 - 1;
  }
  var steps = (steps2, direction = "end") => (progress2) => {
    progress2 = direction === "end" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);
    const expanded = progress2 * steps2;
    const rounded = direction === "end" ? Math.floor(expanded) : Math.ceil(expanded);
    return clamp3(0, 1, rounded / steps2);
  };
  var c1 = 1.70158;
  var c2 = c1 * 1.525;
  var c3 = c1 + 1;
  var c4 = 2 * Math.PI / 3;
  var c5 = 2 * Math.PI / 4.5;
  var bounceOut = (x2) => {
    const n1 = 7.5625;
    const d1 = 2.75;
    if (x2 < 1 / d1) {
      return n1 * x2 * x2;
    } else if (x2 < 2 / d1) {
      return n1 * (x2 -= 1.5 / d1) * x2 + 0.75;
    } else if (x2 < 2.5 / d1) {
      return n1 * (x2 -= 2.25 / d1) * x2 + 0.9375;
    } else {
      return n1 * (x2 -= 2.625 / d1) * x2 + 0.984375;
    }
  };
  var easings = {
    linear: (x2) => x2,
    easeInQuad: (x2) => x2 * x2,
    easeOutQuad: (x2) => 1 - (1 - x2) * (1 - x2),
    easeInOutQuad: (x2) => x2 < 0.5 ? 2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 2) / 2,
    easeInCubic: (x2) => x2 * x2 * x2,
    easeOutCubic: (x2) => 1 - Math.pow(1 - x2, 3),
    easeInOutCubic: (x2) => x2 < 0.5 ? 4 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 3) / 2,
    easeInQuart: (x2) => x2 * x2 * x2 * x2,
    easeOutQuart: (x2) => 1 - Math.pow(1 - x2, 4),
    easeInOutQuart: (x2) => x2 < 0.5 ? 8 * x2 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 4) / 2,
    easeInQuint: (x2) => x2 * x2 * x2 * x2 * x2,
    easeOutQuint: (x2) => 1 - Math.pow(1 - x2, 5),
    easeInOutQuint: (x2) => x2 < 0.5 ? 16 * x2 * x2 * x2 * x2 * x2 : 1 - Math.pow(-2 * x2 + 2, 5) / 2,
    easeInSine: (x2) => 1 - Math.cos(x2 * Math.PI / 2),
    easeOutSine: (x2) => Math.sin(x2 * Math.PI / 2),
    easeInOutSine: (x2) => -(Math.cos(Math.PI * x2) - 1) / 2,
    easeInExpo: (x2) => x2 === 0 ? 0 : Math.pow(2, 10 * x2 - 10),
    easeOutExpo: (x2) => x2 === 1 ? 1 : 1 - Math.pow(2, -10 * x2),
    easeInOutExpo: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : x2 < 0.5 ? Math.pow(2, 20 * x2 - 10) / 2 : (2 - Math.pow(2, -20 * x2 + 10)) / 2,
    easeInCirc: (x2) => 1 - Math.sqrt(1 - Math.pow(x2, 2)),
    easeOutCirc: (x2) => Math.sqrt(1 - Math.pow(x2 - 1, 2)),
    easeInOutCirc: (x2) => x2 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x2, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x2 + 2, 2)) + 1) / 2,
    easeInBack: (x2) => c3 * x2 * x2 * x2 - c1 * x2 * x2,
    easeOutBack: (x2) => 1 + c3 * Math.pow(x2 - 1, 3) + c1 * Math.pow(x2 - 1, 2),
    easeInOutBack: (x2) => x2 < 0.5 ? Math.pow(2 * x2, 2) * ((c2 + 1) * 2 * x2 - c2) / 2 : (Math.pow(2 * x2 - 2, 2) * ((c2 + 1) * (x2 * 2 - 2) + c2) + 2) / 2,
    easeInElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : -Math.pow(2, 10 * x2 - 10) * Math.sin((x2 * 10 - 10.75) * c4),
    easeOutElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : Math.pow(2, -10 * x2) * Math.sin((x2 * 10 - 0.75) * c4) + 1,
    easeInOutElastic: (x2) => x2 === 0 ? 0 : x2 === 1 ? 1 : x2 < 0.5 ? -(Math.pow(2, 20 * x2 - 10) * Math.sin((20 * x2 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x2 + 10) * Math.sin((20 * x2 - 11.125) * c5) / 2 + 1,
    easeInBounce: (x2) => 1 - bounceOut(1 - x2),
    easeOutBounce: bounceOut,
    easeInOutBounce: (x2) => x2 < 0.5 ? (1 - bounceOut(1 - 2 * x2)) / 2 : (1 + bounceOut(2 * x2 - 1)) / 2,
    steps
  };
  var $get = Symbol.for("FluidValue.get");
  var $observers = Symbol.for("FluidValue.observers");
  var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
  var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
  var getFluidObservers = (target) => target[$observers] || null;
  function callFluidObserver(observer2, event) {
    if (observer2.eventObserved) {
      observer2.eventObserved(event);
    } else {
      observer2(event);
    }
  }
  function callFluidObservers(target, event) {
    const observers2 = target[$observers];
    if (observers2) {
      observers2.forEach((observer2) => {
        callFluidObserver(observer2, event);
      });
    }
  }
  var FluidValue = class {
    constructor(get) {
      if (!get && !(get = this.get)) {
        throw Error("Unknown getter");
      }
      setFluidGetter(this, get);
    }
  };
  var setFluidGetter = (target, get) => setHidden(target, $get, get);
  function addFluidObserver(target, observer2) {
    if (target[$get]) {
      let observers2 = target[$observers];
      if (!observers2) {
        setHidden(target, $observers, observers2 = /* @__PURE__ */ new Set());
      }
      if (!observers2.has(observer2)) {
        observers2.add(observer2);
        if (target.observerAdded) {
          target.observerAdded(observers2.size, observer2);
        }
      }
    }
    return observer2;
  }
  function removeFluidObserver(target, observer2) {
    const observers2 = target[$observers];
    if (observers2 && observers2.has(observer2)) {
      const count = observers2.size - 1;
      if (count) {
        observers2.delete(observer2);
      } else {
        target[$observers] = null;
      }
      if (target.observerRemoved) {
        target.observerRemoved(count, observer2);
      }
    }
  }
  var setHidden = (target, key, value) => Object.defineProperty(target, key, {
    value,
    writable: true,
    configurable: true
  });
  var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var colorRegex2 = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
  var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
  var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
  var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
  var variableToRgba = (input) => {
    const [token2, fallback] = parseCSSVariable2(input);
    if (!token2 || isSSR()) {
      return input;
    }
    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token2);
    if (value) {
      return value.trim();
    } else if (fallback && fallback.startsWith("--")) {
      const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
      if (value2) {
        return value2;
      } else {
        return input;
      }
    } else if (fallback && cssVariableRegex.test(fallback)) {
      return variableToRgba(fallback);
    } else if (fallback) {
      return fallback;
    }
    return input;
  };
  var parseCSSVariable2 = (current) => {
    const match2 = cssVariableRegex.exec(current);
    if (!match2)
      return [,];
    const [, token2, fallback] = match2;
    return [token2, fallback];
  };
  var namedColorRegex;
  var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
  var createStringInterpolator2 = (config2) => {
    if (!namedColorRegex)
      namedColorRegex = colors ? (
        // match color names, ignore partial matches
        new RegExp(`(${Object.keys(colors).join("|")})(?!\\w)`, "g")
      ) : (
        // never match
        /^\b$/
      );
    const output2 = config2.output.map((value) => {
      return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex2, colorToRgba).replace(namedColorRegex, colorToRgba);
    });
    const keyframes4 = output2.map((value) => value.match(numberRegex).map(Number));
    const outputRanges = keyframes4[0].map(
      (_, i3) => keyframes4.map((values) => {
        if (!(i3 in values)) {
          throw Error('The arity of each "output" value must be equal');
        }
        return values[i3];
      })
    );
    const interpolators = outputRanges.map(
      (output22) => createInterpolator({ ...config2, output: output22 })
    );
    return (input) => {
      const missingUnit = !unitRegex.test(output2[0]) && output2.find((value) => unitRegex.test(value))?.replace(numberRegex, "");
      let i3 = 0;
      return output2[0].replace(
        numberRegex,
        () => `${interpolators[i3++](input)}${missingUnit || ""}`
      ).replace(rgbaRegex, rgbaRound);
    };
  };
  var prefix2 = "react-spring: ";
  var once = (fn) => {
    const func = fn;
    let called = false;
    if (typeof func != "function") {
      throw new TypeError(`${prefix2}once requires a function parameter`);
    }
    return (...args) => {
      if (!called) {
        func(...args);
        called = true;
      }
    };
  };
  var warnInterpolate = once(console.warn);
  function deprecateInterpolate() {
    warnInterpolate(
      `${prefix2}The "interpolate" function is deprecated in v9 (use "to" instead)`
    );
  }
  var warnDirectCall = once(console.warn);
  function isAnimatedString(value) {
    return is.str(value) && (value[0] == "#" || /\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR
    !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));
  }
  var useIsomorphicLayoutEffect3 = isSSR() ? import_react95.useEffect : import_react95.useLayoutEffect;
  var useIsMounted = () => {
    const isMounted = (0, import_react94.useRef)(false);
    useIsomorphicLayoutEffect3(() => {
      isMounted.current = true;
      return () => {
        isMounted.current = false;
      };
    }, []);
    return isMounted;
  };
  function useForceUpdate3() {
    const update3 = (0, import_react93.useState)()[1];
    const isMounted = useIsMounted();
    return () => {
      if (isMounted.current) {
        update3(Math.random());
      }
    };
  }
  function useMemoOne2(getResult, inputs) {
    const [initial] = (0, import_react96.useState)(
      () => ({
        inputs,
        result: getResult()
      })
    );
    const committed = (0, import_react96.useRef)();
    const prevCache = committed.current;
    let cache3 = prevCache;
    if (cache3) {
      const useCache = Boolean(
        inputs && cache3.inputs && areInputsEqual2(inputs, cache3.inputs)
      );
      if (!useCache) {
        cache3 = {
          inputs,
          result: getResult()
        };
      }
    } else {
      cache3 = initial;
    }
    (0, import_react96.useEffect)(() => {
      committed.current = cache3;
      if (prevCache == initial) {
        initial.inputs = initial.result = void 0;
      }
    }, [cache3]);
    return cache3.result;
  }
  function areInputsEqual2(next3, prev2) {
    if (next3.length !== prev2.length) {
      return false;
    }
    for (let i3 = 0; i3 < next3.length; i3++) {
      if (next3[i3] !== prev2[i3]) {
        return false;
      }
    }
    return true;
  }
  var useOnce = (effect) => (0, import_react97.useEffect)(effect, emptyDeps);
  var emptyDeps = [];

  // node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
  var import_react101 = __toESM(require_react(), 1);

  // node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs
  var React10 = __toESM(require_react(), 1);
  var import_react100 = __toESM(require_react(), 1);
  var $node = Symbol.for("Animated:node");
  var isAnimated = (value) => !!value && value[$node] === value;
  var getAnimated = (owner) => owner && owner[$node];
  var setAnimated = (owner, node2) => defineHidden(owner, $node, node2);
  var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
  var Animated = class {
    constructor() {
      setAnimated(this, this);
    }
    /** Get every `AnimatedValue` used by this node. */
    getPayload() {
      return this.payload || [];
    }
  };
  var AnimatedValue = class extends Animated {
    constructor(_value) {
      super();
      this._value = _value;
      this.done = true;
      this.durationProgress = 0;
      if (is.num(this._value)) {
        this.lastPosition = this._value;
      }
    }
    /** @internal */
    static create(value) {
      return new AnimatedValue(value);
    }
    getPayload() {
      return [this];
    }
    getValue() {
      return this._value;
    }
    setValue(value, step) {
      if (is.num(value)) {
        this.lastPosition = value;
        if (step) {
          value = Math.round(value / step) * step;
          if (this.done) {
            this.lastPosition = value;
          }
        }
      }
      if (this._value === value) {
        return false;
      }
      this._value = value;
      return true;
    }
    reset() {
      const { done } = this;
      this.done = false;
      if (is.num(this._value)) {
        this.elapsedTime = 0;
        this.durationProgress = 0;
        this.lastPosition = this._value;
        if (done)
          this.lastVelocity = null;
        this.v0 = null;
      }
    }
  };
  var AnimatedString = class extends AnimatedValue {
    constructor(value) {
      super(0);
      this._string = null;
      this._toString = createInterpolator({
        output: [value, value]
      });
    }
    /** @internal */
    static create(value) {
      return new AnimatedString(value);
    }
    getValue() {
      const value = this._string;
      return value == null ? this._string = this._toString(this._value) : value;
    }
    setValue(value) {
      if (is.str(value)) {
        if (value == this._string) {
          return false;
        }
        this._string = value;
        this._value = 1;
      } else if (super.setValue(value)) {
        this._string = null;
      } else {
        return false;
      }
      return true;
    }
    reset(goal) {
      if (goal) {
        this._toString = createInterpolator({
          output: [this.getValue(), goal]
        });
      }
      this._value = 0;
      super.reset();
    }
  };
  var TreeContext = { dependencies: null };
  var AnimatedObject = class extends Animated {
    constructor(source) {
      super();
      this.source = source;
      this.setValue(source);
    }
    getValue(animated2) {
      const values = {};
      eachProp(this.source, (source, key) => {
        if (isAnimated(source)) {
          values[key] = source.getValue(animated2);
        } else if (hasFluidValue(source)) {
          values[key] = getFluidValue(source);
        } else if (!animated2) {
          values[key] = source;
        }
      });
      return values;
    }
    /** Replace the raw object data */
    setValue(source) {
      this.source = source;
      this.payload = this._makePayload(source);
    }
    reset() {
      if (this.payload) {
        each(this.payload, (node2) => node2.reset());
      }
    }
    /** Create a payload set. */
    _makePayload(source) {
      if (source) {
        const payload = /* @__PURE__ */ new Set();
        eachProp(source, this._addToPayload, payload);
        return Array.from(payload);
      }
    }
    /** Add to a payload set. */
    _addToPayload(source) {
      if (TreeContext.dependencies && hasFluidValue(source)) {
        TreeContext.dependencies.add(source);
      }
      const payload = getPayload(source);
      if (payload) {
        each(payload, (node2) => this.add(node2));
      }
    }
  };
  var AnimatedArray = class extends AnimatedObject {
    constructor(source) {
      super(source);
    }
    /** @internal */
    static create(source) {
      return new AnimatedArray(source);
    }
    getValue() {
      return this.source.map((node2) => node2.getValue());
    }
    setValue(source) {
      const payload = this.getPayload();
      if (source.length == payload.length) {
        return payload.map((node2, i3) => node2.setValue(source[i3])).some(Boolean);
      }
      super.setValue(source.map(makeAnimated));
      return true;
    }
  };
  function makeAnimated(value) {
    const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
    return nodeType.create(value);
  }
  function getAnimatedType(value) {
    const parentNode = getAnimated(value);
    return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
  }
  var withAnimated = (Component4, host2) => {
    const hasInstance = (
      // Function components must use "forwardRef" to avoid being
      // re-rendered on every animation frame.
      !is.fun(Component4) || Component4.prototype && Component4.prototype.isReactComponent
    );
    return (0, import_react100.forwardRef)((givenProps, givenRef) => {
      const instanceRef = (0, import_react100.useRef)(null);
      const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks
      (0, import_react100.useCallback)(
        (value) => {
          instanceRef.current = updateRef(givenRef, value);
        },
        [givenRef]
      );
      const [props, deps] = getAnimatedState(givenProps, host2);
      const forceUpdate = useForceUpdate3();
      const callback = () => {
        const instance = instanceRef.current;
        if (hasInstance && !instance) {
          return;
        }
        const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
        if (didUpdate === false) {
          forceUpdate();
        }
      };
      const observer = new PropsObserver(callback, deps);
      const observerRef = (0, import_react100.useRef)();
      useIsomorphicLayoutEffect3(() => {
        observerRef.current = observer;
        each(deps, (dep) => addFluidObserver(dep, observer));
        return () => {
          if (observerRef.current) {
            each(
              observerRef.current.deps,
              (dep) => removeFluidObserver(dep, observerRef.current)
            );
            raf.cancel(observerRef.current.update);
          }
        };
      });
      (0, import_react100.useEffect)(callback, []);
      useOnce(() => () => {
        const observer2 = observerRef.current;
        each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
      });
      const usedProps = host2.getComponentProps(props.getValue());
      return /* @__PURE__ */ React10.createElement(Component4, { ...usedProps, ref });
    });
  };
  var PropsObserver = class {
    constructor(update3, deps) {
      this.update = update3;
      this.deps = deps;
    }
    eventObserved(event) {
      if (event.type == "change") {
        raf.write(this.update);
      }
    }
  };
  function getAnimatedState(props, host2) {
    const dependencies = /* @__PURE__ */ new Set();
    TreeContext.dependencies = dependencies;
    if (props.style)
      props = {
        ...props,
        style: host2.createAnimatedStyle(props.style)
      };
    props = new AnimatedObject(props);
    TreeContext.dependencies = null;
    return [props, dependencies];
  }
  function updateRef(ref, value) {
    if (ref) {
      if (is.fun(ref))
        ref(value);
      else
        ref.current = value;
    }
    return value;
  }
  var cacheKey = Symbol.for("AnimatedComponent");
  var createHost = (components, {
    applyAnimatedValues: applyAnimatedValues2 = () => false,
    createAnimatedStyle = (style) => new AnimatedObject(style),
    getComponentProps = (props) => props
  } = {}) => {
    const hostConfig = {
      applyAnimatedValues: applyAnimatedValues2,
      createAnimatedStyle,
      getComponentProps
    };
    const animated2 = (Component4) => {
      const displayName = getDisplayName(Component4) || "Anonymous";
      if (is.str(Component4)) {
        Component4 = animated2[Component4] || (animated2[Component4] = withAnimated(Component4, hostConfig));
      } else {
        Component4 = Component4[cacheKey] || (Component4[cacheKey] = withAnimated(Component4, hostConfig));
      }
      Component4.displayName = `Animated(${displayName})`;
      return Component4;
    };
    eachProp(components, (Component4, key) => {
      if (is.arr(components)) {
        key = getDisplayName(Component4);
      }
      animated2[key] = animated2(Component4);
    });
    return {
      animated: animated2
    };
  };
  var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

  // node_modules/@react-spring/core/dist/react-spring_core.modern.mjs
  var React11 = __toESM(require_react(), 1);
  var import_react102 = __toESM(require_react(), 1);
  var import_react103 = __toESM(require_react(), 1);
  var React22 = __toESM(require_react(), 1);
  var import_react104 = __toESM(require_react(), 1);
  var import_react105 = __toESM(require_react(), 1);
  function callProp(value, ...args) {
    return is.fun(value) ? value(...args) : value;
  }
  var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray2(value).includes(key)));
  var resolveProp = (prop2, key) => is.obj(prop2) ? key && prop2[key] : prop2;
  var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
  var noopTransform = (value) => value;
  var getDefaultProps = (props, transform = noopTransform) => {
    let keys = DEFAULT_PROPS;
    if (props.default && props.default !== true) {
      props = props.default;
      keys = Object.keys(props);
    }
    const defaults2 = {};
    for (const key of keys) {
      const value = transform(props[key], key);
      if (!is.und(value)) {
        defaults2[key] = value;
      }
    }
    return defaults2;
  };
  var DEFAULT_PROPS = [
    "config",
    "onProps",
    "onStart",
    "onChange",
    "onPause",
    "onResume",
    "onRest"
  ];
  var RESERVED_PROPS = {
    config: 1,
    from: 1,
    to: 1,
    ref: 1,
    loop: 1,
    reset: 1,
    pause: 1,
    cancel: 1,
    reverse: 1,
    immediate: 1,
    default: 1,
    delay: 1,
    onProps: 1,
    onStart: 1,
    onChange: 1,
    onPause: 1,
    onResume: 1,
    onRest: 1,
    onResolve: 1,
    // Transition props
    items: 1,
    trail: 1,
    sort: 1,
    expires: 1,
    initial: 1,
    enter: 1,
    update: 1,
    leave: 1,
    children: 1,
    onDestroyed: 1,
    // Internal props
    keys: 1,
    callId: 1,
    parentId: 1
  };
  function getForwardProps(props) {
    const forward = {};
    let count = 0;
    eachProp(props, (value, prop2) => {
      if (!RESERVED_PROPS[prop2]) {
        forward[prop2] = value;
        count++;
      }
    });
    if (count) {
      return forward;
    }
  }
  function inferTo(props) {
    const to2 = getForwardProps(props);
    if (to2) {
      const out = { to: to2 };
      eachProp(props, (val, key) => key in to2 || (out[key] = val));
      return out;
    }
    return { ...props };
  }
  function computeGoal(value) {
    value = getFluidValue(value);
    return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals_exports.createStringInterpolator({
      range: [0, 1],
      output: [value, value]
    })(1) : value;
  }
  function isAsyncTo(to2) {
    return is.fun(to2) || is.arr(to2) && is.obj(to2[0]);
  }
  var config = {
    default: { tension: 170, friction: 26 },
    gentle: { tension: 120, friction: 14 },
    wobbly: { tension: 180, friction: 12 },
    stiff: { tension: 210, friction: 20 },
    slow: { tension: 280, friction: 60 },
    molasses: { tension: 280, friction: 120 }
  };
  var defaults = {
    ...config.default,
    mass: 1,
    damping: 1,
    easing: easings.linear,
    clamp: false
  };
  var AnimationConfig = class {
    constructor() {
      this.velocity = 0;
      Object.assign(this, defaults);
    }
  };
  function mergeConfig(config2, newConfig, defaultConfig) {
    if (defaultConfig) {
      defaultConfig = { ...defaultConfig };
      sanitizeConfig(defaultConfig, newConfig);
      newConfig = { ...defaultConfig, ...newConfig };
    }
    sanitizeConfig(config2, newConfig);
    Object.assign(config2, newConfig);
    for (const key in defaults) {
      if (config2[key] == null) {
        config2[key] = defaults[key];
      }
    }
    let { frequency, damping } = config2;
    const { mass } = config2;
    if (!is.und(frequency)) {
      if (frequency < 0.01)
        frequency = 0.01;
      if (damping < 0)
        damping = 0;
      config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
      config2.friction = 4 * Math.PI * damping * mass / frequency;
    }
    return config2;
  }
  function sanitizeConfig(config2, props) {
    if (!is.und(props.decay)) {
      config2.duration = void 0;
    } else {
      const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
      if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
        config2.duration = void 0;
        config2.decay = void 0;
      }
      if (isTensionConfig) {
        config2.frequency = void 0;
      }
    }
  }
  var emptyArray = [];
  var Animation = class {
    constructor() {
      this.changed = false;
      this.values = emptyArray;
      this.toValues = null;
      this.fromValues = emptyArray;
      this.config = new AnimationConfig();
      this.immediate = false;
    }
  };
  function scheduleProps(callId, { key, props, defaultProps: defaultProps2, state, actions: actions2 }) {
    return new Promise((resolve, reject) => {
      let delay2;
      let timeout;
      let cancel = matchProp(props.cancel ?? defaultProps2?.cancel, key);
      if (cancel) {
        onStart();
      } else {
        if (!is.und(props.pause)) {
          state.paused = matchProp(props.pause, key);
        }
        let pause = defaultProps2?.pause;
        if (pause !== true) {
          pause = state.paused || matchProp(pause, key);
        }
        delay2 = callProp(props.delay || 0, key);
        if (pause) {
          state.resumeQueue.add(onResume);
          actions2.pause();
        } else {
          actions2.resume();
          onResume();
        }
      }
      function onPause() {
        state.resumeQueue.add(onResume);
        state.timeouts.delete(timeout);
        timeout.cancel();
        delay2 = timeout.time - raf.now();
      }
      function onResume() {
        if (delay2 > 0 && !globals_exports.skipAnimation) {
          state.delayed = true;
          timeout = raf.setTimeout(onStart, delay2);
          state.pauseQueue.add(onPause);
          state.timeouts.add(timeout);
        } else {
          onStart();
        }
      }
      function onStart() {
        if (state.delayed) {
          state.delayed = false;
        }
        state.pauseQueue.delete(onPause);
        state.timeouts.delete(timeout);
        if (callId <= (state.cancelId || 0)) {
          cancel = true;
        }
        try {
          actions2.start({ ...props, callId, cancel }, resolve);
        } catch (err) {
          reject(err);
        }
      }
    });
  }
  var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(
    target.get(),
    results.every((result) => result.finished)
  );
  var getNoopResult = (value) => ({
    value,
    noop: true,
    finished: true,
    cancelled: false
  });
  var getFinishedResult = (value, finished, cancelled = false) => ({
    value,
    finished,
    cancelled
  });
  var getCancelledResult = (value) => ({
    value,
    cancelled: true,
    finished: false
  });
  function runAsync(to2, props, state, target) {
    const { callId, parentId, onRest } = props;
    const { asyncTo: prevTo, promise: prevPromise } = state;
    if (!parentId && to2 === prevTo && !props.reset) {
      return prevPromise;
    }
    return state.promise = (async () => {
      state.asyncId = callId;
      state.asyncTo = to2;
      const defaultProps2 = getDefaultProps(
        props,
        (value, key) => (
          // The `onRest` prop is only called when the `runAsync` promise is resolved.
          key === "onRest" ? void 0 : value
        )
      );
      let preventBail;
      let bail;
      const bailPromise = new Promise(
        (resolve, reject) => (preventBail = resolve, bail = reject)
      );
      const bailIfEnded = (bailSignal) => {
        const bailResult = (
          // The `cancel` prop or `stop` method was used.
          callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.
          callId !== state.asyncId && getFinishedResult(target, false)
        );
        if (bailResult) {
          bailSignal.result = bailResult;
          bail(bailSignal);
          throw bailSignal;
        }
      };
      const animate = (arg1, arg2) => {
        const bailSignal = new BailSignal();
        const skipAnimationSignal = new SkipAnimationSignal();
        return (async () => {
          if (globals_exports.skipAnimation) {
            stopAsync(state);
            skipAnimationSignal.result = getFinishedResult(target, false);
            bail(skipAnimationSignal);
            throw skipAnimationSignal;
          }
          bailIfEnded(bailSignal);
          const props2 = is.obj(arg1) ? { ...arg1 } : { ...arg2, to: arg1 };
          props2.parentId = callId;
          eachProp(defaultProps2, (value, key) => {
            if (is.und(props2[key])) {
              props2[key] = value;
            }
          });
          const result2 = await target.start(props2);
          bailIfEnded(bailSignal);
          if (state.paused) {
            await new Promise((resume) => {
              state.resumeQueue.add(resume);
            });
          }
          return result2;
        })();
      };
      let result;
      if (globals_exports.skipAnimation) {
        stopAsync(state);
        return getFinishedResult(target, false);
      }
      try {
        let animating;
        if (is.arr(to2)) {
          animating = (async (queue) => {
            for (const props2 of queue) {
              await animate(props2);
            }
          })(to2);
        } else {
          animating = Promise.resolve(to2(animate, target.stop.bind(target)));
        }
        await Promise.all([animating.then(preventBail), bailPromise]);
        result = getFinishedResult(target.get(), true, false);
      } catch (err) {
        if (err instanceof BailSignal) {
          result = err.result;
        } else if (err instanceof SkipAnimationSignal) {
          result = err.result;
        } else {
          throw err;
        }
      } finally {
        if (callId == state.asyncId) {
          state.asyncId = parentId;
          state.asyncTo = parentId ? prevTo : void 0;
          state.promise = parentId ? prevPromise : void 0;
        }
      }
      if (is.fun(onRest)) {
        raf.batchedUpdates(() => {
          onRest(result, target, target.item);
        });
      }
      return result;
    })();
  }
  function stopAsync(state, cancelId) {
    flush2(state.timeouts, (t4) => t4.cancel());
    state.pauseQueue.clear();
    state.resumeQueue.clear();
    state.asyncId = state.asyncTo = state.promise = void 0;
    if (cancelId)
      state.cancelId = cancelId;
  }
  var BailSignal = class extends Error {
    constructor() {
      super(
        "An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise."
      );
    }
  };
  var SkipAnimationSignal = class extends Error {
    constructor() {
      super("SkipAnimationSignal");
    }
  };
  var isFrameValue = (value) => value instanceof FrameValue;
  var nextId = 1;
  var FrameValue = class extends FluidValue {
    constructor() {
      super(...arguments);
      this.id = nextId++;
      this._priority = 0;
    }
    get priority() {
      return this._priority;
    }
    set priority(priority2) {
      if (this._priority != priority2) {
        this._priority = priority2;
        this._onPriorityChange(priority2);
      }
    }
    /** Get the current value */
    get() {
      const node2 = getAnimated(this);
      return node2 && node2.getValue();
    }
    /** Create a spring that maps our value to another value */
    to(...args) {
      return globals_exports.to(this, args);
    }
    /** @deprecated Use the `to` method instead. */
    interpolate(...args) {
      deprecateInterpolate();
      return globals_exports.to(this, args);
    }
    toJSON() {
      return this.get();
    }
    observerAdded(count) {
      if (count == 1)
        this._attach();
    }
    observerRemoved(count) {
      if (count == 0)
        this._detach();
    }
    /** Called when the first child is added. */
    _attach() {
    }
    /** Called when the last child is removed. */
    _detach() {
    }
    /** Tell our children about our new value */
    _onChange(value, idle = false) {
      callFluidObservers(this, {
        type: "change",
        parent: this,
        value,
        idle
      });
    }
    /** Tell our children about our new priority */
    _onPriorityChange(priority2) {
      if (!this.idle) {
        frameLoop.sort(this);
      }
      callFluidObservers(this, {
        type: "priority",
        parent: this,
        priority: priority2
      });
    }
  };
  var $P = Symbol.for("SpringPhase");
  var HAS_ANIMATED = 1;
  var IS_ANIMATING = 2;
  var IS_PAUSED = 4;
  var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
  var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
  var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
  var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
  var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
  var SpringValue = class extends FrameValue {
    constructor(arg1, arg2) {
      super();
      this.animation = new Animation();
      this.defaultProps = {};
      this._state = {
        paused: false,
        delayed: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._pendingCalls = /* @__PURE__ */ new Set();
      this._lastCallId = 0;
      this._lastToId = 0;
      this._memoizedDuration = 0;
      if (!is.und(arg1) || !is.und(arg2)) {
        const props = is.obj(arg1) ? { ...arg1 } : { ...arg2, from: arg1 };
        if (is.und(props.default)) {
          props.default = true;
        }
        this.start(props);
      }
    }
    /** Equals true when not advancing on each frame. */
    get idle() {
      return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
    }
    get goal() {
      return getFluidValue(this.animation.to);
    }
    get velocity() {
      const node2 = getAnimated(this);
      return node2 instanceof AnimatedValue ? node2.lastVelocity || 0 : node2.getPayload().map((node22) => node22.lastVelocity || 0);
    }
    /**
     * When true, this value has been animated at least once.
     */
    get hasAnimated() {
      return hasAnimated(this);
    }
    /**
     * When true, this value has an unfinished animation,
     * which is either active or paused.
     */
    get isAnimating() {
      return isAnimating(this);
    }
    /**
     * When true, all current and future animations are paused.
     */
    get isPaused() {
      return isPaused(this);
    }
    /**
     *
     *
     */
    get isDelayed() {
      return this._state.delayed;
    }
    /** Advance the current animation by a number of milliseconds */
    advance(dt) {
      let idle = true;
      let changed = false;
      const anim = this.animation;
      let { toValues } = anim;
      const { config: config2 } = anim;
      const payload = getPayload(anim.to);
      if (!payload && hasFluidValue(anim.to)) {
        toValues = toArray2(getFluidValue(anim.to));
      }
      anim.values.forEach((node22, i3) => {
        if (node22.done)
          return;
        const to2 = (
          // Animated strings always go from 0 to 1.
          node22.constructor == AnimatedString ? 1 : payload ? payload[i3].lastPosition : toValues[i3]
        );
        let finished = anim.immediate;
        let position2 = to2;
        if (!finished) {
          position2 = node22.lastPosition;
          if (config2.tension <= 0) {
            node22.done = true;
            return;
          }
          let elapsed = node22.elapsedTime += dt;
          const from2 = anim.fromValues[i3];
          const v0 = node22.v0 != null ? node22.v0 : node22.v0 = is.arr(config2.velocity) ? config2.velocity[i3] : config2.velocity;
          let velocity;
          const precision = config2.precision || (from2 == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from2) * 1e-3));
          if (!is.und(config2.duration)) {
            let p2 = 1;
            if (config2.duration > 0) {
              if (this._memoizedDuration !== config2.duration) {
                this._memoizedDuration = config2.duration;
                if (node22.durationProgress > 0) {
                  node22.elapsedTime = config2.duration * node22.durationProgress;
                  elapsed = node22.elapsedTime += dt;
                }
              }
              p2 = (config2.progress || 0) + elapsed / this._memoizedDuration;
              p2 = p2 > 1 ? 1 : p2 < 0 ? 0 : p2;
              node22.durationProgress = p2;
            }
            position2 = from2 + config2.easing(p2) * (to2 - from2);
            velocity = (position2 - node22.lastPosition) / dt;
            finished = p2 == 1;
          } else if (config2.decay) {
            const decay = config2.decay === true ? 0.998 : config2.decay;
            const e3 = Math.exp(-(1 - decay) * elapsed);
            position2 = from2 + v0 / (1 - decay) * (1 - e3);
            finished = Math.abs(node22.lastPosition - position2) <= precision;
            velocity = v0 * e3;
          } else {
            velocity = node22.lastVelocity == null ? v0 : node22.lastVelocity;
            const restVelocity = config2.restVelocity || precision / 10;
            const bounceFactor = config2.clamp ? 0 : config2.bounce;
            const canBounce = !is.und(bounceFactor);
            const isGrowing = from2 == to2 ? node22.v0 > 0 : from2 < to2;
            let isMoving;
            let isBouncing = false;
            const step = 1;
            const numSteps = Math.ceil(dt / step);
            for (let n3 = 0; n3 < numSteps; ++n3) {
              isMoving = Math.abs(velocity) > restVelocity;
              if (!isMoving) {
                finished = Math.abs(to2 - position2) <= precision;
                if (finished) {
                  break;
                }
              }
              if (canBounce) {
                isBouncing = position2 == to2 || position2 > to2 == isGrowing;
                if (isBouncing) {
                  velocity = -velocity * bounceFactor;
                  position2 = to2;
                }
              }
              const springForce = -config2.tension * 1e-6 * (position2 - to2);
              const dampingForce = -config2.friction * 1e-3 * velocity;
              const acceleration = (springForce + dampingForce) / config2.mass;
              velocity = velocity + acceleration * step;
              position2 = position2 + velocity * step;
            }
          }
          node22.lastVelocity = velocity;
          if (Number.isNaN(position2)) {
            console.warn(`Got NaN while animating:`, this);
            finished = true;
          }
        }
        if (payload && !payload[i3].done) {
          finished = false;
        }
        if (finished) {
          node22.done = true;
        } else {
          idle = false;
        }
        if (node22.setValue(position2, config2.round)) {
          changed = true;
        }
      });
      const node2 = getAnimated(this);
      const currVal = node2.getValue();
      if (idle) {
        const finalVal = getFluidValue(anim.to);
        if ((currVal !== finalVal || changed) && !config2.decay) {
          node2.setValue(finalVal);
          this._onChange(finalVal);
        } else if (changed && config2.decay) {
          this._onChange(currVal);
        }
        this._stop();
      } else if (changed) {
        this._onChange(currVal);
      }
    }
    /** Set the current value, while stopping the current animation */
    set(value) {
      raf.batchedUpdates(() => {
        this._stop();
        this._focus(value);
        this._set(value);
      });
      return this;
    }
    /**
     * Freeze the active animation in time, as well as any updates merged
     * before `resume` is called.
     */
    pause() {
      this._update({ pause: true });
    }
    /** Resume the animation if paused. */
    resume() {
      this._update({ pause: false });
    }
    /** Skip to the end of the current animation. */
    finish() {
      if (isAnimating(this)) {
        const { to: to2, config: config2 } = this.animation;
        raf.batchedUpdates(() => {
          this._onStart();
          if (!config2.decay) {
            this._set(to2, false);
          }
          this._stop();
        });
      }
      return this;
    }
    /** Push props into the pending queue. */
    update(props) {
      const queue = this.queue || (this.queue = []);
      queue.push(props);
      return this;
    }
    start(to2, arg2) {
      let queue;
      if (!is.und(to2)) {
        queue = [is.obj(to2) ? to2 : { ...arg2, to: to2 }];
      } else {
        queue = this.queue || [];
        this.queue = [];
      }
      return Promise.all(
        queue.map((props) => {
          const up = this._update(props);
          return up;
        })
      ).then((results) => getCombinedResult(this, results));
    }
    /**
     * Stop the current animation, and cancel any delayed updates.
     *
     * Pass `true` to call `onRest` with `cancelled: true`.
     */
    stop(cancel) {
      const { to: to2 } = this.animation;
      this._focus(this.get());
      stopAsync(this._state, cancel && this._lastCallId);
      raf.batchedUpdates(() => this._stop(to2, cancel));
      return this;
    }
    /** Restart the animation. */
    reset() {
      this._update({ reset: true });
    }
    /** @internal */
    eventObserved(event) {
      if (event.type == "change") {
        this._start();
      } else if (event.type == "priority") {
        this.priority = event.priority + 1;
      }
    }
    /**
     * Parse the `to` and `from` range from the given `props` object.
     *
     * This also ensures the initial value is available to animated components
     * during the render phase.
     */
    _prepareNode(props) {
      const key = this.key || "";
      let { to: to2, from: from2 } = props;
      to2 = is.obj(to2) ? to2[key] : to2;
      if (to2 == null || isAsyncTo(to2)) {
        to2 = void 0;
      }
      from2 = is.obj(from2) ? from2[key] : from2;
      if (from2 == null) {
        from2 = void 0;
      }
      const range = { to: to2, from: from2 };
      if (!hasAnimated(this)) {
        if (props.reverse)
          [to2, from2] = [from2, to2];
        from2 = getFluidValue(from2);
        if (!is.und(from2)) {
          this._set(from2);
        } else if (!getAnimated(this)) {
          this._set(to2);
        }
      }
      return range;
    }
    /** Every update is processed by this method before merging. */
    _update({ ...props }, isLoop) {
      const { key, defaultProps: defaultProps2 } = this;
      if (props.default)
        Object.assign(
          defaultProps2,
          getDefaultProps(
            props,
            (value, prop2) => /^on/.test(prop2) ? resolveProp(value, key) : value
          )
        );
      mergeActiveFn(this, props, "onProps");
      sendEvent(this, "onProps", props, this);
      const range = this._prepareNode(props);
      if (Object.isFrozen(this)) {
        throw Error(
          "Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?"
        );
      }
      const state = this._state;
      return scheduleProps(++this._lastCallId, {
        key,
        props,
        defaultProps: defaultProps2,
        state,
        actions: {
          pause: () => {
            if (!isPaused(this)) {
              setPausedBit(this, true);
              flushCalls(state.pauseQueue);
              sendEvent(
                this,
                "onPause",
                getFinishedResult(this, checkFinished(this, this.animation.to)),
                this
              );
            }
          },
          resume: () => {
            if (isPaused(this)) {
              setPausedBit(this, false);
              if (isAnimating(this)) {
                this._resume();
              }
              flushCalls(state.resumeQueue);
              sendEvent(
                this,
                "onResume",
                getFinishedResult(this, checkFinished(this, this.animation.to)),
                this
              );
            }
          },
          start: this._merge.bind(this, range)
        }
      }).then((result) => {
        if (props.loop && result.finished && !(isLoop && result.noop)) {
          const nextProps = createLoopUpdate(props);
          if (nextProps) {
            return this._update(nextProps, true);
          }
        }
        return result;
      });
    }
    /** Merge props into the current animation */
    _merge(range, props, resolve) {
      if (props.cancel) {
        this.stop(true);
        return resolve(getCancelledResult(this));
      }
      const hasToProp = !is.und(range.to);
      const hasFromProp = !is.und(range.from);
      if (hasToProp || hasFromProp) {
        if (props.callId > this._lastToId) {
          this._lastToId = props.callId;
        } else {
          return resolve(getCancelledResult(this));
        }
      }
      const { key, defaultProps: defaultProps2, animation: anim } = this;
      const { to: prevTo, from: prevFrom } = anim;
      let { to: to2 = prevTo, from: from2 = prevFrom } = range;
      if (hasFromProp && !hasToProp && (!props.default || is.und(to2))) {
        to2 = from2;
      }
      if (props.reverse)
        [to2, from2] = [from2, to2];
      const hasFromChanged = !isEqual(from2, prevFrom);
      if (hasFromChanged) {
        anim.from = from2;
      }
      from2 = getFluidValue(from2);
      const hasToChanged = !isEqual(to2, prevTo);
      if (hasToChanged) {
        this._focus(to2);
      }
      const hasAsyncTo = isAsyncTo(props.to);
      const { config: config2 } = anim;
      const { decay, velocity } = config2;
      if (hasToProp || hasFromProp) {
        config2.velocity = 0;
      }
      if (props.config && !hasAsyncTo) {
        mergeConfig(
          config2,
          callProp(props.config, key),
          // Avoid calling the same "config" prop twice.
          props.config !== defaultProps2.config ? callProp(defaultProps2.config, key) : void 0
        );
      }
      let node2 = getAnimated(this);
      if (!node2 || is.und(to2)) {
        return resolve(getFinishedResult(this, true));
      }
      const reset = (
        // When `reset` is undefined, the `from` prop implies `reset: true`,
        // except for declarative updates. When `reset` is defined, there
        // must exist a value to animate from.
        is.und(props.reset) ? hasFromProp && !props.default : !is.und(from2) && matchProp(props.reset, key)
      );
      const value = reset ? from2 : this.get();
      const goal = computeGoal(to2);
      const isAnimatable2 = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
      const immediate = !hasAsyncTo && (!isAnimatable2 || matchProp(defaultProps2.immediate || props.immediate, key));
      if (hasToChanged) {
        const nodeType = getAnimatedType(to2);
        if (nodeType !== node2.constructor) {
          if (immediate) {
            node2 = this._set(goal);
          } else
            throw Error(
              `Cannot animate between ${node2.constructor.name} and ${nodeType.name}, as the "to" prop suggests`
            );
        }
      }
      const goalType = node2.constructor;
      let started = hasFluidValue(to2);
      let finished = false;
      if (!started) {
        const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
        if (hasToChanged || hasValueChanged) {
          finished = isEqual(computeGoal(value), goal);
          started = !finished;
        }
        if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
          started = true;
        }
      }
      if (finished && isAnimating(this)) {
        if (anim.changed && !reset) {
          started = true;
        } else if (!started) {
          this._stop(prevTo);
        }
      }
      if (!hasAsyncTo) {
        if (started || hasFluidValue(prevTo)) {
          anim.values = node2.getPayload();
          anim.toValues = hasFluidValue(to2) ? null : goalType == AnimatedString ? [1] : toArray2(goal);
        }
        if (anim.immediate != immediate) {
          anim.immediate = immediate;
          if (!immediate && !reset) {
            this._set(prevTo);
          }
        }
        if (started) {
          const { onRest } = anim;
          each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
          const result = getFinishedResult(this, checkFinished(this, prevTo));
          flushCalls(this._pendingCalls, result);
          this._pendingCalls.add(resolve);
          if (anim.changed)
            raf.batchedUpdates(() => {
              anim.changed = !reset;
              onRest?.(result, this);
              if (reset) {
                callProp(defaultProps2.onRest, result);
              } else {
                anim.onStart?.(result, this);
              }
            });
        }
      }
      if (reset) {
        this._set(value);
      }
      if (hasAsyncTo) {
        resolve(runAsync(props.to, props, this._state, this));
      } else if (started) {
        this._start();
      } else if (isAnimating(this) && !hasToChanged) {
        this._pendingCalls.add(resolve);
      } else {
        resolve(getNoopResult(value));
      }
    }
    /** Update the `animation.to` value, which might be a `FluidValue` */
    _focus(value) {
      const anim = this.animation;
      if (value !== anim.to) {
        if (getFluidObservers(this)) {
          this._detach();
        }
        anim.to = value;
        if (getFluidObservers(this)) {
          this._attach();
        }
      }
    }
    _attach() {
      let priority2 = 0;
      const { to: to2 } = this.animation;
      if (hasFluidValue(to2)) {
        addFluidObserver(to2, this);
        if (isFrameValue(to2)) {
          priority2 = to2.priority + 1;
        }
      }
      this.priority = priority2;
    }
    _detach() {
      const { to: to2 } = this.animation;
      if (hasFluidValue(to2)) {
        removeFluidObserver(to2, this);
      }
    }
    /**
     * Update the current value from outside the frameloop,
     * and return the `Animated` node.
     */
    _set(arg, idle = true) {
      const value = getFluidValue(arg);
      if (!is.und(value)) {
        const oldNode = getAnimated(this);
        if (!oldNode || !isEqual(value, oldNode.getValue())) {
          const nodeType = getAnimatedType(value);
          if (!oldNode || oldNode.constructor != nodeType) {
            setAnimated(this, nodeType.create(value));
          } else {
            oldNode.setValue(value);
          }
          if (oldNode) {
            raf.batchedUpdates(() => {
              this._onChange(value, idle);
            });
          }
        }
      }
      return getAnimated(this);
    }
    _onStart() {
      const anim = this.animation;
      if (!anim.changed) {
        anim.changed = true;
        sendEvent(
          this,
          "onStart",
          getFinishedResult(this, checkFinished(this, anim.to)),
          this
        );
      }
    }
    _onChange(value, idle) {
      if (!idle) {
        this._onStart();
        callProp(this.animation.onChange, value, this);
      }
      callProp(this.defaultProps.onChange, value, this);
      super._onChange(value, idle);
    }
    // This method resets the animation state (even if already animating) to
    // ensure the latest from/to range is used, and it also ensures this spring
    // is added to the frameloop.
    _start() {
      const anim = this.animation;
      getAnimated(this).reset(getFluidValue(anim.to));
      if (!anim.immediate) {
        anim.fromValues = anim.values.map((node2) => node2.lastPosition);
      }
      if (!isAnimating(this)) {
        setActiveBit(this, true);
        if (!isPaused(this)) {
          this._resume();
        }
      }
    }
    _resume() {
      if (globals_exports.skipAnimation) {
        this.finish();
      } else {
        frameLoop.start(this);
      }
    }
    /**
     * Exit the frameloop and notify `onRest` listeners.
     *
     * Always wrap `_stop` calls with `batchedUpdates`.
     */
    _stop(goal, cancel) {
      if (isAnimating(this)) {
        setActiveBit(this, false);
        const anim = this.animation;
        each(anim.values, (node2) => {
          node2.done = true;
        });
        if (anim.toValues) {
          anim.onChange = anim.onPause = anim.onResume = void 0;
        }
        callFluidObservers(this, {
          type: "idle",
          parent: this
        });
        const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));
        flushCalls(this._pendingCalls, result);
        if (anim.changed) {
          anim.changed = false;
          sendEvent(this, "onRest", result, this);
        }
      }
    }
  };
  function checkFinished(target, to2) {
    const goal = computeGoal(to2);
    const value = computeGoal(target.get());
    return isEqual(value, goal);
  }
  function createLoopUpdate(props, loop2 = props.loop, to2 = props.to) {
    const loopRet = callProp(loop2);
    if (loopRet) {
      const overrides = loopRet !== true && inferTo(loopRet);
      const reverse = (overrides || props).reverse;
      const reset = !overrides || overrides.reset;
      return createUpdate({
        ...props,
        loop: loop2,
        // Avoid updating default props when looping.
        default: false,
        // Never loop the `pause` prop.
        pause: void 0,
        // For the "reverse" prop to loop as expected, the "to" prop
        // must be undefined. The "reverse" prop is ignored when the
        // "to" prop is an array or function.
        to: !reverse || isAsyncTo(to2) ? to2 : void 0,
        // Ignore the "from" prop except on reset.
        from: reset ? props.from : void 0,
        reset,
        // The "loop" prop can return a "useSpring" props object to
        // override any of the original props.
        ...overrides
      });
    }
  }
  function createUpdate(props) {
    const { to: to2, from: from2 } = props = inferTo(props);
    const keys = /* @__PURE__ */ new Set();
    if (is.obj(to2))
      findDefined(to2, keys);
    if (is.obj(from2))
      findDefined(from2, keys);
    props.keys = keys.size ? Array.from(keys) : null;
    return props;
  }
  function findDefined(values, keys) {
    eachProp(values, (value, key) => value != null && keys.add(key));
  }
  var ACTIVE_EVENTS = [
    "onStart",
    "onRest",
    "onChange",
    "onPause",
    "onResume"
  ];
  function mergeActiveFn(target, props, type) {
    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
  }
  function sendEvent(target, type, ...args) {
    target.animation[type]?.(...args);
    target.defaultProps[type]?.(...args);
  }
  var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
  var nextId2 = 1;
  var Controller = class {
    constructor(props, flush3) {
      this.id = nextId2++;
      this.springs = {};
      this.queue = [];
      this._lastAsyncId = 0;
      this._active = /* @__PURE__ */ new Set();
      this._changed = /* @__PURE__ */ new Set();
      this._started = false;
      this._state = {
        paused: false,
        pauseQueue: /* @__PURE__ */ new Set(),
        resumeQueue: /* @__PURE__ */ new Set(),
        timeouts: /* @__PURE__ */ new Set()
      };
      this._events = {
        onStart: /* @__PURE__ */ new Map(),
        onChange: /* @__PURE__ */ new Map(),
        onRest: /* @__PURE__ */ new Map()
      };
      this._onFrame = this._onFrame.bind(this);
      if (flush3) {
        this._flush = flush3;
      }
      if (props) {
        this.start({ default: true, ...props });
      }
    }
    /**
     * Equals `true` when no spring values are in the frameloop, and
     * no async animation is currently active.
     */
    get idle() {
      return !this._state.asyncTo && Object.values(this.springs).every((spring2) => {
        return spring2.idle && !spring2.isDelayed && !spring2.isPaused;
      });
    }
    get item() {
      return this._item;
    }
    set item(item) {
      this._item = item;
    }
    /** Get the current values of our springs */
    get() {
      const values = {};
      this.each((spring2, key) => values[key] = spring2.get());
      return values;
    }
    /** Set the current values without animating. */
    set(values) {
      for (const key in values) {
        const value = values[key];
        if (!is.und(value)) {
          this.springs[key].set(value);
        }
      }
    }
    /** Push an update onto the queue of each value. */
    update(props) {
      if (props) {
        this.queue.push(createUpdate(props));
      }
      return this;
    }
    /**
     * Start the queued animations for every spring, and resolve the returned
     * promise once all queued animations have finished or been cancelled.
     *
     * When you pass a queue (instead of nothing), that queue is used instead of
     * the queued animations added with the `update` method, which are left alone.
     */
    start(props) {
      let { queue } = this;
      if (props) {
        queue = toArray2(props).map(createUpdate);
      } else {
        this.queue = [];
      }
      if (this._flush) {
        return this._flush(this, queue);
      }
      prepareKeys(this, queue);
      return flushUpdateQueue(this, queue);
    }
    /** @internal */
    stop(arg, keys) {
      if (arg !== !!arg) {
        keys = arg;
      }
      if (keys) {
        const springs = this.springs;
        each(toArray2(keys), (key) => springs[key].stop(!!arg));
      } else {
        stopAsync(this._state, this._lastAsyncId);
        this.each((spring2) => spring2.stop(!!arg));
      }
      return this;
    }
    /** Freeze the active animation in time */
    pause(keys) {
      if (is.und(keys)) {
        this.start({ pause: true });
      } else {
        const springs = this.springs;
        each(toArray2(keys), (key) => springs[key].pause());
      }
      return this;
    }
    /** Resume the animation if paused. */
    resume(keys) {
      if (is.und(keys)) {
        this.start({ pause: false });
      } else {
        const springs = this.springs;
        each(toArray2(keys), (key) => springs[key].resume());
      }
      return this;
    }
    /** Call a function once per spring value */
    each(iterator) {
      eachProp(this.springs, iterator);
    }
    /** @internal Called at the end of every animation frame */
    _onFrame() {
      const { onStart, onChange, onRest } = this._events;
      const active = this._active.size > 0;
      const changed = this._changed.size > 0;
      if (active && !this._started || changed && !this._started) {
        this._started = true;
        flush2(onStart, ([onStart2, result]) => {
          result.value = this.get();
          onStart2(result, this, this._item);
        });
      }
      const idle = !active && this._started;
      const values = changed || idle && onRest.size ? this.get() : null;
      if (changed && onChange.size) {
        flush2(onChange, ([onChange2, result]) => {
          result.value = values;
          onChange2(result, this, this._item);
        });
      }
      if (idle) {
        this._started = false;
        flush2(onRest, ([onRest2, result]) => {
          result.value = values;
          onRest2(result, this, this._item);
        });
      }
    }
    /** @internal */
    eventObserved(event) {
      if (event.type == "change") {
        this._changed.add(event.parent);
        if (!event.idle) {
          this._active.add(event.parent);
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else
        return;
      raf.onFrame(this._onFrame);
    }
  };
  function flushUpdateQueue(ctrl, queue) {
    return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then(
      (results) => getCombinedResult(ctrl, results)
    );
  }
  async function flushUpdate(ctrl, props, isLoop) {
    const { keys, to: to2, from: from2, loop: loop2, onRest, onResolve } = props;
    const defaults2 = is.obj(props.default) && props.default;
    if (loop2) {
      props.loop = false;
    }
    if (to2 === false)
      props.to = null;
    if (from2 === false)
      props.from = null;
    const asyncTo = is.arr(to2) || is.fun(to2) ? to2 : void 0;
    if (asyncTo) {
      props.to = void 0;
      props.onRest = void 0;
      if (defaults2) {
        defaults2.onRest = void 0;
      }
    } else {
      each(BATCHED_EVENTS, (key) => {
        const handler = props[key];
        if (is.fun(handler)) {
          const queue = ctrl["_events"][key];
          props[key] = ({ finished, cancelled }) => {
            const result2 = queue.get(handler);
            if (result2) {
              if (!finished)
                result2.finished = false;
              if (cancelled)
                result2.cancelled = true;
            } else {
              queue.set(handler, {
                value: null,
                finished: finished || false,
                cancelled: cancelled || false
              });
            }
          };
          if (defaults2) {
            defaults2[key] = props[key];
          }
        }
      });
    }
    const state = ctrl["_state"];
    if (props.pause === !state.paused) {
      state.paused = props.pause;
      flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
    } else if (state.paused) {
      props.pause = true;
    }
    const promises = (keys || Object.keys(ctrl.springs)).map(
      (key) => ctrl.springs[key].start(props)
    );
    const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
    if (asyncTo || cancel && state.asyncId) {
      promises.push(
        scheduleProps(++ctrl["_lastAsyncId"], {
          props,
          state,
          actions: {
            pause: noop7,
            resume: noop7,
            start(props2, resolve) {
              if (cancel) {
                stopAsync(state, ctrl["_lastAsyncId"]);
                resolve(getCancelledResult(ctrl));
              } else {
                props2.onRest = onRest;
                resolve(
                  runAsync(
                    asyncTo,
                    props2,
                    state,
                    ctrl
                  )
                );
              }
            }
          }
        })
      );
    }
    if (state.paused) {
      await new Promise((resume) => {
        state.resumeQueue.add(resume);
      });
    }
    const result = getCombinedResult(ctrl, await Promise.all(promises));
    if (loop2 && result.finished && !(isLoop && result.noop)) {
      const nextProps = createLoopUpdate(props, loop2, to2);
      if (nextProps) {
        prepareKeys(ctrl, [nextProps]);
        return flushUpdate(ctrl, nextProps, true);
      }
    }
    if (onResolve) {
      raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
    }
    return result;
  }
  function createSpring(key, observer) {
    const spring2 = new SpringValue();
    spring2.key = key;
    if (observer) {
      addFluidObserver(spring2, observer);
    }
    return spring2;
  }
  function prepareSprings(springs, props, create3) {
    if (props.keys) {
      each(props.keys, (key) => {
        const spring2 = springs[key] || (springs[key] = create3(key));
        spring2["_prepareNode"](props);
      });
    }
  }
  function prepareKeys(ctrl, queue) {
    each(queue, (props) => {
      prepareSprings(ctrl.springs, props, (key) => {
        return createSpring(key, ctrl);
      });
    });
  }
  var SpringContext = ({
    children,
    ...props
  }) => {
    const inherited = (0, import_react102.useContext)(ctx13);
    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
    props = useMemoOne2(() => ({ pause, immediate }), [pause, immediate]);
    const { Provider: Provider7 } = ctx13;
    return /* @__PURE__ */ React11.createElement(Provider7, { value: props }, children);
  };
  var ctx13 = makeContext(SpringContext, {});
  SpringContext.Provider = ctx13.Provider;
  SpringContext.Consumer = ctx13.Consumer;
  function makeContext(target, init2) {
    Object.assign(target, React11.createContext(init2));
    target.Provider._context = target;
    target.Consumer._context = target;
    return target;
  }
  var Interpolation = class extends FrameValue {
    constructor(source, args) {
      super();
      this.source = source;
      this.idle = true;
      this._active = /* @__PURE__ */ new Set();
      this.calc = createInterpolator(...args);
      const value = this._get();
      const nodeType = getAnimatedType(value);
      setAnimated(this, nodeType.create(value));
    }
    advance(_dt) {
      const value = this._get();
      const oldValue = this.get();
      if (!isEqual(value, oldValue)) {
        getAnimated(this).setValue(value);
        this._onChange(value, this.idle);
      }
      if (!this.idle && checkIdle(this._active)) {
        becomeIdle(this);
      }
    }
    _get() {
      const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray2(getFluidValue(this.source));
      return this.calc(...inputs);
    }
    _start() {
      if (this.idle && !checkIdle(this._active)) {
        this.idle = false;
        each(getPayload(this), (node2) => {
          node2.done = false;
        });
        if (globals_exports.skipAnimation) {
          raf.batchedUpdates(() => this.advance());
          becomeIdle(this);
        } else {
          frameLoop.start(this);
        }
      }
    }
    // Observe our sources only when we're observed.
    _attach() {
      let priority2 = 1;
      each(toArray2(this.source), (source) => {
        if (hasFluidValue(source)) {
          addFluidObserver(source, this);
        }
        if (isFrameValue(source)) {
          if (!source.idle) {
            this._active.add(source);
          }
          priority2 = Math.max(priority2, source.priority + 1);
        }
      });
      this.priority = priority2;
      this._start();
    }
    // Stop observing our sources once we have no observers.
    _detach() {
      each(toArray2(this.source), (source) => {
        if (hasFluidValue(source)) {
          removeFluidObserver(source, this);
        }
      });
      this._active.clear();
      becomeIdle(this);
    }
    /** @internal */
    eventObserved(event) {
      if (event.type == "change") {
        if (event.idle) {
          this.advance();
        } else {
          this._active.add(event.parent);
          this._start();
        }
      } else if (event.type == "idle") {
        this._active.delete(event.parent);
      } else if (event.type == "priority") {
        this.priority = toArray2(this.source).reduce(
          (highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1),
          0
        );
      }
    }
  };
  function isIdle(source) {
    return source.idle !== false;
  }
  function checkIdle(active) {
    return !active.size || Array.from(active).every(isIdle);
  }
  function becomeIdle(self) {
    if (!self.idle) {
      self.idle = true;
      each(getPayload(self), (node2) => {
        node2.done = true;
      });
      callFluidObservers(self, {
        type: "idle",
        parent: self
      });
    }
  }
  globals_exports.assign({
    createStringInterpolator: createStringInterpolator2,
    to: (source, args) => new Interpolation(source, args)
  });
  var update2 = frameLoop.advance;

  // node_modules/@react-spring/web/dist/react-spring_web.modern.mjs
  var import_react_dom7 = __toESM(require_react_dom(), 1);
  var isCustomPropRE = /^--/;
  function dangerousStyleValue(name, value) {
    if (value == null || typeof value === "boolean" || value === "")
      return "";
    if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
      return value + "px";
    return ("" + value).trim();
  }
  var attributeCache = {};
  function applyAnimatedValues(instance, props) {
    if (!instance.nodeType || !instance.setAttribute) {
      return false;
    }
    const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
    const {
      className,
      style,
      children,
      scrollTop,
      scrollLeft,
      viewBox,
      ...attributes
    } = props;
    const values = Object.values(attributes);
    const names = Object.keys(attributes).map(
      (name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(
        /([A-Z])/g,
        // Attributes are written in dash case
        (n3) => "-" + n3.toLowerCase()
      ))
    );
    if (children !== void 0) {
      instance.textContent = children;
    }
    for (const name in style) {
      if (style.hasOwnProperty(name)) {
        const value = dangerousStyleValue(name, style[name]);
        if (isCustomPropRE.test(name)) {
          instance.style.setProperty(name, value);
        } else {
          instance.style[name] = value;
        }
      }
    }
    names.forEach((name, i3) => {
      instance.setAttribute(name, values[i3]);
    });
    if (className !== void 0) {
      instance.className = className;
    }
    if (scrollTop !== void 0) {
      instance.scrollTop = scrollTop;
    }
    if (scrollLeft !== void 0) {
      instance.scrollLeft = scrollLeft;
    }
    if (viewBox !== void 0) {
      instance.setAttribute("viewBox", viewBox);
    }
  }
  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    columns: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowEnd: true,
    gridRowSpan: true,
    gridRowStart: true,
    gridColumn: true,
    gridColumnEnd: true,
    gridColumnSpan: true,
    gridColumnStart: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,
    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true
  };
  var prefixKey = (prefix3, key) => prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
  var prefixes = ["Webkit", "Ms", "Moz", "O"];
  isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop2) => {
    prefixes.forEach((prefix3) => acc[prefixKey(prefix3, prop2)] = acc[prop2]);
    return acc;
  }, isUnitlessNumber);
  var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
  var pxTransforms = /^(translate)/;
  var degTransforms = /^(rotate|skew)/;
  var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
  var isValueIdentity = (value, id3) => is.arr(value) ? value.every((v2) => isValueIdentity(v2, id3)) : is.num(value) ? value === id3 : parseFloat(value) === id3;
  var AnimatedStyle = class extends AnimatedObject {
    constructor({ x: x2, y: y2, z, ...style }) {
      const inputs = [];
      const transforms = [];
      if (x2 || y2 || z) {
        inputs.push([x2 || 0, y2 || 0, z || 0]);
        transforms.push((xyz) => [
          `translate3d(${xyz.map((v2) => addUnit(v2, "px")).join(",")})`,
          // prettier-ignore
          isValueIdentity(xyz, 0)
        ]);
      }
      eachProp(style, (value, key) => {
        if (key === "transform") {
          inputs.push([value || ""]);
          transforms.push((transform) => [transform, transform === ""]);
        } else if (domTransforms.test(key)) {
          delete style[key];
          if (is.und(value))
            return;
          const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
          inputs.push(toArray2(value));
          transforms.push(
            key === "rotate3d" ? ([x22, y22, z2, deg]) => [
              `rotate3d(${x22},${y22},${z2},${addUnit(deg, unit)})`,
              isValueIdentity(deg, 0)
            ] : (input) => [
              `${key}(${input.map((v2) => addUnit(v2, unit)).join(",")})`,
              isValueIdentity(input, key.startsWith("scale") ? 1 : 0)
            ]
          );
        }
      });
      if (inputs.length) {
        style.transform = new FluidTransform(inputs, transforms);
      }
      super(style);
    }
  };
  var FluidTransform = class extends FluidValue {
    constructor(inputs, transforms) {
      super();
      this.inputs = inputs;
      this.transforms = transforms;
      this._value = null;
    }
    get() {
      return this._value || (this._value = this._get());
    }
    _get() {
      let transform = "";
      let identity4 = true;
      each(this.inputs, (input, i3) => {
        const arg1 = getFluidValue(input[0]);
        const [t4, id3] = this.transforms[i3](
          is.arr(arg1) ? arg1 : input.map(getFluidValue)
        );
        transform += " " + t4;
        identity4 = identity4 && id3;
      });
      return identity4 ? "none" : transform;
    }
    // Start observing our inputs once we have an observer.
    observerAdded(count) {
      if (count == 1)
        each(
          this.inputs,
          (input) => each(
            input,
            (value) => hasFluidValue(value) && addFluidObserver(value, this)
          )
        );
    }
    // Stop observing our inputs once we have no observers.
    observerRemoved(count) {
      if (count == 0)
        each(
          this.inputs,
          (input) => each(
            input,
            (value) => hasFluidValue(value) && removeFluidObserver(value, this)
          )
        );
    }
    eventObserved(event) {
      if (event.type == "change") {
        this._value = null;
      }
      callFluidObservers(this, event);
    }
  };
  var primitives = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    // SVG
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  globals_exports.assign({
    batchedUpdates: import_react_dom7.unstable_batchedUpdates,
    createStringInterpolator: createStringInterpolator2,
    colors: colors2
  });
  var host = createHost(primitives, {
    applyAnimatedValues,
    createAnimatedStyle: (style) => new AnimatedStyle(style),
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getComponentProps: ({ scrollTop, scrollLeft, ...props }) => props
  });
  var animated = host.animated;

  // node_modules/@wordpress/block-editor/build-module/components/use-moving-animation/index.js
  var BLOCK_ANIMATION_THRESHOLD = 200;
  function getAbsolutePosition(element) {
    return {
      top: element.offsetTop,
      left: element.offsetLeft
    };
  }
  function useMovingAnimation({
    triggerAnimationOnChange,
    clientId
  }) {
    const ref = (0, import_react.useRef)();
    const {
      isTyping: isTyping3,
      getGlobalBlockCount: getGlobalBlockCount2,
      isBlockSelected: isBlockSelected2,
      isFirstMultiSelectedBlock: isFirstMultiSelectedBlock2,
      isBlockMultiSelected: isBlockMultiSelected2,
      isAncestorMultiSelected: isAncestorMultiSelected2
    } = useSelect(store3);
    const {
      previous,
      prevRect
    } = (0, import_react.useMemo)(
      () => ({
        previous: ref.current && getAbsolutePosition(ref.current),
        prevRect: ref.current && ref.current.getBoundingClientRect()
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [triggerAnimationOnChange]
    );
    (0, import_react.useLayoutEffect)(() => {
      if (!previous || !ref.current) {
        return;
      }
      const scrollContainer = getScrollContainer(ref.current);
      const isSelected = isBlockSelected2(clientId);
      const adjustScrolling = isSelected || isFirstMultiSelectedBlock2(clientId);
      function preserveScrollPosition() {
        if (adjustScrolling && prevRect) {
          const blockRect = ref.current.getBoundingClientRect();
          const diff = blockRect.top - prevRect.top;
          if (diff) {
            scrollContainer.scrollTop += diff;
          }
        }
      }
      const disableAnimation = window.matchMedia("(prefers-reduced-motion: reduce)").matches || isTyping3() || getGlobalBlockCount2() > BLOCK_ANIMATION_THRESHOLD;
      if (disableAnimation) {
        preserveScrollPosition();
        return;
      }
      const isPartOfSelection = isSelected || isBlockMultiSelected2(clientId) || isAncestorMultiSelected2(clientId);
      const zIndex = isPartOfSelection ? "1" : "";
      const controller = new Controller({
        x: 0,
        y: 0,
        config: {
          mass: 5,
          tension: 2e3,
          friction: 200
        },
        onChange({
          value
        }) {
          if (!ref.current) {
            return;
          }
          let {
            x: x3,
            y: y3
          } = value;
          x3 = Math.round(x3);
          y3 = Math.round(y3);
          const finishedMoving = x3 === 0 && y3 === 0;
          ref.current.style.transformOrigin = "center center";
          ref.current.style.transform = finishedMoving ? null : `translate3d(${x3}px,${y3}px,0)`;
          ref.current.style.zIndex = zIndex;
          preserveScrollPosition();
        }
      });
      ref.current.style.transform = void 0;
      const destination = getAbsolutePosition(ref.current);
      const x2 = Math.round(previous.left - destination.left);
      const y2 = Math.round(previous.top - destination.top);
      controller.start({
        x: 0,
        y: 0,
        from: {
          x: x2,
          y: y2
        }
      });
      return () => {
        controller.stop();
        controller.set({
          x: 0,
          y: 0
        });
      };
    }, [previous, prevRect, clientId, isTyping3, getGlobalBlockCount2, isBlockSelected2, isFirstMultiSelectedBlock2, isBlockMultiSelected2, isAncestorMultiSelected2]);
    return ref;
  }
  var use_moving_animation_default = useMovingAnimation;

  // node_modules/@wordpress/block-editor/build-module/utils/dom.js
  var BLOCK_SELECTOR = ".block-editor-block-list__block";
  var APPENDER_SELECTOR = ".block-list-appender";
  var BLOCK_APPENDER_CLASS = ".block-editor-button-block-appender";
  function isInsideRootBlock(blockElement, element) {
    const parentBlock = element.closest([BLOCK_SELECTOR, APPENDER_SELECTOR, BLOCK_APPENDER_CLASS].join(","));
    return parentBlock === blockElement;
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-focus-first-element.js
  function useFocusFirstElement({
    clientId,
    initialPosition: initialPosition2
  }) {
    const ref = (0, import_react.useRef)();
    const {
      isBlockSelected: isBlockSelected2,
      isMultiSelecting: isMultiSelecting3,
      __unstableGetEditorMode: __unstableGetEditorMode2
    } = useSelect(store3);
    (0, import_react.useEffect)(() => {
      if (!isBlockSelected2(clientId) || isMultiSelecting3() || __unstableGetEditorMode2() === "zoom-out") {
        return;
      }
      if (initialPosition2 === void 0 || initialPosition2 === null) {
        return;
      }
      if (!ref.current) {
        return;
      }
      const {
        ownerDocument
      } = ref.current;
      if (isInsideRootBlock(ref.current, ownerDocument.activeElement)) {
        return;
      }
      const textInputs = focus.tabbable.find(ref.current).filter((node2) => isTextField(node2));
      const isReverse = -1 === initialPosition2;
      const target = textInputs[isReverse ? textInputs.length - 1 : 0] || ref.current;
      if (!isInsideRootBlock(ref.current, target)) {
        ref.current.focus();
        return;
      }
      if (!ref.current.getAttribute("contenteditable")) {
        const focusElement = focus.tabbable.findNext(ref.current);
        if (focusElement && isInsideRootBlock(ref.current, focusElement) && isFormElement(focusElement)) {
          focusElement.focus();
          return;
        }
      }
      placeCaretAtHorizontalEdge(target, isReverse);
    }, [initialPosition2, clientId]);
    return ref;
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-is-hovered.js
  function listener(event) {
    if (event.defaultPrevented) {
      return;
    }
    const action = event.type === "mouseover" ? "add" : "remove";
    event.preventDefault();
    event.currentTarget.classList[action]("is-hovered");
  }
  function useIsHovered() {
    return useRefEffect((node2) => {
      node2.addEventListener("mouseout", listener);
      node2.addEventListener("mouseover", listener);
      return () => {
        node2.removeEventListener("mouseout", listener);
        node2.removeEventListener("mouseover", listener);
        node2.classList.remove("is-hovered");
      };
    }, []);
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-focus-handler.js
  function useFocusHandler(clientId) {
    const {
      isBlockSelected: isBlockSelected2
    } = useSelect(store3);
    const {
      selectBlock: selectBlock2,
      selectionChange: selectionChange2
    } = use_dispatch_default(store3);
    return useRefEffect((node2) => {
      function onFocus(event) {
        if (node2.parentElement.closest('[contenteditable="true"]')) {
          return;
        }
        if (isBlockSelected2(clientId)) {
          if (!event.target.isContentEditable) {
            selectionChange2(clientId);
          }
          return;
        }
        if (!isInsideRootBlock(node2, event.target)) {
          return;
        }
        selectBlock2(clientId);
      }
      node2.addEventListener("focusin", onFocus);
      return () => {
        node2.removeEventListener("focusin", onFocus);
      };
    }, [isBlockSelected2, selectBlock2]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-selected-block-event-handlers.js
  function useEventHandlers({
    clientId,
    isSelected
  }) {
    const {
      getBlockRootClientId: getBlockRootClientId2,
      getBlockIndex: getBlockIndex2
    } = useSelect(store3);
    const {
      insertAfterBlock: insertAfterBlock2,
      removeBlock: removeBlock2
    } = use_dispatch_default(store3);
    return useRefEffect((node2) => {
      if (!isSelected) {
        return;
      }
      function onKeyDown(event) {
        const {
          keyCode,
          target
        } = event;
        if (keyCode !== ENTER && keyCode !== BACKSPACE && keyCode !== DELETE) {
          return;
        }
        if (target !== node2 || isTextField(target)) {
          return;
        }
        event.preventDefault();
        if (keyCode === ENTER) {
          insertAfterBlock2(clientId);
        } else {
          removeBlock2(clientId);
        }
      }
      function onDragStart(event) {
        event.preventDefault();
      }
      node2.addEventListener("keydown", onKeyDown);
      node2.addEventListener("dragstart", onDragStart);
      return () => {
        node2.removeEventListener("keydown", onKeyDown);
        node2.removeEventListener("dragstart", onDragStart);
      };
    }, [clientId, isSelected, getBlockRootClientId2, getBlockIndex2, insertAfterBlock2, removeBlock2]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-nav-mode-exit.js
  function useNavModeExit(clientId) {
    const {
      isNavigationMode: isNavigationMode2,
      isBlockSelected: isBlockSelected2
    } = useSelect(store3);
    const {
      setNavigationMode: setNavigationMode2,
      selectBlock: selectBlock2
    } = use_dispatch_default(store3);
    return useRefEffect((node2) => {
      function onMouseDown(event) {
        if (isNavigationMode2() && !event.defaultPrevented) {
          event.preventDefault();
          if (isBlockSelected2(clientId)) {
            setNavigationMode2(false);
          } else {
            selectBlock2(clientId);
          }
        }
      }
      node2.addEventListener("mousedown", onMouseDown);
      return () => {
        node2.removeEventListener("mousedown", onMouseDown);
      };
    }, [clientId, isNavigationMode2, isBlockSelected2, setNavigationMode2]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-intersection-observer.js
  function useIntersectionObserver() {
    const observer = (0, import_react.useContext)(IntersectionObserver2);
    return useRefEffect((node2) => {
      if (observer) {
        observer.observe(node2);
        return () => {
          observer.unobserve(node2);
        };
      }
    }, [observer]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/use-scroll-into-view.js
  function useScrollIntoView2({
    isSelected
  }) {
    const prefersReducedMotion2 = use_reduced_motion_default();
    return useRefEffect((node2) => {
      if (isSelected) {
        const {
          ownerDocument
        } = node2;
        const {
          defaultView
        } = ownerDocument;
        if (!defaultView.IntersectionObserver) {
          return;
        }
        const observer = new defaultView.IntersectionObserver((entries) => {
          if (!entries[0].isIntersecting) {
            node2.scrollIntoView({
              behavior: prefersReducedMotion2 ? "instant" : "smooth"
            });
          }
          observer.disconnect();
        });
        observer.observe(node2);
        return () => {
          observer.disconnect();
        };
      }
    }, [isSelected]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/use-flash-editable-blocks/index.js
  function useFlashEditableBlocks({
    clientId = "",
    isEnabled = true
  } = {}) {
    const {
      getEnabledClientIdsTree: getEnabledClientIdsTree2
    } = unlock5(useSelect(store3));
    return useRefEffect((element) => {
      if (!isEnabled) {
        return;
      }
      const flashEditableBlocks = () => {
        getEnabledClientIdsTree2(clientId).forEach(({
          clientId: id3
        }) => {
          const block3 = element.querySelector(`[data-block="${id3}"]`);
          if (!block3) {
            return;
          }
          block3.classList.remove("has-editable-outline");
          block3.offsetWidth;
          block3.classList.add("has-editable-outline");
        });
      };
      const handleClick = (event) => {
        const shouldFlash = event.target === element || event.target.classList.contains("is-root-container");
        if (!shouldFlash) {
          return;
        }
        if (event.defaultPrevented) {
          return;
        }
        event.preventDefault();
        flashEditableBlocks();
      };
      element.addEventListener("click", handleClick);
      return () => element.removeEventListener("click", handleClick);
    }, [isEnabled]);
  }

  // node_modules/@wordpress/block-editor/build-module/hooks/use-bindings-attributes.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var BLOCK_BINDINGS_ALLOWED_BLOCKS = {
    "core/paragraph": ["content"],
    "core/heading": ["content"],
    "core/image": ["id", "url", "title", "alt"],
    "core/button": ["url", "text", "linkTarget", "rel"]
  };
  var DEFAULT_ATTRIBUTE = "__default";
  function replacePatternOverrideDefaultBindings(blockName, bindings) {
    if (bindings?.[DEFAULT_ATTRIBUTE]?.source === "core/pattern-overrides") {
      const supportedAttributes = BLOCK_BINDINGS_ALLOWED_BLOCKS[blockName];
      const bindingsWithDefaults = {};
      for (const attributeName of supportedAttributes) {
        const bindingSource = bindings[attributeName] ? bindings[attributeName] : {
          source: "core/pattern-overrides"
        };
        bindingsWithDefaults[attributeName] = bindingSource;
      }
      return bindingsWithDefaults;
    }
    return bindings;
  }
  function canBindBlock(blockName) {
    return blockName in BLOCK_BINDINGS_ALLOWED_BLOCKS;
  }
  function canBindAttribute(blockName, attributeName) {
    return canBindBlock(blockName) && BLOCK_BINDINGS_ALLOWED_BLOCKS[blockName].includes(attributeName);
  }
  var withBlockBindingSupport = createHigherOrderComponent((BlockEdit) => (props) => {
    const registry = useRegistry();
    const sources = useSelect((select2) => unlock5(select2(store2)).getAllBlockBindingsSources());
    const {
      name,
      clientId,
      context: context2
    } = props;
    const bindings = (0, import_react.useMemo)(() => replacePatternOverrideDefaultBindings(name, props.attributes.metadata?.bindings), [props.attributes.metadata?.bindings, name]);
    const boundAttributes = useSelect(() => {
      if (!bindings) {
        return;
      }
      const attributes = {};
      for (const [attributeName, boundAttribute] of Object.entries(bindings)) {
        const source = sources[boundAttribute.source];
        if (!source?.getValue || !canBindAttribute(name, attributeName)) {
          continue;
        }
        const args = {
          registry,
          context: context2,
          clientId,
          attributeName,
          args: boundAttribute.args
        };
        attributes[attributeName] = source.getValue(args);
        if (attributes[attributeName] === void 0) {
          if (attributeName === "url") {
            attributes[attributeName] = null;
          } else {
            attributes[attributeName] = source.getPlaceholder?.(args);
          }
        }
      }
      return attributes;
    }, [bindings, name, clientId, context2, registry, sources]);
    const {
      setAttributes
    } = props;
    const _setAttributes = (0, import_react.useCallback)((nextAttributes) => {
      registry.batch(() => {
        if (!bindings) {
          setAttributes(nextAttributes);
          return;
        }
        const keptAttributes = {
          ...nextAttributes
        };
        const updatesBySource = /* @__PURE__ */ new Map();
        for (const [attributeName, newValue] of Object.entries(keptAttributes)) {
          if (!bindings[attributeName] || !canBindAttribute(name, attributeName)) {
            continue;
          }
          const binding = bindings[attributeName];
          const source = sources[binding?.source];
          if (!source?.setValue && !source?.setValues) {
            continue;
          }
          updatesBySource.set(source, {
            ...updatesBySource.get(source),
            [attributeName]: newValue
          });
          delete keptAttributes[attributeName];
        }
        if (updatesBySource.size) {
          for (const [source, attributes] of updatesBySource) {
            if (source.setValues) {
              source.setValues({
                registry,
                context: context2,
                clientId,
                attributes
              });
            } else {
              for (const [attributeName, value] of Object.entries(attributes)) {
                const binding = bindings[attributeName];
                source.setValue({
                  registry,
                  context: context2,
                  clientId,
                  attributeName,
                  args: binding.args,
                  value
                });
              }
            }
          }
        }
        if (Object.keys(keptAttributes).length) {
          setAttributes(keptAttributes);
        }
      });
    }, [registry, bindings, name, clientId, context2, setAttributes, sources]);
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(import_jsx_runtime117.Fragment, {
      children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(BlockEdit, {
        ...props,
        attributes: {
          ...props.attributes,
          ...boundAttributes
        },
        setAttributes: _setAttributes
      })
    });
  }, "withBlockBindingSupport");
  function shimAttributeSource(settings2, name) {
    if (!canBindBlock(name)) {
      return settings2;
    }
    return {
      ...settings2,
      edit: withBlockBindingSupport(settings2.edit)
    };
  }
  addFilter("blocks.registerBlockType", "core/editor/custom-sources-backwards-compatibility/shim-attribute-source", shimAttributeSource);

  // node_modules/@wordpress/block-editor/build-module/components/block-list/use-block-props/index.js
  function useBlockProps(props = {}, {
    __unstableIsHtml
  } = {}) {
    const {
      clientId,
      className,
      wrapperProps = {},
      isAligned,
      index: index2,
      mode,
      name,
      blockApiVersion,
      blockTitle,
      isSelected,
      isSubtreeDisabled,
      hasOverlay,
      initialPosition: initialPosition2,
      blockEditingMode,
      isHighlighted,
      isMultiSelected,
      isPartiallySelected,
      isReusable,
      isDragging: isDragging4,
      hasChildSelected,
      isBlockMovingMode,
      canInsertMovingBlock,
      isEditingDisabled,
      hasEditableOutline,
      isTemporarilyEditingAsBlocks,
      defaultClassName,
      templateLock
    } = (0, import_react.useContext)(PrivateBlockContext);
    const blockLabel = sprintf(__("Block: %s"), blockTitle);
    const htmlSuffix = mode === "html" && !__unstableIsHtml ? "-visual" : "";
    const mergedRefs = useMergeRefs([props.ref, useFocusFirstElement({
      clientId,
      initialPosition: initialPosition2
    }), useBlockRefProvider(clientId), useFocusHandler(clientId), useEventHandlers({
      clientId,
      isSelected
    }), useNavModeExit(clientId), useIsHovered(), useIntersectionObserver(), use_moving_animation_default({
      triggerAnimationOnChange: index2,
      clientId
    }), useDisabled({
      isDisabled: !hasOverlay
    }), useFlashEditableBlocks({
      clientId,
      isEnabled: name === "core/block" || templateLock === "contentOnly"
    }), useScrollIntoView2({
      isSelected
    })]);
    const blockEditContext = useBlockEditContext();
    const hasBlockBindings = !!blockEditContext[blockBindingsKey];
    const bindingsStyle = hasBlockBindings && canBindBlock(name) ? {
      "--wp-admin-theme-color": "var(--wp-block-synced-color)",
      "--wp-admin-theme-color--rgb": "var(--wp-block-synced-color--rgb)"
    } : {};
    if (blockApiVersion < 2 && clientId === blockEditContext.clientId) {
      globalThis.SCRIPT_DEBUG === true ? warning(`Block type "${name}" must support API version 2 or higher to work correctly with "useBlockProps" method.`) : void 0;
    }
    let hasNegativeMargin = false;
    if (wrapperProps?.style?.marginTop?.charAt(0) === "-" || wrapperProps?.style?.marginBottom?.charAt(0) === "-" || wrapperProps?.style?.marginLeft?.charAt(0) === "-" || wrapperProps?.style?.marginRight?.charAt(0) === "-") {
      hasNegativeMargin = true;
    }
    return {
      tabIndex: blockEditingMode === "disabled" ? -1 : 0,
      ...wrapperProps,
      ...props,
      ref: mergedRefs,
      id: `block-${clientId}${htmlSuffix}`,
      role: "document",
      "aria-label": blockLabel,
      "data-block": clientId,
      "data-type": name,
      "data-title": blockTitle,
      inert: isSubtreeDisabled ? "true" : void 0,
      className: clsx_default("block-editor-block-list__block", {
        // The wp-block className is important for editor styles.
        "wp-block": !isAligned,
        "has-block-overlay": hasOverlay,
        "is-selected": isSelected,
        "is-highlighted": isHighlighted,
        "is-multi-selected": isMultiSelected,
        "is-partially-selected": isPartiallySelected,
        "is-reusable": isReusable,
        "is-dragging": isDragging4,
        "has-child-selected": hasChildSelected,
        "is-block-moving-mode": isBlockMovingMode,
        "can-insert-moving-block": canInsertMovingBlock,
        "is-editing-disabled": isEditingDisabled,
        "has-editable-outline": hasEditableOutline,
        "has-negative-margin": hasNegativeMargin,
        "is-content-locked-temporarily-editing-as-blocks": isTemporarilyEditingAsBlocks
      }, className, props.className, wrapperProps.className, defaultClassName),
      style: {
        ...wrapperProps.style,
        ...props.style,
        ...bindingsStyle
      }
    };
  }
  useBlockProps.save = getBlockProps;

  // node_modules/@wordpress/keyboard-shortcuts/build-module/store/reducer.js
  function reducer(state = {}, action) {
    switch (action.type) {
      case "REGISTER_SHORTCUT":
        return {
          ...state,
          [action.name]: {
            category: action.category,
            keyCombination: action.keyCombination,
            aliases: action.aliases,
            description: action.description
          }
        };
      case "UNREGISTER_SHORTCUT":
        const {
          [action.name]: actionName,
          ...remainingState
        } = state;
        return remainingState;
    }
    return state;
  }
  var reducer_default6 = reducer;

  // node_modules/@wordpress/keyboard-shortcuts/build-module/store/actions.js
  var actions_exports6 = {};
  __export(actions_exports6, {
    registerShortcut: () => registerShortcut,
    unregisterShortcut: () => unregisterShortcut
  });
  function registerShortcut({
    name,
    category,
    description,
    keyCombination,
    aliases
  }) {
    return {
      type: "REGISTER_SHORTCUT",
      name,
      category,
      keyCombination,
      aliases,
      description
    };
  }
  function unregisterShortcut(name) {
    return {
      type: "UNREGISTER_SHORTCUT",
      name
    };
  }

  // node_modules/@wordpress/keyboard-shortcuts/build-module/store/selectors.js
  var selectors_exports6 = {};
  __export(selectors_exports6, {
    getAllShortcutKeyCombinations: () => getAllShortcutKeyCombinations,
    getAllShortcutRawKeyCombinations: () => getAllShortcutRawKeyCombinations,
    getCategoryShortcuts: () => getCategoryShortcuts,
    getShortcutAliases: () => getShortcutAliases,
    getShortcutDescription: () => getShortcutDescription,
    getShortcutKeyCombination: () => getShortcutKeyCombination,
    getShortcutRepresentation: () => getShortcutRepresentation
  });
  var EMPTY_ARRAY4 = [];
  var FORMATTING_METHODS = {
    display: displayShortcut,
    raw: rawShortcut,
    ariaLabel: shortcutAriaLabel
  };
  function getKeyCombinationRepresentation(shortcut, representation) {
    if (!shortcut) {
      return null;
    }
    return shortcut.modifier ? FORMATTING_METHODS[representation][shortcut.modifier](shortcut.character) : shortcut.character;
  }
  function getShortcutKeyCombination(state, name) {
    return state[name] ? state[name].keyCombination : null;
  }
  function getShortcutRepresentation(state, name, representation = "display") {
    const shortcut = getShortcutKeyCombination(state, name);
    return getKeyCombinationRepresentation(shortcut, representation);
  }
  function getShortcutDescription(state, name) {
    return state[name] ? state[name].description : null;
  }
  function getShortcutAliases(state, name) {
    return state[name] && state[name].aliases ? state[name].aliases : EMPTY_ARRAY4;
  }
  var getAllShortcutKeyCombinations = rememo_default((state, name) => {
    return [getShortcutKeyCombination(state, name), ...getShortcutAliases(state, name)].filter(Boolean);
  }, (state, name) => [state[name]]);
  var getAllShortcutRawKeyCombinations = rememo_default((state, name) => {
    return getAllShortcutKeyCombinations(state, name).map((combination) => getKeyCombinationRepresentation(combination, "raw"));
  }, (state, name) => [state[name]]);
  var getCategoryShortcuts = rememo_default((state, categoryName) => {
    return Object.entries(state).filter(([, shortcut]) => shortcut.category === categoryName).map(([name]) => name);
  }, (state) => [state]);

  // node_modules/@wordpress/keyboard-shortcuts/build-module/store/index.js
  var STORE_NAME4 = "core/keyboard-shortcuts";
  var store5 = createReduxStore(STORE_NAME4, {
    reducer: reducer_default6,
    actions: actions_exports6,
    selectors: selectors_exports6
  });
  register(store5);

  // node_modules/@wordpress/keyboard-shortcuts/build-module/hooks/use-shortcut-event-match.js
  function useShortcutEventMatch() {
    const {
      getAllShortcutKeyCombinations: getAllShortcutKeyCombinations2
    } = useSelect(store5);
    function isMatch(name, event) {
      return getAllShortcutKeyCombinations2(name).some(({
        modifier,
        character: character2
      }) => {
        return isKeyboardEvent[modifier](event, character2);
      });
    }
    return isMatch;
  }

  // node_modules/@wordpress/keyboard-shortcuts/build-module/context.js
  var globalShortcuts = /* @__PURE__ */ new Set();
  var globalListener = (event) => {
    for (const keyboardShortcut of globalShortcuts) {
      keyboardShortcut(event);
    }
  };
  var context = (0, import_react.createContext)({
    add: (shortcut) => {
      if (globalShortcuts.size === 0) {
        document.addEventListener("keydown", globalListener);
      }
      globalShortcuts.add(shortcut);
    },
    delete: (shortcut) => {
      globalShortcuts.delete(shortcut);
      if (globalShortcuts.size === 0) {
        document.removeEventListener("keydown", globalListener);
      }
    }
  });

  // node_modules/@wordpress/keyboard-shortcuts/build-module/hooks/use-shortcut.js
  function useShortcut(name, callback, {
    isDisabled = false
  } = {}) {
    const shortcuts = (0, import_react.useContext)(context);
    const isMatch = useShortcutEventMatch();
    const callbackRef = (0, import_react.useRef)();
    (0, import_react.useEffect)(() => {
      callbackRef.current = callback;
    }, [callback]);
    (0, import_react.useEffect)(() => {
      if (isDisabled) {
        return;
      }
      function _callback(event) {
        if (isMatch(name, event)) {
          callbackRef.current(event);
        }
      }
      shortcuts.add(_callback);
      return () => {
        shortcuts.delete(_callback);
      };
    }, [name, isDisabled, shortcuts]);
  }

  // node_modules/@wordpress/keyboard-shortcuts/build-module/components/shortcut-provider.js
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var {
    Provider: Provider6
  } = context;

  // node_modules/@wordpress/block-editor/build-module/utils/pasting.js
  function removeWindowsFragments(html2) {
    const startStr = "<!--StartFragment-->";
    const startIdx = html2.indexOf(startStr);
    if (startIdx > -1) {
      html2 = html2.substring(startIdx + startStr.length);
    } else {
      return html2;
    }
    const endStr = "<!--EndFragment-->";
    const endIdx = html2.indexOf(endStr);
    if (endIdx > -1) {
      html2 = html2.substring(0, endIdx);
    }
    return html2;
  }
  function removeCharsetMetaTag(html2) {
    const metaTag = `<meta charset='utf-8'>`;
    if (html2.startsWith(metaTag)) {
      return html2.slice(metaTag.length);
    }
    return html2;
  }
  function getPasteEventData({
    clipboardData
  }) {
    let plainText = "";
    let html2 = "";
    try {
      plainText = clipboardData.getData("text/plain");
      html2 = clipboardData.getData("text/html");
    } catch (error1) {
      try {
        html2 = clipboardData.getData("Text");
      } catch (error2) {
        return;
      }
    }
    html2 = removeWindowsFragments(html2);
    html2 = removeCharsetMetaTag(html2);
    const files = getFilesFromDataTransfer(clipboardData);
    if (files.length && !shouldDismissPastedFiles(files, html2)) {
      return {
        files
      };
    }
    return {
      html: html2,
      plainText,
      files: []
    };
  }
  function shouldDismissPastedFiles(files, html2) {
    if (html2 && files?.length === 1 && files[0].type.indexOf("image/") === 0) {
      const IMAGE_TAG = /<\s*img\b/gi;
      if (html2.match(IMAGE_TAG)?.length !== 1) {
        return true;
      }
      const IMG_WITH_LOCAL_SRC = /<\s*img\b[^>]*\bsrc="file:\/\//i;
      if (html2.match(IMG_WITH_LOCAL_SRC)) {
        return true;
      }
    }
    return false;
  }

  // node_modules/@wordpress/block-editor/build-module/components/media-upload/index.js
  var MediaUpload = () => null;
  var media_upload_default2 = withFilters("editor.MediaUpload")(MediaUpload);

  // node_modules/@wordpress/block-editor/build-module/components/block-list/index.js
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var IntersectionObserver2 = (0, import_react.createContext)();

  // node_modules/@wordpress/block-editor/build-module/components/block-controls/groups.js
  var BlockControlsDefault = createSlotFill("BlockControls");
  var BlockControlsBlock = createSlotFill("BlockControlsBlock");
  var BlockControlsInline = createSlotFill("BlockFormatControls");
  var BlockControlsOther = createSlotFill("BlockControlsOther");
  var BlockControlsParent = createSlotFill("BlockControlsParent");
  var groups = {
    default: BlockControlsDefault,
    block: BlockControlsBlock,
    inline: BlockControlsInline,
    other: BlockControlsOther,
    parent: BlockControlsParent
  };
  var groups_default = groups;

  // node_modules/@wordpress/block-editor/build-module/components/block-controls/hook.js
  function useBlockControlsFill(group, shareWithChildBlocks) {
    const context2 = useBlockEditContext();
    if (context2[mayDisplayControlsKey]) {
      return groups_default[group]?.Fill;
    }
    if (context2[mayDisplayParentControlsKey] && shareWithChildBlocks) {
      return groups_default.parent.Fill;
    }
    return null;
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-controls/fill.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  function BlockControlsFill({
    group = "default",
    controls,
    children,
    __experimentalShareWithChildBlocks = false
  }) {
    const Fill4 = useBlockControlsFill(group, __experimentalShareWithChildBlocks);
    if (!Fill4) {
      return null;
    }
    const innerMarkup = /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(import_jsx_runtime122.Fragment, {
      children: [group === "default" && /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(toolbar_group_default, {
        controls
      }), children]
    });
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(style_provider_default, {
      document,
      children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Fill4, {
        children: (fillProps) => {
          const {
            forwardedContext = []
          } = fillProps;
          return forwardedContext.reduce((inner, [Provider7, props]) => /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(Provider7, {
            ...props,
            children: inner
          }), innerMarkup);
        }
      })
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-controls/slot.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var {
    ComponentsContext: ComponentsContext2
  } = unlock5(privateApis);
  function BlockControlsSlot({
    group = "default",
    ...props
  }) {
    const toolbarState = (0, import_react.useContext)(toolbar_context_default);
    const contextState = (0, import_react.useContext)(ComponentsContext2);
    const fillProps = (0, import_react.useMemo)(() => ({
      forwardedContext: [[toolbar_context_default.Provider, {
        value: toolbarState
      }], [ComponentsContext2.Provider, {
        value: contextState
      }]]
    }), [toolbarState, contextState]);
    const Slot4 = groups_default[group]?.Slot;
    const fills = useSlotFills(Slot4?.__unstableName);
    if (!Slot4) {
      globalThis.SCRIPT_DEBUG === true ? warning(`Unknown BlockControls group "${group}" provided.`) : void 0;
      return null;
    }
    if (!fills?.length) {
      return null;
    }
    const slot = /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(Slot4, {
      ...props,
      bubblesVirtually: true,
      fillProps
    });
    if (group === "default") {
      return slot;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(toolbar_group_default, {
      children: slot
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/block-controls/index.js
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var BlockControls = BlockControlsFill;
  BlockControls.Slot = BlockControlsSlot;
  var BlockFormatControls = (props) => {
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(BlockControlsFill, {
      group: "inline",
      ...props
    });
  };
  BlockFormatControls.Slot = (props) => {
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(BlockControlsSlot, {
      group: "inline",
      ...props
    });
  };
  var block_controls_default = BlockControls;

  // node_modules/@wordpress/block-editor/build-module/components/navigable-toolbar/index.js
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  function hasOnlyToolbarItem(elements2) {
    const dataProp = "toolbarItem";
    return !elements2.some((element) => !(dataProp in element.dataset));
  }
  function getAllFocusableToolbarItemsIn(container) {
    return Array.from(container.querySelectorAll("[data-toolbar-item]:not([disabled])"));
  }
  function hasFocusWithin2(container) {
    return container.contains(container.ownerDocument.activeElement);
  }
  function focusFirstTabbableIn(container) {
    const [firstTabbable] = focus.tabbable.find(container);
    if (firstTabbable) {
      firstTabbable.focus({
        // When focusing newly mounted toolbars,
        // the position of the popover is often not right on the first render
        // This prevents the layout shifts when focusing the dialogs.
        preventScroll: true
      });
    }
  }
  function useIsAccessibleToolbar(toolbarRef) {
    const initialAccessibleToolbarState = true;
    const [isAccessibleToolbar, setIsAccessibleToolbar] = (0, import_react.useState)(initialAccessibleToolbarState);
    const determineIsAccessibleToolbar = (0, import_react.useCallback)(() => {
      const tabbables = focus.tabbable.find(toolbarRef.current);
      const onlyToolbarItem = hasOnlyToolbarItem(tabbables);
      if (!onlyToolbarItem) {
        deprecated("Using custom components as toolbar controls", {
          since: "5.6",
          alternative: "ToolbarItem, ToolbarButton or ToolbarDropdownMenu components",
          link: "https://developer.wordpress.org/block-editor/components/toolbar-button/#inside-blockcontrols"
        });
      }
      setIsAccessibleToolbar(onlyToolbarItem);
    }, [toolbarRef]);
    (0, import_react.useLayoutEffect)(() => {
      const observer = new window.MutationObserver(determineIsAccessibleToolbar);
      observer.observe(toolbarRef.current, {
        childList: true,
        subtree: true
      });
      return () => observer.disconnect();
    }, [determineIsAccessibleToolbar, isAccessibleToolbar, toolbarRef]);
    return isAccessibleToolbar;
  }
  function useToolbarFocus({
    toolbarRef,
    focusOnMount,
    isAccessibleToolbar,
    defaultIndex,
    onIndexChange,
    shouldUseKeyboardFocusShortcut,
    focusEditorOnEscape
  }) {
    const [initialFocusOnMount] = (0, import_react.useState)(focusOnMount);
    const [initialIndex] = (0, import_react.useState)(defaultIndex);
    const focusToolbar = (0, import_react.useCallback)(() => {
      focusFirstTabbableIn(toolbarRef.current);
    }, [toolbarRef]);
    const focusToolbarViaShortcut = () => {
      if (shouldUseKeyboardFocusShortcut) {
        focusToolbar();
      }
    };
    useShortcut("core/block-editor/focus-toolbar", focusToolbarViaShortcut);
    (0, import_react.useEffect)(() => {
      if (initialFocusOnMount) {
        focusToolbar();
      }
    }, [isAccessibleToolbar, initialFocusOnMount, focusToolbar]);
    (0, import_react.useEffect)(() => {
      const navigableToolbarRef = toolbarRef.current;
      let raf2 = 0;
      if (!initialFocusOnMount && !hasFocusWithin2(navigableToolbarRef)) {
        raf2 = window.requestAnimationFrame(() => {
          const items = getAllFocusableToolbarItemsIn(navigableToolbarRef);
          const index2 = initialIndex || 0;
          if (items[index2] && hasFocusWithin2(navigableToolbarRef)) {
            items[index2].focus({
              // When focusing newly mounted toolbars,
              // the position of the popover is often not right on the first render
              // This prevents the layout shifts when focusing the dialogs.
              preventScroll: true
            });
          }
        });
      }
      return () => {
        window.cancelAnimationFrame(raf2);
        if (!onIndexChange || !navigableToolbarRef) {
          return;
        }
        const items = getAllFocusableToolbarItemsIn(navigableToolbarRef);
        const index2 = items.findIndex((item) => item.tabIndex === 0);
        onIndexChange(index2);
      };
    }, [initialIndex, initialFocusOnMount, onIndexChange, toolbarRef]);
    const {
      getLastFocus: getLastFocus2
    } = unlock5(useSelect(store3));
    (0, import_react.useEffect)(() => {
      const navigableToolbarRef = toolbarRef.current;
      if (focusEditorOnEscape) {
        const handleKeyDown = (event) => {
          const lastFocus2 = getLastFocus2();
          if (event.keyCode === ESCAPE && lastFocus2?.current) {
            event.preventDefault();
            lastFocus2.current.focus();
          }
        };
        navigableToolbarRef.addEventListener("keydown", handleKeyDown);
        return () => {
          navigableToolbarRef.removeEventListener("keydown", handleKeyDown);
        };
      }
    }, [focusEditorOnEscape, getLastFocus2, toolbarRef]);
  }
  function NavigableToolbar({
    children,
    focusOnMount,
    focusEditorOnEscape = false,
    shouldUseKeyboardFocusShortcut = true,
    __experimentalInitialIndex: initialIndex,
    __experimentalOnIndexChange: onIndexChange,
    ...props
  }) {
    const toolbarRef = (0, import_react.useRef)();
    const isAccessibleToolbar = useIsAccessibleToolbar(toolbarRef);
    useToolbarFocus({
      toolbarRef,
      focusOnMount,
      defaultIndex: initialIndex,
      onIndexChange,
      isAccessibleToolbar,
      shouldUseKeyboardFocusShortcut,
      focusEditorOnEscape
    });
    if (isAccessibleToolbar) {
      return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(toolbar_default, {
        label: props["aria-label"],
        ref: toolbarRef,
        ...props,
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(menu_default2, {
      orientation: "horizontal",
      role: "toolbar",
      ref: toolbarRef,
      ...props,
      children
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/plain-text/index.js
  var import_react_autosize_textarea = __toESM(require_lib());

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/format-toolbar/index.js
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var POPOVER_PROPS = {
    placement: "bottom-start"
  };
  var FormatToolbar = () => {
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsxs)(import_jsx_runtime128.Fragment, {
      children: [["bold", "italic", "link", "unknown"].map((format) => /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(Slot3, {
        name: `RichText.ToolbarControls.${format}`
      }, format)), /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(Slot3, {
        name: "RichText.ToolbarControls",
        children: (fills) => {
          if (!fills.length) {
            return null;
          }
          const allProps = fills.map(([{
            props
          }]) => props);
          const hasActive = allProps.some(({
            isActive
          }) => isActive);
          return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(toolbar_item_default, {
            children: (toggleProps) => /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(dropdown_menu_default, {
              icon: chevron_down_default,
              label: __("More"),
              toggleProps: {
                ...toggleProps,
                className: clsx_default(toggleProps.className, {
                  "is-pressed": hasActive
                }),
                describedBy: __("Displays more block tools")
              },
              controls: orderBy(fills.map(([{
                props
              }]) => props), "title"),
              popoverProps: POPOVER_PROPS
            })
          });
        }
      })]
    });
  };
  var format_toolbar_default = FormatToolbar;

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/format-toolbar-container.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  function InlineToolbar({
    popoverAnchor
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(popover_default, {
      placement: "top",
      focusOnMount: false,
      anchor: popoverAnchor,
      className: "block-editor-rich-text__inline-format-toolbar",
      __unstableSlotName: "block-toolbar",
      children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(NavigableToolbar, {
        className: "block-editor-rich-text__inline-format-toolbar-group",
        "aria-label": __("Format tools"),
        children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(toolbar_group_default, {
          children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(format_toolbar_default, {})
        })
      })
    });
  }
  var FormatToolbarContainer = ({
    inline: inline3,
    editableContentElement
  }) => {
    if (inline3) {
      return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(InlineToolbar, {
        popoverAnchor: editableContentElement
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(block_controls_default, {
      group: "inline",
      children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(format_toolbar_default, {})
    });
  };
  var format_toolbar_container_default = FormatToolbarContainer;

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/use-mark-persistent.js
  function useMarkPersistent({
    html: html2,
    value
  }) {
    const previousText = (0, import_react.useRef)();
    const hasActiveFormats = !!value.activeFormats?.length;
    const {
      __unstableMarkLastChangeAsPersistent: __unstableMarkLastChangeAsPersistent2
    } = use_dispatch_default(store3);
    (0, import_react.useLayoutEffect)(() => {
      if (!previousText.current) {
        previousText.current = value.text;
        return;
      }
      if (previousText.current !== value.text) {
        const timeout = window.setTimeout(() => {
          __unstableMarkLastChangeAsPersistent2();
        }, 1e3);
        previousText.current = value.text;
        return () => {
          window.clearTimeout(timeout);
        };
      }
      __unstableMarkLastChangeAsPersistent2();
    }, [html2, hasActiveFormats]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/use-format-types.js
  function formatTypesSelector(select2) {
    return select2(store).getFormatTypes();
  }
  var interactiveContentTags = /* @__PURE__ */ new Set(["a", "audio", "button", "details", "embed", "iframe", "input", "label", "select", "textarea", "video"]);
  function prefixSelectKeys(selected, prefix3) {
    if (typeof selected !== "object") {
      return {
        [prefix3]: selected
      };
    }
    return Object.fromEntries(Object.entries(selected).map(([key, value]) => [`${prefix3}.${key}`, value]));
  }
  function getPrefixedSelectKeys(selected, prefix3) {
    if (selected[prefix3]) {
      return selected[prefix3];
    }
    return Object.keys(selected).filter((key) => key.startsWith(prefix3 + ".")).reduce((accumulator, key) => {
      accumulator[key.slice(prefix3.length + 1)] = selected[key];
      return accumulator;
    }, {});
  }
  function useFormatTypes({
    clientId,
    identifier: identifier2,
    withoutInteractiveFormatting,
    allowedFormats
  }) {
    const allFormatTypes = useSelect(formatTypesSelector, []);
    const formatTypes2 = (0, import_react.useMemo)(() => {
      return allFormatTypes.filter(({
        name,
        interactive,
        tagName
      }) => {
        if (allowedFormats && !allowedFormats.includes(name)) {
          return false;
        }
        if (withoutInteractiveFormatting && (interactive || interactiveContentTags.has(tagName))) {
          return false;
        }
        return true;
      });
    }, [allFormatTypes, allowedFormats, withoutInteractiveFormatting]);
    const keyedSelected = useSelect((select2) => formatTypes2.reduce((accumulator, type) => {
      if (!type.__experimentalGetPropsForEditableTreePreparation) {
        return accumulator;
      }
      return {
        ...accumulator,
        ...prefixSelectKeys(type.__experimentalGetPropsForEditableTreePreparation(select2, {
          richTextIdentifier: identifier2,
          blockClientId: clientId
        }), type.name)
      };
    }, {}), [formatTypes2, clientId, identifier2]);
    const dispatch2 = use_dispatch_default();
    const prepareHandlers = [];
    const valueHandlers = [];
    const changeHandlers = [];
    const dependencies = [];
    for (const key in keyedSelected) {
      dependencies.push(keyedSelected[key]);
    }
    formatTypes2.forEach((type) => {
      if (type.__experimentalCreatePrepareEditableTree) {
        const handler = type.__experimentalCreatePrepareEditableTree(getPrefixedSelectKeys(keyedSelected, type.name), {
          richTextIdentifier: identifier2,
          blockClientId: clientId
        });
        if (type.__experimentalCreateOnChangeEditableValue) {
          valueHandlers.push(handler);
        } else {
          prepareHandlers.push(handler);
        }
      }
      if (type.__experimentalCreateOnChangeEditableValue) {
        let dispatchers = {};
        if (type.__experimentalGetPropsForEditableTreeChangeHandler) {
          dispatchers = type.__experimentalGetPropsForEditableTreeChangeHandler(dispatch2, {
            richTextIdentifier: identifier2,
            blockClientId: clientId
          });
        }
        const selected = getPrefixedSelectKeys(keyedSelected, type.name);
        changeHandlers.push(type.__experimentalCreateOnChangeEditableValue({
          ...typeof selected === "object" ? selected : {},
          ...dispatchers
        }, {
          richTextIdentifier: identifier2,
          blockClientId: clientId
        }));
      }
    });
    return {
      formatTypes: formatTypes2,
      prepareHandlers,
      valueHandlers,
      changeHandlers,
      dependencies
    };
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/before-input-rules.js
  var wrapSelectionSettings = ["`", '"', "'", "\u201C\u201D", "\u2018\u2019"];
  var before_input_rules_default = (props) => (element) => {
    function onInput(event) {
      const {
        inputType,
        data
      } = event;
      const {
        value,
        onChange,
        registry
      } = props.current;
      if (inputType !== "insertText") {
        return;
      }
      if (isCollapsed(value)) {
        return;
      }
      const pair = applyFilters("blockEditor.wrapSelectionSettings", wrapSelectionSettings).find(([startChar2, endChar2]) => startChar2 === data || endChar2 === data);
      if (!pair) {
        return;
      }
      const [startChar, endChar = startChar] = pair;
      const start2 = value.start;
      const end = value.end + startChar.length;
      let newValue = insert(value, startChar, start2, start2);
      newValue = insert(newValue, endChar, end, end);
      const {
        __unstableMarkLastChangeAsPersistent: __unstableMarkLastChangeAsPersistent2,
        __unstableMarkAutomaticChange: __unstableMarkAutomaticChange2
      } = registry.dispatch(store3);
      __unstableMarkLastChangeAsPersistent2();
      onChange(newValue);
      __unstableMarkAutomaticChange2();
      const init2 = {};
      for (const key in event) {
        init2[key] = event[key];
      }
      init2.data = endChar;
      const {
        ownerDocument
      } = element;
      const {
        defaultView
      } = ownerDocument;
      const newEvent = new defaultView.InputEvent("input", init2);
      window.queueMicrotask(() => {
        event.target.dispatchEvent(newEvent);
      });
      event.preventDefault();
    }
    element.addEventListener("beforeinput", onInput);
    return () => {
      element.removeEventListener("beforeinput", onInput);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/prevent-event-discovery.js
  function preventEventDiscovery(value) {
    const searchText = "tales of gutenberg";
    const addText = " \u{1F421}\u{1F422}\u{1F980}\u{1F424}\u{1F98B}\u{1F418}\u{1F427}\u{1F439}\u{1F981}\u{1F984}\u{1F98D}\u{1F43C}\u{1F43F}\u{1F383}\u{1F434}\u{1F41D}\u{1F406}\u{1F995}\u{1F994}\u{1F331}\u{1F347}\u03C0\u{1F34C}\u{1F409}\u{1F4A7}\u{1F968}\u{1F30C}\u{1F342}\u{1F360}\u{1F966}\u{1F95A}\u{1F95D}\u{1F39F}\u{1F965}\u{1F952}\u{1F6F5}\u{1F956}\u{1F352}\u{1F36F}\u{1F3BE}\u{1F3B2}\u{1F43A}\u{1F41A}\u{1F42E}\u231B\uFE0F";
    const {
      start: start2,
      text: text2
    } = value;
    if (start2 < searchText.length) {
      return value;
    }
    const charactersBefore = text2.slice(start2 - searchText.length, start2);
    if (charactersBefore.toLowerCase() !== searchText) {
      return value;
    }
    return insert(value, addText);
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/input-rules.js
  function findSelection(blocks2) {
    let i3 = blocks2.length;
    while (i3--) {
      const attributeKey = retrieveSelectedAttribute(blocks2[i3].attributes);
      if (attributeKey) {
        blocks2[i3].attributes[attributeKey] = blocks2[i3].attributes[attributeKey].toString().replace(START_OF_SELECTED_AREA, "");
        return [blocks2[i3].clientId, attributeKey, 0, 0];
      }
      const nestedSelection = findSelection(blocks2[i3].innerBlocks);
      if (nestedSelection) {
        return nestedSelection;
      }
    }
    return [];
  }
  var input_rules_default = (props) => (element) => {
    function inputRule() {
      const {
        getValue: getValue3,
        onReplace,
        selectionChange: selectionChange2,
        registry
      } = props.current;
      if (!onReplace) {
        return;
      }
      const value = getValue3();
      const {
        start: start2,
        text: text2
      } = value;
      const characterBefore = text2.slice(start2 - 1, start2);
      if (characterBefore !== " ") {
        return;
      }
      const trimmedTextBefore = text2.slice(0, start2).trim();
      const prefixTransforms = getBlockTransforms("from").filter(({
        type
      }) => type === "prefix");
      const transformation = findTransform(prefixTransforms, ({
        prefix: prefix3
      }) => {
        return trimmedTextBefore === prefix3;
      });
      if (!transformation) {
        return;
      }
      const content = toHTMLString({
        value: insert(value, START_OF_SELECTED_AREA, 0, start2)
      });
      const block3 = transformation.transform(content);
      selectionChange2(...findSelection([block3]));
      onReplace([block3]);
      registry.dispatch(store3).__unstableMarkAutomaticChange();
      return true;
    }
    function onInput(event) {
      const {
        inputType,
        type
      } = event;
      const {
        getValue: getValue3,
        onChange,
        __unstableAllowPrefixTransformations,
        formatTypes: formatTypes2,
        registry
      } = props.current;
      if (inputType !== "insertText" && type !== "compositionend") {
        return;
      }
      if (__unstableAllowPrefixTransformations && inputRule()) {
        return;
      }
      const value = getValue3();
      const transformed = formatTypes2.reduce((accumlator, {
        __unstableInputRule
      }) => {
        if (__unstableInputRule) {
          accumlator = __unstableInputRule(accumlator);
        }
        return accumlator;
      }, preventEventDiscovery(value));
      const {
        __unstableMarkLastChangeAsPersistent: __unstableMarkLastChangeAsPersistent2,
        __unstableMarkAutomaticChange: __unstableMarkAutomaticChange2
      } = registry.dispatch(store3);
      if (transformed !== value) {
        __unstableMarkLastChangeAsPersistent2();
        onChange({
          ...transformed,
          activeFormats: value.activeFormats
        });
        __unstableMarkAutomaticChange2();
      }
    }
    element.addEventListener("input", onInput);
    element.addEventListener("compositionend", onInput);
    return () => {
      element.removeEventListener("input", onInput);
      element.removeEventListener("compositionend", onInput);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/insert-replacement-text.js
  var insert_replacement_text_default = (props) => (element) => {
    function onInput(event) {
      if (event.inputType !== "insertReplacementText") {
        return;
      }
      const {
        registry
      } = props.current;
      registry.dispatch(store3).__unstableMarkLastChangeAsPersistent();
    }
    element.addEventListener("beforeinput", onInput);
    return () => {
      element.removeEventListener("beforeinput", onInput);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/remove-browser-shortcuts.js
  var remove_browser_shortcuts_default = () => (node2) => {
    function onKeydown(event) {
      if (isKeyboardEvent.primary(event, "z") || isKeyboardEvent.primary(event, "y") || isKeyboardEvent.primaryShift(event, "z")) {
        event.preventDefault();
      }
    }
    node2.addEventListener("keydown", onKeydown);
    return () => {
      node2.removeEventListener("keydown", onKeydown);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/shortcuts.js
  var shortcuts_default = (props) => (element) => {
    const {
      keyboardShortcuts
    } = props.current;
    function onKeyDown(event) {
      for (const keyboardShortcut of keyboardShortcuts.current) {
        keyboardShortcut(event);
      }
    }
    element.addEventListener("keydown", onKeyDown);
    return () => {
      element.removeEventListener("keydown", onKeyDown);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/input-events.js
  var input_events_default = (props) => (element) => {
    const {
      inputEvents
    } = props.current;
    function onInput(event) {
      for (const keyboardShortcut of inputEvents.current) {
        keyboardShortcut(event);
      }
    }
    element.addEventListener("input", onInput);
    return () => {
      element.removeEventListener("input", onInput);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/undo-automatic-change.js
  var undo_automatic_change_default = (props) => (element) => {
    function onKeyDown(event) {
      const {
        keyCode
      } = event;
      if (event.defaultPrevented) {
        return;
      }
      if (keyCode !== BACKSPACE && keyCode !== ESCAPE) {
        return;
      }
      const {
        registry
      } = props.current;
      const {
        didAutomaticChange: didAutomaticChange2,
        getSettings: getSettings2
      } = registry.select(store3);
      const {
        __experimentalUndo
      } = getSettings2();
      if (!__experimentalUndo) {
        return;
      }
      if (!didAutomaticChange2()) {
        return;
      }
      event.preventDefault();
      __experimentalUndo();
    }
    element.addEventListener("keydown", onKeyDown);
    return () => {
      element.removeEventListener("keydown", onKeyDown);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/utils.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  function addActiveFormats(value, activeFormats) {
    if (activeFormats?.length) {
      let index2 = value.formats.length;
      while (index2--) {
        value.formats[index2] = [...activeFormats, ...value.formats[index2] || []];
      }
    }
  }
  function getMultilineTag(multiline) {
    if (multiline !== true && multiline !== "p" && multiline !== "li") {
      return;
    }
    return multiline === true ? "p" : multiline;
  }
  function getAllowedFormats({
    allowedFormats,
    disableFormats
  }) {
    if (disableFormats) {
      return getAllowedFormats.EMPTY_ARRAY;
    }
    return allowedFormats;
  }
  getAllowedFormats.EMPTY_ARRAY = [];

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/paste-handler.js
  var paste_handler_default = (props) => (element) => {
    function _onPaste(event) {
      const {
        disableFormats,
        onChange,
        value,
        formatTypes: formatTypes2,
        tagName,
        onReplace,
        __unstableEmbedURLOnPaste,
        preserveWhiteSpace,
        pastePlainText
      } = props.current;
      if (event.target !== element) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      const {
        plainText,
        html: html2
      } = getPasteEventData(event);
      event.preventDefault();
      window.console.log("Received HTML:\n\n", html2);
      window.console.log("Received plain text:\n\n", plainText);
      if (disableFormats) {
        onChange(insert(value, plainText));
        return;
      }
      const isInternal = event.clipboardData.getData("rich-text") === "true";
      function pasteInline(content2) {
        const transformed = formatTypes2.reduce((accumulator, {
          __unstablePasteRule
        }) => {
          if (__unstablePasteRule && accumulator === value) {
            accumulator = __unstablePasteRule(value, {
              html: html2,
              plainText
            });
          }
          return accumulator;
        }, value);
        if (transformed !== value) {
          onChange(transformed);
        } else {
          const valueToInsert = create2({
            html: content2
          });
          addActiveFormats(valueToInsert, value.activeFormats);
          onChange(insert(value, valueToInsert));
        }
      }
      if (isInternal) {
        pasteInline(html2);
        return;
      }
      if (pastePlainText) {
        onChange(insert(value, create2({
          text: plainText
        })));
        return;
      }
      let mode = "INLINE";
      const trimmedPlainText = plainText.trim();
      if (__unstableEmbedURLOnPaste && isEmpty2(value) && isURL(trimmedPlainText) && // For the link pasting feature, allow only http(s) protocols.
      /^https?:/.test(trimmedPlainText)) {
        mode = "BLOCKS";
      }
      const content = pasteHandler({
        HTML: html2,
        plainText,
        mode,
        tagName,
        preserveWhiteSpace
      });
      if (typeof content === "string") {
        pasteInline(content);
      } else if (content.length > 0) {
        if (onReplace && isEmpty2(value)) {
          onReplace(content, content.length - 1, -1);
        }
      }
    }
    const {
      defaultView
    } = element.ownerDocument;
    defaultView.addEventListener("paste", _onPaste);
    return () => {
      defaultView.removeEventListener("paste", _onPaste);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/delete.js
  var delete_default2 = (props) => (element) => {
    function onKeyDown(event) {
      const {
        keyCode
      } = event;
      if (event.defaultPrevented) {
        return;
      }
      const {
        value,
        onMerge,
        onRemove
      } = props.current;
      if (keyCode === DELETE || keyCode === BACKSPACE) {
        const {
          start: start2,
          end,
          text: text2
        } = value;
        const isReverse = keyCode === BACKSPACE;
        const hasActiveFormats = value.activeFormats && !!value.activeFormats.length;
        if (!isCollapsed(value) || hasActiveFormats || isReverse && start2 !== 0 || !isReverse && end !== text2.length) {
          return;
        }
        if (onMerge) {
          onMerge(!isReverse);
        } else if (onRemove && isEmpty2(value) && isReverse) {
          onRemove(!isReverse);
        }
        event.preventDefault();
      }
    }
    element.addEventListener("keydown", onKeyDown);
    return () => {
      element.removeEventListener("keydown", onKeyDown);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/enter.js
  var enter_default = (props) => (element) => {
    function onKeyDownDeprecated(event) {
      if (event.keyCode !== ENTER) {
        return;
      }
      const {
        onReplace,
        onSplit
      } = props.current;
      if (onReplace && onSplit) {
        event.__deprecatedOnSplit = true;
      }
    }
    function onKeyDown(event) {
      if (event.defaultPrevented) {
        return;
      }
      if (event.target !== element) {
        return;
      }
      if (event.keyCode !== ENTER) {
        return;
      }
      const {
        value,
        onChange,
        disableLineBreaks,
        onSplitAtEnd,
        onSplitAtDoubleLineEnd,
        registry
      } = props.current;
      event.preventDefault();
      const {
        text: text2,
        start: start2,
        end
      } = value;
      if (event.shiftKey) {
        if (!disableLineBreaks) {
          onChange(insert(value, "\n"));
        }
      } else if (onSplitAtEnd && start2 === end && end === text2.length) {
        onSplitAtEnd();
      } else if (
        // For some blocks it's desirable to split at the end of the
        // block when there are two line breaks at the end of the
        // block, so triple Enter exits the block.
        onSplitAtDoubleLineEnd && start2 === end && end === text2.length && text2.slice(-2) === "\n\n"
      ) {
        registry.batch(() => {
          const _value = {
            ...value
          };
          _value.start = _value.end - 2;
          onChange(remove3(_value));
          onSplitAtDoubleLineEnd();
        });
      } else if (!disableLineBreaks) {
        onChange(insert(value, "\n"));
      }
    }
    const {
      defaultView
    } = element.ownerDocument;
    defaultView.addEventListener("keydown", onKeyDown);
    element.addEventListener("keydown", onKeyDownDeprecated);
    return () => {
      defaultView.removeEventListener("keydown", onKeyDown);
      element.removeEventListener("keydown", onKeyDownDeprecated);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/firefox-compat.js
  var firefox_compat_default = (props) => (element) => {
    function onFocus() {
      const {
        registry
      } = props.current;
      if (!registry.select(store3).isMultiSelecting()) {
        return;
      }
      const parentEditable = element.parentElement.closest('[contenteditable="true"]');
      if (parentEditable) {
        parentEditable.focus();
      }
    }
    element.addEventListener("focus", onFocus);
    return () => {
      element.removeEventListener("focus", onFocus);
    };
  };

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/event-listeners/index.js
  var allEventListeners2 = [before_input_rules_default, input_rules_default, insert_replacement_text_default, remove_browser_shortcuts_default, shortcuts_default, input_events_default, undo_automatic_change_default, paste_handler_default, delete_default2, enter_default, firefox_compat_default];
  function useEventListeners2(props) {
    const propsRef = (0, import_react.useRef)(props);
    propsRef.current = props;
    const refEffects = (0, import_react.useMemo)(() => allEventListeners2.map((refEffect) => refEffect(propsRef)), [propsRef]);
    return useRefEffect((element) => {
      if (!props.isSelected) {
        return;
      }
      const cleanups2 = refEffects.map((effect) => effect(element));
      return () => {
        cleanups2.forEach((cleanup) => cleanup());
      };
    }, [refEffects, props.isSelected]);
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/format-edit.js
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var import_react106 = __toESM(require_react());
  var DEFAULT_BLOCK_CONTEXT = {};
  var usesContextKey = Symbol("usesContext");
  function Edit({
    onChange,
    onFocus,
    value,
    forwardedRef,
    settings: settings2
  }) {
    const {
      name,
      edit: EditFunction,
      [usesContextKey]: usesContext
    } = settings2;
    const blockContext = (0, import_react.useContext)(block_context_default);
    const context2 = (0, import_react.useMemo)(() => {
      return usesContext ? Object.fromEntries(Object.entries(blockContext).filter(([key]) => usesContext.includes(key))) : DEFAULT_BLOCK_CONTEXT;
    }, [usesContext, blockContext]);
    if (!EditFunction) {
      return null;
    }
    const activeFormat = getActiveFormat(value, name);
    const isActive = activeFormat !== void 0;
    const activeObject = getActiveObject(value);
    const isObjectActive = activeObject !== void 0 && activeObject.type === name;
    return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(EditFunction, {
      isActive,
      activeAttributes: isActive ? activeFormat.attributes || {} : {},
      isObjectActive,
      activeObjectAttributes: isObjectActive ? activeObject.attributes || {} : {},
      value,
      onChange,
      onFocus,
      contentRef: forwardedRef,
      context: context2
    }, name);
  }
  function FormatEdit({
    formatTypes: formatTypes2,
    ...props
  }) {
    return formatTypes2.map((settings2) => /* @__PURE__ */ (0, import_react106.createElement)(Edit, {
      settings: settings2,
      ...props,
      key: settings2.name
    }));
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/content.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  function valueToHTMLString(value, multiline) {
    if (rich_text_default.isEmpty(value)) {
      const multilineTag = getMultilineTag(multiline);
      return multilineTag ? `<${multilineTag}></${multilineTag}>` : "";
    }
    if (Array.isArray(value)) {
      deprecated("wp.blockEditor.RichText value prop as children type", {
        since: "6.1",
        version: "6.3",
        alternative: "value prop as string",
        link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
      });
      return children_default.toHTML(value);
    }
    if (typeof value === "string") {
      return value;
    }
    return value.toHTMLString();
  }
  function Content({
    value,
    tagName: Tag,
    multiline,
    format,
    ...props
  }) {
    value = /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(RawHTML, {
      children: valueToHTMLString(value, multiline)
    });
    return Tag ? /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(Tag, {
      ...props,
      children: value
    }) : value;
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/multiline.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  function RichTextMultiline({
    children,
    identifier: identifier2,
    tagName: TagName = "div",
    value = "",
    onChange,
    multiline,
    ...props
  }, forwardedRef) {
    deprecated("wp.blockEditor.RichText multiline prop", {
      since: "6.1",
      version: "6.3",
      alternative: "nested blocks (InnerBlocks)",
      link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/nested-blocks-inner-blocks/"
    });
    const {
      clientId
    } = useBlockEditContext();
    const {
      getSelectionStart: getSelectionStart2,
      getSelectionEnd: getSelectionEnd2
    } = useSelect(store3);
    const {
      selectionChange: selectionChange2
    } = use_dispatch_default(store3);
    const multilineTagName = getMultilineTag(multiline);
    value = value || `<${multilineTagName}></${multilineTagName}>`;
    const padded = `</${multilineTagName}>${value}<${multilineTagName}>`;
    const values = padded.split(`</${multilineTagName}><${multilineTagName}>`);
    values.shift();
    values.pop();
    function _onChange(newValues) {
      onChange(`<${multilineTagName}>${newValues.join(`</${multilineTagName}><${multilineTagName}>`)}</${multilineTagName}>`);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(TagName, {
      ref: forwardedRef,
      children: values.map((_value, index2) => {
        return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(RichTextWrapper, {
          identifier: `${identifier2}-${index2}`,
          tagName: multilineTagName,
          value: _value,
          onChange: (newValue) => {
            const newValues = values.slice();
            newValues[index2] = newValue;
            _onChange(newValues);
          },
          isSelected: void 0,
          onKeyDown: (event) => {
            if (event.keyCode !== ENTER) {
              return;
            }
            event.preventDefault();
            const {
              offset: start2
            } = getSelectionStart2();
            const {
              offset: end
            } = getSelectionEnd2();
            if (typeof start2 !== "number" || typeof end !== "number") {
              return;
            }
            const richTextValue = create2({
              html: _value
            });
            richTextValue.start = start2;
            richTextValue.end = end;
            const array = split(richTextValue).map((v2) => toHTMLString({
              value: v2
            }));
            const newValues = values.slice();
            newValues.splice(index2, 1, ...array);
            _onChange(newValues);
            selectionChange2(clientId, `${identifier2}-${index2 + 1}`, 0, 0);
          },
          onMerge: (forward) => {
            const newValues = values.slice();
            let offset5 = 0;
            if (forward) {
              if (!newValues[index2 + 1]) {
                return;
              }
              newValues.splice(index2, 2, newValues[index2] + newValues[index2 + 1]);
              offset5 = newValues[index2].length - 1;
            } else {
              if (!newValues[index2 - 1]) {
                return;
              }
              newValues.splice(index2 - 1, 2, newValues[index2 - 1] + newValues[index2]);
              offset5 = newValues[index2 - 1].length - 1;
            }
            _onChange(newValues);
            selectionChange2(clientId, `${identifier2}-${index2 - (forward ? 0 : 1)}`, offset5, offset5);
          },
          ...props
        }, index2);
      })
    });
  }
  var multiline_default = (0, import_react.forwardRef)(RichTextMultiline);

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/with-deprecations.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  function withDeprecations(Component4) {
    return (0, import_react.forwardRef)((props, ref) => {
      let value = props.value;
      let onChange = props.onChange;
      if (Array.isArray(value)) {
        deprecated("wp.blockEditor.RichText value prop as children type", {
          since: "6.1",
          version: "6.3",
          alternative: "value prop as string",
          link: "https://developer.wordpress.org/block-editor/how-to-guides/block-tutorial/introducing-attributes-and-editable-fields/"
        });
        value = children_default.toHTML(props.value);
        onChange = (newValue) => props.onChange(children_default.fromDOM(createElement2(document, newValue).childNodes));
      }
      const NewComponent = props.multiline ? multiline_default : Component4;
      return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(NewComponent, {
        ...props,
        value,
        onChange,
        ref
      });
    });
  }

  // node_modules/@wordpress/block-editor/build-module/components/rich-text/index.js
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var keyboardShortcutContext = (0, import_react.createContext)();
  var inputEventContext = (0, import_react.createContext)();
  var instanceIdKey = Symbol("instanceId");
  function removeNativeProps(props) {
    const {
      __unstableMobileNoFocusOnMount,
      deleteEnter,
      placeholderTextColor,
      textAlign,
      selectionColor,
      tagsToEliminate,
      disableEditingMenu,
      fontSize,
      fontFamily,
      fontWeight,
      fontStyle,
      minWidth: minWidth2,
      maxWidth,
      disableSuggestions,
      disableAutocorrection,
      ...restProps
    } = props;
    return restProps;
  }
  function RichTextWrapper({
    children,
    tagName = "div",
    value: adjustedValue = "",
    onChange: adjustedOnChange,
    isSelected: originalIsSelected,
    multiline,
    inlineToolbar,
    wrapperClassName,
    autocompleters,
    onReplace,
    placeholder,
    allowedFormats,
    withoutInteractiveFormatting,
    onRemove,
    onMerge,
    onSplit,
    __unstableOnSplitAtEnd: onSplitAtEnd,
    __unstableOnSplitAtDoubleLineEnd: onSplitAtDoubleLineEnd,
    identifier: identifier2,
    preserveWhiteSpace,
    __unstablePastePlainText: pastePlainText,
    __unstableEmbedURLOnPaste,
    __unstableDisableFormats: disableFormats,
    disableLineBreaks,
    __unstableAllowPrefixTransformations,
    readOnly,
    ...props
  }, forwardedRef) {
    props = removeNativeProps(props);
    if (onSplit) {
      deprecated("wp.blockEditor.RichText onSplit prop", {
        since: "6.4",
        alternative: 'block.json support key: "splitting"'
      });
    }
    const instanceId = use_instance_id_default(RichTextWrapper);
    const anchorRef = (0, import_react.useRef)();
    const context2 = useBlockEditContext();
    const {
      clientId,
      isSelected: isBlockSelected2,
      name: blockName
    } = context2;
    const blockBindings = context2[blockBindingsKey];
    const blockContext = (0, import_react.useContext)(block_context_default);
    const selector2 = (select2) => {
      if (!isBlockSelected2) {
        return {
          isSelected: false
        };
      }
      const {
        getSelectionStart: getSelectionStart3,
        getSelectionEnd: getSelectionEnd3
      } = select2(store3);
      const selectionStart2 = getSelectionStart3();
      const selectionEnd2 = getSelectionEnd3();
      let isSelected2;
      if (originalIsSelected === void 0) {
        isSelected2 = selectionStart2.clientId === clientId && selectionEnd2.clientId === clientId && (identifier2 ? selectionStart2.attributeKey === identifier2 : selectionStart2[instanceIdKey] === instanceId);
      } else if (originalIsSelected) {
        isSelected2 = selectionStart2.clientId === clientId;
      }
      return {
        selectionStart: isSelected2 ? selectionStart2.offset : void 0,
        selectionEnd: isSelected2 ? selectionEnd2.offset : void 0,
        isSelected: isSelected2
      };
    };
    const {
      selectionStart,
      selectionEnd,
      isSelected
    } = useSelect(selector2, [clientId, identifier2, instanceId, originalIsSelected, isBlockSelected2]);
    const disableBoundBlocks = useSelect((select2) => {
      let _disableBoundBlocks = false;
      if (blockBindings && canBindBlock(blockName)) {
        const blockTypeAttributes = getBlockType(blockName).attributes;
        const {
          getBlockBindingsSource: getBlockBindingsSource2
        } = unlock5(select2(store2));
        for (const [attribute, binding] of Object.entries(blockBindings)) {
          if (blockTypeAttributes?.[attribute]?.source !== "rich-text") {
            break;
          }
          const blockBindingsSource = getBlockBindingsSource2(binding.source);
          if (!blockBindingsSource?.canUserEditValue({
            select: select2,
            context: blockContext,
            args: binding.args
          })) {
            _disableBoundBlocks = true;
            break;
          }
        }
      }
      return _disableBoundBlocks;
    }, [blockBindings, blockName]);
    const shouldDisableEditing = readOnly || disableBoundBlocks;
    const {
      getSelectionStart: getSelectionStart2,
      getSelectionEnd: getSelectionEnd2,
      getBlockRootClientId: getBlockRootClientId2
    } = useSelect(store3);
    const {
      selectionChange: selectionChange2
    } = use_dispatch_default(store3);
    const adjustedAllowedFormats = getAllowedFormats({
      allowedFormats,
      disableFormats
    });
    const hasFormats = !adjustedAllowedFormats || adjustedAllowedFormats.length > 0;
    const onSelectionChange = (0, import_react.useCallback)((start2, end) => {
      const selection2 = {};
      const unset = start2 === void 0 && end === void 0;
      const baseSelection = {
        clientId,
        [identifier2 ? "attributeKey" : instanceIdKey]: identifier2 ? identifier2 : instanceId
      };
      if (typeof start2 === "number" || unset) {
        if (end === void 0 && getBlockRootClientId2(clientId) !== getBlockRootClientId2(getSelectionEnd2().clientId)) {
          return;
        }
        selection2.start = {
          ...baseSelection,
          offset: start2
        };
      }
      if (typeof end === "number" || unset) {
        if (start2 === void 0 && getBlockRootClientId2(clientId) !== getBlockRootClientId2(getSelectionStart2().clientId)) {
          return;
        }
        selection2.end = {
          ...baseSelection,
          offset: end
        };
      }
      selectionChange2(selection2);
    }, [clientId, getBlockRootClientId2, getSelectionEnd2, getSelectionStart2, identifier2, instanceId, selectionChange2]);
    const {
      formatTypes: formatTypes2,
      prepareHandlers,
      valueHandlers,
      changeHandlers,
      dependencies
    } = useFormatTypes({
      clientId,
      identifier: identifier2,
      withoutInteractiveFormatting,
      allowedFormats: adjustedAllowedFormats
    });
    function addEditorOnlyFormats(value2) {
      return valueHandlers.reduce((accumulator, fn) => fn(accumulator, value2.text), value2.formats);
    }
    function removeEditorOnlyFormats(value2) {
      formatTypes2.forEach((formatType) => {
        if (formatType.__experimentalCreatePrepareEditableTree) {
          value2 = removeFormat(value2, formatType.name, 0, value2.text.length);
        }
      });
      return value2.formats;
    }
    function addInvisibleFormats(value2) {
      return prepareHandlers.reduce((accumulator, fn) => fn(accumulator, value2.text), value2.formats);
    }
    const {
      value,
      getValue: getValue3,
      onChange,
      ref: richTextRef
    } = useRichText({
      value: adjustedValue,
      onChange(html2, {
        __unstableFormats,
        __unstableText
      }) {
        adjustedOnChange(html2);
        Object.values(changeHandlers).forEach((changeHandler) => {
          changeHandler(__unstableFormats, __unstableText);
        });
      },
      selectionStart,
      selectionEnd,
      onSelectionChange,
      placeholder,
      __unstableIsSelected: isSelected,
      __unstableDisableFormats: disableFormats,
      preserveWhiteSpace,
      __unstableDependencies: [...dependencies, tagName],
      __unstableAfterParse: addEditorOnlyFormats,
      __unstableBeforeSerialize: removeEditorOnlyFormats,
      __unstableAddInvisibleFormats: addInvisibleFormats
    });
    const autocompleteProps = useBlockEditorAutocompleteProps({
      onReplace,
      completers: autocompleters,
      record: value,
      onChange
    });
    useMarkPersistent({
      html: adjustedValue,
      value
    });
    const keyboardShortcuts = (0, import_react.useRef)(/* @__PURE__ */ new Set());
    const inputEvents = (0, import_react.useRef)(/* @__PURE__ */ new Set());
    function onFocus() {
      anchorRef.current?.focus();
    }
    const registry = useRegistry();
    const TagName = tagName;
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(import_jsx_runtime138.Fragment, {
      children: [isSelected && /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(keyboardShortcutContext.Provider, {
        value: keyboardShortcuts,
        children: /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(inputEventContext.Provider, {
          value: inputEvents,
          children: /* @__PURE__ */ (0, import_jsx_runtime137.jsxs)(popover_default.__unstableSlotNameProvider, {
            value: "__unstable-block-tools-after",
            children: [children && children({
              value,
              onChange,
              onFocus
            }), /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(FormatEdit, {
              value,
              onChange,
              onFocus,
              formatTypes: formatTypes2,
              forwardedRef: anchorRef
            })]
          })
        })
      }), isSelected && hasFormats && /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(format_toolbar_container_default, {
        inline: inlineToolbar,
        editableContentElement: anchorRef.current
      }), /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        TagName,
        {
          role: "textbox",
          "aria-multiline": !disableLineBreaks,
          "aria-label": placeholder,
          "aria-readonly": shouldDisableEditing,
          ...props,
          ...autocompleteProps,
          ref: useMergeRefs([
            // Rich text ref must be first because its focus listener
            // must be set up before any other ref calls .focus() on
            // mount.
            richTextRef,
            forwardedRef,
            autocompleteProps.ref,
            props.ref,
            useEventListeners2({
              registry,
              getValue: getValue3,
              onChange,
              __unstableAllowPrefixTransformations,
              formatTypes: formatTypes2,
              onReplace,
              selectionChange: selectionChange2,
              isSelected,
              disableFormats,
              value,
              tagName,
              onSplit,
              __unstableEmbedURLOnPaste,
              pastePlainText,
              onMerge,
              onRemove,
              removeEditorOnlyFormats,
              disableLineBreaks,
              onSplitAtEnd,
              onSplitAtDoubleLineEnd,
              keyboardShortcuts,
              inputEvents
            }),
            anchorRef
          ]),
          contentEditable: !shouldDisableEditing,
          suppressContentEditableWarning: true,
          className: clsx_default("block-editor-rich-text__editable", props.className, "rich-text"),
          tabIndex: props.tabIndex === 0 && !shouldDisableEditing ? null : props.tabIndex,
          "data-wp-block-attribute-key": identifier2
        }
      )]
    });
  }
  var PrivateRichText = withDeprecations((0, import_react.forwardRef)(RichTextWrapper));
  PrivateRichText.Content = Content;
  PrivateRichText.isEmpty = (value) => {
    return !value || value.length === 0;
  };
  var PublicForwardedRichTextContainer = (0, import_react.forwardRef)((props, ref) => {
    const context2 = useBlockEditContext();
    const isPreviewMode = context2[isPreviewModeKey];
    if (isPreviewMode) {
      const {
        children,
        tagName: Tag = "div",
        value,
        onChange,
        isSelected,
        multiline,
        inlineToolbar,
        wrapperClassName,
        autocompleters,
        onReplace,
        placeholder,
        allowedFormats,
        withoutInteractiveFormatting,
        onRemove,
        onMerge,
        onSplit,
        __unstableOnSplitAtEnd,
        __unstableOnSplitAtDoubleLineEnd,
        identifier: identifier2,
        preserveWhiteSpace,
        __unstablePastePlainText,
        __unstableEmbedURLOnPaste,
        __unstableDisableFormats,
        disableLineBreaks,
        __unstableAllowPrefixTransformations,
        readOnly,
        ...contentProps
      } = removeNativeProps(props);
      return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(Tag, {
        ...contentProps,
        dangerouslySetInnerHTML: {
          __html: valueToHTMLString(value, multiline)
        }
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(PrivateRichText, {
      ref,
      ...props,
      readOnly: false
    });
  });
  PublicForwardedRichTextContainer.Content = Content;
  PublicForwardedRichTextContainer.isEmpty = (value) => {
    return !value || value.length === 0;
  };
  var rich_text_default = PublicForwardedRichTextContainer;

  // node_modules/@wordpress/block-editor/build-module/components/editable-text/index.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var EditableText = (0, import_react.forwardRef)((props, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(rich_text_default, {
      ref,
      ...props,
      __unstableDisableFormats: true
    });
  });
  EditableText.Content = ({
    value = "",
    tagName: Tag = "div",
    ...props
  }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(Tag, {
      ...props,
      children: value
    });
  };
  var editable_text_default = EditableText;

  // node_modules/@wordpress/block-editor/build-module/components/plain-text/index.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var PlainText = (0, import_react.forwardRef)(({
    __experimentalVersion,
    ...props
  }, ref) => {
    if (__experimentalVersion === 2) {
      return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(editable_text_default, {
        ref,
        ...props
      });
    }
    const {
      className,
      onChange,
      ...remainingProps
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(import_react_autosize_textarea.default, {
      ref,
      className: clsx_default("block-editor-plain-text", className),
      onChange: (event) => onChange(event.target.value),
      ...remainingProps
    });
  });
  var plain_text_default = PlainText;

  // blocks/hero.js
  registerBlockType("vab/hero", {
    apiVersion: 3,
    title: __("Hero Slider", "vab"),
    description: __("A hero slider with Swiper, supporting lazy loading, parallax, and crossfade.", "vab"),
    category: "layout",
    icon: "slides",
    attributes: {
      slides: {
        type: "array",
        default: [],
        source: "query",
        selector: ".swiper-slide",
        query: {
          image: {
            type: "object",
            source: "query",
            selector: "img",
            query: {
              url: { type: "string", source: "attribute", attribute: "data-src" },
              alt: { type: "string", source: "attribute", attribute: "alt" }
            }
          },
          title: {
            type: "string",
            source: "text",
            selector: ".swiper-slide > div:last-child"
          }
        }
      }
    },
    edit: ({ attributes, setAttributes }) => {
      const { slides } = attributes;
      const blockProps = useBlockProps();
      const addSlide = () => {
        setAttributes({
          slides: [...slides, { image: {}, title: "New Slide" }]
        });
      };
      const updateSlide = (index2, key, value) => {
        const newSlides = [...slides];
        newSlides[index2][key] = value;
        setAttributes({ slides: newSlides });
      };
      const removeSlide = (index2) => {
        const newSlides = slides.filter((_, i3) => i3 !== index2);
        setAttributes({ slides: newSlides });
      };
      return /* @__PURE__ */ React.createElement("div", { ...blockProps }, /* @__PURE__ */ React.createElement("h2", null, __("Hero Slider", "vab")), slides.map((slide, index2) => /* @__PURE__ */ React.createElement("div", { key: index2, style: { border: "1px solid #ccc", padding: "10px", marginBottom: "10px" } }, /* @__PURE__ */ React.createElement(
        media_upload_default2,
        {
          onSelect: (media) => updateSlide(index2, "image", { url: media.url, alt: media.alt }),
          allowedTypes: ["image"],
          value: slide.image?.id,
          render: ({ open }) => /* @__PURE__ */ React.createElement(button_default, { onClick: open, isSecondary: true }, slide.image?.url ? __("Replace Image", "vab") : __("Select Image", "vab"))
        }
      ), slide.image?.url && /* @__PURE__ */ React.createElement("img", { src: slide.image.url, alt: slide.title, style: { maxWidth: "100px", marginTop: "10px" } }), /* @__PURE__ */ React.createElement(
        plain_text_default,
        {
          value: slide.title,
          onChange: (value) => updateSlide(index2, "title", value),
          placeholder: __("Slide Title", "vab"),
          style: { marginTop: "10px" }
        }
      ), /* @__PURE__ */ React.createElement(button_default, { isDestructive: true, onClick: () => removeSlide(index2), style: { marginTop: "10px" } }, __("Remove Slide", "vab")))), /* @__PURE__ */ React.createElement(button_default, { isPrimary: true, onClick: addSlide }, __("Add Slide", "vab")));
    },
    save: () => null
  });
})();
/*! Bundled license information:

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

showdown/dist/showdown.js:
  (*! showdown v 1.9.1 - 02-11-2019 *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

autosize/dist/autosize.js:
  (*!
  	autosize 4.0.4
  	license: MIT
  	http://www.jacklmoore.com/autosize
  *)

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
